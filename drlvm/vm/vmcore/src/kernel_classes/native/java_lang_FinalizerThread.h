/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * @author Pavel Afremov 
 */

/*
 * THE FILE HAS BEEN AUTOGENERATED BY INTEL IJH TOOL.
 * Please be aware that all changes made to this file manually
 * will be overwritten by the tool if it runs again.
 */

#include <jni.h>


/* Header for class java.lang.FinalizerThread */

#ifndef _JAVA_LANG_FINALIZERTHREAD_H
#define _JAVA_LANG_FINALIZERTHREAD_H

#ifdef __cplusplus
extern "C" {
#endif


/* Static final fields */

#undef java_lang_FinalizerThread_MAX_THREADS
#define java_lang_FinalizerThread_MAX_THREADS 1024L

#undef java_lang_FinalizerThread_MAX_PRIORITY
#define java_lang_FinalizerThread_MAX_PRIORITY 10L

#undef java_lang_FinalizerThread_MIN_PRIORITY
#define java_lang_FinalizerThread_MIN_PRIORITY 1L

#undef java_lang_FinalizerThread_NORM_PRIORITY
#define java_lang_FinalizerThread_NORM_PRIORITY 5L


/* Native methods */

/*
 * Method: java.lang.FinalizerThread.getFinalizersQuantity()I
 */
JNIEXPORT jint JNICALL
Java_java_lang_FinalizerThread_getFinalizersQuantity(JNIEnv *, jclass);

/*
 * Method: java.lang.FinalizerThread.getProcessorsQuantity()I
 */
JNIEXPORT jint JNICALL
Java_java_lang_FinalizerThread_getProcessorsQuantity(JNIEnv *, jclass);

/*
 * Method: java.lang.FinalizerThread.doFinalization(I)I
 */
JNIEXPORT jint JNICALL
Java_java_lang_FinalizerThread_doFinalization(JNIEnv *, jclass, 
    jint);

/*
 * Method: java.lang.FinalizerThread.fillFinalizationQueueOnExit()V
 */
JNIEXPORT void JNICALL
Java_java_lang_FinalizerThread_fillFinalizationQueueOnExit(JNIEnv *, jclass);

/* BEGIN: These three methods are added for NATIVE FINALIZER THREAD */
/*
 * Method: java.lang.FinalizerThread.getNativeFinalizerThreadFlagFromVM()Z
 */
JNIEXPORT jboolean JNICALL
Java_java_lang_FinalizerThread_getNativeFinalizerThreadFlagFromVM(JNIEnv *, jclass);

/*
 * Method: java_lang_FinalizerThread.runFinalizationInNativeFinalizerThreads()V
 */
JNIEXPORT void JNICALL
Java_java_lang_FinalizerThread_runFinalizationInNativeFinalizerThreads(JNIEnv *, jclass);

/*
 * Method: java_lang_FinalizerThread.finalizerShutDown()V
 */
JNIEXPORT void JNICALL
Java_java_lang_FinalizerThread_finalizerShutDown(JNIEnv *, jclass, jboolean);
/* END: These three methods are added for NATIVE FINALIZER THREAD */


/*
 * Method: java_lang_FinalizerThread.isNativePartEnabled()Z
 */
JNIEXPORT jboolean JNICALL
Java_java_lang_FinalizerThread_isNativePartEnabled(JNIEnv *, jclass);
#ifdef __cplusplus
}
#endif

#endif /* _JAVA_LANG_FINALIZERTHREAD_H */

