<!--
    Copyright 2005-2006 The Apache Software Foundation or its licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
Author:  Marina V. Goldburt
Version: $Revision: 1.4.2.11 $
-->

<project name="SMOKE TESTS">
    <target name="smoke.test" depends="compile.smoke.tests, java_test_smoke" />

    <target name="compile.smoke.tests" depends="init_component">
        <if>
            <isset property="smoke.test.javasrc" />
            <then>
                <mkdir dir="${build.dir}/_smoke.tests/classes" />
                <javac includeJavaRuntime="yes" srcdir="${smoke.test.javasrc}" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" destdir="${build.dir}/_smoke.tests/classes">
                    <patternset refid="smoke.test.java.pattern" />
                    <bootclasspath>
                        <fileset dir="${java.home}" includes="**/*.jar" />
                    </bootclasspath>
                </javac>
            </then>
        </if>
    </target>

    <target name="jar.smoke.tests" depends="compile.smoke.tests">
        <if>
            <isset property="smoke.test.javasrc" />
            <then>
                <jar jarfile="${build.dir}/_smoke.tests/">
                    <fileset dir="${build.dir}/_smoke.tests/classes" includes="**/*.class" />
                </jar>
            </then>
        </if>
    </target>

    <target name="java_test_smoke">
        <if>
            <isset property="smoke.test.javasrc" />
            <then>
                <mkdir dir="${build.dir}/_smoke.tests/reports" />
                <path id="java.class.path">
                    <pathelement location="${build.dir}/_smoke.tests/classes" />
                    <fileset dir="${build.deploy.dir}/lib" includes="*.jar" />
                </path>
                <antcall target="java_test_smoke_with_jit_or_interpreter">
                    <param name="jit.or.interpreter" value="jit" />
                </antcall>
                <antcall target="java_test_smoke_with_jit_or_interpreter">
                    <param name="jit.or.interpreter" value="interpreter" />
                </antcall>
            </then>
        </if>
    </target>

    <target name="java_test_smoke_with_jit_or_interpreter">
        <condition property="using.jit.or.jitrino" value="Using interpreter">
            <contains string="${jit.or.interpreter}" substring="int" />
        </condition>
        <property name="using.jit.or.jitrino" value="Using jitrino" />

        <echo message="${using.jit.or.jitrino}" />

        <property name="classes.location" location="${smoke.test.javasrc}" />

        <pathconvert property="java.path.property" refid="java.class.path" />

        <condition property="int.or.jit.exclude" value="X_int,X_interpreter">
            <contains string="${jit.or.interpreter}" substring="int" />
        </condition>
        <property name="int.or.jit.exclude" value="X_jit,X_jitrino" />

        <property name="EXCLUDE_KEYWORDS" value="XXX,X_${build.os},X_${build.arch},X_drl,${int.or.jit.exclude},slow,perf,stress" />

        <condition property="int.or.jit.arg" value="-Xint">
            <contains string="${jit.or.interpreter}" substring="int" />
        </condition>
        <property name="int.or.jit.arg" value="" />

        <for param="test">
            <fileset dir="${smoke.test.javasrc}">
                <patternset refid="smoke.test.java.pattern" />
            </fileset>
            <sequential>
                <basename property="filename.@{test}" file="@{test}" />
                <propertycopy name="fname" override="true" from="filename.@{test}" />
                <propertyregex property="classes.location1" override="true" input="${classes.location}" regexp="\\" replace="/" global="true" defaultValue="${classes.location}" />
                <propertyregex property="test1" override="true" input="@{test}" regexp="\\" replace="/" global="true" defaultValue="@{test}" />
                <propertyregex property="class.name.sep" override="true" input="${test1}" regexp="${classes.location1}/(.*).java" replace="\1" />
                <propertyregex property="class.name" override="true" input="${class.name.sep}" regexp="/" replace="\." global="true" defaultValue="${class.name.sep}" />

                <loadfile property="@{test}.src.file" srcFile="@{test}" />
                <propertycopy name="src.file" override="true" from="@{test}.src.file" />
                <propertyregex property="@{test}.keywords" input="${src.file}" regexp="(?m)@keyword(.*)" select="\1" defaultValue="" />
                <propertycopy name="file.keywords" override="true" from="@{test}.keywords" />

                <for param="keyword" list="${EXCLUDE_KEYWORDS}" delimiter=",">
                    <sequential>
                        <condition property="@{test}.is.excluded" value="@{keyword}">
                            <contains string="${file.keywords}" substring="@{keyword}" />
                        </condition>
                    </sequential>
                </for>

                <condition property="@{test}.is.golden" value="true">
                    <contains string="${file.keywords}" substring="golden" />
                </condition>

                <if>
                    <not>
                        <isset property="@{test}.is.excluded" />
                    </not>
                    <then>
                        <!--
                                    Run smoke test @{test} on DRLVM.
                                  -->
                        <condition property="executable.postfix" value=".exe">
                            <isset property="if.win" />
                        </condition>
                        <property name="executable.postfix" value="" />
                        <if>
                            <not>
                                <equals arg1="${int.or.jit.arg}" arg2="" />
                            </not>
                            <then>
                                <java newenvironment="yes" output="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out" classname="${class.name}" fork="true" jvm="${build.deploy.dir}/bin/ij${executable.postfix}" error="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out.err">
                                    <jvmarg value="-Dvm.assert_dialog=0" />
                                    <jvmarg value="${int.or.jit.arg}" />
                                    <jvmarg value="-classpath" />
                                    <jvmarg value="${build.dir}/_smoke.tests/classes" />
                                    <env key="LD_LIBRARY_PATH" value="${build.deploy.dir}/bin:${env.LD_LIBRARY_PATH}" />
                                </java>
                            </then>
                            <else>
                                <java newenvironment="yes" output="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out" classname="${class.name}" fork="true" jvm="${build.deploy.dir}/bin/ij${executable.postfix}" error="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out.err">
                                    <jvmarg value="-Dvm.assert_dialog=0" />
                                    <jvmarg value="-classpath" />
                                    <jvmarg value="${build.dir}/_smoke.tests/classes" />
                                    <env key="LD_LIBRARY_PATH" value="${build.deploy.dir}/bin:${env.LD_LIBRARY_PATH}" />
                                </java>
                            </else>
                        </if>
                        <!-- load the test output file to the property - will be used later -->
                        <loadfile property="@{test}.out" srcFile="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out" />

                        <!--
                                    Run smoke test @{test} on JAVA_HOME's JVM.
                                    If ${keywords} contains "golden" we have to run the test twice:
                                    on JAVA_HOME's JVM and on the DRLVM. To compare outputs.
                                  -->
                        <if>
                            <isset property="@{test}.is.golden" />
                            <then>
                                <condition property="java.executable" value="${env.JAVA_HOME}/bin/java${executable.postfix}">
                                    <available file="${env.JAVA_HOME}/bin/java${executable.postfix}" />
                                </condition>
                                <property name="java.executable" value="${env.JAVA_HOME}/bin/ij${executable.postfix}" />

                                <java output="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.golden" classname="${class.name}" fork="true" jvm="${java.executable}" error="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.golden.err">
                                    <jvmarg value="-classpath" />
                                    <jvmarg value="${java.path.property}" />
                                    <env key="LD_LIBRARY_PATH" value="${env.JAVA_HOME}/bin:${env.LD_LIBRARY_PATH}" />
                                </java>
                                <!-- load the test output file to the property - will be used later -->
                                <loadfile property="@{test}.golden" srcFile="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.golden" />
                            </then>
                        </if>

                        <!-- Handling the test output (or outputs in "golden" case) -->
                        <if>
                            <isset property="@{test}.is.golden" />
                            <then>
                                <!-- compare JAVA_HOME's JVM output and DRLVM's output -->
                                <condition property="@{test}.is.passed">
                                    <equals arg1="${@{test}.golden}" arg2="${@{test}.out}" />
                                </condition>
                            </then>
                            <else>
                                <!-- whether DRLVM's output contains PASS and doesn't FAIL -->
                                <condition property="@{test}.is.passed">
                                    <and>
                                        <contains string="${@{test}.out}" substring="PASS" casesensitive="false" />
                                        <not>
                                            <contains string="${@{test}.out}" substring="FAIL" casesensitive="false" />
                                        </not>
                                    </and>
                                </condition>
                            </else>
                        </if>

                        <if>
                            <isset property="@{test}.is.passed" />
                            <then>
                                <echo message=" PASSED : ${class.name}" />
                            </then>
                            <else>
                                <property name="some.smoke.test.is.failed" value="true" />
                                <echo message="*** FAILED **** : ${class.name}" />
                            </else>
                        </if>
                    </then>
                    <else>
                        <propertycopy override="true" property="exclude.reason" from="@{test}.is.excluded" />
                        <echo message="test ${class.name} is skipped due to ${exclude.reason}" />
                    </else>
                </if>
            </sequential>
        </for>
        <echo message="Please find test classes and results at ${build.dir}/_smoke.tests/" />
        <fail message="Smoke tests are not passed." if="some.smoke.test.is.failed" />
    </target>
</project>
