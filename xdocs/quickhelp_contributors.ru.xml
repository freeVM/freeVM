<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License. You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<document>

  <properties>
    <title>Open Source Java SE</title>
    <author email="dev@harmony.apache.org">Harmony Documentation Team</author>
  </properties>

  <body>

<section name="Инструкция по сборке и использованию исходного кода Apache Harmony">
<p style="text-align: right">RU | <a href="quickhelp_contributors.html">EN</a></p>
    <P><strong>Внимание</strong>: Данная страница является переводом английской версии на сайте и находится в стадии разработки.</P>
    <p>Следуйте этой инструкции, чтобы настроить, скомпилировать и работать с исходным кодом Apache Harmony. Для этого, необходимо: </p>
    <ol type="1">
       <li><a href="#prerequisites">Убедиться, что установлено все необходимое ПО</a>.  </li>
       <li><a href="#checkout">Загрузить исходный код</a>. </li>
       <li><a href="#building">Скомпилировать исходный код</a>.
    </li>
    </ol>
    <p>После успешного завершения компиляции кода, вы сможете запускать Java* приложения, используя Harmony. </p>
    <p>Если вам не нужен весь комплект разработчика Harmony Java SE (HDK),
    и вы намерены работать с отдельными частями кода Apache Harmony, следуйте
    <a href="#step-by-step">пошаговой инструкции</a> для построения
    отдельных компонент этого комплекта.  </p>
    <p>Проект находится на стадии разработки. При обнаружении ошибок,
    воспользуйтесь поиском по архиву <a href="http://harmony.apache.org/mailing.html">
    почтовой рассылки проекта</a> - возможно, ваша проблема уже выявлена и решена.
    Если вы не нашли нужную информацию, пришлите нам описание проблемы, и мы постараемся помочь.  </p>

<subsection name="1. Требования к системе">
<a id="prerequisites"></a>
    <h3>Общие требования</h3>

        <p>Для работы с Harmony необходимо установить следующее ПО: </p>
        <ul>
        <li> Apache Ant версия 1.6.5 или более поздняя
        </li>
        <li> Subversion
        </li>
        <li> Java SE 5 JDK
        <p><strong>Примечание:</strong> если у вас включен брандмауэр,
        настройте соединение через прокси-сервер для работы с ant и svn.
        Для svn, следуйте указаниям в документации клиентского приложения.
        Например, для использования консольной версии svn внесите
        соответствующие изменения в файл <code>~/.subversion/servers</code>.
        Для работы ant, укажите следующие значения  для переменной окружения
        <code>ANT_OPTS</code>:
        </p>
        <pre>-Dhttp.proxyHost=&lt;host&gt;
-Dhttp.proxyPort=&lt;proxy&gt;</pre>
        </li>
        </ul>

    <h3>Tребования для отдельных платформ</h3>

    <p>В зависимости от платформы (см. список поддерживаемых платформ) вам понадобится ряд других программ, наиболее общий список которых приводится ниже.  </p>
    <p><strong>Windows</strong> </p>

            <ul>
               <li> SDK для платформы Windows </li>
               <li> Microsoft Visual Studio.NET 2003 </li>
               <li> (по желанию) Внешний компилятор:
                <ul>
                    <li> Microsoft 32-битный компилятор C/C++, версия 7 или более поздняя </li>
                    <li> Intel C++ Compiler , версия 9.0 </li>
                </ul></li>
            </ul>
    <p><strong>Linux</strong> </p>
    <ul>
        <li> gcc компилятор, версия 3.3.3 или более поздняя (Версии до 3.3.3 не тестировались но могут работать.) </li>
        <li> g++ компилятор </li>
        <li> make </li>
        <li> liblcms1-dev </li>
        <li> libpng12-dev </li>
        <li> libjpeg62-dev </li>
        <li> libx11-dev </li>
        <li> libxft-dev </li>
        <li> binutils-dev </li>
        <li> libxml2-dev </li>
    </ul>

    <h3>Дополнительные требования</h3>

    <p>Отдельные компоненты системы сборки также зависит от сторонних программных продуктов и библиотек. Поскольку эти требования постоянно эволюционируют, мы рекомендуем запустить систему сборки и автоматически загрузить недостающие компоненты через Интернет.  </p>
    <p>Для построения DRLVM отдельным компонентам системы требуются: </p>
    <ul>
        <li> Xalan-Java, версия 2.7.0 (копируется из библиотек классов)  </li>
        <li> Cpp Tasks collection, версия 1.0 beta 3 or higher (загружается из сети)  </li>
        <li> Ant-Contrib набор задач, версия 0.6 или более поздняя (загружается из сети)  </li>
        <li> Zlib библиотека, бинарные файлы, версия 1.2.1 или более поздняя (загружается из сети)  </li>
        <li> Apache Portable Runtime Layer , версия 1.2.6 (загружается из сети)  </li>
        <li> APR-util, версия 1.2.6 (загружается из сети)  </li>
        <li> APR-iconv, версия 1.1.1 (загружается из сети) </li>
        <li> Log4cxx , наиболее поздняя версия, из SVN - 467164 (загружается из сети)  </li>
    </ul>
    <p>Данные компоненты необходимы для построения исходного кода как на Windows, так и на Linux системах. </p>
    <p>Вы можете загрузить и установить дополнительные компоненты до сборки DRLVM и указать их расположение, как описано <code>файле</code>, шаг 3.3.1. Там же содержится информация о том, как отключить автоматическую загрузку сторонних компонент во время сборки и использовать уже установленные версии.  Примечание: поскольку требования к ПО периодически изменяются, не рекомендуется самостоятельно устанавливать недостающие компоненты. Система сборки сделает это за вас.  </p>
</subsection>
<subsection name="2. Загрузка дерева каталогов кода">
  <a id="checkout"></a>
        <p>Исходный код Harmony ВМ разделен на несколько частей. Для построения всей среды исполнения вам необходимо построить библиотеку классов и виртуальную машину. Используйте объединенную систему сборки для построения всей среды, а затем работайте с библиотекой классов и/или ВМ по вашему выбору. В настоящее время, система сборки использует виртуальную машину DRLVM. </p>
        <p>Для того, чтобы выгрузить объединенную систему сборки из SVN репозитория, используйте следующую команду:
        </p>
        <pre>$ svn co https://svn.apache.org/repos/asf/harmony/enhanced/trunk</pre>
        <p>Данная команда выгружает дерево каталогов с пустыми директориями <code>working_classlib</code> и <code>working_vm</code>. После построения исходного кода на следующем этапе, в директорию <code>working_classlib</code> будет выгружена копия  дерева каталогов библиотеки классов, а в директорию <code>working_vm</code> - копия дерева каталогов DRLVM.  </p>
    <p><strong>Примечание</strong>: в ОС Windows, если корневая директория системы сборки находится на много уровней ниже корневого каталога, излишне длинный путь к библиотеке классов может вызвать ошибку при попытке выгрузить исходный код. Для решения этой проблемы, переместите корневую директорию системы сборки выше по дереву каталогов или смените операционную систему.  </p>
</subsection>

<subsection name="3. Сборка исходного кода комплекта разработчика HDK">
    <a id="building"></a>
    <p> На этом этапе система готова скомпилировать исходный код. Во время первой сборки система загружает все необходимые дополнительные компоненты. Система сборки оповещает пользователя об отсутствии необходимых компонент или изменении в требованиях, так что процедуру загрузки внешних компонент необходимо будет периодически повторять.  </p>
    <p>Для того, чтобы загрузить необходимые дополнительные компоненты, исходный код Harmony и построить готовую среду исполнения и комплект разработчика Harmony Java SE (HDK), в корневой папке системы сборки вызовите следующую команду:
    </p>

    <pre>$ ant -Dauto.fetch=true</pre>
    <p>Данная команда выгружает все сторонние компоненты, которые могут распространяться под различными лицензиями, отличающимися от лицензии Apache, см. полный список лицензий в файле <code>THIRD_PARTY_NOTICES.txt</code> в корневой папке.  </p>
    <p>Выгружать дополнительные компоненты нужно только во время первого прогона сборки. Для последующих прогонов, используйте команду
    </p>
    <pre>$ ant</pre>
    <p> Для построения полной сборки рекомендуется увеличить объем динамической памяти (Java heap), используемой программой Apache Ant.
     Для этого, измените значение переменной окружения ANT_OPTS в зависимости от вашей операционной системы, например:
    </p>

    <pre>ANT_OPTS='-Xms256m -Xmx512m' </pre>

    <p>Если вы предполагаете использовать отдельные части исходного кода, вам не нужен весь комплект разработчика. В таком случае, не вызывайте ant и следуйте пошаговой инструкции.  </p>
</subsection>
</section>

<section name="Пошаговая инструкция сборки исходного кода">

<subsection name="1. Извлечение дерева каталогов">
    <a id="step-by-step"></a>
    <p>Для извлечения дерева каталогов, используйте соответствующее имя, указанное в скрипте <code>build.xml</code> в объединенной системе сборки. В корневой директории объединенной системы сборки, выполните следующую команду:
    </p>
    <pre>$ ant populate_source</pre>
    <p>Данная команда выкачивает библиотеку классов и ВМ в директориях  <code>working_classlib</code> и <code>working_vm</code> соответственно, причем версия извлеченного кода соответствует версии файла <code>build.xml</code>. Поскольку дерево каталогов довольно велико, извлечение всего каталога может занять продолжительное время.  </p>
</subsection>
<subsection name="2. Обновление Дерева Каталогов">

    <p>По прошествии времени, вы можете синхронизировать вашу копию исходного кода с текущей версией на SVN репозитории, вызывая команду <code>svn</code> update в нужной директории, например:
    </p>
    <pre>$ cd working_classlib
$ svn update</pre>
    <p>Таким способом вы можете получать обновления кода библиотеки классов и ВМ. После исполнения команды в вашем дереве каталогов отобразятся все изменения, внесенные в  SVN репозиторий после предыдущей синхронизации. Если у вас есть доступ к репозиторию с правом записи, вы можете загружать обновления командой <code>svn checkin</code>. Примечание: если после обновления дерева каталогов появляется ошибка при построении библиотеки классов, удалите результаты предыдущей сборки командой
    </p>

    <pre>$ ant clean</pre>
</subsection>
<subsection name="3. Сборка библиотеки классов">
    <p>На данном этапе система готова скомпилировать исходный код. Сначала происходит сборка библиотеки классов, поскольку от нее зависит сборка виртуальной машины, и наличие библиотеки классов необходимо для функционирования всей среды исполнения.  </p>
    <p>Во время первой сборки система загружает все необходимые дополнительные компоненты. Система сборки оповещает пользователя об отсутствии необходимых компонент или изменении в требованиях, так что процедуру загрузки внешних компонент необходимо будет периодически повторять.  </p>
    <p>Для загрузки внешних компонент и сборки библиотеки классов используйте следующие команды:
    </p>
    <pre>$ cd working_classlib
$ ant fetch-depends
$ ant</pre>
    <p>Для тестирования библиотеки классов вам необходима виртуальная машина. Если у вас уже есть ВМ, запустите полный набор тестов для библиотеки классов следующей командой:
    </p>
    <pre>$ ant test</pre>
    <p>Для тестирования подходит не только виртуальная машина DRLVM, см. раздел Составление среды исполнения из построенных компонент. Если вы хотите тестировать библиотеку классов вместе с DRLVM, следуйте дальнейшим инструкциям для ее сборки.  </p>
</subsection>
<subsection name="4. Сборка виртуальной машины DRLVM">
    <h3>4.1. Перейдите в директорию build.</h3>
    <p>После сборки библиотеки классов, постройте ВМ для получения функционирующей среды исполнения.
    Для этого, вернитесь в корневую директорию объединенной системы сборки и перейдите в директорию
    <code>working_vm</code>, а затем в поддиректорию build: </p>
        <pre>$ cd working_vm/build</pre>

    <h3 >4.2. Настройте рабочее окружение.</h3>
    <ul>
        <li> Внесите изменения в файл <code>drlvm.properties</code>.
        <p>Укажите системе сборки DRLVM директорию с библиотекой классов: в директории <code>build</code>
        переименуйте файл <code>drlvm.properties.example</code> в <code>drlvm.properties</code>. </p>
        <pre>$ cp drlvm.properties.example drlvm.properties</pre>
        <p>Этот файл содержит значение параметра, сообщающего системе сборки DRLVM,
        что библиотека классов находится в директории <code>working_classlib</code>.
        Для того чтобы указать другую сборку библиотеки классов, укажите другой файл
         с соответствующим значением при вызове команды сборки. </p>
        <p>Проверьте, что в используемом файле параметр <code>deploy.canonical.flag</code>
        имеет значение TRUE. Этот параметр позволяет системе сборки создать директорию
        <code>deploy/jre/bin</code>, которая понадобится на следующих этапах сборки.  </p>
        </li>

        <li> Укажите используемый компилятор.
        <p>Для того чтобы перейти на другой компилятор или режим сборки
        с помощью переменных окружения, используйте следующие команды: </p>
               <table>
                  <tr>
                    <th class="TableHeading">
                      Компилятор
                    </th>
                    <th class="TableHeading">
                       Windows
                    </th>
                    <th class="TableHeading">
                       Linux
                    </th>
                  </tr>
                  <tr>
                    <td class="TableCell">
                      MSVC compiler
                    </td>
                    <td class="TableCell">
                      set CXX=msvc
                    </td>
                    <td class="TableCell">
                      N/A
                    </td>
                  </tr>
                  <tr>
                    <td class="TableCell">
                      Intel(R) compiler
                    </td>
                    <td class="TableCell">
                      set CXX=icl
                    </td>
                    <td class="TableCell">
                      export CXX=icc
                    </td>
                  </tr>
                  <tr>
                    <td class="TableCell">
                      GCC compiler
                    </td>
                    <td class="TableCell">
                      N/A
                    </td>
                    <td class="TableCell">
                      export CXX=gcc
                    </td>
                  </tr>
                </table>
                </li>
        <li>Укажите режим сборки: отладочный (debug) или рабочий (release).
        <p>По умолчанию, система сборки работает в отладочном режиме. Для переключения в рабочий режим, выполните следующие команды: </p>
        <p><strong>Windows</strong>: </p>
        <pre>&gt; set BUILD_CFG=release
&gt; build.bat</pre>
        <p><strong>Linux</strong>:
        </p>
        <pre>$ BUILD_CFG=release ./build.bat</pre>
        </li></ul>
    <h3>4.3. Загрузите дополнительные компоненты.</h3>

    <p>Перед тем, как запустить сборку, необходимо загрузить все дополнительные компоненты. Обратите внимание: эта операция может занять длительное время.   </p>

    <p><strong>Windows</strong>: </p>
    <pre>C:...\trunk\working_vm\build&gt;build.bat update </pre>
    <p><strong>Linux</strong>: </p>
    <pre>$ sh build.sh update </pre>

    <h3>4.4 Запустите сборку кода.</h3>

    <p>Чтобы запустить сборку, вызовите следующую команду:  </p>
    <p><strong>Windows</strong>: </p>
    <pre>C:...\trunk\working_vm\build&gt;build.bat</pre>
    <p><strong>Linux</strong>: </p>
    <pre>$ sh build.sh</pre>

    <h3>4.5. Запустите набор тестов для проверки правильности сборки.</h3>

    <p>Для проверки правильности сборки, запустите набор тестов acceptance tests командой:  </p>
    <p><strong>Windows</strong>: </p>
    <pre>C:...\trunk\working_vm\build&gt;build.bat test</pre>
    <p><strong>Linux</strong>: </p>
    <pre>$ sh build.sh test</pre>
    <p><strong>Примечание</strong>: в настоящее время, kernel тесты не проходят.
    Для успешного прохождения тестов, используйте C Unit и Smoke тесты.  </p>

<p>Сборка виртуальной машины успешно завершена. Полная функционирующая среда исполнения готова к использованию и находится в директории <code>deploy/jre</code> внутри директории <code>build</code>.  Чтобы это проверить, вы можете, например, узнать версию используемой среды исполнения:
</p>
<pre>$ cd deploy/jre/bin
$ ./java -version
Apache Harmony Launcher:
(c) Copyright 1991, 2006 The Apache Software Foundation or its licensors, as applicable.
java version "1.5.0"
pre-alpha : not complete or compatible
svn = r479551, (Nov 27 2006), Windows/ia32/msvc 1310, debug build
http://harmony.apache.org
</pre>
</subsection>
<subsection name="5. Конструирование среды исполнения из скомпилированных компонент">
    <p>Разработчики библиотек классов могут использовать виртуальную машину DRLVM
    или установить другую совместимую ВМ. Например, вы можете использовать IBM
    virtual machine которая была предоставлена компанией IBM для нужд разработчиков
     проекта на условиях пробной, не открытой лицензии на выполняемый код.
     Для установки ВМ следуйте прилагающейся документации. Вы можете развернуть
     дерево каталогов библиотек классов поверх дерева каталогов Harmony,
     так что директории 'jdk' совпадут.  </p>
    <p><strong>Windows</strong>: </p>
    <pre>$ unzip &lt;path_to_vm_zip&gt; -d ../..</pre>

    <p><strong>Linux</strong>: </p>
    <pre>$ tar xzf &lt;path_to_vm_tarball&gt; --directory ../..</pre>
    <p>Для работы с библиотекой классов Harmony, используйте подробную
    документацию для этого компонента.  Разработчики виртуальной машины
    DRLVM используют ВМ, построенную в результате сборки, то есть
    среду исполнения, состоящую из DRLVM и библиотеки классов.  </p>
</subsection>
</section>
<section name="Запуск Java-приложений">

<p>Убедитесь, что переменная окружения <code>JAVA_HOME</code> не имеет
значения или указывает на директорию <code>deploy/jre</code>.
Используйте стандартный синтаксис для запуска Java-приложений
с помощью программы запуска в директории <code>deploy/jre/bin</code>: </p>
<pre>
$ deploy/jre/bin/java -showversion -jar helloworld.jar
Apache Harmony Launcher:
(c) Copyright 1991, 2006 The Apache Software Foundation or its licensors, as applicable.
java version "1.5.0"
pre-alpha : not complete or compatible
svn = r479551, (Nov 27 2006), Windows/ia32/msvc 1310, debug build
http://harmony.apache.org
Hello world!
</pre>
 </section>

  </body>
</document>