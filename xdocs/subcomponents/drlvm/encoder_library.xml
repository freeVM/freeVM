<?xml version="1.0" encoding="iso-8859-1"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements. See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License. You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<document>

  <properties>
    <title>Encoder Library Description for IA-32/Intel64</title>
    <author email="dev@harmony.apache.org">Harmony Documentation Team</author>

  </properties>

  <body>
    <section name="Encoder Library Description for IA-32/Intel64">
        <ol id="TOC">
        <li><a href="#Revision History">Revision History</a></li>
        <li><a href="#About this document">About This Document</a></li>
        <li><a href="#Overview">Overview</a></li>
        <li><a href="#Goals and Targets">Goals and Targets</a></li>
        <li><a href="#Structure">Structure</a></li>
        <li><a href="#How It Works">How It Works</a>
            <ol>
            <li><a href="#Usage Model">Usage Model</a></li>
            <li><a href="#Under the Hood">Under the Hood</a>
                <ol>
                <li><a href="#Fast Opcode Lookup">Fast Opcode Lookup</a></li>
                <li><a href="#Fast Code Generation">Fast Code Generation</a></li>
                </ol>
            </li>
            </ol>
       </li>
      </ol>
      
      <subsection name="Revision History">

          <table>
              <tr>
                  <th class="TableHeading">Version</th>

                  <th class="TableHeading">Version Information</th>

                  <th class="TableHeading">Date</th>
              </tr>

              <tr>
                  <td class="TableCell">Initial version</td>

                  <td class="TableCell">
                      Alexander Astapchuk, Svetlana
                      Konovalova: document created.
                  </td>

                  <td class="TableCell">January 30, 2007</td>
              </tr>
          </table>
        
      </subsection>
      <subsection name="About This Document">
            <p>
        This document introduces the encoder library component
        delivered as a part of the DRL (Dynamic Runtime Layer)
        initiative. This document focuses on the specifics of the
        current implementation showing the encoder library structure
        and role inside the DRL virtual machine.
      </p>

     </subsection>
      <subsection name="Overview">
      <p>
        The encoder library is a DRLVM component for code
        generation, or encoding. This library is separate, static and
        mostly independent from other components. The following
        components use the encoder library:
      </p>

      <ul>
        <li>
          <a href="TM.html">Thread Manager</a>
        </li>

        <li>
          <a href="JIT.html#OPT">Jitrino.OPT</a>
        </li>

        <li>
          <a href="JIT.html#JET">Jitrino.JET</a>
        </li>

        <li>
          <a href="index.html">DRLVM</a> to generate stubs using
          direct calls to the encoder and the LIL code generator
        </li>
      </ul>

      </subsection>
      <subsection name="Goals and Targets">
          

      <p>The encoder library meets the following requirements:</p>

      <ul>
        <li>
          To be as fast as <code>jet</code>, which is crucial for
          client applications startup
        </li>

        <li>
          To maintain instructions data easily, which is crucial
          for any application
        </li>

        <li>
          To provide a simple and generic interface:
          <code>::encode(mnemonic, arguments)</code>

          <p class="note">Note</p>

          <p class="notetext">
            The encoder library provides a
            simple and generic interface. Clients with special
            needs should use <a href="#How It Works">adapters</a>,
            which provide a handy and convenient interface and then
            translate the data into the generic interface.
          </p>
        </li>
      </ul>

      </subsection>

      <subsection name="Structure">
        
      <p>The encoder library includes the following modules:</p>

      <ul>
        <li>
          An <i>encoding engine</i> with the generic interface to
          generate CPU instructions for IA-32 and Intel64
          platforms
        </li>

        <li>
          About 150 instructions covering the following areas:

          <ul>
            <li>arguments quantity</li>

            <li>arguments legal combinations</li>

            <li>
              arguments roles, that is, whether an argument
              changes in operation or not
            </li>

            <li>
              encoding an operation (binary
              representation)
            </li>

            <li>
              additional miscellaneous information, for
              example, whether an operation is symmetric, or uses
              flags, etc.
            </li>
          </ul>These instructions are in place already -
          <code>MOV</code>, <code>JUMP</code>, <code>CALL</code>,
          <code>ALU</code>, <code>SSE</code>, <code>FPU</code>,
          string, etc.
        </li>

        <li>
          A <i>generic interface adapter</i> for convenient usage
          in a program
        </li>

        <li>
          A <i>decoding engine</i> to disassemble CPU
          instructions for IA-32 and Intel64 platforms
        </li>
      </ul>

      <p>
        The encoder library consists of the following files located
        at <code>vm/port/src/encoder/ia32_em64t</code>:
      </p>

      <table>
        <tr>
          <th class="TableHeading">Filename</th>

          <th class="TableHeading">Description</th>
        </tr>

        <tr>
          <td class="TableCell">
            <code>dec_base.cpp</code>
          </td>

          <td class="TableCell">decoding routines</td>
        </tr>

        <tr>
          <td class="TableCell">
            <code>dec_base.h</code>
          </td>

          <td class="TableCell">
            decoding routines
            declarations
          </td>
        </tr>

        <tr>
          <td class="TableCell">
            <code>enc_base.cpp</code>
          </td>

          <td class="TableCell">base encoding engine</td>
        </tr>

        <tr>
          <td class="TableCell">
            <code>enc_base.h</code>
          </td>

          <td class="TableCell">
            base encoding engine
            declarations
          </td>
        </tr>

        <tr>
          <td class="TableCell">
            <code>enc_prvt.h</code>
          </td>

          <td class="TableCell">
            internal stuff of encoding
            engine
          </td>
        </tr>

        <tr>
          <td class="TableCell">
            <code>encoder.cpp</code>
          </td>

          <td class="TableCell">
            handy adapter for use in
            programs
          </td>
        </tr>

        <tr>
          <td class="TableCell">
            <code>encoder.h</code>
          </td>

          <td class="TableCell">handy adapter declaration</td>
        </tr>

        <tr>
          <td class="TableCell">
            <code>encoder.inl</code>
          </td>

          <td class="TableCell">
            implementation of most of
            <code>encoder.h</code> functions that are normally
            inline
          </td>
        </tr>

        <tr>
          <td class="TableCell">
            <code>enc_defs.h</code>
          </td>

          <td class="TableCell">
            complete instructions list
            including miscellaneous definitions of register names,
            sizes, etc
          </td>
        </tr>

        <tr>
          <td class="TableCell">
            <code>enc_tabl.cpp</code>
          </td>

          <td class="TableCell">
            comprehensive step-by-step
            comments on how to add new instructions
          </td>
        </tr>
      </table>
</subsection>
      <subsection name="How It Works">



       <h3><a name="Usage Model"><b>Usage Model</b></a></h3>
      <p>
        The base encoding interface
        <code>EncoderBase::encode()</code> is a common generic
        interface, which is not used in programs directly. Normally,
        applications use an <i>adapter interface</i> to connect
        specific client needs to the <code>EncoderBase</code> generic
        interface. Currently, the following adapters are available:
      </p>

      <ul>
        <li>
          <code>Jitrino.OPT</code> described in
          <code>Jitrino/src/codegenerator/ia32/Ia32Encoder.cpp</code>
        </li>

        <li>
          <code>Jitrino.JET</code> described in
          <code>Ia32Encoder.h</code> and
          <code>jitrino/src/jet/enc_ia32.cpp</code>,
          <code>enc_ia32.h</code>
        </li>

        <li>
          <code>encoder.h</code> described in
          <code>port/src/encoder/encoder.h</code>
        </li>
      </ul>

      <p>
        All the <i>adapters</i> are trivial - they fill out
        arguments as <code>EncoderBase::Operands</code>, and then
        invoke <code>EncoderBase::encode()</code>.
      </p>

      <p class="example">Example</p>

      <p class="exampletext">
        The <code>encoder.h</code> file
        consisting of human-readable function names serves as an
        adapter. This way, to generate a simple code sequence, use the
        <code>encoder.h</code> interface.
      </p>

      <p>
        The same usage model applies to the decoder engine: the
        basic generic interface is declared in
        <code>vm/port/src/encoder/ia32_em64t/dec_base.h</code> and the
        specific adapter for JVMTI needs is in
        <code>vm/vmcore/src/jvmti/jvmti_dasm.cpp</code>,
        <code>vm/vmcore/include/jvmti_dasm.h</code>.
      </p>

        <h3><a name="Under the Hood"><b>Under the Hood</b></a></h3>

      <p>
        The engine gets its input as an operation and a set of
        operands, and performs the following operations:
      </p>

      <ul>
        <li>Finds a matching record in the table</li>

        <li>Generates binary data based on the record found</li>
      </ul>

      <p>
        Both steps involve performance-intensive compare and memory
        access operations. To reduce the workload, table maintenance is
        simplified for users, and the application keeps the master
        table plain and elementary. At run time, before the first
        usage, a special version of data is pre-compiled, which
        requires fewer manipulations. The pre-compiled version provides
        the <a href="#Fast Opcode Lookup">fast opcode lookup</a> and
        the <a href="#Fast Code Generation">
          fast code generation</a>.
      </p>

        <dl>
          <dt>
            <a name="Fast Opcode Lookup">Fast Opcode Lookup</a>
          </dt>
        </dl>
      

      <p>
        Every operand gets its unique hash based on the operand size
        and the memory, or register, or immediate location. If an
        instruction has more than one operand, its hash undergoes the
        OR operation, by the following formula:
      </p>
<pre>hash = opnd1.hash() | opnd2.hash()&lt;&lt;N | opnd3.hash() &lt;&lt; N*2;</pre>

      <p>
        A pair of a mnemonic and its hash identifies the needed
        record. The hash is calculated in
        <code>EncoderBase::Operands</code> methods, outside of the hot
        execution path.
      </p>

        <dl>
          <dt>
            <a name="Fast Code Generation">Fast Code
        Generation</a>
          </dt>
        </dl>
            <p>
        For fast generation of code, the data is separated into
        <i>static data</i>, which does not depend on operands, and
        <i>dynamic data</i>, which depends on operands. This algorithm
        optimizes and speeds up generation of code by removing the loop
        from the hot execution path, as shown below:
      </p>
      
 <pre>for (bytes-in-opcode-data) {
// short loop, many miss-predictions, many branches inside, too slow
if (is_constant_byte) { copy_the_byte(); }
if (is_operand_data) { encode_operand_data(); }
...
}</pre>
      
      <p>
        The static data that is a set of bytes is copied into the
        output buffer with no analysis.<br />
        The dynamic data requires several <code>if</code> operators in
        the source code, but is much cheaper than the loop shown
        above.
      </p>

      <p>Encoding runs as shown in the following pseudo-code:</p>
<pre>memcpy(buf, static_data);
if (opcode_has_dyn_data_1) { gen_opcode_dyn_data(); }
if (opcode_has_dyn_data_2) { gen_opcode_dyn_data(); }
return;</pre>

      <p>
        For more details on hash calculation and internal
        structures, refer to <code>enc_tabl.cpp</code>.
      </p>
    
</subsection>
       </section>
  </body>
</document>
