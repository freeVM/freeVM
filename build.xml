<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Copyright 2006 The Apache Software Foundation or its licensors, as applicable
     
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. 
-->

<project name="buildtestinfra" default="default" basedir=".">
	
    <description>
		CI/built/test system for Apache Harmony
		http://incubator.apache.org/harmony
    </description>

	<!--The cc.property file contains the nameand values of properties-->
	<property file="cc.properties" />


	<!-- files we need -->
	<property name="cc.filename" value="cruisecontrol-bin-2.5" />
	<property name="junitjar.filename" value="ant-junit-1.6.5" />
	
	<!-- where to fetch from -->
	<property name="cc.location" value="http://umn.dl.sourceforge.net/sourceforge/cruisecontrol/" />
	<property name="junitjar.location" value="http://mirrors.ibiblio.org/pub/mirrors/maven2/ant/ant-junit/1.6.5/"/>
	
	<!-- where to assemble all the pieces -->
	<property name="target.dir" location="cc"/>
	<mkdir dir="${target.dir}"/>
	
	<!-- url of the classlib and drlvm in SVN -->
	<property name="svn.classlib.url" value="https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk"/>
	<property name="svn.drlvm.url" value="https://svn.apache.org/repos/asf/harmony/enhanced/drlvm/trunk"/>

	<condition property="is.windows">
        	<os family="Windows" />
	</condition>

	<condition property="need.proxy.port" value="${http-proxy-port}" else="80" >
        	<isset property="http-proxy-port" />
	</condition>

	<target name="set.proxy" if="http-proxy-host">
		<setproxy proxyhost="${http-proxy-host}" proxyport="${need.proxy.port}"/>

 		<!-- property file for CC -->
		<echo file="${target.dir}/cc.properties" append="false">#it is auto-generated file
proxy.host.property=http.proxyHost
proxy.port.property=http.proxyPort
proxy.host.vm=env.http.proxyHost
proxy.port.vm=env.http.proxyPort
proxy.value=${http-proxy-host}
port.value=${need.proxy.port}
</echo>
		<property name="vm.proxy.h" value="-Denv.http.proxyHost=${http-proxy-host}"/>
		<property name="vm.proxy.p" value="-Denv.http.proxyPort=${need.proxy.port}"/>
	</target>
	<target name="no.proxy" unless="http-proxy-host">
 		<!-- property file for CC -->
		<echo file="${target.dir}/cc.properties" append="false">#it is auto-generated file
proxy.host.property=no.http.proxyHost
proxy.port.property=no.http.proxyPort
proxy.host.vm=no.env.http.proxyHost
proxy.port.vm=no.env.http.proxyPort
proxy.value=no
port.value=111
</echo>
		<property name="vm.proxy.h" value="-Dno.http.proxyHost=true"/>
		<property name="vm.proxy.p" value="-Dno.http.proxyPort=0"/>
	</target>

	<!-- ==========================================
	       Kick off CC w/ all tests
	     ========================================== -->
	<target name="default" description="Start CruiseControl with full test suite" depends="start-win,start-other">
	</target>
		
	<target name="pre-copy">
		<echo>Copying full test configuration for CruiseControl from /config/config-full.xml</echo>
		<copy file="config/config-full.xml" tofile="${target.dir}/config.xml" />
		<copy file="config/copyres.xml" tofile="${target.dir}/copyres.xml" />
	</target>
	
	<target name="start-win" if="is.windows">
		<exec executable="cmd" dir="${target.dir}" >
			<arg line="/c cruisecontrol.bat" />
		</exec>
	</target>
		
	<target name="start-other" unless="is.windows">
		<exec executable="sh" dir="${target.dir}">
			<arg line="cruisecontrol.sh"/>
		</exec>
	</target>
	
	<!-- ==========================================
	     Main setup - download, unpack, checkout
	     ========================================== -->
	<target name="setup" description="fetch and setup build/test/ci system" depends="set.proxy,no.proxy" >
		
		<!-- get the version of CruiseControl unless we have the zip locally -->
		
		<!--get src="${cc.location}${cc.filename}.zip"
			 dest="${cc.filename}.zip" 
			 usetimestamp="true"
			 verbose="true" /-->
	
		<get src="${junitjar.location}${junitjar.filename}.jar"
			 dest="${junitjar.filename}.jar" 
			 usetimestamp="true"
			 verbose="true" />
		
		<!-- unzip it, rename, add ant-junit jar and cleanout the junk -->
		
		<unzip src="${cc.filename}.zip" dest="." />
		
		<move file="${cc.filename}" tofile="${target.dir}"/>

		<delete dir="${target.dir}/projects/connectfour" includeEmptyDirs="true" verbose="false"/>		
		<delete dir="${target.dir}/logs/connectfour" includeEmptyDirs="true" verbose="false"/>		
		<delete file="${target.dir}/config.xml"/>
		<delete file="${target.dir}/copyres.xml"/>

                <delete dir="${cc.filename}" includeEmptyDirs="true" verbose="false"/>
		
		<!-- copy the ant-junit jar to cc/lib -->
	
		<copy file="${junitjar.filename}.jar" todir="${target.dir}/lib"/>
		
		<!-- copy the config we want to use, and make target dirs for the checkouts -->
		<copy file="config/config-full.xml" tofile="${target.dir}/config.xml" />
		<copy file="config/copyres.xml" tofile="${target.dir}/copyres.xml" />
		
		<mkdir dir="${target.dir}/projects/classlib"/>
		<mkdir dir="${target.dir}/projects/drlvm"/>
				
		<!-- now do the checkouts and load external libs -->
	
		<antcall target="co-classlib"/>
		<subant target="fetch-depends" buildpath="${target.dir}/projects/classlib/trunk"/>
		<subant target="rebuild" buildpath="${target.dir}/projects/classlib/trunk" failonerror="true"/>

		<antcall target="co-drlvm"/>
		<antcall target="process-drlvm"/>

		<echo file="${target.dir}/cc.properties" append="true">
wdir=${target.dir}
timeout=${cycle_timeout}
ttimeout=${task_timeout}
cc_webcontent=${target.dir}/webapps/cruisecontrol
server_addr=${mail_server}
report_to=${report_failures_to}
report_from=${report_failures_from}
</echo>

	</target>

	<!-- ================================================
	      Checkout classlib trunk tree into place for CC
	     ================================================ -->
	<target name="co-classlib">
		<echo>Checking out Harmony classlib.  This can take a while.  Please be patient...</echo>

		<exec executable="svn" dir="${target.dir}/projects/classlib" failonerror="true">
			<arg line="co"/>
			<arg line="${svn.classlib.url}"/>
		</exec>
	</target>

	<!-- ================================================
	      Checkout DRLVM trunk tree into place for CC
	     ================================================ -->
	<target name="co-drlvm">
		<echo>Checking out Harmony DRLVM.  This can take a while.  Please be patient...</echo>

		<exec executable="svn" dir="${target.dir}/projects/drlvm" failonerror="true">
			<arg line="co"/>
			<arg line="${svn.drlvm.url}"/>
		</exec>
	</target>

	<target name="drlvm-win" if="is.windows">
		<echo file="${target.dir}/cc.properties" append="true">
os=win
sh=cmd
cmd.prefix=/c
cmd=build.bat
cc=msvc
</echo>
		<exec executable="cmd" dir="${target.dir}/projects/drlvm/trunk/build" >
			<arg line="/c build.bat ${vm.proxy.h} ${vm.proxy.p} update" />
		</exec>
		<exec executable="cmd" dir="${target.dir}/projects/drlvm/trunk/build" >
			<arg line="/c build.bat ${vm.proxy.h} ${vm.proxy.p}" />
		</exec>
	</target>
		
	<target name="drlvm-other" unless="is.windows">
		<echo file="${target.dir}/cc.properties" append="true">
os=lnx
sh=sh
cmd.prefix=
cmd=build.sh
cc=gcc
</echo>
		<exec executable="sh" dir="${target.dir}/projects/drlvm/trunk/build">
			<arg line="build.sh ${vm.proxy.h} ${vm.proxy.p} update"/>
		</exec>
		<exec executable="sh" dir="${target.dir}/projects/drlvm/trunk/build">
			<arg line="build.sh ${vm.proxy.h} ${vm.proxy.p}"/>
		</exec>
	</target>
	<target name="process-drlvm" depends="drlvm-win,drlvm-other">
		<echo>download external libs for Harmony DRLVM.</echo>
	</target>

	<!-- =========================================================
	     cleanup to new state.  Leaves the .zip around to save 
	     time on a setup
	     ========================================================= -->
	<target name="clean" description="reset to clean state">
		<delete dir="${target.dir}" includeEmptyDirs="true"/>				
	</target>
</project>
