<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable
     
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. -->

<!-- ====================================================================== 
     Build source and lay out results in the required format
     ====================================================================== -->
<project name="build-contribution" default="default" basedir=".">
    <description>
    	Build contributed source and lay out results in the required format 
    </description>

    <target name="help">
        <echo>
Apache Harmony Ant Build

Usage:

  ant build
    Compiles the java and native code to produce a jdk in
    "deploy/jdk".

  ant clean
    Removes all the files generated by a build.

  ant rebuild
    Performs a full build - that is 'clean' then 'build'.

  ant test
    Runs all the tests.

  ant doc
    Generates the javadoc.

  ant snapshot
    Produces a archive (tar/zip) of a build.

  ant fetch-depends
    Fetches dependencies. Note: Some of Harmony's dependencies are
    licensed under terms other than the Apache License v2.

  ant properties
    Display the common properties that are use in the ant build files.


The 'build' and 'test' targets can be restricted to processing only
a single module by defining the 'build.module' variable on the ant
command line.  For example, to run only the luni tests:

  ant -Dbuild.module=luni test

        </echo>
    </target>

    <!-- import properties for snapshot targets -->
    <import file="${basedir}/make/properties.xml" />

    <!-- ================================
	 target : rebuild
	     
	 builds with a clean first
	 ================================= -->
    <target name="rebuild" depends="clean,build" />
	
    <!-- ================================= 
          target: default              
         ================================= -->
    <target name="default" depends="build" />

    <target name="build" depends="build-java,build-native">
        <ant antfile="make/build-test.xml" inheritall="false"
             target="support-jar"/>
    </target>


    <!-- ================================
	 target : rebuild-java
	     
	 builds java source with a clean first
	 ================================= -->
    <target name="rebuild-java" depends="clean-java,build-java" />

    <!-- ================================= 
          target: build-java              

          runs the build target in build-java.xml
         ================================= -->
    <target name="build-java">
        <echo>
========================================
Building Java component archives...
========================================
        </echo>
        <ant antfile="make/build-java.xml" inheritall="false" target="build"/>
    </target>

    <!-- ================================= 
          target: clean-java              

          runs the clean target in build-java.xml
         ================================= -->
    <target name="clean-java">
        <ant antfile="make/build-java.xml" inheritall="false" target="clean" />
    </target>

    <!-- ================================
	 target : rebuild-native
	     
	 builds native source with a clean first
	 ================================= -->
    <target name="rebuild-native" depends="clean-native,build-native" />

    <!-- ================================= 
          target: build-native             

          runs the build target in build-native.xml
         ================================= -->
    <target name="build-native">
        <echo>
========================================
Building native libs and executables...
========================================
        </echo>
        <ant antfile="make/build-native.xml" inheritall="false" target="build"/>
    </target>

    <!-- ================================= 
          target: clean-native              

          runs the clean target in build-native.xml
         ================================= -->
    <target name="clean-native">
        <ant antfile="make/build-native.xml" inheritall="false" target="clean" />
    </target>

    <target name="test">
        <echo>
========================================
Testing class libraries...
========================================
</echo>
        <ant antfile="make/build-test.xml" inheritall="false" target="test-all"/>
    </target>


    <!-- ================================= 
          target: doc             
         ================================= -->
    <target name="doc">
        <echo>
========================================
Generating HTML using Doxygen...
========================================
</echo>
        <ant antfile="doc/build.xml" inheritall="false" />
    </target>

    <!-- ================================= 
          target: clean
         ================================= -->
    <target name="clean" depends="clean-java,clean-native">
        <!-- Removed this for now since svn diff complains with
             svn: Working copy 'doc/kernel_doc' is missing or not locked
             if we run it.  We shouldn't really clean things that are in the
             repository.
             <ant antfile="doc/build.xml" inheritall="false" target="clean" />
         -->
    </target>

    <!-- ================================= 
          target: -properties
         ================================= -->
    <target name="-properties" depends="svn-prop">
        <property name="deploy.file.prefix"
                  value="incubator-harmony-classlib-r${svn.revision}" />
        <property name="deploy.tar"
                  value="${deploy.file.prefix}-${hy.os}-${hy.arch}-snapshot.tar.gz" />
        <property name="deploy.zip"
                  value="${deploy.file.prefix}-${hy.os}-${hy.arch}-snapshot.zip" />
    </target>

    <!-- ================================= 
          target: snapshot
         ================================= -->
    <target name="snapshot" depends="snapshot-tar, snapshot-zip" />

    <!-- ================================= 
          target: snapshot-tar
         ================================= -->
    <target name="snapshot-tar" depends="default, -properties" if="is.unix">
        <echo>
========================================
Generating snapshot tar
========================================
</echo>
        <tar destfile="${deploy.tar}" compression="gzip">
            <tarfileset dir="${basedir}" prefix="Harmony">
                <include name="COPYRIGHT" />
                <include name="LICENSE" />
                <include name="NOTICE" />
                <include name="THIRD_PARTY_NOTICES.txt" />
                <include name="deploy/build/**" />
                <include name="deploy/include/**" />
                <include name="deploy/jdk/**" />
                <exclude name="deploy/jdk/jre/bin/default/**" /> 
                <exclude name="deploy/jdk/jre/bin/java" /> 
                <include name="deploy/lib/**" />
            </tarfileset>
            <tarfileset dir="${basedir}" prefix="Harmony" mode="755">
                <include name="deploy/jdk/jre/bin/java" />
            </tarfileset>
            <tarfileset dir="${basedir}/make/resources"
                includes="README-snapshot.txt"
                fullpath="Harmony/README"/>
        </tar>
        <md5sum file="${deploy.tar}" />
    </target>

    <!-- ================================= 
          target: snapshot-zip
         ================================= -->
    <target name="snapshot-zip" depends="default, -properties" if="is.windows">
        <echo>
========================================
Generating snapshot zip
========================================
</echo>
        <zip destfile="${deploy.zip}">
            <zipfileset dir="${basedir}" prefix="Harmony">
                <include name="COPYRIGHT" />
                <include name="LICENSE" />
                <include name="NOTICE" />
                <include name="THIRD_PARTY_NOTICES.txt" />
                <include name="deploy/build/**" />
                <include name="deploy/include/**" />
                <include name="deploy/jdk/**" />
                <exclude name="deploy/jdk/jre/bin/default/**" /> 
                <exclude name="deploy/jdk/jre/bin/java" /> 
                <include name="deploy/lib/**" />
            </zipfileset>
            <zipfileset dir="${basedir}/make/resources"
                includes="README-snapshot.txt"
                fullpath="Harmony/README.txt"/>
        </zip>
        <md5sum file="${deploy.zip}" />
    </target>

    <target name="fetch-depends">
        <ant antfile="make/depends.xml" inheritall="false" target="download" />
    </target>

    <target name="properties" depends="echo" />

    <macrodef name="md5sum">
        <attribute name="file" />
        <attribute name="type" default="md5" />
        <sequential>
            <checksum property="@{file}.@{type}" file="@{file}" />
            <echo file="@{file}.@{type}"
                  message="${@{file}.@{type}}  @{file}" />
        </sequential>
    </macrodef>

</project>

