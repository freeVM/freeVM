<?xml version="1.0" encoding="UTF-8"?>

<!--
     Licensed to the Apache Software Foundation (ASF) under one or more
     contributor license agreements.  See the NOTICE file distributed with
     this work for additional information regarding copyright ownership.
     The ASF licenses this file to You under the Apache License, Version 2.0
     (the "License"); you may not use this file except in compliance with
     the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
-->


<project name="build-harmony" default="default" basedir=".">

    <!-- name of the target directory to use for building and final assembly -->
    <property name="target.dir" value="target" />

    <!-- SVN URL for classlib default -->
    <property name="classlib.svn.url" value="https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk" />

    <!-- SVN URL for VM default -->
    <property name="vm.svn.url" value="https://svn.apache.org/repos/asf/harmony/enhanced/drlvm/trunk" />

    <!-- SVN URL for jdktools default -->
    <property name="jdktools.svn.url" value="https://svn.apache.org/repos/asf/harmony/enhanced/jdktools/trunk" />

    <!-- SVN URL for common_resources default -->
    <property name="commonresources.svn.url" value="https://svn.apache.org/repos/asf/harmony/enhanced/common_resources" />

    <!-- classlib location to tell DRLVM build -->
    <property name="drlvm.classlib.offset" value="../../../working_classlib"/>

    <!-- release property file which is added to source release -->
    <property file="release.properties" />

    <description>
        Apache Harmony subproject federation script
    </description>

    <!-- ================================================================================ -->
    <!--     main target - should checkout, build and package hdk, jdk and jre            -->
    <!-- ================================================================================ -->
    <target name="default"
        description="setup and build complete implementation"
        depends="setup,
                 switch_svn_vm,
                 switch_svn_classlib,
                 switch_svn_jdktools,
                 switch_svn_commonresources,
                 build_classlib,
                 build_vm,
        		 assemble_artifacts,
                 bundle_hdk,
        		 bundle_jdk,
                 bundle_jre"/>

    <!-- =============================================================================== -->
    <!--     populates the source directories, working_classlib and working_vm           -->
    <!-- =============================================================================== -->
    <target name="populate_source" depends="init, show_props, switch_svn_vm, switch_svn_classlib, 
        									switch_svn_jdktools, switch_svn_commonresources"
            description="checkout the class library and VM source trees"/>

    <!-- ================================================================================ -->
    <!--     creates the HDK bundle appropriate for the platform                          -->
    <!-- ================================================================================ -->
    <target name="bundle_hdk" depends="assemble_artifacts, assemble_hdk_doc,bundle_hdk_tgz,bundle_hdk_zip"/>

    <target name="bundle_hdk_tgz" depends="init" if="is.unix">

        <!-- create the tar file and then md5 checksum using harmony-hdk-rev as the root,
             and setting exec bits as needed -->
        <tar tarfile="${ta	rget.dir}/${deploy.hdk.tar}" compression="gzip">
            <tarfileset dir="${target.dir}/hdk" prefix="harmony-hdk-${harmony.version}" mode="755">
                <include name="jdk/jre/bin/java"/>
                <include name="jdk/jre/bin/java.exec"/>
                <include name="jdk/jre/bin/eclipse.sh"/>
             </tarfileset>
            <tarfileset dir="${target.dir}/hdk" prefix="harmony-hdk-${harmony.version}">
                <include name="**"/>
                <exclude name="jdk/jre/bin/java"/>
                <exclude name="jdk/jre/bin/java.exec"/>
                <exclude name="jdk/jre/bin/eclipse.sh"/>
                <exclude name="jdk/jre/bin/eclipse.sh"/>
            </tarfileset>
        </tar>

        <chksum dir="${target.dir}" file="${deploy.hdk.tar}" />
        <chksum dir="${target.dir}" file="${deploy.hdk.tar}" type="sha" />

    </target>

    <target name="bundle_hdk_zip" depends="init" unless="is.unix">
        <!-- create the tar file and then md5 checksum using harmony-hdk-rev as the root,
             and setting exec bits as needed -->
        <zip destfile="${target.dir}/${deploy.hdk.zip}" >
            <zipfileset dir="${target.dir}/hdk" prefix="harmony-hdk-${harmony.version}" filemode="755">
                <include name="jdk/jre/bin/java"/>
                <include name="jdk/jre/bin/java.exec"/>
                <include name="jdk/jre/bin/eclipse.sh"/>
             </zipfileset>
            <zipfileset dir="${target.dir}/hdk" prefix="harmony-hdk-${harmony.version}">
                <include name="**"/>
                <exclude name="jdk/jre/bin/java"/>
                <exclude name="jdk/jre/bin/java.exec"/>
                <exclude name="jdk/jre/bin/eclipse.sh"/>
            </zipfileset>
        </zip>

        <chksum dir="${target.dir}" file="${deploy.hdk.zip}" />
        <chksum dir="${target.dir}" file="${deploy.hdk.zip}" type="sha" />
    </target>

    <!-- ================================================================================ -->
    <!--     creates the JDK bundle appropriate for the platform                          -->
    <!-- ================================================================================ -->    
    <target name="bundle_jdk" depends="assemble_jdk_doc,bundle_jdk_tgz,bundle_jdk_zip"/>

    <target name="bundle_jdk_tgz" depends="init" if="is.unix">

        <tar tarfile="${target.dir}/${deploy.jdk.tar}" compression="gzip" >
            <tarfileset dir="${target.dir}/hdk/jdk" prefix="harmony-jdk-${harmony.version}" mode="755">
                <include name="jre/bin/java"/>
                <include name="bin/*"/>
            </tarfileset>
            <tarfileset dir="${target.dir}/hdk/jdk" prefix="harmony-jdk-${harmony.version}">
                <include name="**"/>
                <exclude name="jre/bin/java"/>
                <exclude name="jre/bin/java.exec"/>
                <exclude name="jre/bin/eclipse.sh"/>
                <exclude name="bin/*"/>
            </tarfileset>
        </tar>

        <chksum dir="${target.dir}" file="${deploy.jdk.tar}" />
        <chksum dir="${target.dir}" file="${deploy.jdk.tar}" type="sha" />

    </target>

    <target name="bundle_jdk_zip" depends="init" unless="is.unix">
        <zip destfile="${target.dir}/${deploy.jdk.zip}">
            <zipfileset dir="${target.dir}/hdk/jdk" prefix="harmony-jdk-${harmony.version}" filemode="755">
                <include name="jre/bin/java.exe"/>
                <include name="jre/bin/javaw.exe"/>
                 <include name="bin/*"/>
            </zipfileset>
            <zipfileset dir="${target.dir}/hdk/jdk" prefix="harmony-jdk-${harmony.version}">
                <include name="**"/>
                <exclude name="jre/bin/java.exe"/>
                <exclude name="jre/bin/javaw.exe"/>
                <exclude name="jre/bin/eclipse.sh"/>
                <exclude name="bin/*"/>
            </zipfileset>
        </zip>
        <chksum dir="${target.dir}" file="${deploy.jdk.zip}" />
        <chksum dir="${target.dir}" file="${deploy.jdk.zip}" type="sha" />
    </target>

    <!-- ================================================================================ -->
    <!--     creates the JRE bundle appropriate for the platform                          -->
    <!-- ================================================================================ -->
    <target name="bundle_jre" depends="assemble_jre_doc,bundle_jre_tgz,bundle_jre_zip"/>


    <target name="bundle_jre_tgz" depends="init" if="is.unix">

        <tar tarfile="${target.dir}/${deploy.jre.tar}" compression="gzip" >
            <tarfileset dir="${target.dir}/hdk/jdk/jre" prefix="harmony-jre-${harmony.version}" mode="755">
                <include name="bin/java"/>
                <include name="bin/java.exec"/>
                <include name="bin/eclipse.sh"/>
            </tarfileset>
            <tarfileset dir="${target.dir}/hdk/jdk/jre" prefix="harmony-jre-${harmony.version}">
                <include name="**"/>
                <exclude name="bin/java"/>
                <exclude name="bin/java.exec"/>
                <exclude name="bin/eclipse.sh"/>
            </tarfileset>
        </tar>

        <chksum dir="${target.dir}" file="${deploy.jre.tar}" />
        <chksum dir="${target.dir}" file="${deploy.jre.tar}" type="sha" />

    </target>

    <target name="bundle_jre_zip" depends="init" unless="is.unix">
        <zip destfile="${target.dir}/${deploy.jre.zip}">
            <zipfileset dir="${target.dir}/hdk/jdk/jre" prefix="harmony-jre-${harmony.version}" filemode="755">
                <include name="bin/java"/>
                <include name="bin/java.exec"/>
                <include name="bin/eclipse.sh"/>
            </zipfileset>
            <zipfileset dir="${target.dir}/hdk/jdk/jre" prefix="harmony-jre-${harmony.version}">
                <include name="**"/>
                <exclude name="bin/java"/>
                <exclude name="bin/java.exec"/>
                <exclude name="bin/eclipse.sh"/>
            </zipfileset>
        </zip>
        <chksum dir="${target.dir}" file="${deploy.jre.zip}" />
        <chksum dir="${target.dir}" file="${deploy.jre.zip}" type="sha" />
    </target>


    <!-- ================================================================================ -->
    <!--    from the classlib and vm builds, creates the hdk and jre                      -->
    <!-- ================================================================================ -->
    <target name="assemble_artifacts" depends="init, assemble_stuff, chmod_stuff"/>

    <target name="assemble_stuff">
        <!-- create the top-level hdk directory -->
        <mkdir dir="${target.dir}/hdk"/>

        <!-- copy the classlib/deploy tree as the hdk
             filtering out the jre, as that comes from
             working_vm -->
        <copy todir="${target.dir}/hdk">
            <fileset dir="working_classlib/deploy">
                <exclude name="**/jre/**/*" />
                <exclude name="**/jdk/lib/*" />
                <exclude name="**/jdk/include/*" />
            </fileset>
        </copy>

        <!-- now copy the drlvm/build/deploy/jre -->
        <copy todir="${target.dir}/hdk/jdk">
            <fileset dir="working_vm/build/deploy/jdk">
                <exclude name="**/*.pdb"/>
            </fileset>
        </copy>

        <!-- now copy the working_jdktools/deploy/jdk -->
        <copy todir="${target.dir}/hdk/jdk/">
            <fileset dir="working_jdktools/deploy/jdk">
                <exclude name="**/*.pdb"/>
            </fileset>
        </copy>
     </target>
    
    <target name="chmod_stuff" if="is.unix">
        <chmod file="${target.dir}/hdk/jdk/bin/*" perm="ugo+x" />
        <chmod file="${target.dir}/hdk/jdk/jre/bin/java*" perm="ugo+x" />
    </target>
        
     <target name="assemble_jdk">
         
        <!-- create the top-level jdk directory -->
        <mkdir dir="${target.dir}/jdk"/>

        <!-- now copy the drlvm/build/deploy/jre
             contents into the jre in the JDK -->
        <copy todir="${target.dir}/jdk/jre">
            <fileset dir="working_vm/build/deploy/jdk/jre">
                <exclude name="**/*.pdb"/>
            </fileset>
        </copy>

        <!-- now copy the drlvm/build/deploy/jre
             contents into the jre in the JDK -->
        <copy todir="${target.dir}/jdk/">
            <fileset dir="working_jdktools/deploy/jdk">
                <exclude name="**/*.pdb"/>
            </fileset>
        </copy>

    </target>

    <!-- ================================================================================ -->
    <!--    copy license and notices into the root of the hdk                             -->
    <!-- ================================================================================ -->
    <target name="assemble_hdk_doc">

        <copy todir="${target.dir}/hdk">
            <fileset dir="./">
                <include name="COPYRIGHT" />
                <include name="LICENSE" />
                <include name="NOTICE" />
                <include name="THIRD_PARTY_NOTICES.txt" />
            </fileset>
        </copy>

    </target>

    <!-- ================================================================================ -->
    <!--    copy license and notices into the root of the JDK and JRE                     -->
    <!-- ================================================================================ -->
    <target name="assemble_jre_doc">

        <copy todir="${target.dir}/hdk/jdk/jre">
            <fileset dir="./">
                <include name="COPYRIGHT" />
                <include name="LICENSE" />
                <include name="NOTICE" />
                <include name="THIRD_PARTY_NOTICES.txt" />
            </fileset>
        </copy>
    </target>
    
    <target name="assemble_jdk_doc">    
        <copy todir="${target.dir}/hdk/jdk/">
            <fileset dir="./">
                <include name="COPYRIGHT" />
                <include name="LICENSE" />
                <include name="NOTICE" />
                <include name="THIRD_PARTY_NOTICES.txt" />
            </fileset>
        </copy>
    </target>

    <!-- ================================================================================ -->
    <!--    build the classlib - ensure depends are up to date an then rebuild            -->
    <!-- ================================================================================ -->
    <target name="build_classlib">
        <ant antfile="working_classlib/build.xml" target="fetch-depends" inheritall="false" />

        <ant antfile="working_classlib/build.xml" target="rebuild" inheritAll="false" />
    </target>

    <!-- ================================================================================ -->
    <!--    build the vm - ensure depends are up to date an then rebuild            -->
    <!-- ================================================================================ -->
    <target name="build_vm" depends="init,build_vm_unix,build_vm_windows"/>

    <target name="build_vm_unix" if="is.unix" depends="build_vm_unix_update, build_vm_unix_clean, build_vm_unix_build">
    </target>

    <target name="build_vm_unix_update" depends="init" if="is.unix">
        <exec executable="sh" dir="working_vm/build" >
            <arg line="build.sh update -Dexternal.dep.CLASSLIB.loc=${drlvm.classlib.offset}"/>
            <arg line="-Ddeploy.canonical.flag=true"/>
            <env key="BUILD_CFG" value="release"/>
        </exec>
    </target>

    <target name="build_vm_unix_clean"  depends="init" if="is.unix">
        <exec executable="sh" dir="working_vm/build" >
            <arg line="build.sh clean -Dexternal.dep.CLASSLIB.loc=${drlvm.classlib.offset}"/>
            <arg line="-Ddeploy.canonical.flag=true"/>
            <env key="BUILD_CFG" value="release"/>
        </exec>
    </target>

    <target name="build_vm_unix_build" depends="init" if="is.unix">
        <exec executable="sh" dir="working_vm/build" >
            <arg line="build.sh -Dexternal.dep.CLASSLIB.loc=${drlvm.classlib.offset}"/>
            <arg line="-Ddeploy.canonical.flag=true"/>
            <env key="BUILD_CFG" value="release"/>
        </exec>
    </target>

    <target name="build_vm_windows" unless="is.unix">

        <exec executable="cmd" dir="working_vm/build" >
            <arg line="/c build.bat update -Dexternal.dep.CLASSLIB.loc=${drlvm.classlib.offset}"/>
            <arg line="-Ddeploy.canonical.flag=true"/>
            <env key="BUILD_CFG" value="release"/>
            <env key="CXX" value="msvc"/>
        </exec>
        <exec executable="cmd" dir="working_vm/build" >
            <arg line="/c build.bat clean -Dexternal.dep.CLASSLIB.loc=${drlvm.classlib.offset}"/>
            <arg line="-Ddeploy.canonical.flag=true"/>
            <env key="BUILD_CFG" value="release"/>
            <env key="CXX" value="msvc"/>
        </exec>
        <exec executable="cmd" dir="working_vm/build" >
            <arg line="/c build.bat -Dexternal.dep.CLASSLIB.loc=${drlvm.classlib.offset}"/>
            <arg line="-Ddeploy.canonical.flag=true"/>
            <env key="BUILD_CFG" value="release"/>
            <env key="CXX" value="msvc"/>
        </exec>
    </target>

    <!-- ================================================================================ -->
    <!--    trivial setup                                                                 -->
    <!-- ================================================================================ -->
    <target name="setup" depends="init, show_props">
        <delete dir="${target.dir}"/>
        <mkdir dir="${target.dir}"/>
    </target>


    <!-- ================================================================================ -->
    <!--    hard reset - remove checked out classlib and vm tree- be sure you want this   -->
    <!-- ================================================================================ -->
    <target name="reset"
        description="removes vm and classlib dirs and resets - BE SURE YOU WANT TO DO THIS"
        depends="clean">

        <!-- delete the working directories and then do an svn update to reset them -->
        <delete dir="working_classlib"/>
        <delete dir="working_vm"/>

        <exec executable="svn" dir="." failonerror="true">
            <arg line="update" />
        </exec>

    </target>

    <target name="clean">
        <delete dir="${target.dir}" failonerror="false"/>
    </target>

    <!-- ================================================================================ -->
    <!--    Switches the working_vm directory to vm choice - wired for DRLVM for now      -->
    <!-- ================================================================================ -->
    <target name="switch_svn_vm" depends="init" if="is.svn">
        <exec executable="svn" dir="working_vm" failonerror="true">
            <arg line="-r${svn.revision}"/>
            <arg line="switch" />
            <arg line="${vm.svn.url}" />
        </exec>
    </target>

    <!-- ================================================================================ -->
    <!--    Switches the working_vm directory to classlib choice                          -->
    <!-- ================================================================================ -->
    <target name="switch_svn_classlib" depends="init" if="is.svn">
        <exec executable="svn" dir="working_classlib" failonerror="true">
            <arg line="-r${svn.revision}"/>
            <arg line="switch" />
            <arg line="${classlib.svn.url}" />
        </exec>
    </target>

    <!-- ================================================================================ -->
    <!--    Switches the working_jdktools directory to jdktools                           -->
    <!-- ================================================================================ -->
    <target name="switch_svn_jdktools" depends="init" if="is.svn">
        <exec executable="svn" dir="working_jdktools" failonerror="true">
            <arg line="-r${svn.revision}"/>
            <arg line="switch" />
            <arg line="${jdktools.svn.url}" />
        </exec>
    </target>

    <!-- ================================================================================ -->
    <!--    Switches the common_resources directory to common_resources                   -->
    <!-- ================================================================================ -->
    <target name="switch_svn_commonresources" depends="init" if="is.svn">
        <exec executable="svn" dir="common_resources" failonerror="true">
            <arg line="-r${svn.revision}"/>
            <arg line="switch" />
            <arg line="${commonresources.svn.url}" />
        </exec>
    </target>

    <!-- ================================================================================ -->
    <!--   init :                                                                         -->
    <!--     basic setup - reused stuff from classlib/properties.xml for expediency       -->
    <!-- ================================================================================ -->
    <target name="init" depends="svn-prop">
        <!-- Determine our operating system -->
        <condition property="is.windows">
            <os family="windows" />
        </condition>

        <condition property="is.unix">
            <os name="linux" />
        </condition>

        <condition property="is.linux">
            <os name="linux" />
        </condition>

        <!-- this special case makes sense -->
        <condition property="harmony.os" value="windows">
            <isset property="is.windows"/>
        </condition>
        <condition property="harmony.os" value="linux">
            <os name="linux" />
        </condition>

        <property name="harmony.os" value="${os.name}" />

        <!-- Conditions for different architectures -->
        <condition property="is.x86_64">
            <os arch="x86_64"/>
        </condition>
        <condition property="is.x86">
            <or>
                <os arch="x86"/>
                <os arch="i386"/>
            </or>
        </condition>
        <condition property="is.ia64">
            <os arch="ia64" />
        </condition>
        <condition property="is.64bit">
            <or>
                <os arch="ia64" />
                <os arch="x86_64"/>
            </or>
        </condition>
        <condition property="is.32bit">
            <or>
                <os arch="x86"/>
                <os arch="i386"/>
            </or>
        </condition>
        <condition property="harmony.bits" value="32">
            <isset property="is.32bit" />
        </condition>
        <property name="harmony.bits" value="64" />

        <!-- Normalized architecture name -->
        <condition property="harmony.arch" value="x86">
            <isset property="is.x86" />
        </condition>
        <property name="harmony.arch" value="${os.arch}" />

        <property name="harmony.deploy.suffix" value="-snapshot" />
        
        <property name="deploy.hdk.file.prefix"
                 value="apache-harmony-hdk-${harmony.version}" />
        <property name="deploy.hdk.tar"
                 value="${deploy.hdk.file.prefix}-${harmony.os}-${harmony.arch}-${harmony.bits}${harmony.deploy.suffix}.tar.gz" />
        <property name="deploy.hdk.zip"
                 value="${deploy.hdk.file.prefix}-${harmony.os}-${harmony.arch}-${harmony.bits}${harmony.deploy.suffix}.zip" />

        <property name="deploy.jdk.file.prefix"
                 value="apache-harmony-jdk-${harmony.version}" />
        <property name="deploy.jdk.tar"
                 value="${deploy.jdk.file.prefix}-${harmony.os}-${harmony.arch}-${harmony.bits}${harmony.deploy.suffix}.tar.gz" />
        <property name="deploy.jdk.zip"
                 value="${deploy.jdk.file.prefix}-${harmony.os}-${harmony.arch}-${harmony.bits}${harmony.deploy.suffix}.zip" />

        <property name="deploy.jre.file.prefix"
                 value="apache-harmony-jre-${harmony.version}" />
        <property name="deploy.jre.tar"
                 value="${deploy.jre.file.prefix}-${harmony.os}-${harmony.arch}-${harmony.bits}${harmony.deploy.suffix}.tar.gz" />
        <property name="deploy.jre.zip"
                 value="${deploy.jre.file.prefix}-${harmony.os}-${harmony.arch}-${harmony.bits}${harmony.deploy.suffix}.zip" />

        <property name="deploy.src.file.prefix"
                 value="apache-harmony-src-${harmony.version}" />
        <property name="deploy.src.tar"
                 value="${deploy.src.file.prefix}${harmony.deploy.suffix}.tar.gz" />
        <property name="deploy.src.zip"
                 value="${deploy.src.file.prefix}${harmony.deploy.suffix}.zip" />
    </target>

    <target name="show_props" depends="init">
        <echo>
                   Apache Harmony Federated Build
            ==========================================
            svn rev          :  ${harmony.version}
            operating system :  ${harmony.os}
            architecture     :  ${harmony.arch}-${harmony.bits}
            ant os name/arch :  ${os.name}/${os.arch}
            output location  :  ${target.dir}
            DRLVM classlib   :  ${drlvm.classlib.offset}
        </echo>
    </target>

    <!-- ================================================================================ -->
    <!-- svn-prop : get svn revision number of the build.xml file                         -->
    <!--                                                                                  -->
    <!--         taken from classlib/properties.xml, because of uncertainty               -->
    <!--         of state of the working_classlib dir, I need a copy                      -->
    <!--   TODO - we want to be able to pass property in to ant so we don't need a        -->
    <!--      pause and it's reproducable                                                 -->
    <!-- ================================================================================ -->
    <target name="svn-prop">
        <exec executable="svn"
              dir="."
              failifexecutionfails="false"
              resultproperty="svn.rc">
            <arg value="info" />
            <arg value="build.xml" />
            <redirector outputproperty="svn.revision.tmp">
                <outputfilterchain>
                    <linecontains>
                        <contains value="Revision: " />
                    </linecontains>
                    <tokenfilter>
                        <replacestring from="Revision: " to=""/>
                    </tokenfilter>
                </outputfilterchain>
            </redirector>
        </exec>
        <condition property="is.svn" value="true">
            <equals arg1="${svn.rc}" arg2="0" />
        </condition>
        <condition property="svn.revision" value="${svn.revision.tmp}" >
            <equals arg1="${svn.rc}" arg2="0" />
        </condition>
        <property name="svn.revision" value="unknown" />
	<property name="harmony.version" value="r${svn.revision}" />
    </target>

    <target name="bundle_src"
            depends="setup,copy_source,bundle_src_tgz,bundle_src_zip"/>

    <target name="bundle_src_tgz" depends="init" if="is.unix">

        <tar tarfile="${target.dir}/${deploy.src.tar}" compression="gzip"
             longfile="gnu" >
            <tarfileset dir="${target.dir}/src" prefix="harmony-src-${harmony.version}">
                <include name="**"/>
            </tarfileset>
        </tar>

        <chksum dir="${target.dir}" file="${deploy.src.tar}" />
        <chksum dir="${target.dir}" file="${deploy.src.tar}" type="sha" />

    </target>

    <target name="bundle_src_zip" depends="init" unless="is.unix">
        <zip destfile="${target.dir}/${deploy.src.zip}">
            <zipfileset dir="${target.dir}/hdk/jdk/jre" prefix="harmony-src-${harmony.version}">
                <include name="**"/>
            </zipfileset>
        </zip>
        <chksum dir="${target.dir}" file="${deploy.src.zip}" />
        <chksum dir="${target.dir}" file="${deploy.src.zip}" type="sha" />
    </target>

    <target name="copy_source" depends="init,populate_source">
        <exec executable="svn">
            <arg value="export" />
            <arg value="." />
            <arg value="target/src" />
        </exec>
        <exec executable="svn">
            <arg value="export" />
            <arg value="working_classlib/modules/concurrent/standard" />
            <arg value="target/src/working_classlib/modules/concurrent/standard" />
        </exec>
        <echo file="target/src/release.properties">
harmony.version=${harmony.version}
harmony.deploy.suffix=${harmony.deploy.suffix}
        </echo>
    </target>
            
    <!-- ================================================================================ -->
    <!-- produces a nicer looking checksum - taken from classlib/build.xml                -->
    <!-- ================================================================================ -->
    <macrodef name="chksum">
        <attribute name="dir" />
        <attribute name="file" />
        <attribute name="type" default="md5" />
        <sequential>
            <checksum property="@{file}.@{type}"
                      file="@{dir}/@{file}"
                      algorithm="@{type}" />
            <echo file="@{dir}/@{file}.@{type}"
                  message="${@{file}.@{type}}  @{file}${line.separator}" />
        </sequential>
    </macrodef>

</project>
