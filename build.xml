<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. -->

<!-- ====================================================================== 
     Build source and lay out results in the required format
     ====================================================================== -->
<project name="jdktools" default="build" basedir=".">
    <description>
    	Build jdktools
    </description>

    <target name="help">
        <echo>
Apache Harmony JDK Tools Build

Usage:

  ant build
    Compiles the java and native code to produce the tool parts of the jdk in
    "deploy/jdk".

  ant clean
    Removes all the files generated by a build.

  ant rebuild
    Performs a full build - that is 'clean' then 'build'.

  ant test
    Runs all the tests.

  ant doc
    Generates the javadoc.

        </echo>
    </target>

    <property file="jdktools.properties"/>
    <property file="${user.home}/jdktools.properties"/>
    
    <!-- set the path root for the classlib : must be relative to the build directory -->
    <property name="external.HDK.loc" value="../working_classlib/deploy" />
    <property name="external.DRLVM.loc" value="../working_vm/build/deploy" />
    <property name="external.resources.loc" value="../common_resources" />

    <property name="external.resources" location="${external.resources.loc}" />

    <property name="harmony.jdktools" location="${basedir}"/>
    <property name="hy.hdk" location="${external.HDK.loc}" />
    <property name="hy.drlvm" location="${external.DRLVM.loc}" />
    <property name="hy.jdk" location="deploy/jdk" />

    <!-- import properties for snapshot targets -->
    <import file="${basedir}/make/properties.xml" />

    <!-- ================================
	 target : rebuild
	     
	 builds with a clean first
	 ================================= -->
    <target name="rebuild" depends="clean,build"
        description="Performs a full build - that is 'clean' then 'build'" />
	
    <target name="build" depends="build-java,build-native"
        description="Compiles the java and native code to produce a jdk">
    </target>

    <target name="clean" depends="clean-java,clean-native"
            description="Removes all the files generated by a build" />

    <!-- ================================
	 target : rebuild-java
	     
	 builds java source with a clean first
	 ================================= -->
    <target name="rebuild-java" depends="clean-java,build-java"
            description="Like 'rebuild' but for java code only" />

    <!-- ================================= 
          target: build-java              

          runs the build target in build-java.xml
         ================================= -->
    <target name="build-java" 
            description="Compiles the java code only" >
        <echo>
========================================
Building Java component archives...
========================================
        </echo>
        <ant antfile="make/build-java.xml" inheritall="false" target="build">
            <property name="hy.hdk" value="${hy.hdk}"/>
	        <property name="hy.drlvm" value="${hy.drlvm}"/>
		    <property name="harmony.jdktools" value="${harmony.jdktools}"/>
            <property name="external.resources" value="${external.resources}"/>
        </ant>
    </target>

    <!-- ================================= 
          target: clean-java              

          runs the clean target in build-java.xml
         ================================= -->
    <target name="clean-java" 
            description="Removes the compiled java code" >
        <ant antfile="make/build-java.xml" inheritall="false" target="clean">
	        <property name="hy.hdk" value="${hy.hdk}"/>
	        <property name="hy.drlvm" value="${hy.drlvm}"/>
		    <property name="harmony.jdktools" value="${harmony.jdktools}"/>
        </ant>
    </target>

    <!-- ================================
	 target : rebuild-native
	     
	 builds native source with a clean first
	 ================================= -->
    <target name="rebuild-native" depends="clean-native,build-native"
            description="Like 'rebuild' but for native code only" />

    <!-- ================================= 
          target: build-native             

          runs the build target in build-native.xml
         ================================= -->
    <target name="build-native" 
            description="Compiles the native code only" >
        <echo>
========================================
Building native libs and executables...
========================================
        </echo>
        <ant antfile="make/build-native.xml" inheritall="false" target="build">
            <property name="hy.hdk" value="${hy.hdk}"/>
            <property name="hy.drlvm" value="${hy.drlvm}"/>
		    <property name="harmony.jdktools" value="${harmony.jdktools}"/>
		    <property name="harmony.jdktools" value="${harmony.jdktools}"/>
        </ant>
    </target>

    <!-- ================================= 
          target: clean-native              

          runs the clean target in build-native.xml
         ================================= -->
    <target name="clean-native"
        description="Removes the compiled native code" >

        <ant antfile="make/build-native.xml" inheritall="false" target="clean">
            <property name="hy.hdk" value="${hy.hdk}"/>
            <property name="hy.drlvm" value="${hy.drlvm}"/>
		    <property name="harmony.jdktools" value="${harmony.jdktools}"/>
        </ant>
    </target>

    <target name="test"
            description="Runs all tests">
        <echo>
========================================
Testing class libraries...
========================================
</echo>
        <ant antfile="make/build-test.xml" inheritall="false" target="test-all"/>
    </target>


    <!-- ================================= 
          target: -properties
         ================================= -->
    <target name="-properties" depends="svn-prop">
        <property name="deploy.file.prefix"
                  value="incubator-harmony-classlib-r${svn.revision}" />
        <property name="deploy.tar"
                  value="${deploy.file.prefix}-${hy.os}-${hy.arch}-snapshot.tar.gz" />
        <property name="deploy.zip"
                  value="${deploy.file.prefix}-${hy.os}-${hy.arch}-snapshot.zip" />
    </target>

    <target name="check-depends"
            description="Report on whether the dependencies are met">
        <ant antfile="make/depends.xml" inheritall="false" target="check">
            <property name="external.resources" value="${external.resources}"/>
        </ant>
    </target>

    <target name="fetch-depends"
        description="Fetches dependencies. Note: Some of Harmony's dependencies are licensed under terms other than the Apache License v2.">
        <ant antfile="make/depends.xml" inheritall="false" target="download" />
    </target>

    <target name="properties" depends="echo"
        description="Display the properties that are use in the ant build files"
            />

    <macrodef name="chksum">
        <attribute name="file" />
        <attribute name="type" default="md5" />
        <sequential>
            <checksum property="@{file}.@{type}" file="@{file}"
                      algorithm="@{type}" />
            <echo file="@{file}.@{type}"
                  message="${@{file}.@{type}}  @{file}${line.separator}" />
        </sequential>
    </macrodef>

</project>

