<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
-->

<project name="NIO_CHAR Build" default="build" basedir=".">
    <description>Build for NIO_CHAR component</description>

    <!-- import common properties -->
    <property name="hy.hdk" location="${basedir}/../../deploy" />
    <property name="hy.jdk" location="${hy.hdk}/jdk" />
    <property name="hy.jre" location="${hy.jdk}/jre" />
    <import file="${hy.hdk}/build/ant/properties.xml" />

    <property name="tests.output" location="../../build/test_report" />

    <!-- set global properties for this build. -->

    <fileset id="classes" dir="../../build/classes">
        <or>
            <present targetdir="src/main/java" />
            <present targetdir="src/main/java">
                <mapper type="regexp"
                        from="^(.*?)(\$$[^/\\\.]*)?\.class$$"
                        to="\1.java"/>
            </present>
        </or>
    </fileset>

    <property name="tests.hdk.dir" value="${hy.hdk}/build/test/nio_char" />
    <property name="nio_char.exclude.file"
              location="${tests.hdk.dir}/test.exclude" />

    <target name="build" depends="compile-java, copy-resources, build-jar" />

    <!-- Build natives.-->
    <target name="build-native" depends="build-native-all" />
    <target name="build-native-all" >

        <make dir="src/main/native/niochar/${hy.os.family}" />

        <!-- Copy the built shared libs over to the jre/bin dir -->
        <copy todir="${hy.jdk}/jre/bin" overwrite="yes">
            <fileset dir="src/main/native/niochar">
                <patternset includes="*${shlib.suffix}*" />
            </fileset>
        </copy>
    </target>

    <target name="test" depends="-test-module">
        <fail message="Some tests failed">
            <condition>
                <or>
                    <isset property="test.failures" />
                    <isset property="test.errors" />
                </or>
            </condition>
        </fail>
    </target>

    <!-- internal target for local and global test run sequence -->
    <target name="-test-module" depends="build, compile-tests, prepare-exclude, run-tests" />

    <!-- Clean natives. -->
    <target name="clean-native">
        <make dir="src/main/native/niochar/${hy.os.family}"
                      target="clean" />
    </target>

    <target name="clean">
        <delete file="${hy.jdk}/jre/lib/boot/nio_char.jar" />
        <delete file="${hy.jdk}/jre/lib/boot/nio_char-src.jar" />
        <delete failonerror="false">
            <fileset refid="classes" />
        </delete>
        <delete failonerror="false" dir="bin"/>
    </target>

    <target name="compile-java">
        <echo message="Compiling NIO_CHAR classes" />

        <mkdir dir="../../build/classes" />

        <javac sourcepath=""
               srcdir="src/main/java"
               destdir="../../build/classes"
               compiler="${hy.javac.compiler}"
               memoryMaximumSize="${hy.javac.maxmem}"
               source="${hy.javac.source}" 
               target="${hy.javac.target}"
               debug="${hy.javac.debug}">

            <compilerarg line="${build.compilerarg}" />

            <!-- Exclude unwanted data files -->
            <excludesfile name="${basedir}/make/excludesfile" />

            <bootclasspath>
                <fileset dir="${hy.jdk}/jre/lib/boot">
                    <include name="**/*.jar" />
                </fileset>
            </bootclasspath>
        </javac>
    </target>

    <target name="copy-resources">
        <mkdir dir="../../build/classes" />
        <copy todir="../../build/classes" includeemptydirs="false">
            <fileset dir="src/main/java">
                <exclude name="**/*.java" />
                <exclude name="**/java.nio.charset.spi.CharsetProvider" />
            </fileset>
        </copy>
    </target>

    <target name="build-jar" depends="svn-info">
        <jar destfile="${hy.jdk}/jre/lib/boot/nio_char.jar"
             manifest="./META-INF/MANIFEST.MF"
             compress="${hy.jar.compress}">
            <metainf prefix="META-INF/services"
                dir="src/main/java/org/apache/harmony/niochar"
                includes="java.nio.charset.spi.CharsetProvider"/>
            <fileset refid="classes" />
            <manifest>
                <attribute name="Implementation-Version" value="${svn.info}"/> 
            </manifest>

            <metainf refid="hy.required.metainf-files"/>
        </jar>

        <jar destfile="${hy.jdk}/jre/lib/boot/nio_char-src.jar">
            <metainf prefix="META-INF/services"
                dir="src/main/java/org/apache/harmony/niochar"
                includes="java.nio.charset.spi.CharsetProvider"/>
            <fileset dir="src/main/java">
                <excludesfile name="${basedir}/make/excludesfile"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Version" value="${svn.info}"/> 
            </manifest>

            <metainf refid="hy.required.metainf-files"/>
        </jar>
    </target>

    <target name="compile-tests" depends="copy-test-resources">
        <echo message="Compiling NIO_CHAR tests" />

        <mkdir dir="bin/test" />

        <javac srcdir="src/test/java"
               destdir="bin/test"
               sourcepath=""
               compiler="${hy.javac.compiler}"
               memoryMaximumSize="${hy.javac.maxmem}"
               source="${hy.javac.source}" 
               target="${hy.javac.target}"
               debug="${hy.javac.debug}">

            <compilerarg line="${build.compilerarg}" />

            <bootclasspath>
                <fileset dir="${hy.jdk}/jre/lib/boot">
                    <include name="**/*.jar" />
                </fileset>
            </bootclasspath>
            <classpath location="../../build/tests" />
            <classpath location="${hy.hdk}/build/test/support.jar" />
        </javac>
    </target>

    <target name="prepare-exclude">
       <prepare-exclude-list moduleName="nio_char" dir="./make"
                             result="${nio_char.exclude.file}"/>
    </target>

    <target name="run-tests">

        <mkdir dir="${tests.output}" />

        <property name="test.jre.home" value="${hy.jdk}/jre" />

        <junit fork="yes"
               forkmode="${hy.test.forkmode}"
               timeout="${hy.test.timeout}"
               printsummary="withOutAndErr"
               errorproperty="test.errors"
               failureproperty="test.failures"
               showoutput="on"
               dir="${basedir}"
               jvm="${test.jre.home}/bin/java">

            <assertions enableSystemAssertions="true">
                <enable />
            </assertions>

            <jvmarg line="${hy.test.vmargs}" />

            <classpath>
                <pathelement path="bin/test"/>
                <pathelement path="../../build/tests" />
                <pathelement path="${hy.hdk}/build/test/support.jar" />
                <fileset dir="src/test/resources/jars">
                    <include name="**/*.jar" />
                </fileset>
            </classpath>

            <formatter type="xml" />

            <batchtest todir="${tests.output}" haltonfailure="no" >

                <fileset dir="src/test/java">
                    <!-- if ${test.case}     -->
                    <include name="${converted.tc}" if="test.case" />
                    <!-- unless ${test.case} -->
                    <include name="**/*Test.java" unless="test.case" />
                    <excludesfile name="${nio_char.exclude.file}"  unless="test.case" />
                </fileset>
            </batchtest>
        </junit>
        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>

    <target name="touch-failures-file" if="test.failures">
        <echo file="${tests.output}/test.failures"
            append="true">nio_char${line.separator}</echo>
    </target>

    <target name="touch-errors-file" if="test.errors">
        <echo file="${tests.output}/test.errors"
            append="true">nio_char${line.separator}</echo>
    </target>

    <target name="copy-test-resources">
        <mkdir dir="bin/test" />
        <copy todir="bin/test" includeemptydirs="false">
            <fileset dir="src/test/resources">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

</project>
