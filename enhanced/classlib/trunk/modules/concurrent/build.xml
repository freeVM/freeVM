<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project name="CONCURRENT Build" default="build" basedir=".">
    <description>Build for CONCURRENT component</description>

    <!-- import common properties -->
    <property name="hy.hdk" location="${basedir}/../../deploy" />
    <import file="${hy.hdk}/build/ant/properties.xml" />

    <!-- set global properties for this build. -->
    <xmlproperty file="make/hyproperties.xml" semanticAttributes="true" />

    <fileset id="classes" dir="${hy.build}">
        <or>
            <present targetdir="src/main/java" />
            <present targetdir="src/main/java">
                <mapper type="regexp"
                        from="^(.*?)(\$$[^/\\\.]*)?\.class$$"
                        to="\1.java"/>
            </present>
            <present targetdir="standard/src/main/java" />
            <present targetdir="standard/src/main/java">
                <mapper type="regexp"
                        from="^(.*?)(\$$[^/\\\.]*)?\.class$$"
                        to="\1.java"/>
            </present>
        </or>
    </fileset>

    <property name="concurrent.common.exclude.file" location="./make/exclude.common" />
    <property name="concurrent.platform.exclude.file" location="./make/exclude.${hy.platform}.${hy.test.vm.name}" />
    <property name="concurrent.interm.exclude.file" location="./make/exclude.${hy.platform}.${hy.test.vm.name}.interm" />

    <property name="exclude.file" location="${hy.hdk}/build/concurrent.exclude" />

    <target name="build" depends="compile-java, build-jar" />

    <target name="test" depends="-test-module">
        <fail message="Some tests failed">
            <condition>
                <or>
                    <isset property="test.failures" />
                    <isset property="test.errors" />
                </or>
            </condition>
        </fail>
    </target>

    <!-- internal target for local and global test run sequence -->
    <target name="-test-module" depends="prepare-exclude" />

    <target name="clean">
        <delete file="${hy.jdk}/jre/lib/boot/${hy.concurrent.packaging.jarname}.jar" />
        <delete file="${hy.jdk}/jre/lib/boot/${hy.concurrent.packaging.jarname}-src.jar" />
        <delete failonerror="false">
            <fileset refid="classes" />
            <fileset dir="${hy.concurrent.bin.test}" />
        </delete>
    </target>

    <target name="compile-java">
        <echo message="Compiling CONCURRENT classes" />

        <mkdir dir="${hy.build}" />

        <javac sourcepath=""
               destdir="${hy.build}"
               compiler="${hy.javac.compiler}"
               memoryMaximumSize="${hy.javac.maxmem}"
               source="${hy.javac.source}" 
               target="${hy.javac.target}"
               debug="${hy.javac.debug}">

            <compilerarg line="${build.compilerarg}" />

            <src path="src/main/java" />
            <src path="standard/src/main/java" />
            <bootclasspath>
                <fileset dir="${hy.jdk}/jre/lib/boot">
                    <include name="**/*.jar" />
                </fileset>
            </bootclasspath>
        </javac>
    </target>

    <target name="build-jar" depends="svn-info">
        <jar destfile="${hy.jdk}/jre/lib/boot/${hy.concurrent.packaging.jarname}.jar"
             manifest="${hy.concurrent}/META-INF/MANIFEST.MF">
            <fileset refid="classes" />
            <manifest>
                <attribute name="Implementation-Version" value="${svn.info}"/> 
            </manifest>

            <metainf refid="hy.required.metainf-files"/>
        </jar>

        <jar destfile="${hy.jdk}/jre/lib/boot/${hy.concurrent.packaging.jarname}-src.jar">
            <fileset dir="src/main/java" />
            <fileset dir="standard/src/main/java" />
            <manifest>
                <attribute name="Implementation-Version" value="${svn.info}"/> 
            </manifest>

            <metainf refid="hy.required.metainf-files"/>
        </jar>
    </target>

    <target name="compile-tests">
        <echo message="Compiling CONCURRENT tests" />

        <mkdir dir="${hy.concurrent.bin.test}" />

        <javac srcdir="${hy.concurrent.src.test.java}"
               destdir="${hy.concurrent.bin.test}"
               sourcepath=""
               compiler="${hy.javac.compiler}"
               memoryMaximumSize="${hy.javac.maxmem}"
               source="${hy.javac.source}" 
               target="${hy.javac.target}"
               debug="${hy.javac.debug}">

            <compilerarg line="${build.compilerarg}" />

            <src path="src/test/java" />
            <src path="standard/src/test/java" />
            <bootclasspath>
                <fileset dir="${hy.jdk}/jre/lib/boot">
                    <include name="**/*.jar" />
                </fileset>
            </bootclasspath>
            <classpath location="../../build/tests" />
            <classpath location="${hy.hdk}/build/test/support.jar" />
        </javac>
    </target>

    <target name="prepare-exclude" depends="-init-exclude, -add-common, -add-platform, -add-intermittent">
    </target>

    <target name="-init-exclude" >
        <echo message="" file="${exclude.file}" />
        <loadfile property="concurrent.common.exclude.exist" srcFile="${concurrent.common.exclude.file}" failonerror="false" />
        <loadfile property="concurrent.platform.exclude.exist" srcFile="${concurrent.platform.exclude.file}" failonerror="false" />
        <loadfile property="concurrent.interm.exclude.exist" srcFile="${concurrent.interm.exclude.file}" failonerror="false"/>
    </target>

    <target name="-add-common" if="concurrent.common.exclude.exist" >
        <echo message="${concurrent.common.exclude.exist}${line.separator}" file="${exclude.file}" append="true" />
    </target>

    <target name="-add-platform" if="concurrent.platform.exclude.exist" >
        <echo message="${concurrent.platform.exclude.exist}${line.separator}" file="${exclude.file}" append="true" />
    </target>

    <target name="-add-intermittent" if="concurrent.interm.exclude.exist" >
        <echo message="${concurrent.interm.exclude.exist}${line.separator}" file="${exclude.file}" append="true" />
    </target>

    <target name="run-tests">

        <mkdir dir="${hy.tests.reports}" />

        <property name="test.jre.home" value="${hy.jdk}/jre" />

        <junit fork="yes"
               forkmode="${hy.test.forkmode}"
               timeout="${hy.test.timeout}"
               printsummary="withOutAndErr"
               errorproperty="test.errors"
               failureproperty="test.failures"
               showoutput="on"
               dir="${basedir}"
               jvm="${test.jre.home}/bin/java">
            <jvmarg line="${hy.test.vmargs}" />

            <classpath>
                <pathelement path="${hy.concurrent.bin.test}"/>
            </classpath>
            <classpath location="${hy.hdk}/build/test/support.jar" />

            <formatter type="xml" />

            <test name="${test.case}" todir="${hy.tests.reports}"
                 if="test.case" />

            <batchtest todir="${hy.tests.reports}" haltonfailure="no"
                unless="test.case">

                <fileset dir="${hy.concurrent.src.test.java}">
                    <excludesfile name="${exclude.file}" />
                </fileset>

            </batchtest>
        </junit>
        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>

    <target name="touch-failures-file" if="test.failures">
        <echo file="${hy.tests.reports}/test.failures"
            append="true">concurrent${line.separator}</echo>
    </target>

    <target name="touch-errors-file" if="test.errors">
        <echo file="${hy.tests.reports}/test.errors"
            append="true">concurrent${line.separator}</echo>
    </target>

</project>
