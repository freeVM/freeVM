/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/* This file is based on X11 headers and was originally autogenerated by
 * nativebridge tool.  It has since been modified by hand. */

#include "org_apache_harmony_awt_nativebridge_linux_X11.h"
#include "org_apache_harmony_awt_nativebridge_linux_ErrorHandler.h"
#include "exceptions.h"

#define LINK_EXCEPTION "java/lang/UnsatisfiedLinkError"

static libHandler libX11;
static libHandler libXmu;
static libHandler libXtst;
JNIEXPORT void JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_init (JNIEnv * env, jclass cls) {
    LOAD_LIB_VER(libX11, X11, 6);
    if (libX11 == NULL) {
        LOAD_LIB(libX11, X11);
    }
    if (libX11 == NULL) {
        throwNewExceptionByName(env, LINK_EXCEPTION, "Cannot load libX11 library");
        return;
    }

    LOAD_LIB_VER(libXmu, Xmu, 6);
    if (libXmu == NULL) {
        LOAD_LIB(libXmu, Xmu);
    }
    if (libXmu == NULL) {
        throwNewExceptionByName(env, LINK_EXCEPTION, "Cannot load libXmu library");
        return;
    }

    LOAD_LIB_VER(libXtst, Xtst, 6);
    if (libXtst == NULL) {
        LOAD_LIB(libXtst, Xtst);
    }
    if (libXtst == NULL) {
        throwNewExceptionByName(env, LINK_EXCEPTION, "Cannot load libXtst.so library");
        return;
    }

    XInitThreads();
    XSetErrorHandler(errorHandler);
}

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall0( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jlong param_5, jint param_6, jint param_7, jint param_8, jint param_9) {
    return (jlong)((void * ( *) (void *, void *, int, int, int, void *, int, int, int, int)) fnptr1234)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3, (int) param_4, (void *) param_5, (int) param_6, (int) param_7, (int) param_8, (int) param_9);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall1( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0) {
    return (jint)((int ( *) (void *)) fnptr1234)((void *) param_0);
}
JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall2( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jint param_1, jint param_2) {
    return (jlong)((long ( *) (void *, int, int)) fnptr1234)((void *) param_0, (int) param_1, (int) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall3( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    return (jint)((int ( *) (void *, int, int, long)) fnptr1234)((void *) param_0, (int) param_1, (int) param_2, (long) param_3);
}
JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall4( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4) {
    return (jlong)((void * ( *) (void *, int, int, int, int)) fnptr1234)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall5( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jlong param_1) {
    return (jint)((int ( *) (void *, long)) fnptr1234)((void *) param_0, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall6( JNIEnv *env, jobject self, jlong fnptr1234, jlong extension) {
    return (jint)((int ( *) (void *)) fnptr1234)((void *) extension);
}

void * (* p_nbridge_XGetSubImage) (void *, long, int, int, int, int, long, int, void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetSubImage( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jlong param_6, jint param_7, jlong param_8, jint param_9, jint param_10) {
    if (p_nbridge_XGetSubImage == NULL) {
        p_nbridge_XGetSubImage = (void * (*) (void *, long, int, int, int, int, long, int, void *, int, int)) FindFunction(libX11, "XGetSubImage");
    }
    return (jlong) (* p_nbridge_XGetSubImage)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (long) param_6, (int) param_7, (void *) param_8, (int) param_9, (int) param_10);
}

int (* p_nbridge_XAllocColor) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XAllocColor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XAllocColor == NULL) {
        p_nbridge_XAllocColor = (int (*) (void *, long, void *)) FindFunction(libX11, "XAllocColor");
    }
    return (jint) (* p_nbridge_XAllocColor)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* p_nbridge_XLookupString) (void *, void *, int, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XLookupString( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3, jlong param_4) {
    if (p_nbridge_XLookupString == NULL) {
        p_nbridge_XLookupString = (int (*) (void *, void *, int, void *, void *)) FindFunction(libX11, "XLookupString");
    }
    return (jint) (* p_nbridge_XLookupString)((void *) param_0, (void *) param_1, (int) param_2, (void *) param_3, (void *) param_4);
}

int (* p_nbridge_XGetWMNormalHints) (void *, long, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetWMNormalHints( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (p_nbridge_XGetWMNormalHints == NULL) {
        p_nbridge_XGetWMNormalHints = (int (*) (void *, long, void *, void *)) FindFunction(libX11, "XGetWMNormalHints");
    }
    return (jint) (* p_nbridge_XGetWMNormalHints)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3);
}

unsigned long  (* p_nbridge_XCreatePixmapCursor) (void *, long, long, void *, void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreatePixmapCursor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jint param_5, jint param_6) {
    if (p_nbridge_XCreatePixmapCursor == NULL) {
        p_nbridge_XCreatePixmapCursor = (unsigned long  (*) (void *, long, long, void *, void *, int, int)) FindFunction(libX11, "XCreatePixmapCursor");
    }
    return (jlong) (* p_nbridge_XCreatePixmapCursor)((void *) param_0, (long) param_1, (long) param_2, (void *) param_3, (void *) param_4, (int) param_5, (int) param_6);
}

int (* p_nbridge_XSetInputFocus) (void *, long, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetInputFocus( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3) {
    if (p_nbridge_XSetInputFocus == NULL) {
        p_nbridge_XSetInputFocus = (int (*) (void *, long, int, long)) FindFunction(libX11, "XSetInputFocus");
    }
    return (jint) (* p_nbridge_XSetInputFocus)((void *) param_0, (long) param_1, (int) param_2, (long) param_3);
}

void * (* p_nbridge_XOpenDisplay) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XOpenDisplay( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XOpenDisplay == NULL) {
        p_nbridge_XOpenDisplay = (void * (*) (void *)) FindFunction(libX11, "XOpenDisplay");
    }
    return (jlong) (* p_nbridge_XOpenDisplay)((void *) param_0);
}

int (* p_nbridge_XGrabServer) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGrabServer( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XGrabServer == NULL) {
        p_nbridge_XGrabServer = (int (*) (void *)) FindFunction(libX11, "XGrabServer");
    }
    return (jint) (* p_nbridge_XGrabServer)((void *) param_0);
}

unsigned long  (* p_nbridge_XCreateFontCursor) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateFontCursor( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XCreateFontCursor == NULL) {
        p_nbridge_XCreateFontCursor = (unsigned long  (*) (void *, int)) FindFunction(libX11, "XCreateFontCursor");
    }
    return (jlong) (* p_nbridge_XCreateFontCursor)((void *) param_0, (int) param_1);
}

void * (* p_nbridge_XCreateImage) (void *, void *, int, int, int, void *, int, int, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateImage( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jlong param_5, jint param_6, jint param_7, jint param_8, jint param_9) {
    if (p_nbridge_XCreateImage == NULL) {
        p_nbridge_XCreateImage = (void * (*) (void *, void *, int, int, int, void *, int, int, int, int)) FindFunction(libX11, "XCreateImage");
    }
    return (jlong) (* p_nbridge_XCreateImage)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3, (int) param_4, (void *) param_5, (int) param_6, (int) param_7, (int) param_8, (int) param_9);
}

int (* p_nbridge_XRestackWindows) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XRestackWindows( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (p_nbridge_XRestackWindows == NULL) {
        p_nbridge_XRestackWindows = (int (*) (void *, void *, int)) FindFunction(libX11, "XRestackWindows");
    }
    return (jint) (* p_nbridge_XRestackWindows)((void *) param_0, (void *) param_1, (int) param_2);
}

int (* p_nbridge_XDefaultDepth) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultDepth( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XDefaultDepth == NULL) {
        p_nbridge_XDefaultDepth = (int (*) (void *, int)) FindFunction(libX11, "XDefaultDepth");
    }
    return (jint) (* p_nbridge_XDefaultDepth)((void *) param_0, (int) param_1);
}

int (* p_nbridge_XFree) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFree( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XFree == NULL) {
        p_nbridge_XFree = (int (*) (void *)) FindFunction(libX11, "XFree");
    }
    return (jint) (* p_nbridge_XFree)((void *) param_0);
}

int (* p_nbridge_XMoveWindow) (void *, long, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XMoveWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3) {
    if (p_nbridge_XMoveWindow == NULL) {
        p_nbridge_XMoveWindow = (int (*) (void *, long, int, int)) FindFunction(libX11, "XMoveWindow");
    }
    return (jint) (* p_nbridge_XMoveWindow)((void *) param_0, (long) param_1, (int) param_2, (int) param_3);
}

int (* p_nbridge_XScreenCount) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XScreenCount( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XScreenCount == NULL) {
        p_nbridge_XScreenCount = (int (*) (void *)) FindFunction(libX11, "XScreenCount");
    }
    return (jint) (* p_nbridge_XScreenCount)((void *) param_0);
}

unsigned long  (* p_nbridge_XDefaultRootWindow) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultRootWindow( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XDefaultRootWindow == NULL) {
        p_nbridge_XDefaultRootWindow = (unsigned long  (*) (void *)) FindFunction(libX11, "XDefaultRootWindow");
    }
    return (jlong) (* p_nbridge_XDefaultRootWindow)((void *) param_0);
}

int (* p_nbridge_XResizeWindow) (void *, long, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XResizeWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3) {
    if (p_nbridge_XResizeWindow == NULL) {
        p_nbridge_XResizeWindow = (int (*) (void *, long, int, int)) FindFunction(libX11, "XResizeWindow");
    }
    return (jint) (* p_nbridge_XResizeWindow)((void *) param_0, (long) param_1, (int) param_2, (int) param_3);
}

int (* p_nbridge_XFillPolygon) (void *, long, void *, void *, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFillPolygon( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5, jint param_6) {
    if (p_nbridge_XFillPolygon == NULL) {
        p_nbridge_XFillPolygon = (int (*) (void *, long, void *, void *, int, int, int)) FindFunction(libX11, "XFillPolygon");
    }
    return (jint) (* p_nbridge_XFillPolygon)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (int) param_4, (int) param_5, (int) param_6);
}

int (* p_nbridge_XTestFakeMotionEvent) (void *, int, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTestFakeMotionEvent( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jlong param_4) {
    if (p_nbridge_XTestFakeMotionEvent == NULL) {
        p_nbridge_XTestFakeMotionEvent = (int (*) (void *, int, int, int, long)) FindFunction(libXtst, "XTestFakeMotionEvent");
    }
    return (jint) (* p_nbridge_XTestFakeMotionEvent)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (long) param_4);
}

void * (* p_nbridge_XCreateGC) (void *, long, long, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateGC( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (p_nbridge_XCreateGC == NULL) {
        p_nbridge_XCreateGC = (void * (*) (void *, long, long, void *)) FindFunction(libX11, "XCreateGC");
    }
    return (jlong) (* p_nbridge_XCreateGC)((void *) param_0, (long) param_1, (long) param_2, (void *) param_3);
}

int (* p_nbridge_XTestFakeKeyEvent) (void *, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTestFakeKeyEvent( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    if (p_nbridge_XTestFakeKeyEvent == NULL) {
        p_nbridge_XTestFakeKeyEvent = (int (*) (void *, int, int, long)) FindFunction(libXtst, "XTestFakeKeyEvent");
    }
    return (jint) (* p_nbridge_XTestFakeKeyEvent)((void *) param_0, (int) param_1, (int) param_2, (long) param_3);
}

int (* p_nbridge_XCopyArea) (void *, long, long, void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCopyArea( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8, jint param_9) {
    if (p_nbridge_XCopyArea == NULL) {
        p_nbridge_XCopyArea = (int (*) (void *, long, long, void *, int, int, int, int, int, int)) FindFunction(libX11, "XCopyArea");
    }
    return (jint) (* p_nbridge_XCopyArea)((void *) param_0, (long) param_1, (long) param_2, (void *) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8, (int) param_9);
}

unsigned long  (* p_nbridge_XKeycodeToKeysym) (void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XKeycodeToKeysym( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2) {
    if (p_nbridge_XKeycodeToKeysym == NULL) {
        p_nbridge_XKeycodeToKeysym = (unsigned long  (*) (void *, int, int)) FindFunction(libX11, "XKeycodeToKeysym");
    }
    return (jlong) (* p_nbridge_XKeycodeToKeysym)((void *) param_0, (int) param_1, (int) param_2);
}

int (* p_nbridge_XImageByteOrder) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XImageByteOrder( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XImageByteOrder == NULL) {
        p_nbridge_XImageByteOrder = (int (*) (void *)) FindFunction(libX11, "XImageByteOrder");
    }
    return (jint) (* p_nbridge_XImageByteOrder)((void *) param_0);
}

int (* p_nbridge_XDefaultScreen) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultScreen( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XDefaultScreen == NULL) {
        p_nbridge_XDefaultScreen = (int (*) (void *)) FindFunction(libX11, "XDefaultScreen");
    }
    return (jint) (* p_nbridge_XDefaultScreen)((void *) param_0);
}

int (* p_nbridge_XConvertSelection) (void *, long, long, long, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XConvertSelection( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5) {
    if (p_nbridge_XConvertSelection == NULL) {
        p_nbridge_XConvertSelection = (int (*) (void *, long, long, long, long, long)) FindFunction(libX11, "XConvertSelection");
    }
    return (jint) (* p_nbridge_XConvertSelection)((void *) param_0, (long) param_1, (long) param_2, (long) param_3, (long) param_4, (long) param_5);
}

unsigned long  (* p_nbridge_XGetSelectionOwner) (void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetSelectionOwner( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XGetSelectionOwner == NULL) {
        p_nbridge_XGetSelectionOwner = (unsigned long  (*) (void *, long)) FindFunction(libX11, "XGetSelectionOwner");
    }
    return (jlong) (* p_nbridge_XGetSelectionOwner)((void *) param_0, (long) param_1);
}

int (* p_nbridge_XFillRectangles) (void *, long, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFillRectangles( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4) {
    if (p_nbridge_XFillRectangles == NULL) {
        p_nbridge_XFillRectangles = (int (*) (void *, long, void *, void *, int)) FindFunction(libX11, "XFillRectangles");
    }
    return (jint) (* p_nbridge_XFillRectangles)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (int) param_4);
}

int (* p_nbridge_XSetIconName) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetIconName( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XSetIconName == NULL) {
        p_nbridge_XSetIconName = (int (*) (void *, long, void *)) FindFunction(libX11, "XSetIconName");
    }
    return (jint) (* p_nbridge_XSetIconName)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* p_nbridge_XDisplayWidthMM) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayWidthMM( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XDisplayWidthMM == NULL) {
        p_nbridge_XDisplayWidthMM = (int (*) (void *, int)) FindFunction(libX11, "XDisplayWidthMM");
    }
    return (jint) (* p_nbridge_XDisplayWidthMM)((void *) param_0, (int) param_1);
}

int (* p_nbridge_XMapWindow) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XMapWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XMapWindow == NULL) {
        p_nbridge_XMapWindow = (int (*) (void *, long)) FindFunction(libX11, "XMapWindow");
    }
    return (jint) (* p_nbridge_XMapWindow)((void *) param_0, (long) param_1);
}

int (* p_nbridge_XParseColor) (void *, long, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XParseColor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (p_nbridge_XParseColor == NULL) {
        p_nbridge_XParseColor = (int (*) (void *, long, void *, void *)) FindFunction(libX11, "XParseColor");
    }
    return (jint) (* p_nbridge_XParseColor)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3);
}

int (* p_nbridge_XTestFakeButtonEvent) (void *, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTestFakeButtonEvent( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    if (p_nbridge_XTestFakeButtonEvent == NULL) {
        p_nbridge_XTestFakeButtonEvent = (int (*) (void *, int, int, long)) FindFunction(libXtst, "XTestFakeButtonEvent");
    }
    return (jint) (* p_nbridge_XTestFakeButtonEvent)((void *) param_0, (int) param_1, (int) param_2, (long) param_3);
}

int (* p_nbridge_XGetWindowProperty) (void *, long, long, long, long, int, long, void *, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetWindowProperty( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jint param_5, jlong param_6, jlong param_7, jlong param_8, jlong param_9, jlong param_10, jlong param_11) {
    if (p_nbridge_XGetWindowProperty == NULL) {
        p_nbridge_XGetWindowProperty = (int (*) (void *, long, long, long, long, int, long, void *, void *, void *, void *, void *)) FindFunction(libX11, "XGetWindowProperty");
    }
    return (jint) (* p_nbridge_XGetWindowProperty)((void *) param_0, (long) param_1, (long) param_2, (long) param_3, (long) param_4, (int) param_5, (long) param_6, (void *) param_7, (void *) param_8, (void *) param_9, (void *) param_10, (void *) param_11);
}

int (* p_nbridge_XIconifyWindow) (void *, long, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XIconifyWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (p_nbridge_XIconifyWindow == NULL) {
        p_nbridge_XIconifyWindow = (int (*) (void *, long, int)) FindFunction(libX11, "XIconifyWindow");
    }
    return (jint) (* p_nbridge_XIconifyWindow)((void *) param_0, (long) param_1, (int) param_2);
}

void * (* p_nbridge_XAllocWMHints) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XAllocWMHints( JNIEnv *env, jobject self) {
    if (p_nbridge_XAllocWMHints == NULL) {
        p_nbridge_XAllocWMHints = (void * (*) (void)) FindFunction(libX11, "XAllocWMHints");
    }
    return (jlong) (* p_nbridge_XAllocWMHints)();
}

int (* p_nbridge_XGetRGBColormaps) (void *, long, void *, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetRGBColormaps( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4) {
    if (p_nbridge_XGetRGBColormaps == NULL) {
        p_nbridge_XGetRGBColormaps = (int (*) (void *, long, void *, void *, long)) FindFunction(libX11, "XGetRGBColormaps");
    }
    return (jint) (* p_nbridge_XGetRGBColormaps)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (long) param_4);
}

void * (* p_nbridge_XGetVisualInfo) (void *, long, void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetVisualInfo( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (p_nbridge_XGetVisualInfo == NULL) {
        p_nbridge_XGetVisualInfo = (void * (*) (void *, long, void *, void *)) FindFunction(libX11, "XGetVisualInfo");
    }
    return (jlong) (* p_nbridge_XGetVisualInfo)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3);
}

int (* p_nbridge_XSetFunction) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetFunction( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (p_nbridge_XSetFunction == NULL) {
        p_nbridge_XSetFunction = (int (*) (void *, void *, int)) FindFunction(libX11, "XSetFunction");
    }
    return (jint) (* p_nbridge_XSetFunction)((void *) param_0, (void *) param_1, (int) param_2);
}

int (* p_nbridge_XDestroyWindow) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDestroyWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XDestroyWindow == NULL) {
        p_nbridge_XDestroyWindow = (int (*) (void *, long)) FindFunction(libX11, "XDestroyWindow");
    }
    return (jint) (* p_nbridge_XDestroyWindow)((void *) param_0, (long) param_1);
}

unsigned long  (* p_nbridge_XRootWindow) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XRootWindow( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XRootWindow == NULL) {
        p_nbridge_XRootWindow = (unsigned long  (*) (void *, int)) FindFunction(libX11, "XRootWindow");
    }
    return (jlong) (* p_nbridge_XRootWindow)((void *) param_0, (int) param_1);
}

int (* p_nbridge_XLowerWindow) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XLowerWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XLowerWindow == NULL) {
        p_nbridge_XLowerWindow = (int (*) (void *, long)) FindFunction(libX11, "XLowerWindow");
    }
    return (jint) (* p_nbridge_XLowerWindow)((void *) param_0, (long) param_1);
}

void * (* p_nbridge_XGetAtomName) (void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetAtomName( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XGetAtomName == NULL) {
        p_nbridge_XGetAtomName = (void * (*) (void *, long)) FindFunction(libX11, "XGetAtomName");
    }
    return (jlong) (* p_nbridge_XGetAtomName)((void *) param_0, (long) param_1);
}

int (* p_nbridge_XSelectInput) (void *, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSelectInput( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XSelectInput == NULL) {
        p_nbridge_XSelectInput = (int (*) (void *, long, long)) FindFunction(libX11, "XSelectInput");
    }
    return (jint) (* p_nbridge_XSelectInput)((void *) param_0, (long) param_1, (long) param_2);
}

void * (* p_nbridge_XGetImage) (void *, long, int, int, int, int, long, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetImage( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jlong param_6, jint param_7) {
    if (p_nbridge_XGetImage == NULL) {
        p_nbridge_XGetImage = (void * (*) (void *, long, int, int, int, int, long, int)) FindFunction(libX11, "XGetImage");
    }
    return (jlong) (* p_nbridge_XGetImage)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (long) param_6, (int) param_7);
}

int (* p_nbridge_XDrawRectangle) (void *, long, void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDrawRectangle( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6) {
    if (p_nbridge_XDrawRectangle == NULL) {
        p_nbridge_XDrawRectangle = (int (*) (void *, long, void *, int, int, int, int)) FindFunction(libX11, "XDrawRectangle");
    }
    return (jint) (* p_nbridge_XDrawRectangle)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6);
}

int (* p_nbridge_XUngrabPointer) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XUngrabPointer( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XUngrabPointer == NULL) {
        p_nbridge_XUngrabPointer = (int (*) (void *, long)) FindFunction(libX11, "XUngrabPointer");
    }
    return (jint) (* p_nbridge_XUngrabPointer)((void *) param_0, (long) param_1);
}

int (* p_nbridge_XSetForeground) (void *, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetForeground( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XSetForeground == NULL) {
        p_nbridge_XSetForeground = (int (*) (void *, void *, long)) FindFunction(libX11, "XSetForeground");
    }
    return (jint) (* p_nbridge_XSetForeground)((void *) param_0, (void *) param_1, (long) param_2);
}

int (* p_nbridge_XMapRaised) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XMapRaised( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XMapRaised == NULL) {
        p_nbridge_XMapRaised = (int (*) (void *, long)) FindFunction(libX11, "XMapRaised");
    }
    return (jint) (* p_nbridge_XMapRaised)((void *) param_0, (long) param_1);
}

long (* p_nbridge_XAllPlanes) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XAllPlanes( JNIEnv *env, jobject self) {
    if (p_nbridge_XAllPlanes == NULL) {
        p_nbridge_XAllPlanes = (long (*) (void)) FindFunction(libX11, "XAllPlanes");
    }
    return (jlong) (* p_nbridge_XAllPlanes)();
}

unsigned char  (* p_nbridge_XKeysymToKeycode) (void *, long) = NULL;

JNIEXPORT jbyte  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XKeysymToKeycode( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XKeysymToKeycode == NULL) {
        p_nbridge_XKeysymToKeycode = (unsigned char  (*) (void *, long)) FindFunction(libX11, "XKeysymToKeycode");
    }
    return (jbyte) (* p_nbridge_XKeysymToKeycode)((void *) param_0, (long) param_1);
}

int (* p_nbridge_XQueryPointer) (void *, long, void *, void *, void *, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryPointer( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5, jlong param_6, jlong param_7, jlong param_8) {
    if (p_nbridge_XQueryPointer == NULL) {
        p_nbridge_XQueryPointer = (int (*) (void *, long, void *, void *, void *, void *, void *, void *, void *)) FindFunction(libX11, "XQueryPointer");
    }
    return (jint) (* p_nbridge_XQueryPointer)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4, (void *) param_5, (void *) param_6, (void *) param_7, (void *) param_8);
}

int (* p_nbridge_XDisplayWidth) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayWidth( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XDisplayWidth == NULL) {
        p_nbridge_XDisplayWidth = (int (*) (void *, int)) FindFunction(libX11, "XDisplayWidth");
    }
    return (jint) (* p_nbridge_XDisplayWidth)((void *) param_0, (int) param_1);
}

int (* p_nbridge_XDisplayHeightMM) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayHeightMM( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XDisplayHeightMM == NULL) {
        p_nbridge_XDisplayHeightMM = (int (*) (void *, int)) FindFunction(libX11, "XDisplayHeightMM");
    }
    return (jint) (* p_nbridge_XDisplayHeightMM)((void *) param_0, (int) param_1);
}

int (* p_nbridge_XChangeProperty) (void *, long, long, long, int, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XChangeProperty( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5, jlong param_6, jint param_7) {
    if (p_nbridge_XChangeProperty == NULL) {
        p_nbridge_XChangeProperty = (int (*) (void *, long, long, long, int, int, void *, int)) FindFunction(libX11, "XChangeProperty");
    }
    return (jint) (* p_nbridge_XChangeProperty)((void *) param_0, (long) param_1, (long) param_2, (long) param_3, (int) param_4, (int) param_5, (void *) param_6, (int) param_7);
}

int (* p_nbridge_XCheckTypedEvent) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCheckTypedEvent( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (p_nbridge_XCheckTypedEvent == NULL) {
        p_nbridge_XCheckTypedEvent = (int (*) (void *, int, void *)) FindFunction(libX11, "XCheckTypedEvent");
    }
    return (jint) (* p_nbridge_XCheckTypedEvent)((void *) param_0, (int) param_1, (void *) param_2);
}

int (* p_nbridge_XPutImage) (void *, long, void *, void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XPutImage( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8, jint param_9) {
    if (p_nbridge_XPutImage == NULL) {
        p_nbridge_XPutImage = (int (*) (void *, long, void *, void *, int, int, int, int, int, int)) FindFunction(libX11, "XPutImage");
    }
    return (jint) (* p_nbridge_XPutImage)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8, (int) param_9);
}

int (* p_nbridge_XmuLookupStandardColormap) (void *, int, long, int, long, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XmuLookupStandardColormap( JNIEnv *env, jobject self, jlong dpy, jint screen, jlong visualid, jint depth, jlong property, jint replace, jint retain) {
    if (p_nbridge_XmuLookupStandardColormap == NULL) {
        p_nbridge_XmuLookupStandardColormap = (int (*) (void *, int, long, int, long, int, int)) FindFunction(libXmu, "XmuLookupStandardColormap");
    }
    return (jint) (* p_nbridge_XmuLookupStandardColormap)((void *) dpy, (int) screen, (long) visualid, (int) depth, (long) property, (int) replace, (int) retain);
}

int (* p_nbridge_XStoreName) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XStoreName( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XStoreName == NULL) {
        p_nbridge_XStoreName = (int (*) (void *, long, void *)) FindFunction(libX11, "XStoreName");
    }
    return (jint) (* p_nbridge_XStoreName)((void *) param_0, (long) param_1, (void *) param_2);
}

void * (* p_nbridge_XAllocStandardColormap) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XAllocStandardColormap( JNIEnv *env, jobject self) {
    if (p_nbridge_XAllocStandardColormap == NULL) {
        p_nbridge_XAllocStandardColormap = (void * (*) (void)) FindFunction(libX11, "XAllocStandardColormap");
    }
    return (jlong) (* p_nbridge_XAllocStandardColormap)();
}

int (* p_nbridge_XSetClipRectangles) (void *, void *, int, int, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetClipRectangles( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jlong param_4, jint param_5, jint param_6) {
    if (p_nbridge_XSetClipRectangles == NULL) {
        p_nbridge_XSetClipRectangles = (int (*) (void *, void *, int, int, void *, int, int)) FindFunction(libX11, "XSetClipRectangles");
    }
    return (jint) (* p_nbridge_XSetClipRectangles)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3, (void *) param_4, (int) param_5, (int) param_6);
}

int (* p_nbridge_XChangeWindowAttributes) (void *, long, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XChangeWindowAttributes( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (p_nbridge_XChangeWindowAttributes == NULL) {
        p_nbridge_XChangeWindowAttributes = (int (*) (void *, long, long, void *)) FindFunction(libX11, "XChangeWindowAttributes");
    }
    return (jint) (* p_nbridge_XChangeWindowAttributes)((void *) param_0, (long) param_1, (long) param_2, (void *) param_3);
}

void * (* p_nbridge_XDisplayString) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayString( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XDisplayString == NULL) {
        p_nbridge_XDisplayString = (void * (*) (void *)) FindFunction(libX11, "XDisplayString");
    }
    return (jlong) (* p_nbridge_XDisplayString)((void *) param_0);
}

int (* p_nbridge_XSetFillRule) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetFillRule( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (p_nbridge_XSetFillRule == NULL) {
        p_nbridge_XSetFillRule = (int (*) (void *, void *, int)) FindFunction(libX11, "XSetFillRule");
    }
    return (jint) (* p_nbridge_XSetFillRule)((void *) param_0, (void *) param_1, (int) param_2);
}

int (* p_nbridge_XInitImage) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XInitImage( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XInitImage == NULL) {
        p_nbridge_XInitImage = (int (*) (void *)) FindFunction(libX11, "XInitImage");
    }
    return (jint) (* p_nbridge_XInitImage)((void *) param_0);
}

int (* p_nbridge_XSetDashes) (void *, void *, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetDashes( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3, jint param_4) {
    if (p_nbridge_XSetDashes == NULL) {
        p_nbridge_XSetDashes = (int (*) (void *, void *, int, void *, int)) FindFunction(libX11, "XSetDashes");
    }
    return (jint) (* p_nbridge_XSetDashes)((void *) param_0, (void *) param_1, (int) param_2, (void *) param_3, (int) param_4);
}

int (* p_nbridge_XSetWMHints) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetWMHints( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XSetWMHints == NULL) {
        p_nbridge_XSetWMHints = (int (*) (void *, long, void *)) FindFunction(libX11, "XSetWMHints");
    }
    return (jint) (* p_nbridge_XSetWMHints)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* p_nbridge_XPending) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XPending( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XPending == NULL) {
        p_nbridge_XPending = (int (*) (void *)) FindFunction(libX11, "XPending");
    }
    return (jint) (* p_nbridge_XPending)((void *) param_0);
}

unsigned long  (* p_nbridge_XVisualIDFromVisual) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XVisualIDFromVisual( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XVisualIDFromVisual == NULL) {
        p_nbridge_XVisualIDFromVisual = (unsigned long  (*) (void *)) FindFunction(libX11, "XVisualIDFromVisual");
    }
    return (jlong) (* p_nbridge_XVisualIDFromVisual)((void *) param_0);
}

int (* p_nbridge_XSendEvent) (void *, long, int, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSendEvent( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3, jlong param_4) {
    if (p_nbridge_XSendEvent == NULL) {
        p_nbridge_XSendEvent = (int (*) (void *, long, int, long, void *)) FindFunction(libX11, "XSendEvent");
    }
    return (jint) (* p_nbridge_XSendEvent)((void *) param_0, (long) param_1, (int) param_2, (long) param_3, (void *) param_4);
}

int (* p_nbridge_XDrawLine) (void *, long, void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDrawLine( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6) {
    if (p_nbridge_XDrawLine == NULL) {
        p_nbridge_XDrawLine = (int (*) (void *, long, void *, int, int, int, int)) FindFunction(libX11, "XDrawLine");
    }
    return (jint) (* p_nbridge_XDrawLine)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6);
}

unsigned long  (* p_nbridge_XCreatePixmap) (void *, long, int, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreatePixmap( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4) {
    if (p_nbridge_XCreatePixmap == NULL) {
        p_nbridge_XCreatePixmap = (unsigned long  (*) (void *, long, int, int, int)) FindFunction(libX11, "XCreatePixmap");
    }
    return (jlong) (* p_nbridge_XCreatePixmap)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4);
}

int (* p_nbridge_XDefineCursor) (void *, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefineCursor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XDefineCursor == NULL) {
        p_nbridge_XDefineCursor = (int (*) (void *, long, long)) FindFunction(libX11, "XDefineCursor");
    }
    return (jint) (* p_nbridge_XDefineCursor)((void *) param_0, (long) param_1, (long) param_2);
}

int (* p_nbridge_XDrawLines) (void *, long, void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDrawLines( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5) {
    if (p_nbridge_XDrawLines == NULL) {
        p_nbridge_XDrawLines = (int (*) (void *, long, void *, void *, int, int)) FindFunction(libX11, "XDrawLines");
    }
    return (jint) (* p_nbridge_XDrawLines)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (int) param_4, (int) param_5);
}

void (* p_nbridge_XSetWMNormalHints) (void *, long, void *) = NULL;

JNIEXPORT void  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetWMNormalHints( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XSetWMNormalHints == NULL) {
        p_nbridge_XSetWMNormalHints = (void (*) (void *, long, void *)) FindFunction(libX11, "XSetWMNormalHints");
    }
    (* p_nbridge_XSetWMNormalHints)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* p_nbridge_XTranslateCoordinates) (void *, long, long, int, int, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTranslateCoordinates( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jlong param_5, jlong param_6, jlong param_7) {
    if (p_nbridge_XTranslateCoordinates == NULL) {
        p_nbridge_XTranslateCoordinates = (int (*) (void *, long, long, int, int, void *, void *, void *)) FindFunction(libX11, "XTranslateCoordinates");
    }
    return (jint) (* p_nbridge_XTranslateCoordinates)((void *) param_0, (long) param_1, (long) param_2, (int) param_3, (int) param_4, (void *) param_5, (void *) param_6, (void *) param_7);
}

int (* p_nbridge_XSetStandardProperties) (void *, long, void *, void *, long, void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetStandardProperties( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5, jint param_6, jlong param_7) {
    if (p_nbridge_XSetStandardProperties == NULL) {
        p_nbridge_XSetStandardProperties = (int (*) (void *, long, void *, void *, long, void *, int, void *)) FindFunction(libX11, "XSetStandardProperties");
    }
    return (jint) (* p_nbridge_XSetStandardProperties)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5, (int) param_6, (void *) param_7);
}

unsigned long  (* p_nbridge_XDefaultColormap) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultColormap( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XDefaultColormap == NULL) {
        p_nbridge_XDefaultColormap = (unsigned long  (*) (void *, int)) FindFunction(libX11, "XDefaultColormap");
    }
    return (jlong) (* p_nbridge_XDefaultColormap)((void *) param_0, (int) param_1);
}

void * (* p_nbridge_XAllocSizeHints) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XAllocSizeHints( JNIEnv *env, jobject self) {
    if (p_nbridge_XAllocSizeHints == NULL) {
        p_nbridge_XAllocSizeHints = (void * (*) (void)) FindFunction(libX11, "XAllocSizeHints");
    }
    return (jlong) (* p_nbridge_XAllocSizeHints)();
}

int (* p_nbridge_XFlush) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFlush( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XFlush == NULL) {
        p_nbridge_XFlush = (int (*) (void *)) FindFunction(libX11, "XFlush");
    }
    return (jint) (* p_nbridge_XFlush)((void *) param_0);
}

int (* p_nbridge_XGetWindowAttributes) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetWindowAttributes( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XGetWindowAttributes == NULL) {
        p_nbridge_XGetWindowAttributes = (int (*) (void *, long, void *)) FindFunction(libX11, "XGetWindowAttributes");
    }
    return (jint) (* p_nbridge_XGetWindowAttributes)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* p_nbridge_XFreePixmap) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFreePixmap( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XFreePixmap == NULL) {
        p_nbridge_XFreePixmap = (int (*) (void *, long)) FindFunction(libX11, "XFreePixmap");
    }
    return (jint) (* p_nbridge_XFreePixmap)((void *) param_0, (long) param_1);
}

int (* p_nbridge_XGetGeometry) (void *, long, void *, void *, void *, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetGeometry( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5, jlong param_6, jlong param_7, jlong param_8) {
    if (p_nbridge_XGetGeometry == NULL) {
        p_nbridge_XGetGeometry = (int (*) (void *, long, void *, void *, void *, void *, void *, void *, void *)) FindFunction(libX11, "XGetGeometry");
    }
    return (jint) (* p_nbridge_XGetGeometry)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4, (void *) param_5, (void *) param_6, (void *) param_7, (void *) param_8);
}

int (* p_nbridge_XQueryColors) (void *, long, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryColors( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3) {
    if (p_nbridge_XQueryColors == NULL) {
        p_nbridge_XQueryColors = (int (*) (void *, long, void *, int)) FindFunction(libX11, "XQueryColors");
    }
    return (jint) (* p_nbridge_XQueryColors)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3);
}

int (* p_nbridge_XQueryBestCursor) (void *, long, int, int, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryBestCursor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jlong param_4, jlong param_5) {
    if (p_nbridge_XQueryBestCursor == NULL) {
        p_nbridge_XQueryBestCursor = (int (*) (void *, long, int, int, void *, void *)) FindFunction(libX11, "XQueryBestCursor");
    }
    return (jint) (* p_nbridge_XQueryBestCursor)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (void *) param_4, (void *) param_5);
}

int (* p_nbridge_XNextEvent) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XNextEvent( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XNextEvent == NULL) {
        p_nbridge_XNextEvent = (int (*) (void *, void *)) FindFunction(libX11, "XNextEvent");
    }
    return (jint) (* p_nbridge_XNextEvent)((void *) param_0, (void *) param_1);
}

void * (* p_nbridge_XDefaultVisual) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultVisual( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XDefaultVisual == NULL) {
        p_nbridge_XDefaultVisual = (void * (*) (void *, int)) FindFunction(libX11, "XDefaultVisual");
    }
    return (jlong) (* p_nbridge_XDefaultVisual)((void *) param_0, (int) param_1);
}

unsigned long  (* p_nbridge_XCreateWindow) (void *, long, int, int, int, int, int, int, int, void *, long, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8, jlong param_9, jlong param_10, jlong param_11) {
    if (p_nbridge_XCreateWindow == NULL) {
        p_nbridge_XCreateWindow = (unsigned long  (*) (void *, long, int, int, int, int, int, int, int, void *, long, void *)) FindFunction(libX11, "XCreateWindow");
    }
    return (jlong) (* p_nbridge_XCreateWindow)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8, (void *) param_9, (long) param_10, (void *) param_11);
}

int (* p_nbridge_XFreeGC) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFreeGC( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XFreeGC == NULL) {
        p_nbridge_XFreeGC = (int (*) (void *, void *)) FindFunction(libX11, "XFreeGC");
    }
    return (jint) (* p_nbridge_XFreeGC)((void *) param_0, (void *) param_1);
}

int (* p_nbridge_XBitmapPad) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XBitmapPad( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XBitmapPad == NULL) {
        p_nbridge_XBitmapPad = (int (*) (void *)) FindFunction(libX11, "XBitmapPad");
    }
    return (jint) (* p_nbridge_XBitmapPad)((void *) param_0);
}

unsigned long  (* p_nbridge_XCreateColormap) (void *, long, void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateColormap( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3) {
    if (p_nbridge_XCreateColormap == NULL) {
        p_nbridge_XCreateColormap = (unsigned long  (*) (void *, long, void *, int)) FindFunction(libX11, "XCreateColormap");
    }
    return (jlong) (* p_nbridge_XCreateColormap)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3);
}

int (* p_nbridge_XGetPointerMapping) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetPointerMapping( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (p_nbridge_XGetPointerMapping == NULL) {
        p_nbridge_XGetPointerMapping = (int (*) (void *, void *, int)) FindFunction(libX11, "XGetPointerMapping");
    }
    return (jint) (* p_nbridge_XGetPointerMapping)((void *) param_0, (void *) param_1, (int) param_2);
}

void * (* p_nbridge_XSetErrorHandler) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetErrorHandler( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XSetErrorHandler == NULL) {
        p_nbridge_XSetErrorHandler = (void * (*) (void *)) FindFunction(libX11, "XSetErrorHandler");
    }
    return (jlong) (* p_nbridge_XSetErrorHandler)((void *) param_0);
}

int (* p_nbridge_XSetTransientForHint) (void *, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetTransientForHint( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XSetTransientForHint == NULL) {
        p_nbridge_XSetTransientForHint = (int (*) (void *, long, long)) FindFunction(libX11, "XSetTransientForHint");
    }
    return (jint) (* p_nbridge_XSetTransientForHint)((void *) param_0, (long) param_1, (long) param_2);
}

int (* p_nbridge_XFreeCursor) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFreeCursor( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XFreeCursor == NULL) {
        p_nbridge_XFreeCursor = (int (*) (void *, long)) FindFunction(libX11, "XFreeCursor");
    }
    return (jint) (* p_nbridge_XFreeCursor)((void *) param_0, (long) param_1);
}

int (* p_nbridge_XFillRectangle) (void *, long, void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFillRectangle( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6) {
    if (p_nbridge_XFillRectangle == NULL) {
        p_nbridge_XFillRectangle = (int (*) (void *, long, void *, int, int, int, int)) FindFunction(libX11, "XFillRectangle");
    }
    return (jint) (* p_nbridge_XFillRectangle)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6);
}

int (* p_nbridge_XSetWMProtocols) (void *, long, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetWMProtocols( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3) {
    if (p_nbridge_XSetWMProtocols == NULL) {
        p_nbridge_XSetWMProtocols = (int (*) (void *, long, void *, int)) FindFunction(libX11, "XSetWMProtocols");
    }
    return (jint) (* p_nbridge_XSetWMProtocols)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3);
}

int (* p_nbridge_XCloseDisplay) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCloseDisplay( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XCloseDisplay == NULL) {
        p_nbridge_XCloseDisplay = (int (*) (void *)) FindFunction(libX11, "XCloseDisplay");
    }
    return (jint) (* p_nbridge_XCloseDisplay)((void *) param_0);
}

int (* p_nbridge_XQueryTree) (void *, long, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryTree( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5) {
    if (p_nbridge_XQueryTree == NULL) {
        p_nbridge_XQueryTree = (int (*) (void *, long, void *, void *, void *, void *)) FindFunction(libX11, "XQueryTree");
    }
    return (jint) (* p_nbridge_XQueryTree)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4, (void *) param_5);
}

int (* p_nbridge_XGetInputFocus) (void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetInputFocus( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XGetInputFocus == NULL) {
        p_nbridge_XGetInputFocus = (int (*) (void *, void *, void *)) FindFunction(libX11, "XGetInputFocus");
    }
    return (jint) (* p_nbridge_XGetInputFocus)((void *) param_0, (void *) param_1, (void *) param_2);
}

unsigned long  (* p_nbridge_XInternAtom) (void *, void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XInternAtom( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (p_nbridge_XInternAtom == NULL) {
        p_nbridge_XInternAtom = (unsigned long  (*) (void *, void *, int)) FindFunction(libX11, "XInternAtom");
    }
    return (jlong) (* p_nbridge_XInternAtom)((void *) param_0, (void *) param_1, (int) param_2);
}

int (* p_nbridge_XSetClipOrigin) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetClipOrigin( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3) {
    if (p_nbridge_XSetClipOrigin == NULL) {
        p_nbridge_XSetClipOrigin = (int (*) (void *, void *, int, int)) FindFunction(libX11, "XSetClipOrigin");
    }
    return (jint) (* p_nbridge_XSetClipOrigin)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3);
}

int (* p_nbridge_XTestQueryExtension) (void *, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTestQueryExtension( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4) {
    if (p_nbridge_XTestQueryExtension == NULL) {
        p_nbridge_XTestQueryExtension = (int (*) (void *, void *, void *, void *, void *)) FindFunction(libXtst, "XTestQueryExtension");
    }
    return (jint) (* p_nbridge_XTestQueryExtension)((void *) param_0, (void *) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}

unsigned long  (* p_nbridge_XCreateSimpleWindow) (void *, long, int, int, int, int, int, long, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateSimpleWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6, jlong param_7, jlong param_8) {
    if (p_nbridge_XCreateSimpleWindow == NULL) {
        p_nbridge_XCreateSimpleWindow = (unsigned long  (*) (void *, long, int, int, int, int, int, long, long)) FindFunction(libX11, "XCreateSimpleWindow");
    }
    return (jlong) (* p_nbridge_XCreateSimpleWindow)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (long) param_7, (long) param_8);
}

int (* p_nbridge_XUngrabServer) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XUngrabServer( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_XUngrabServer == NULL) {
        p_nbridge_XUngrabServer = (int (*) (void *)) FindFunction(libX11, "XUngrabServer");
    }
    return (jint) (* p_nbridge_XUngrabServer)((void *) param_0);
}

int (* p_nbridge_XFillArc) (void *, long, void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFillArc( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8) {
    if (p_nbridge_XFillArc == NULL) {
        p_nbridge_XFillArc = (int (*) (void *, long, void *, int, int, int, int, int, int)) FindFunction(libX11, "XFillArc");
    }
    return (jint) (* p_nbridge_XFillArc)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8);
}

void * (* p_nbridge_XScreenOfDisplay) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XScreenOfDisplay( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XScreenOfDisplay == NULL) {
        p_nbridge_XScreenOfDisplay = (void * (*) (void *, int)) FindFunction(libX11, "XScreenOfDisplay");
    }
    return (jlong) (* p_nbridge_XScreenOfDisplay)((void *) param_0, (int) param_1);
}

int (* p_nbridge_XSetClipMask) (void *, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetClipMask( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XSetClipMask == NULL) {
        p_nbridge_XSetClipMask = (int (*) (void *, void *, long)) FindFunction(libX11, "XSetClipMask");
    }
    return (jint) (* p_nbridge_XSetClipMask)((void *) param_0, (void *) param_1, (long) param_2);
}

int (* p_nbridge_XChangeGC) (void *, void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XChangeGC( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (p_nbridge_XChangeGC == NULL) {
        p_nbridge_XChangeGC = (int (*) (void *, void *, long, void *)) FindFunction(libX11, "XChangeGC");
    }
    return (jint) (* p_nbridge_XChangeGC)((void *) param_0, (void *) param_1, (long) param_2, (void *) param_3);
}

unsigned long  (* p_nbridge_XCreateBitmapFromData) (void *, long, void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateBitmapFromData( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4) {
    if (p_nbridge_XCreateBitmapFromData == NULL) {
        p_nbridge_XCreateBitmapFromData = (unsigned long  (*) (void *, long, void *, int, int)) FindFunction(libX11, "XCreateBitmapFromData");
    }
    return (jlong) (* p_nbridge_XCreateBitmapFromData)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4);
}

int (* p_nbridge_XDeleteProperty) (void *, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDeleteProperty( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XDeleteProperty == NULL) {
        p_nbridge_XDeleteProperty = (int (*) (void *, long, long)) FindFunction(libX11, "XDeleteProperty");
    }
    return (jint) (* p_nbridge_XDeleteProperty)((void *) param_0, (long) param_1, (long) param_2);
}

void * (* p_nbridge_XGetWMHints) (void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetWMHints( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XGetWMHints == NULL) {
        p_nbridge_XGetWMHints = (void * (*) (void *, long)) FindFunction(libX11, "XGetWMHints");
    }
    return (jlong) (* p_nbridge_XGetWMHints)((void *) param_0, (long) param_1);
}

int (* p_nbridge_XSetSelectionOwner) (void *, long, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetSelectionOwner( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (p_nbridge_XSetSelectionOwner == NULL) {
        p_nbridge_XSetSelectionOwner = (int (*) (void *, long, long, long)) FindFunction(libX11, "XSetSelectionOwner");
    }
    return (jint) (* p_nbridge_XSetSelectionOwner)((void *) param_0, (long) param_1, (long) param_2, (long) param_3);
}

int (* p_nbridge_XDestroyImage) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDestroyImage( JNIEnv *env, jobject self, jlong ximage) {
    if (p_nbridge_XDestroyImage == NULL) {
        p_nbridge_XDestroyImage = (int (*) (void *)) FindFunction(libX11, "XDestroyImage");
    }
    return (jint) (* p_nbridge_XDestroyImage)((void *) ximage);
}

int (* p_nbridge_XDrawArc) (void *, long, void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDrawArc( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8) {
    if (p_nbridge_XDrawArc == NULL) {
        p_nbridge_XDrawArc = (int (*) (void *, long, void *, int, int, int, int, int, int)) FindFunction(libX11, "XDrawArc");
    }
    return (jint) (* p_nbridge_XDrawArc)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8);
}

int (* p_nbridge_XGrabPointer) (void *, long, int, int, int, int, long, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGrabPointer( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jlong param_6, jlong param_7, jlong param_8) {
    if (p_nbridge_XGrabPointer == NULL) {
        p_nbridge_XGrabPointer = (int (*) (void *, long, int, int, int, int, long, long, long)) FindFunction(libX11, "XGrabPointer");
    }
    return (jint) (* p_nbridge_XGrabPointer)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (long) param_6, (long) param_7, (long) param_8);
}

int (* p_nbridge_XDisplayHeight) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayHeight( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_XDisplayHeight == NULL) {
        p_nbridge_XDisplayHeight = (int (*) (void *, int)) FindFunction(libX11, "XDisplayHeight");
    }
    return (jint) (* p_nbridge_XDisplayHeight)((void *) param_0, (int) param_1);
}

int (* p_nbridge_XQueryColor) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryColor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_XQueryColor == NULL) {
        p_nbridge_XQueryColor = (int (*) (void *, long, void *)) FindFunction(libX11, "XQueryColor");
    }
    return (jint) (* p_nbridge_XQueryColor)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* p_nbridge_XRaiseWindow) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XRaiseWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_XRaiseWindow == NULL) {
        p_nbridge_XRaiseWindow = (int (*) (void *, long)) FindFunction(libX11, "XRaiseWindow");
    }
    return (jint) (* p_nbridge_XRaiseWindow)((void *) param_0, (long) param_1);
}

int (* p_nbridge_XWithdrawWindow) (void *, long, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XWithdrawWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (p_nbridge_XWithdrawWindow == NULL) {
        p_nbridge_XWithdrawWindow = (int (*) (void *, long, int)) FindFunction(libX11, "XWithdrawWindow");
    }
    return (jint) (* p_nbridge_XWithdrawWindow)((void *) param_0, (long) param_1, (int) param_2);
}


