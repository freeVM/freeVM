/* Generated By:JavaCC: Do not edit this line. RTFParser.java */
package org.apache.harmony.x.swing.text.rtf;

import java.io.*;
import javax.swing.text.Document;
import javax.swing.text.DefaultStyledDocument;

public class RTFParser implements RTFParserConstants {

  private static RTFParserHandler handler;

  public static void main(String args[]) throws Exception {
    InputStream in;

    if (args.length > 0)
      in = new FileInputStream(args[0]);
    else
      in = System.in;

    RTFParser parser = new RTFParser(in);
    parser.parse(new DefaultStyledDocument(), 0);
  }

  static final public void parse(Document doc, int position) throws ParseException {
    handler = new RTFParserHandler(doc, position);
    file();
    jj_consume_token(0);
  }

  static final private int parameter() throws ParseException {
  Token param = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM:
      param = jj_consume_token(PARAM);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    {if (true) return param == null ? -1 : Integer.parseInt(param.image);}
    throw new Error("Missing return statement in function");
  }

  static final private void unknownControlWord() throws ParseException {
    jj_consume_token(CONTROL_WORD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM:
      jj_consume_token(PARAM);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

/**
 *  Catches all unhandled control symbols.
 */
  static final public void unknownControlSymbol() throws ParseException {
    jj_consume_token(CONTROL_SYMBOL);
  }

  static final public void text() throws ParseException {
  Token text;
    text = jj_consume_token(TEXT);
    handler.addText(text.image);
  }

  static final public void file() throws ParseException {
    jj_consume_token(OPEN_BRACE);
    header();
    document();
    jj_consume_token(CLOSE_BRACE);
  }

  static final public void header() throws ParseException {
    jj_consume_token(RTF);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM:
      jj_consume_token(PARAM);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void document() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case B:
      case I:
      case UL:
        paragraph();
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_1(2147483647)) {
          fonttbl();
        } else if (jj_2_2(2147483647)) {
          stylesheet();
        } else if (jj_2_3(2147483647)) {
          info();
        } else if (jj_2_4(2147483647)) {
          ignoredDestination();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPEN_BRACE:
            documentBlock();
            break;
          case CONTROL_WORD:
            unknownControlWord();
            break;
          case CONTROL_SYMBOL:
            unknownControlSymbol();
            break;
          case TEXT:
            text();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_BRACE:
      case TEXT:
      case B:
      case I:
      case UL:
      case CONTROL_WORD:
      case CONTROL_SYMBOL:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
    }
  }

/**
 *  A group.
 */
  static final public void documentBlock() throws ParseException {
    jj_consume_token(OPEN_BRACE);
                 handler.startGroup();
    document();
    jj_consume_token(CLOSE_BRACE);
                  handler.endGroup();
  }

/**
 *  Ignored block of RTF file, currently is using to ignore unknown parts
 *  of file.
 */
  static final public void ignoredBlock() throws ParseException {
    label_2:
    while (true) {
      if (jj_2_5(2147483647)) {
        ignoredDestination();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case B:
        case I:
        case UL:
          characterFormat();
          break;
        case CONTROL_WORD:
          unknownControlWord();
          break;
        case CONTROL_SYMBOL:
          unknownControlSymbol();
          break;
        case TEXT:
          jj_consume_token(TEXT);
          break;
        case OPEN_BRACE:
          jj_consume_token(OPEN_BRACE);
          ignoredBlock();
          jj_consume_token(CLOSE_BRACE);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_BRACE:
      case TEXT:
      case B:
      case I:
      case UL:
      case CONTROL_WORD:
      case CONTROL_SYMBOL:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
    }
  }

/**
 *  Group which starts with "{\*" and describes destination, currently this part
 *  is ignored.
 */
  static final public void ignoredDestination() throws ParseException {
    jj_consume_token(OPEN_BRACE);
    jj_consume_token(IGNORED_DESTINATION);
    ignoredBlock();
    jj_consume_token(CLOSE_BRACE);
  }

/**
 * Part which describes font table group.
 */
  static final public void fonttbl() throws ParseException {
    jj_consume_token(OPEN_BRACE);
    jj_consume_token(FONTTBL);
    ignoredBlock();
    jj_consume_token(CLOSE_BRACE);
  }

/**
 * Part which describes the style sheet group.
 */
  static final public void stylesheet() throws ParseException {
    jj_consume_token(OPEN_BRACE);
    jj_consume_token(STYLESHEET);
    ignoredBlock();
    jj_consume_token(CLOSE_BRACE);
  }

/**
 * Part which describes the information group inside document area.
 */
  static final public void info() throws ParseException {
    jj_consume_token(OPEN_BRACE);
    jj_consume_token(INFO);
    ignoredBlock();
    jj_consume_token(CLOSE_BRACE);
  }

  static final public void paragraph() throws ParseException {
    characterFormat();
  }

  static final public void characterFormat() throws ParseException {
  int param;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case B:
      jj_consume_token(B);
      param = parameter();
                            handler.setBold(param != 0);
      break;
    case I:
      jj_consume_token(I);
      param = parameter();
                            handler.setItalic(param != 0);
      break;
    case UL:
      jj_consume_token(UL);
      param = parameter();
                             handler.setUnderline(param != 0);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_3_3() {
    if (jj_scan_token(OPEN_BRACE)) return true;
    if (jj_scan_token(INFO)) return true;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_scan_token(OPEN_BRACE)) return true;
    if (jj_scan_token(STYLESHEET)) return true;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_scan_token(OPEN_BRACE)) return true;
    if (jj_scan_token(IGNORED_DESTINATION)) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_scan_token(OPEN_BRACE)) return true;
    if (jj_scan_token(FONTTBL)) return true;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_scan_token(OPEN_BRACE)) return true;
    if (jj_scan_token(IGNORED_DESTINATION)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public RTFParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x400000,0x400000,0x400000,0x70000,0x3000a0,0x3700a0,0x3700a0,0x3700a0,0x70000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public RTFParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public RTFParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RTFParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public RTFParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RTFParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public RTFParser(RTFParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(RTFParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[24];
    for (int i = 0; i < 24; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
