/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Pavel Dolgov
 * @version $Revision$
 */
/*
 * THE FILE HAS BEEN AUTOGENERATED BY INTEL IJH TOOL.
 * Please be aware that all changes made to this file manually
 * will be overwritten by the tool if it runs again.
 */

#include <jni.h>


/* Header for class org.apache.harmony.awt.nativebridge.windows.WinDataTransfer */

#ifndef _ORG_APACHE_HARMONY_AWT_NATIVEBRIDGE_WINDOWS_WINDATATRANSFER_H
#define _ORG_APACHE_HARMONY_AWT_NATIVEBRIDGE_WINDOWS_WINDATATRANSFER_H

#ifdef __cplusplus
extern "C" {
#endif


/* Native methods */

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.init()V
 */
JNIEXPORT void JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_init(JNIEnv *, jclass);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.getDataObjectText(J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_getDataObjectText(JNIEnv *, jclass, 
    jlong);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.getDataObjectFileList(J)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_getDataObjectFileList(JNIEnv *, jclass, 
    jlong);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.getDataObjectURL(J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_getDataObjectURL(JNIEnv *, jclass, 
    jlong);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.getDataObjectHTML(J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_getDataObjectHTML(JNIEnv *, jclass, 
    jlong);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.getDataObjectImage(J[I)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_getDataObjectImage(JNIEnv *, jclass, 
    jlong, jintArray);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.getDataObjectSerialized(JLjava/lang/String;)[B
 */
JNIEXPORT jbyteArray JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_getDataObjectSerialized(JNIEnv *, jclass, 
    jlong, jstring);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.getSystemDefaultCharset()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_getSystemDefaultCharset(JNIEnv *, jclass);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.getDataObjectFormats(J)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_getDataObjectFormats(JNIEnv *, jclass, 
    jlong);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.isDataObjectFormatAvailable(JLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_isDataObjectFormatAvailable(JNIEnv *, jclass, 
    jlong, jstring);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.getOleClipboardDataObject()J
 */
JNIEXPORT jlong JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_getOleClipboardDataObject(JNIEnv *, jclass);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.releaseDataObject(J)V
 */
JNIEXPORT void JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_releaseDataObject(JNIEnv *, jclass, 
    jlong);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.setClipboardContents(Lorg/apache/harmony/awt/datatransfer/DataSnapshot;)V
 */
JNIEXPORT void JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_setClipboardContents(JNIEnv *, jclass, 
    jobject);

/*
 * Method: org.apache.harmony.awt.nativebridge.windows.WinDataTransfer.startDrag(Lorg/apache/harmony/awt/datatransfer/DataSnapshot;Lorg/apache/harmony/awt/datatransfer/windows/WinDragSource;I)I
 */
JNIEXPORT void JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_startDrag(JNIEnv *, jclass, 
    jobject, jobject, jint);

/*
 * Method: org.apache.harmony.awt.datatransfer.windows.DataTransfer.registerDropTarget(JLorg/apache/harmony/awt/datatransfer/windows/WinDropTarget;)J
 */
JNIEXPORT jlong JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_registerDropTarget(JNIEnv *, jclass, 
    jlong, jobject);

/*
 * Method: org.apache.harmony.awt.datatransfer.windows.DataTransfer.revokeDropTarget(JJ)V
 */
JNIEXPORT void JNICALL
Java_org_apache_harmony_awt_nativebridge_windows_WinDataTransfer_revokeDropTarget(JNIEnv *, jclass, 
    jlong, jlong);


#ifdef __cplusplus
}
#endif

#endif /* _ORG_APACHE_HARMONY_AWT_NATIVEBRIDGE_WINDOWS_WINDATATRANSFER_H */

