<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. 
-->

<project name="buildtestinfra" default="default" basedir=".">

    <description>
        CI/built/test system for Apache Harmony
        http://incubator.apache.org/harmony
    </description>

    <import file="download.xml"/>

    <!--The cc.property file contains the nameand values of properties-->
    <property file="cc.properties" />

    <!-- where to assemble all the pieces -->
    <property name="target.dir" location="cc" />
    <mkdir dir="${target.dir}" />

    <!-- generated configuration file -->
    <property name="configfile" location="${target.dir}/config.xml" />
    <property name="propertyfile" location="${target.dir}/cc.properties" />

    <condition property="is.windows">
        <os family="windows" />
    </condition>

    <condition property="is.unix">
        <os family="unix" />
    </condition>

    <!-- detecting current platform arch: code was copied from classlib/ properties.xml -->
    <!-- Conditions for different architectures -->
    <condition property="is.x86_64">
        <or>
            <equals arg1="x86_64" arg2="${os.arch}" />
            <equals arg1="amd64" arg2="${os.arch}" />
        </or>
    </condition>
    <condition property="is.x86">
        <and>
            <not>
                <isset property="is.x86_64" />
            </not>
            <or>
                <equals arg1="x86" arg2="${os.arch}" />
                <equals arg1="i386" arg2="${os.arch}" />
            </or>
        </and>
    </condition>
    <condition property="is.ia64">
        <equals arg1="ia64" arg2="${os.arch}" />
    </condition>
    <condition property="is.s390x">
        <equals arg1="${os.arch}" arg2="s390x" />
    </condition>
    <condition property="is.s390">
        <equals arg1="${os.arch}" arg2="s390" />
    </condition>

    <condition property="is.64bit">
        <or>
            <isset property="is.ia64" />
            <isset property="is.x86_64" />
            <isset property="is.s390x" />
        </or>
    </condition>
    <condition property="is.32bit">
        <or>
            <isset property="is.x86" />
            <isset property="is.s390" />
            <!-- 31bit of course -->
        </or>
    </condition>
    <condition property="hy.bits" value="32">
        <isset property="is.32bit" />
    </condition>

    <!-- Normalized architecture name -->
    <condition property="build.arch" value="em64t">
        <isset property="is.x86_64" />
    </condition>
    <condition property="build.arch" value="ia32">
        <and>
            <isset property="is.x86" />
            <isset property="is.32bit" />
        </and>
    </condition>

    <condition property="need.proxy.port" value="${http-proxy-port}" else="80">
        <isset property="http-proxy-port" />
    </condition>

    <target name="set.proxy" if="http-proxy-host">
        <setproxy proxyhost="${http-proxy-host}" proxyport="${need.proxy.port}" />

        <!-- property file for CC -->
        <echo file="${propertyfile}" append="false">#This file was generated by 'build.xml'
proxy.host.property=http.proxyHost
proxy.port.property=http.proxyPort
proxy.host.vm=env.http.proxyHost
proxy.port.vm=env.http.proxyPort
proxy.value=${http-proxy-host}
port.value=${need.proxy.port}
</echo>
        <property name="vm.proxy.h" value="-Denv.http.proxyHost=${http-proxy-host}" />
        <property name="vm.proxy.p" value="-Denv.http.proxyPort=${need.proxy.port}" />
    </target>
    <target name="no.proxy" unless="http-proxy-host">
        <!-- property file for CC -->
        <echo file="${propertyfile}" append="false">#This file was generated by 'build.xml'
proxy.host.property=no.http.proxyHost
proxy.port.property=no.http.proxyPort
proxy.host.vm=no.env.http.proxyHost
proxy.port.vm=no.env.http.proxyPort
proxy.value=no
port.value=111
</echo>
        <property name="vm.proxy.h" value="-Dno.http.proxyHost=true" />
        <property name="vm.proxy.p" value="-Dno.http.proxyPort=0" />
    </target>

    <!-- ==========================================
           Kick off CC w/ all tests
         ========================================== -->
    <target name="default" description="Start CruiseControl with full test suite" depends="start-win,start-other">
    </target>

    <target name="pre-copy" depends="gen-config">
        <copy file="config/copyres.xml" tofile="${target.dir}/copyres.xml" />
    </target>

    <target name="start-win" if="is.windows">
        <exec executable="cmd" dir="${target.dir}">
            <arg line="/c cruisecontrol.bat" />
        </exec>
    </target>

    <target name="start-other" unless="is.windows">
        <exec executable="sh" dir="${target.dir}">
            <arg line="cruisecontrol.sh" />
        </exec>
    </target>

    <!-- ==========================================
         Main setup - download, unpack, checkout
         ========================================== -->
    <target name="setup" description="fetch and setup build/test/ci system"
        depends="set.proxy,no.proxy,download">

        <property name="cc.filename" location="${depends}/cruisecontrol_2.5/cruisecontrol.zip" />
        <property name="junitjar.filename" value="${depends}/ant-junit-1.6.5/ant-junit-1.6.5.jar" />

        <!-- unzip it, rename, add ant-junit jar and cleanout the junk -->

        <unzip src="${cc.filename}" dest="." />

        <move file="cruisecontrol-bin-2.5" tofile="${target.dir}" />

        <delete dir="${target.dir}/projects/connectfour" includeEmptyDirs="true" verbose="false" />
        <delete dir="${target.dir}/logs/connectfour" includeEmptyDirs="true" verbose="false" />
        <delete file="${target.dir}/config.xml" />
        <delete file="${target.dir}/copyres.xml" />

        <delete dir="cruisecontrol-bin-2.5" includeEmptyDirs="true" verbose="false" />

        <!-- copy the ant-junit jar to cc/lib -->
        <copy file="${junitjar.filename}" todir="${target.dir}/lib" />

        <copy todir="${target.dir}" flatten="yes">
            <fileset dir="config/xsl" />
        </copy>

        <!--ovwrwrite the ant and launcher jar's in {target.dir}/lib -->
        <copy file="${target.dir}/apache-ant-1.6.5/lib/ant.jar" todir="${target.dir}/lib" overwrite="yes" failonerror="false" />
        <copy file="${target.dir}/apache-ant-1.6.5/lib/ant-launcher.jar" todir="${target.dir}/lib" overwrite="yes" failonerror="false" />

        <!-- copy the config we want to use, and make target dirs for the checkouts -->
        <subant target="gen-config" buildpath="." />
        <copy file="config/copyres.xml" tofile="${target.dir}/copyres.xml" />

        <antcall target="process-drlvm" />

        <subant target="setup" >
            <dirset dir="modules" includes="${modules}" />
            <property name="configfile" value="${configfile}" />
            <property name="propertyfile" value="${propertyfile}" />
            <property name="target.dir" value="${target.dir}" />
            <property name="vm.proxy.h" value="${vm.proxy.h}" />
            <property name="vm.proxy.p" value="${vm.proxy.p}" />
            <property name="build_configuration" value="${build_configuration}" />
        </subant>

    </target>

    <target name="drlvm-win" if="is.windows">
        <replace file="${target.dir}/cruisecontrol.bat" token="REM set CC_OPTS=-Xms128m -Xmx256m">
            <replacevalue><![CDATA[set CC_OPTS=-Xmx500m
set BUILD_CFG=@@@@@
]]>
            </replacevalue>
        </replace>

        <replace file="${target.dir}/cruisecontrol.bat" token='@@@@@' value='${build_configuration}' />

        <replace file="${target.dir}/cruisecontrol.bat" token="%LIBDIR%\ant.jar">
            <replacevalue><![CDATA[%LIBDIR%\ant.jar
set CRUISE_PATH=%CRUISE_PATH%;%ANT_HOME%\lib\ant-apache-regexp.jar
set CRUISE_PATH=%CRUISE_PATH%;%ANT_HOME%\lib\ecj_3.2.jar
set CRUISE_PATH=%CRUISE_PATH%;%ANT_HOME%\lib\ant-nodeps.jar
set CRUISE_PATH=%CRUISE_PATH%;%ANT_HOME%\lib\ant-xslp.jar
set CRUISE_PATH=%CRUISE_PATH%;%ANT_HOME%\lib\ant-trax.jar
set CRUISE_PATH=%CRUISE_PATH%;@vmdir@\make\tmp\ant-contrib.jar
set CRUISE_PATH=%CRUISE_PATH%;@vmdir@\make\tmp\cpptasks\patched.classes
set CRUISE_PATH=%CRUISE_PATH%;@vmdir@\make\tmp\cpptasks.jar
]]>
            </replacevalue>
        </replace>
        <replace file="${target.dir}/cruisecontrol.bat" token='@vmdir@' value='${target.dir}/projects/drlvm/trunk/build' />
    </target>

    <target name="drlvm-other" unless="is.windows">
        <replace file="${target.dir}/cruisecontrol.sh" token='# CC_OPTS="-Xms128m -Xmx256m"'>
            <replacevalue><![CDATA[CC_OPTS="-Xmx500m"
BUILD_CFG=@@@@@
]]>
            </replacevalue>
        </replace>

        <replace file="${target.dir}/cruisecontrol.sh" token='@@@@@' value='${build_configuration}' />

        <replace file="${target.dir}/cruisecontrol.sh" token='# CC_OPTS="-Xms128m -Xmx256m"' value='CC_OPTS="-Xmx500m"' />
        <replace file="${target.dir}/cruisecontrol.sh" token="$LIBDIR/ant.jar" value="$LIBDIR/ant.jar:$ANT_HOME/lib/ant-apache-regexp.jar:$ANT_HOME/lib/ecj_3.2.jar:$ANT_HOME/lib/ant-nodeps.jar:$ANT_HOME/lib/ant-xslp.jar:$ANT_HOME/lib/ant-trax.jar:@vmdir@/make/tmp/ant-contrib.jar:@vmdir@/make/tmp/cpptasks/patched.classes:@vmdir@/make/tmp/cpptasks.jar" />
        <replace file="${target.dir}/cruisecontrol.sh" token='@vmdir@' value='${target.dir}/projects/drlvm/trunk/build' />
    </target>

    <target name="process-drlvm" depends="drlvm-win,drlvm-other"/>

    <!-- =========================================================
         cleanup to new state.  Leaves the .zip around to save 
         time on a setup
         ========================================================= -->
    <target name="clean" description="reset to clean state">
        <delete dir="${target.dir}" includeEmptyDirs="true"/>
    </target>

    <!-- =========================================================
         Generate configuration files for CC
         ========================================================= -->
    <property name="modules" value="drlvm-test,classlib-drlvm" />

    <delete>
        <fileset dir="modules">
            <include name="**/*.done" />
        </fileset>
    </delete>

    <target name="gen-config" depends="set.proxy,no.proxy">

        <!-- generate cruisecontrol property file -->
        <echo file="${propertyfile}" append="true">
wdir=${target.dir}
timeout=${cycle_timeout}
ttimeout=${task_timeout}
build_cfg=${build_configuration}
build_arch=${build.arch}
os.name=${os.name}
os.arch=${os.arch}
cc_webcontent=${target.dir}/webapps/cruisecontrol
server_addr=${mail_server}
report_to=${report_failures_to}
report_from=${report_failures_from}
</echo>

        <!-- generate cruisecontrol config file -->
        <echo file="${configfile}">
&lt;cruisecontrol&gt;

    &lt;property file="cc.properties" /&gt;
        </echo>
        <subant target="gen-config" >
            <dirset dir="modules" includes="${modules}" />
            <property name="configfile" value="${configfile}" />
            <property name="propertyfile" value="${propertyfile}" />
        </subant>
        <echo file="${configfile}" message="&lt;/cruisecontrol&gt;" append="true" />

    </target>

</project>
