<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="GapContentTest"
    date-of-creation="2005-06-03"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="javax.swing.text.GapContent"/>


        <Case ID="testConstructor">
            <TestedMethod name="public GapContent()"/>
            <TestedMethod name="public GapContent(int initialLength)"/>
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>

        <Case ID="testAllocateArray">
            <TestedMethod name="protected Object allocateArray(int len)"/>
            <TestedMethod name="protected int getArrayLength()"/>
            <TestedMethod name="public int length()"/>
            
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>

        <Case ID="testCreatePosition">
            <TestedMethod name="public Position createPosition(int offset)"/>
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>

        <Case ID="testGetChars">
            <TestedMethod name="public void getChars(int where, int len, Segment chars)"/>
            <TestedMethod name="public UndoableEdit insertString(int where, String str)"/>
            
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>

        <Case ID="testGetPositionsInRange">
            <TestedMethod name="protected Vector getPositionsInRange(Vector v, int offset, int length)"/>
            <TestedMethod name="public UndoableEdit insertString(int where, String str)"/>
            
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>
        
        <Case ID="testString">
            <TestedMethod name="public String getString(int where, int len)"/>
            <TestedMethod name="public UndoableEdit insertString(int where, String str)"/>
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>
        
        <Case ID="testString">
            <TestedMethod name="public int length()"/>
            <TestedMethod name="public UndoableEdit insertString(int where, String str)"/>
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>

        <Case ID="testRemove">
            <TestedMethod name="public UndoableEdit remove(int where,  int nitems)"/>
            <TestedMethod name="public UndoableEdit insertString(int where, String str)"/>
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>

        <Case ID="testResetmarksAtZero">
            <TestedMethod name="protected void resetMarksAtZero()"/>
            <TestedMethod name="public UndoableEdit insertString(int where, String str)"/>
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>

        <Case ID="testResetmarksAtZero">
            <TestedMethod name="protected void resetMarksAtZero()"/>
            <TestedMethod name="public UndoableEdit insertString(int where, String str)"/>
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>

        <Case ID="testShifts">
            <TestedMethod name="protected void resetMarksAtZero()"/>
            <TestedMethod name="protected void shiftEnd(int newSize)"/>
            <TestedMethod name="protected void shiftGap(int newGapStart)"/>
            <TestedMethod name="protected void shiftGapStartDown(int newGapStart)"/>
            <TestedMethod name="protected void shiftGapEndUp(int newGapEnd)"/>
            <TestedMethod name="protected final int getGapStart()"/>
            <TestedMethod name="protected final int getGapEnd()"/>
            
            <Precondition></Precondition>
            <Description></Description>
            <Expected></Expected>
        </Case>
    </MulticaseTestDescription>
    
    <Keyword name="functional"/>
    <Keyword name="gui"/>    
    <Source name="GapContentTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.javax.swing.text.GapContent.GapContentTest">
        </Param>
    </Runner>
    <Restriction name="OtherVMOnly"/>
</Test> 
