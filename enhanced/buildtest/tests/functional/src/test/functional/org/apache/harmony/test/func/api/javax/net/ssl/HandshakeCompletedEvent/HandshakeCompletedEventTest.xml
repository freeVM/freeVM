<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="HandshakeCompletedEventTest"
    date-of-creation="2005-08-02"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="javax.net.ssl.HandshakeCompletedEvent"/>

        <Case ID="testConstructor">
            <TestedMethod name="public HandshakeCompletedEvent(SSLSocket sock, SSLSession s)"/>
            
            <Precondition></Precondition>
            <Description>create implementations of SSLSocket and SSLSession, 
            create HandshakeCompletedEvent with those objects as arguments</Description>
            <Expected>getSession() and getSocket() return constructor arguments</Expected>
        </Case>
        
        <Case ID="testNullArguments">
            <TestedMethod name="public HandshakeCompletedEvent(SSLSocket sock, SSLSession s)"/>
            
            <Precondition></Precondition>
            <Description>try to pass null as one of argumets to constructor</Description>
            <Expected>null as second argument is accepted; if null is first - IllegalArgumentException is thrown</Expected>
        </Case>
        

        <Case ID="testSessionProperties">
            <TestedMethod name="public String getCipherSuite()"/>
            <TestedMethod name="public Certificate[] getLocalCertificates()"/>
               <TestedMethod name="public Certificate[] getPeerCertificates()"/>
               <TestedMethod name="public X509Certificate[] getPeerCertificateChain()"/>               
            
            <Precondition>create implementations of SSLSocket and SSLSession, 
            create HandshakeCompletedEvent with those objects as arguments</Precondition>
            <Description>call those methods of HandshakeCompletedEvent</Description>
            <Expected>corresponding methods of session passed in arguments is called</Expected>
        </Case>

        <Case ID="testSessionExceptionsWrapping">
            <TestedMethod name="public String getCipherSuite()"/>
            <TestedMethod name="public Certificate[] getLocalCertificates()"/>
               <TestedMethod name="public Certificate[] getPeerCertificates()"/>
               <TestedMethod name="public X509Certificate[] getPeerCertificateChain()"/>               
            
            <Precondition>create implementations of SSLSocket and SSLSession, 
            create HandshakeCompletedEvent with those objects as arguments. SSLSession methods 
            getCipherSuite() and getLocalCertificates() throw NPE, methods
            getPeerCertificates() and getPeerCertificateChain() throw SSLPeerUnverifiedException
            </Precondition>
            <Description>call those methods of HandshakeCompletedEvent</Description>
            <Expected>exceptions are thrown from in HandshakeCompletedEvent methods</Expected>
        </Case>
        

    </MulticaseTestDescription>
    
    <Keyword name="functional"/>
    <Source name="HandshakeCompletedEventTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.javax.net.ssl.HandshakeCompletedEvent.HandshakeCompletedEventTest">
        </Param>
    </Runner>
</Test> 
