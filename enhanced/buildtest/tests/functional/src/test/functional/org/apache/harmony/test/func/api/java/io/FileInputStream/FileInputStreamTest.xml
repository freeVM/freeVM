<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="FileInputStreamTest"
    date-of-creation="2004-11-23"
    timeout="1"
    >

    
    

    <MulticaseTestDescription>
        <TestedClass name="java.io.FileInputStream"/>
        
        <Case ID="testClose">
            <TestedMethod name="close()"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call close()</Description>
            <Expected>no exception</Expected>
        </Case>
        
        <Case ID="testExceptionAfterClose">
            <TestedMethod name="void close()"/>
            <Precondition>create a FileInputStream object</Precondition>
            <Description>call BufferedInputStream.close(), then call read() read(byte[]) and available()</Description>
            <Expected>exception is thrown in all cases</Expected>
        </Case>

        <Case ID="testAvailable">
            <TestedMethod name="public int available()"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call available()</Description>
            <Expected>it is equal to file length</Expected>
        </Case>

        <Case ID="testMarkSupported">
            <TestedClass name="java.io.InputStream"/>
            <TestedMethod name="public boolean markSupported()"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>check that markSupported() can be called</Description>
            <Expected>InputStream.markSupported() returns false</Expected>
        </Case>

        <Case ID="testReset">
            <TestedClass name="java.io.InputStream"/>
            <TestedMethod name="public void reset()"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call reset()</Description>
            <Expected>IOException is thrown</Expected>
        </Case>

        <Case ID="testMark">
            <TestedClass name="java.io.InputStream"/>
            <TestedMethod name="public void mark(int readlimit)"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call mark()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testReadByte">
            <TestedMethod name="public int read() "/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call read()</Description>
            <Expected>read() returns expected value</Expected>
        </Case>

        <Case ID="testReadByte0001">
            <TestedMethod name="public int read() "/>
            <Precondition>create the FileInputStream object pointing to file with the first byte == 0</Precondition>
            <Description>call read()</Description>
            <Expected>read() returns expected value</Expected>
        </Case>

        <Case ID="testReadBytes">
            <TestedMethod name="public final int read(byte[] b)"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call read(byte[])</Description>
            <Expected>read(byte[]) returns expected value</Expected>
        </Case>

        <Case ID="testReadBytesSlice">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call read(byte[] buf, int offset, int len)</Description>
            <Expected>read(byte[] buf, int offset, int len) returns expected value</Expected>
        </Case>

        <Case ID="testReadBytesNull">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call read(null, int, int)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0001">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call read(byte[], int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0002">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call read(byte[], int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0003">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call read(byte[] buf, int offset, int len); buf.length &lt; offset + len</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0004">
            <TestedMethod name="public final int read(byte[] b)"/>
            <Precondition>create the FileInputStream object pointing to file with the first byte == 0</Precondition>
            <Description>call read(byte[])</Description>
            <Expected>read() returns expected value</Expected>
        </Case>

        <Case ID="testSkip">
            <TestedMethod name="public long skip(long n)"/>
            <Precondition>create the FileInputStream object</Precondition>
            <Description>call skip(3)</Description>
            <Expected>it returns 3 and next byte read from the stream has a proper value</Expected>
        </Case>

        <Case ID="testFileNotFoundException">
            <TestedMethod name="public FileInputStream(File f)"/>
            <TestedMethod name="public FileInputStream(String s)"/>
            <Precondition></Precondition>
            <Description>try to create FileInputStream pointing to a directory or non-existent file</Description>
            <Expected>FileNotFoundException is thrown</Expected>
        </Case>

        <Case ID="testFileDescriptor">
            <TestedMethod name="FileInputStream(FileDescriptor)"/>
            <TestedMethod name="public final FileDescriptor getFD()"/>
            <Precondition>create a FileInputStream and another FileInputStream based on the 
            FileDescriptor from the first stream</Precondition>
            <Description>read data from both and close both</Description>
            <Expected>data is read in the proper order</Expected>
        </Case>

        <Case ID="testFinalize">
            <TestedMethod name="protected void finalize()"/>
            <Precondition>create a FileInputStream, get its channel</Precondition>
            <Description>don't close stream, remove reference to it, run gc() 50 times</Description>
            <Expected>channel is closed</Expected>
        </Case>


    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="FileInputStreamTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.FileInputStream.FileInputStreamTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-generalVMOption" value="$generalVMOption"/>                                
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
    <Restriction name="OtherVMOnly"/>
</Test> 
    