<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="BufferedInputStreamTest"
    date-of-creation="2004-11-12"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="java.io.BufferedInputStream"/>

        <Case ID="testClose">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="void close()"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.close()</Description>
            <Expected>same as FilterInputStream.close()</Expected>
        </Case>

        <Case ID="testExceptionAfterClose">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="void close()"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.close(), then call read() read(byte[]) and available()</Description>
            <Expected>exception is thrown in all cases</Expected>
        </Case>

        <Case ID="testAvailable">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="public int available()"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read() and then BufferedInputStream.available()</Description>
            <Expected>available() returns buffer size - 1</Expected>
        </Case>

        <Case ID="testMarkSupported">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="public boolean markSupported()"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.markSupported()</Description>
            <Expected>return value is 'true'</Expected>
        </Case>

        <Case ID="testReset">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="reset()"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.reset()</Description>
            <Expected>stream behaves as specified in API</Expected>
        </Case>

        <Case ID="testMark">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="mark(int)"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call  BufferedInputStream.mark()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testReadByte">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="public int read() "/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read()</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>

        <Case ID="testReadBytes">
            <TestedClass name="java.io.FilterInputStream"/>
            <TestedMethod name="public int read(byte[] b)"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read(byte[])</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>

        <Case ID="testReadBytesSlice">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read(byte[] buf, int offset, int len)</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>

        <Case ID="testReadBytesNull">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read(null, int, int)</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>

        <Case ID="testReadBytes0001">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read(byte[], int &lt; 0, int)</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>

        <Case ID="testReadBytes0002">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read(byte[], int, int &lt; 0)</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>

        <Case ID="testReadBytes0003">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read(byte[] buf, int offset, int len); buf.length &lt; offset + len</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>

        <Case ID="testReadBytesException0001">
            <TestedClass name="java.io.FilterInputStream"/>
            <TestedMethod name="public int read(byte[] b)"/>
            <Precondition>create the InputStream object with method read() that always throws IOException() and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read(byte[])</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>

        <Case ID="testReadBytesException0002">
            <TestedClass name="java.io.FilterInputStream"/>
            <TestedMethod name="public int read(byte[] b) throws IOException"/>
            <Precondition>create the InputStream object with method read() that returns 
                 a few bytes and then throws IOException() and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.read(byte[])</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>
        
        <Case ID="testSkip">
            <TestedMethod name="BufferedInputStream(InputStream in, int size)"/> 
            <TestedMethod name="public long skip(long n)"/>
            <Precondition>create the InputStream object and wrapping BufferedInputStream</Precondition>
            <Description>call BufferedInputStream.skip(3)</Description>
            <Expected>same effect as without wrapping stream</Expected>
        </Case>

        <Case ID="testReset0001">
            <TestedMethod name="mark(int)"/>
            <TestedMethod name="reset()"/>
            <Precondition>create the BufferedInputStream object</Precondition>
            <Description>read some amound of bytes from it, then call mark(10), read next byte from the stream,
            read less than 10 bytes, call reset() and read byte from the stream again
            </Description>
            <Expected>bytes read just after mark() and just after reset() are equal</Expected>
        </Case>

        <Case ID="testReset0002">
            <TestedMethod name="mark(int)"/>
            <TestedMethod name="reset()"/>
            <Precondition>create the BufferedInputStream object</Precondition>
            <Description>read some amound of bytes from it, then call mark(10), read next byte from the stream,
            read 9 bytes, call reset() and read byte from the stream again
            </Description>
            <Expected>bytes read just after mark() and just after reset() are equal</Expected>
        </Case>

        <Case ID="testReset0003">
            <TestedMethod name="mark(int)"/>
            <TestedMethod name="reset()"/>
            <Precondition>create the BufferedInputStream object</Precondition>
            <Description>read some amound of bytes from it, then call mark(10), read next byte from the stream,
            read 9 bytes, call reset() and read byte from the stream again
            </Description>
            <Expected>bytes read just after mark() and just after reset() are equal</Expected>
        </Case>

    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="BufferedInputStreamTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.BufferedInputStream.BufferedInputStreamTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
</Test> 
