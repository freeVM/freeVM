<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../../test.dtd'>
<!--
-->
<Test
    ID="ThresholdsTest"
        date-of-creation="2006-03-03"
        timeout="2">
        
        
    <APITestDescription>
    
    monitor.removeObservedObject monitor.containsObservedObject 
    
        <TestedClass name="javax.management.monitor.CounterMonitor"/>
        <TestedMethod name="public void setGranularityPeriod(long period)"/>
        <TestedMethod name="public void setInitThreshold(Number value)"/>
        <TestedMethod name="public void setNotify(boolean value)"/>
        <TestedMethod name="public void setDifferenceMode(boolean value)"/>
        <TestedMethod name="public void start()"/>
            
        <TestedClass name="javax.management.monitor.Monitor"/>
        <TestedMethod name="public void addObservedObject(ObjectName object)"/>
        <TestedMethod name="public void setObservedAttribute(String attribute)"/>
        <TestedMethod name="public void removeObservedObject(ObjectName object)"/>
        <TestedMethod name="public boolean containsObservedObject(ObjectName object)"/>        
        
        <TestedClass name="javax.management.NotificationBroadcasterSupport"/>
        <TestedMethod
            name="public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback)"/>
        <Description>
            This test is intended to check the essential functionality of CounterMonitor. 
                1.    MBean Server is created; CounterMonitor and Counter MBeans are registered.
                2.  NotificationListener is added to CounterMonitor.
                3.  Counter is started in a separate thread, CounterMonitor is activated.
                4.  Notification handler checks that counter threshold is actually exceeded
                5.  Notification handler reconfigures monitor â€“ removes existing handler and adds 
                    another handler (to handle another observed object)
                6.  Notification handler sets new observed object and new threshold
                7.  New notification handler expects to receive corresponding notification
                8.  Monitor is reconfigured to another observed object
                9.  New notification handler is set to check if the corresponding notification is received
        </Description>
    </APITestDescription>        
        <Keyword name="functional"/>
        <Source name="ThresholdsTest.java"/>        
        <Runner ID="Runtime">
            <Param name="toRun" value="org.apache.harmony.test.func.api.javax.management.monitor.countermonitor.ThresholdsTest">
            </Param>
        </Runner>
        <Restriction name="OtherVMOnly"/>
</Test>

