<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->

<Test
    ID="BufferedOutputStreamTest"
    date-of-creation="2004-11-10"
    timeout="1"
    >

    
    
    <MulticaseTestDescription>
        <TestedClass name="java.io.BufferedOutputStream"/>
        <Case ID="testClose">
            <TestedClass name="java.io.FilterOutputStream"/>
            <TestedMethod name="public void close()"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>call BufferedOutputStream.close()</Description>
            <Expected>underlying stream is flushed and closed</Expected>
        </Case>

        <Case ID="testFlush">
            <TestedMethod name="BufferedOutputStream(OutputStream os)"/> 
            <TestedMethod name="flush()"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>call BufferedOutputStream.flush()</Description>
            <Expected>underlying stream is flushed</Expected>
        </Case>

        <Case ID="testWrite0001">
            <TestedClass name="java.io.FilterOutputStream"/>
            <TestedMethod name="public void write(byte[] b)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>write byte array to the stream</Description>
            <Expected>array is written to the underlying stream properly</Expected>
        </Case>

        <Case ID="testWriteNull">
            <TestedClass name="java.io.FilterOutputStream"/>
            <TestedMethod name="public void write(byte[] b)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>write null to the BufferedOutputStream</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testWriteSlice">
            <TestedMethod name="BufferedOutputStream(OutputStream os)"/> 
            <TestedMethod name="write(byte[], int, int)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>write a slice of byte array to the BufferedOutputStream</Description>
            <Expected>array slice is written properly to the underlying stream</Expected>
        </Case>

        <Case ID="testWriteByte">
            <TestedMethod name="BufferedOutputStream(OutputStream os)"/> 
            <TestedMethod name="public void write(int b)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>write a byte to the BufferedOutputStream</Description>
            <Expected>byte is written properly to the underlying stream</Expected>
        </Case>

        <Case ID="testWriteIndexOutOfBounds0001">
            <TestedMethod name="write(byte[] bytes, int offset, int length)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream objectt</Precondition>
            <Description>try to write a piece of array starting from negative offset</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteIndexOutOfBounds0002">
            <TestedMethod name="write(byte[] bytes, int offset, int length)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>try to write a piece of array with negative length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteIndexOutOfBounds0003">
            <TestedMethod name="write(byte[] bytes, int offset, int length)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>try to write a piece of array that exceeds array length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWrite0002">
            <TestedClass name="java.io.FilterOutputStream"/>
            <TestedMethod name="public void write(byte[] b)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object (with default size)</Precondition>
            <Description>write a small portion of data to BufferedOutputStream</Description>
            <Expected>data is not flushed to the underlying stream</Expected>
        </Case>

        <Case ID="testWrite0003">
            <TestedMethod name="public void write(int b)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object (with default size)</Precondition>
            <Description>write a single byte to BufferedOutputStream</Description>
            <Expected>data is not flushed to the underlying stream</Expected>
        </Case>
        
        <Case ID="testWrite0004">
            <TestedMethod name="public void write(int b)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>writes bytes one by one to BufferedOutputStream and checks that buffer is flushed properly</Description>
            <Expected>data is flushed to underlying stream when buffer is full</Expected>
        </Case>

        <Case ID="testWrite0005">
            <TestedClass name="java.io.FilterOutputStream"/>
            <TestedMethod name="public void write(byte[] b)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>writes a byte array longer than the buffer capacity to BufferedOutputStream</Description>
            <Expected>all data is written immediately</Expected>
        </Case>

        <Case ID="testWrite0006">
            <TestedClass name="java.io.FilterOutputStream"/>
            <TestedMethod name="public void write(byte[] b)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>writes a single byte and after that a byte array longer 
            than the buffer capacity to BufferedOutputStream</Description>
            <Expected>byte array is written immediately and data is written in the proper order</Expected>
        </Case>

        <Case ID="testWrite0007">
            <TestedClass name="java.io.FilterOutputStream"/>
            <TestedMethod name="public void write(byte[] b)"/>
            <Precondition>create the OutputStream object and wrapping BufferedOutputStream object</Precondition>
            <Description>writes two byte arrays one by one in the BufferedOutputStream. 
            Each array is shorter than the BufferedOutputStream capacity but the sum of their lengths is 
            bigger than the BufferedOutputStream capacity
            </Description>
            <Expected>only first byte array is written to the underlying stream</Expected>
        </Case>

        <Case ID="testNegativeSize">
            <TestedMethod name="public BufferedOutputStream(OutputStream out, int size)"/>
            <Precondition>create the OutputStream object</Precondition>
            <Description>creates BufferedOutputStream with negative size</Description>
            <Expected>IllegalArgumentException is thrown</Expected>
        </Case>

        <Case ID="testZeroSize">
            <TestedMethod name="public BufferedOutputStream(OutputStream out, int size)"/>
            <Precondition>create the OutputStream object</Precondition>
            <Description>creates BufferedOutputStream with negative size</Description>
            <Expected>IllegalArgumentException is thrown</Expected>
        </Case>
    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="BufferedOutputStreamTest.java"/>
    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.BufferedOutputStream.BufferedOutputStreamTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
</Test> 
