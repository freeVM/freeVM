<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->

<Test
    ID="ByteArrayOutputStreamTest"
    date-of-creation="2004-11-19"
    timeout="1"
    >

    
    
    <MulticaseTestDescription>
        <TestedClass name="java.io.ByteArrayOutputStream"/>
        <Case ID="testClose">
            <TestedMethod name="close()"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>call close()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testClose">
            <TestedMethod name="close()"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>call close()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testFlush">
            <TestedClass name="java.io.OutputStream"/>
            <TestedMethod name="public void flush()"/>
            <Precondition>create the ByteArrayOutputStream</Precondition>
            <Description>call flush()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testWrite0001">
            <TestedMethod name="public void write(byte[] b, int off, int len)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>write byte array to the stream</Description>
            <Expected>array is written properly</Expected>
        </Case>

        <Case ID="testWriteNull">
            <TestedMethod name="public void write(byte[] b, int off, int len)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>write null to the stream</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testWriteSlice">
            <TestedMethod name="write(byte[], int, int)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>write a slice of byte array to the stream</Description>
            <Expected>array slice is written properly</Expected>
        </Case>

        <Case ID="testWriteByte">
            <TestedMethod name="public void write(int b)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>write a byte to the stream</Description>
            <Expected>byte is written properly</Expected>
        </Case>

        <Case ID="testWriteIndexOutOfBounds0001">
            <TestedMethod name="write(byte[] bytes, int offset, int length)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>try to write a piece of array starting from negative offset</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteIndexOutOfBounds0002">
            <TestedMethod name="write(byte[] bytes, int offset, int length)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>try to write a piece of array with negative length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteIndexOutOfBounds0003">
            <TestedMethod name="write(byte[] bytes, int offset, int length)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>try to write a piece of array that exceeds array length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteToSelf">
            <TestedMethod name="ByteArrayOutputStream()"/>
            <TestedMethod name="writeTo(OutputStream)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>write something to it, then call stream.writeTo(stream)</Description>
            <Expected>contents of the stream are doubled</Expected>
        </Case>

        <Case ID="testWriteToSelf">
            <TestedMethod name="writeTo(OutputStream)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>write something to it, then call stream.writeTo(stream)</Description>
            <Expected>contents of the stream are doubled</Expected>
        </Case>

        <Case ID="testReset">
            <TestedMethod name="ByteArrayOutputStream(int size)"/>
            <TestedMethod name="reset()"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>write something to it, call reset() and write again</Description>
            <Expected>everything written in the first write() is lost</Expected>
        </Case>

        <Case ID="testToStringWithEncoding">
            <TestedMethod name="public String toString(String enc)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>write some lower-case english letters to it</Description>
            <Expected>toString("UTF8") and toString("ASCII") is equal to what was written</Expected>
        </Case>

        <Case ID="testUnsupportedEncoding">
            <TestedMethod name="public String toString(String enc)"/>
            <Precondition>create the ByteArrayOutputStream object</Precondition>
            <Description>write some lower-case english letters to it</Description>
            <Expected>toString(some nonexistent encoding) throws UnsupportedEncodingException</Expected>
        </Case>

        <Case ID="testToByteArray">
            <TestedMethod name="public byte[] toByteArray()"/>
            <Precondition>create the ByteArrayOutputStream object and a random String</Precondition>
            <Description>write string.getBytes() to the stream</Description>
            <Expected>written string is equal to new String(stream.toByteArray())</Expected>
        </Case>
    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="ByteArrayOutputStreamTest.java"/>
    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.ByteArrayOutputStream.ByteArrayOutputStreamTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
</Test> 
