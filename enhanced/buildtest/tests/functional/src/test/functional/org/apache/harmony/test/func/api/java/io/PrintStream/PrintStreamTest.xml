<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->

<Test
    ID="PrintStreamTest"
    date-of-creation="2004-12-14"
    timeout="1"
    >

    
    
    <MulticaseTestDescription>
        <TestedClass name="java.io.PrintStream"/>
        <Case ID="testClose">
            <TestedMethod name="close()"/>
            <Precondition>create the OutputStream object and wrapping PrintStream object</Precondition>
            <Description>call PrintStream.close()</Description>
            <Expected>underlying stream is flushed and closed</Expected>
        </Case>

        <Case ID="testFlush">
            <TestedMethod name="flush()"/>
            <Precondition>create the OutputStream object and wrapping PrintStream object</Precondition>
            <Description>call PrintStream.flush()</Description>
            <Expected>underlying stream is flushed</Expected>
        </Case>

        <Case ID="testWrite0001">
            <TestedClass name="java.io.FilterOutputStream"/>
            <TestedMethod name="public void write(byte[] b)"/>
            <Precondition>create the OutputStream object and wrapping PrintStream object</Precondition>
            <Description>write byte array to the stream</Description>
            <Expected>array is written to the underlying stream properly</Expected>
        </Case>

        <Case ID="testWriteNull">
            <TestedClass name="java.io.FilterOutputStream"/>
            <TestedMethod name="public void write(byte[] b)"/>
            <Precondition>create the OutputStream object and wrapping PrintStream object</Precondition>
            <Description>write null to the PrintStream</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testWriteSlice">
            <TestedMethod name="write(byte[], int, int)"/>
            <Precondition>create the OutputStream object and wrapping PrintStream object</Precondition>
            <Description>write a slice of byte array to the PrintStream</Description>
            <Expected>array slice is written properly to the underlying stream</Expected>
        </Case>

        <Case ID="testWriteByte">
            <TestedMethod name="public void write(int b)"/>
            <Precondition>create the OutputStream object and wrapping PrintStream object</Precondition>
            <Description>write a byte to the PrintStream</Description>
            <Expected>byte is written properly to the underlying stream</Expected>
        </Case>

        <Case ID="testWriteIndexOutOfBounds0001">
            <TestedMethod name="write(byte[] bytes, int offset, int length)"/>
            <Precondition>create the OutputStream object and wrapping PrintStream objectt</Precondition>
            <Description>try to write a piece of array starting from negative offset</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteIndexOutOfBounds0002">
            <TestedMethod name="write(byte[] bytes, int offset, int length)"/>
            <Precondition>create the OutputStream object and wrapping PrintStream object</Precondition>
            <Description>try to write a piece of array with negative length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteIndexOutOfBounds0003">
            <TestedMethod name="write(byte[] bytes, int offset, int length)"/>
            <Precondition>create the OutputStream object and wrapping PrintStream object</Precondition>
            <Description>try to write a piece of array that exceeds array length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testNoAutoFlush">
            <TestedMethod name="public PrintStream(OutputStream os)"/>
            <Precondition>create the OutputStream object and wrapping PrintStream object</Precondition>
            <Description>write and array of bytes to it</Description>
            <Expected>data is not flushed to the underlying stream</Expected>
        </Case>

        <Case ID="testAutoFlush">
            <TestedMethod name="public PrintStream(OutputStream os, boolean autoFlush)"/>
            <Precondition>create an OutputStream object and wrapping PrintStream object 
            with autoFlush == true</Precondition>
            <Description>write misc data to PrintStream</Description>
            <Expected>data is flushed and cached as specified in API</Expected>
        </Case>

    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="PrintStreamTest.java"/>
    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.PrintStream.PrintStreamTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
</Test> 
