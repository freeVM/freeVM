<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="AbstractInterruptibleChannelTest"
    date-of-creation="2006-03-10"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="java.nio.channels.spi.AbstractInterruptibleChannel"/>
        
        <Case ID="testConstructor">
             <TestedMethod name="protected AbstractInterruptibleChannel()"/>
            <TestedMethod name="public final boolean isOpen()"/>
            <Precondition></Precondition>
            <Description>create an instance of a child of AbstractInterruptibleChannel class</Description>
            <Expected>isOpen returns true</Expected>
        </Case>

        <Case ID="test1">
            <TestedMethod name="protected final void begin()"/>            
            <TestedMethod name="protected final void end(boolean completed)"/>            
            <TestedMethod name="public final void close()"/>
            <TestedMethod name="public final boolean isOpen()"/>
            <Precondition>create an instance of a child of AbstractInterruptibleChannel class</Precondition>
            <Description>call begin(); end(true); close()</Description>
            <Expected>isOpen returns true before close() and false after it</Expected>
        </Case>

        <Case ID="test2">
            <TestedMethod name="protected final void begin()"/>            
            <TestedMethod name="protected final void end(boolean completed)"/>            
            <TestedMethod name="public final void close()"/>
            <TestedMethod name="public final boolean isOpen()"/>
            <Precondition>create an instance of a child of AbstractInterruptibleChannel class</Precondition>
            <Description>call begin(); end(false); close()</Description>
            <Expected>isOpen returns true before close() and false after it</Expected>
        </Case>

        <Case ID="test3">
            <TestedMethod name="protected final void begin()"/>            
            <TestedMethod name="public final void close()"/>
            <TestedMethod name="public final boolean isOpen()"/>
            <Precondition>create an instance of a child of AbstractInterruptibleChannel class</Precondition>
            <Description>call begin(); close()</Description>
            <Expected>isOpen returns true before close() and false after it</Expected>
        </Case>

        <Case ID="test4">
            <TestedMethod name="protected final void end(boolean completed)"/>            
            <TestedMethod name="public final void close()"/>
            <TestedMethod name="public final boolean isOpen()"/>
            <Precondition>create an instance of a child of AbstractInterruptibleChannel class</Precondition>
            <Description>call end(false); close()</Description>
            <Expected>isOpen returns true before close() and false after it</Expected>
        </Case>
        
        <Case ID="test4">
            <TestedMethod name="protected final void end(boolean completed)"/>            
            <TestedMethod name="public final void close()"/>
            <TestedMethod name="public final boolean isOpen()"/>
            <Precondition>create an instance of a child of AbstractInterruptibleChannel class</Precondition>
            <Description>call end(true); close()</Description>
            <Expected>isOpen returns true before close() and false after it</Expected>
        </Case>
        
        <Case ID="test6">
            <TestedMethod name="protected final void end(boolean completed)"/>            
            <TestedMethod name="public final void close()"/>
            <TestedMethod name="public final boolean isOpen()"/>
            <Precondition>create an instance of a child of AbstractInterruptibleChannel class</Precondition>
            <Description>call end(true); end(true); close(); end(true); end(true); close()</Description>
            <Expected>isOpen returns true before close() and false after it</Expected>
        </Case>
    </MulticaseTestDescription>


    <Keyword name="functional"/>    
    
    <Source name="AbstractInterruptibleChannelTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.nio.channels.spi.AbstractInterruptibleChannel.AbstractInterruptibleChannelTest">
        </Param>
    </Runner>
</Test> 
