<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="OutputStreamWriterTest"
    date-of-creation="2004-12-14"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="java.io.OutputStreamWriter"/>
        
        <Case ID="testClose">
            <TestedMethod name="OutputStreamWriter(OutputStream os)"/>
            <TestedMethod name="close()"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call close()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testFlush">
            <TestedMethod name="flush()"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call flush()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testWriteInt">
            <TestedMethod name="write(int)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(int) several times</Description>
            <Expected>only lower bytes of int are written</Expected>
        </Case>

        <Case ID="testWriteNullArray">
            <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(char[] cbuf)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write((char[]) null)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testWriteNullString">
            <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(String s)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write((String) null)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testWriteArray">
            <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(char[] cbuf)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(char[])</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteString">
            <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(String s)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(String)</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteArraySlice">
            <TestedMethod name="write(char[], int, int)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(char[], int, int)</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteStringSlice">
            <TestedMethod name="write(String, int, int)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(String, int, int)</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteArrayNegativeStart">
            <TestedMethod name="write(char[], int, int)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(char[], int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteArrayNegativeLength">
            <TestedMethod name="write(char[], int, int)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(char[], int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteArrayBigLength">
            <TestedMethod name="write(char[], int, int)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(char[] buf, int start, int length ) 
            such as start + length &gt; buf.length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteStringNegativeStart">
            <TestedMethod name="write(String, int, int)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(String, int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteStringNegativeLength">
            <TestedMethod name="write(String, int, int)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(String, int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteStringBigLength">
            <TestedMethod name="write(String, int, int)"/>
            <Precondition>create the OutputStreamWriter object</Precondition>
            <Description>call write(String src, int start, int length ) 
            such as start + length &gt; src.length()</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testConstructorCharset">
            <TestedMethod name="OutputStreamWriter(OutputStream, String)"/>
            <TestedMethod name="OutputStreamWriter(OutputStream, Charset)"/>
            <Precondition></Precondition>
            <Description>iterate Charset.availableCharsets(), try to create OutputStreamWriter() 
            with every charset, then create OutputStreamWriter with a non-existent charset name</Description>
            <Expected>all existing charsets pass, UnsupportedEncodingException is thrown on 
            a non-existing charset</Expected>
        </Case>

        <Case ID="testGetEncoding">
            <TestedMethod name="public String getEncoding()"/>
            <Precondition>create a few writers using OutputStreamWriter(OutputStream, String) 
            with misc charset names</Precondition>
            <Description>call getEncoding()</Description>
            <Expected>expected values (historical names) returned</Expected>
        </Case>

        <Case ID="testWriteCharset">
            <TestedMethod name="OutputStreamWriter(OutputStream, String)"/>
            <TestedMethod name="write(int)"/>
            <Precondition>create a few writers using OutputStreamWriter(OutputStream, String) 
            with misc charset names</Precondition>
            <Description>write some characters to each</Description>
            <Expected>proper values written</Expected>
        </Case>
    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="OutputStreamWriterTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.OutputStreamWriter.OutputStreamWriterTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-generalVMOption" value="$generalVMOption"/>                                                
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
    <Restriction name="OtherVMOnly"/>
</Test> 
