<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="RandomAccessFileTest"
    date-of-creation="2004-12-03"
    timeout="1"
    >

    
    

    <MulticaseTestDescription>
        <TestedClass name="java.io.RandomAccessFile"/>
        
        <Case ID="testClose">
            <TestedMethod name="close()"/>
            <Precondition>create a RandomAccessFile</Precondition>
            <Description>call close()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testModes">
            <TestedMethod name="RandomAccessFile(File, String mode)"/>
            <Precondition></Precondition>
            <Description>try to create RandomAccessFile with misc modes</Description>
            <Expected>"r", "rw", "rws" and "rwd" modes pass and IllegalArgumentException is thrown on others</Expected>
        </Case>

        <Case ID="testFileNotFoundException">
            <TestedMethod name="RandomAccessFile(File, String mode)"/>
            <Precondition></Precondition>
            <Description>try to create RandomAccessFile with:
            - directory as the first parameter
            - non-existent file as the first parameter with mode 'r'</Description>
            <Expected>FileNotFoundException is thrown</Expected>
        </Case>

        <Case ID="testSeek">
            <TestedMethod name="public void seek(long pos) "/>
            <Precondition>create a RandomAccessFile</Precondition>
            <Description>seek, write and read to it and check that its siza and contents are changed
            as expected. also try to seek(negative value) and check that IOException is thrown </Description>
            <Expected></Expected>
        </Case>

        <Case ID="testChannel">
            <TestedMethod name="public FileChannel getChannel()"/>
            <Precondition>create a RandomAccessFile</Precondition>
            <Description>obtain FileChannel using getChannel() and check that manipulating its 
            position() changes position of the RandomAccessFile, and vice versa</Description>
            <Expected></Expected>
        </Case>

        <Case ID="testLength">
            <TestedMethod name="public long length()"/>
            <Precondition></Precondition>
            <Description>check that length() of a newly created RandomAccessFile is 0, 
            length() returns proper value on a gold file and length() on a closed file throws 
            IOException</Description>
            <Expected></Expected>
        </Case>

        <Case ID="testReadByte">
            <TestedMethod name="public int read() "/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call read()</Description>
            <Expected>proper value returned</Expected>
        </Case>

        <Case ID="testReadBytes">
            <TestedMethod name="public final int read(byte[] b)"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call read(byte[])</Description>
            <Expected>proper values returned</Expected>
        </Case>

        <Case ID="testReadBytesSlice">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call read(byte[], int, int)</Description>
            <Expected>proper values returned</Expected>
        </Case>

        <Case ID="testReadBytesNull">
            <TestedMethod name="public final int read(byte[] b)"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call read(null)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0001">
            <TestedMethod name="public int read(byte[] b, int start, int length) "/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call read(byte[], int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0002">
            <TestedMethod name="public int read(byte[] b, int start, int length) "/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call read(byte[], int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0003">
            <TestedMethod name="public int read(byte[] b, int start, int length) "/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call read(byte[] buf, int start, int length) : buf.length &lt; start + length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadFully">
            <TestedMethod name="readFully(byte[])"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call readFully(byte[] buf) - expected values returned. 
            Then call readFully(very big array) - EOFException is thrown</Description>
            <Expected></Expected>
        </Case>

        <Case ID="testReadFullySlice">
            <TestedMethod name="readFully(byte[], int start, int length)"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call readFully(byte[] buf, int start, int length)</Description>
            <Expected>expected values returned</Expected>
        </Case>

        <Case ID="testReadFullyNull">
            <TestedMethod name="readFully(byte[])"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call readFully(null)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testReadFullyNull0001">
            <TestedMethod name="readFully(byte[], int, int)"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call readFully(null, 0, 1)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testReadFully0001">
            <TestedMethod name="readFully(byte[], int, int)"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call readFully(byte[], -1, 1)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadFully0002">
            <TestedMethod name="readFully(byte[], int, int)"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call readFully(byte[], 0, -1)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>
        
        <Case ID="testReadFully0003">
            <TestedMethod name="readFully(byte[], int, int)"/>
            <Precondition>create a RandomAccessFile on a gold file</Precondition>
            <Description>call readFully(new byte[1], 0, 5)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadFully0004">
            <TestedMethod name="readFully(byte[], int, int)"/>
            <Precondition>create a RandomAccessFile on a gold file and close it</Precondition>
            <Description>call readFully(byte[], int, int)</Description>
            <Expected>IOException is thrown</Expected>
        </Case>

        <Case ID="testWrite">
            <TestedMethod name="public void write(byte[] b, int off, int len)"/>
            <Precondition>create a RandomAccessFile</Precondition>
            <Description>write 3 bytes to it, close it and check that file length is 3.
            Then read data from that file using FileInputStream and check that 
            read() returns what was written. Then create a read-only RandomAccessFile and try to write to it
            - IOException is thrown </Description>
            <Expected></Expected>
        </Case>

        <Case ID="testWriteExceptions">
            <TestedMethod name="public void write(byte[] b, int off, int len)"/>
            <TestedMethod name="write(byte[], int, int)"/>
            <Precondition>create a RandomAccessFile</Precondition>
            <Description>try to write some illegal data to it (nulls, negative lengths, etc)</Description>
            <Expected>proper exceptions are thrown</Expected>
        </Case>

        <Case ID="testWriteByte">
            <TestedMethod name="write(int)"/>
            <Precondition>create a RandomAccessFile</Precondition>
            <Description>write some data to it using write(int), then close, check that the resulting
            file has proper size and 
            read data from the resulting file using FileInputStream</Description>
            <Expected>expected data is read</Expected>
        </Case>

        <Case ID="testWriteInt">
            <TestedMethod name="writeInt(int)"/>
            <Precondition>create a RandomAccessFile</Precondition>
            <Description>write some data to it using writeInt(int), then close, check that the resulting
            file has proper size and 
            read data from the resulting file using FileInputStream</Description>
            <Expected>expected data is read</Expected>
        </Case>

        <Case ID="testWriteUTF">
            <TestedMethod name="writeUTF(String)"/>
            <Precondition></Precondition>
            <Description>for a set of strings do the following:
            - create an empty RandomAccessFile
            - write the test string to it using writeUTF(String)
            - check that the RandomAccessFile has expected length
            - close the RandomAccessFile
            - open the resulted file with FileInputStream
            - read bytes from it and check them against gold bytes array
            </Description>
            <Expected></Expected>
        </Case>
    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="RandomAccessFileTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.RandomAccessFile.RandomAccessFileTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-generalVMOption" value="$generalVMOption"/>                                              
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
    <Restriction name="OtherVMOnly"/>
</Test> 
