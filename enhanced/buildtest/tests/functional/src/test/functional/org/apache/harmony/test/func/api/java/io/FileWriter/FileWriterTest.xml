<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="FileWriterTest"
    date-of-creation="2004-12-02"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="java.io.FileWriter"/>
        
        <Case ID="testClose">
             <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void close()"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call close()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testFlush">
             <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void flush()"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call flush()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testWriteInt">
             <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(int c)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(int) several times</Description>
            <Expected>only lower bytes of int are written</Expected>
        </Case>

        <Case ID="testWriteNullArray">
             <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(char[] cbuf)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write((char[]) null)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testWriteNullString">
             <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(String str)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write((String) null)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testWriteArray">
             <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(char[] cbuf)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(char[])</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteString">
             <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(String str)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(String)</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteArraySlice">
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(char[] cbuf, int off, int len)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(char[], int, int)</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteStringSlice">
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(String s, int off, int len)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(String, int, int)</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteArrayNegativeStart">
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(char[] cbuf, int off, int len)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(char[], int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteArrayNegativeLength">
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(char[] cbuf, int off, int len)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(char[], int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteArrayBigLength">
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(char[] cbuf, int off, int len)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(char[] buf, int start, int length ) 
            such as start + length &gt; buf.length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteStringNegativeStart">
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(String s, int off, int len)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(String, int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteStringNegativeLength">
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(String s, int off, int len)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(String, int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteStringBigLength">
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(String s, int off, int len)"/>
            <Precondition>create the FileWriter object</Precondition>
            <Description>call write(String src, int start, int length ) 
            such as start + length &gt; src.length()</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testOpenDirectory">
            <TestedMethod name="public FileWriter(String s)"/>
            <TestedMethod name="public FileWriter(String s, boolean b)"/>
            <Precondition></Precondition>
            <Description>try to open FileWriter on directory</Description>
            <Expected>FileNotFoundException is thrown</Expected>
        </Case>

        <Case ID="testDoubleOpen">
            <TestedMethod name="public FileWriter(String s)"/>
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(int c)"/>
            <Precondition>create two FileWriters pointing at one file</Precondition>
            <Description>write some data to them</Description>
            <Expected>no exception is thrown and only data from the second writer is written to file</Expected>
        </Case>

        <Case ID="testFileDescriptor">
            <TestedMethod name="public FileWriter(FileDescriptor fd)"/>
            <TestedClass name="java.io.OutputStreamWriter"/>
            <TestedMethod name="public void write(int c)"/>
            <Precondition>create a FileOutputStream and then a FileWriter with the FileDecriptor taken from the 
            stream</Precondition>
            <Description>write some data to them and close both</Description>
            <Expected>only data from the stream is written to the file</Expected>
        </Case>

        <Case ID="testReadonly">
            <TestedMethod name="public FileWriter(String s)"/>
            <TestedMethod name="public FileWriter(String s, boolean b)"/>
            <Precondition></Precondition>
            <Description>try to open FileWriter on read-only file</Description>
            <Expected>FileNotFoundException is thrown</Expected>
        </Case>

        <Case ID="testAppend">
            <TestedMethod name="FileWriter(String s)"/>
            <TestedMethod name="FileWriter(String s, boolean b)"/>
            <Precondition></Precondition>
            <Description>open writers in appending and not appending mode</Description>
            <Expected>opening with append=true doesn't rewrite file contents</Expected>
        </Case>
    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="FileWriterTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.FileWriter.FileWriterTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-generalVMOption" value="$generalVMOption"/>                                                
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
    <Restriction name="OtherVMOnly"/>
</Test> 
