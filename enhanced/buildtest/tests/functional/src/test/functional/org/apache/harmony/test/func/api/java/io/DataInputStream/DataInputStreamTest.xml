<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="DataInputStreamTest"
    date-of-creation="2004-12-03"
    timeout="1"
    >

    
    

    <MulticaseTestDescription>
        <TestedClass name="java.io.DataInputStream"/>
        
        <Case ID="testAvailable">
            <TestedClass name="java.io.FilterInputStream"/>
            <TestedMethod name="public int available()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call available()</Description>
            <Expected>return value is equal to file size</Expected>
        </Case>

        <Case ID="testClose">
            <TestedClass name="java.io.FilterInputStream"/>
            <TestedMethod name="public void close()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call close()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testMark">
            <TestedClass name="java.io.FilterInputStream"/>
            <TestedMethod name="public void mark(int readlimit)"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call mark(0)</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testMarkSupported">
            <TestedClass name="java.io.FilterInputStream"/>
            <TestedMethod name="public boolean markSupported()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call markSupported()</Description>
            <Expected>markSupported() returns false</Expected>
        </Case>

        <Case ID="testReset">
            <TestedClass name="java.io.FilterInputStream"/>
            <TestedMethod name="public void reset()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call mark(0) and reset()</Description>
            <Expected>IOException is thrown</Expected>
        </Case>

        <Case ID="testReadByte">
            <TestedClass name="java.io.FilterInputStream"/>
            <TestedMethod name="public int read()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call read()</Description>
            <Expected>read() returns expected value</Expected>
        </Case>

        <Case ID="testReadBytes">
            <TestedMethod name="public final int read(byte[] b)"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call read(byte[])</Description>
            <Expected>read(byte[]) returns expected value</Expected>
        </Case>

        <Case ID="testReadBytesSlice">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call read(byte[] buf, int offset, int len)</Description>
            <Expected>read(byte[] buf, int offset, int len) returns expected value</Expected>
        </Case>

        <Case ID="testReadBytesNull">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call read(null, int, int)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0001">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call read(byte[], int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0002">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call read(byte[], int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0003">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call read(byte[] buf, int offset, int len); buf.length &lt; offset + len</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testSkip">
            <TestedClass name="java.io.FilterInputStream"/>        
            <TestedMethod name="public long skip(long l)"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call skip(3)</Description>
            <Expected>it returns 3 and next byte read from the stream has a proper value</Expected>
        </Case>

        <Case ID="testReadBoolean">
            <TestedMethod name="public final boolean readBoolean()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readBoolean() few times</Description>
            <Expected>expected values returned</Expected>
        </Case>

        <Case ID="testReadSignedByte">
            <TestedMethod name="public final byte readByte()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readByte() few times</Description>
            <Expected>expected values returned</Expected>
        </Case>

        <Case ID="testReadUnsignedByte">
            <TestedMethod name="public final int readUnsignedByte()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readUnsignedByte() few times</Description>
            <Expected>expected values returned</Expected>
        </Case>

        <Case ID="testReadSignedShort">
            <TestedMethod name="public final short readShort()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readShort() few times</Description>
            <Expected>expected values returned and EOFException is thrown when there are not enough
            bytes in the stream</Expected>
        </Case>

        <Case ID="testReadUnsignedShort">
            <TestedMethod name="public final int readUnsignedShort()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readUnsignedShort() few times</Description>
            <Expected>expected values returned and EOFException is thrown when there are not enough
            bytes in the stream</Expected>
        </Case>

        <Case ID="testReadChar">
            <TestedMethod name="public final char readChar()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readChar() few times</Description>
            <Expected>expected values returned and EOFException is thrown when there are not enough
            bytes in the stream</Expected>
        </Case>

        <Case ID="testReadInt">
            <TestedMethod name="public final int readInt()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readInt() few times</Description>
            <Expected>expected values returned and EOFException is thrown when there are not enough
            bytes in the stream</Expected>
        </Case>

        <Case ID="testReadLong">
            <TestedMethod name="public final long readLong()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readLong() few times</Description>
            <Expected>expected values returned and EOFException is thrown when there are not enough
            bytes in the stream</Expected>
        </Case>

        <Case ID="testReadFloat">
            <TestedMethod name="public final float readFloat()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readFloat() few times</Description>
            <Expected>expected values returned and EOFException is thrown when there are not enough
            bytes in the stream</Expected>
        </Case>

        <Case ID="testReadDouble">
            <TestedMethod name="public final double readDouble()"/>
            <Precondition>create a DataInputStream object wrapping FileInputStream</Precondition>
            <Description>call readDouble() few times</Description>
            <Expected>expected values returned and EOFException is thrown when there are not enough
            bytes in the stream</Expected>
        </Case>

        <Case ID="testReadUTF">
            <TestedMethod name="public final String readUTF()"/>
            <Precondition>create a DataInputStream object wrapping ByteArrayInputStream</Precondition>
            <Description>call readUTF()</Description>
            <Expected>expected value returned or exception thrown depending on data in the array</Expected>
        </Case>

        <Case ID="testStaticReadUTF">
            <TestedMethod name="public static final String readUTF(DataInput in)"/>
            <Precondition>create a DataInputStream object wrapping ByteArrayInputStream</Precondition>
            <Description>call DataInputStream.readUTF() with this stream as a parameter</Description>
            <Expected>expected value returned or exception thrown depending on data in the array</Expected>
        </Case>

        <Case ID="testReadFullyNullBuffer">
            <TestedMethod name="readFully(byte[])"/>
            <Precondition>create a DataInputStream object wrapping ByteArrayInputStream</Precondition>
            <Description>call readFully(null)</Description>
            <Expected>NPE is thrown</Expected>
        </Case>

        <Case ID="testReadFully0001">
            <TestedMethod name="readFully(byte[])"/>
            <Precondition>create a DataInputStream object wrapping a prepared InputStream</Precondition>
            <Description>call readFully(byte[] array)</Description>
            <Expected>expected value returned</Expected>
        </Case>

        <Case ID="testReadFully0002">
            <TestedMethod name="readFully(byte[], int, int)"/>
            <Precondition>create a DataInputStream object wrapping a prepared InputStream</Precondition>
            <Description>call readFully(byte[] array, int, int)</Description>
            <Expected>expected value returned</Expected>
        </Case>

        <Case ID="testSkipBytes">
            <TestedMethod name="public final int skipBytes(int n)"/>
            <Precondition>create a DataInputStream object wrapping a prepared InputStream</Precondition>
            <Description>call skip(int toSkip) with toSkip &lt; stream capacity</Description>
            <Expected>returned value equals toSkip</Expected>
        </Case>

        <Case ID="testSkipBytes">
            <TestedMethod name="public final int skipBytes(int n)"/>
            <Precondition>create a DataInputStream object wrapping a prepared InputStream</Precondition>
            <Description>call skip(int toSkip) with toSkip &gt; stream capacity</Description>
            <Expected>returned value equals stream capacity</Expected>
        </Case>
    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="DataInputStreamTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.DataInputStream.DataInputStreamTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-generalVMOption" value="$generalVMOption"/>                                
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
    <Restriction name="OtherVMOnly"/>

</Test> 
