<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="ByteArrayInputStreamTest"
    date-of-creation="2004-11-12"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="java.io.ByteArrayInputStream"/>

        <Case ID="testClose">
            <TestedMethod name="close()"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>check that ByteArrayInputStream.close() can be called</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testAvailable">
            <TestedMethod name="public int available()"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call available(), then read() and available() again</Description>
            <Expected>available() initially is equal to underlying array's length and after read() 
            is equal to array's length - number of bytes read</Expected>
        </Case>

        <Case ID="testConstructorNoCopy">
            <TestedMethod name="public ByteArrayInputStream(byte[] buf)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>read first few bytes from it, change bytes in the underlying array,
            call reset() and read() again</Description>
            <Expected>bytes read in second read() are different than in the first one</Expected>
        </Case>

        <Case ID="testOffsetConstructor0001">
            <TestedMethod name="public ByteArrayInputStream(byte[] buf, int offset, int length)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>read first few bytes from it, call reset() and read() again</Description>
            <Expected>first and second read() are started from the position specified in the constructor</Expected>
        </Case>

        <Case ID="testOffsetConstructor0002">
            <TestedMethod name="public ByteArrayInputStream(byte[] buf, int offset, int length)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read() with a very large buffer, call reset() and read() with a very large buffer again</Description>
            <Expected>first and second read() return 'length'</Expected>
        </Case>

        <Case ID="testSelfRead0001">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read() with target buffer that was specified in the buffer's constructor</Description>
            <Expected>buf[] contains proper values after read()</Expected>
        </Case>

        <Case ID="testSelfRead0002">
            <TestedClass name="java.io.InputStream"/>
            <TestedMethod name="public int read(byte[] b)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read() with target buffer that was specified in the buffer's constructor</Description>
            <Expected>buf[] contains proper values after read()</Expected>
        </Case>

        <Case ID="testSkip0001">
            <TestedMethod name="public long skip(long n)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call skip() with an argument that is more than the array length</Description>
            <Expected>returned value is equal to array length</Expected>
        </Case>

        <Case ID="testSkip0002">
            <TestedMethod name="public long skip(long n)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call skip() with an argument that is less than the array length</Description>
            <Expected>returned value is equal to argument</Expected>
        </Case>

        <Case ID="testMark">
            <TestedMethod name="mark(int)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call ByteArrayInputStream.mark()</Description>
            <Expected>behaves like superclass</Expected>
        </Case>

        <Case ID="testMarkSupported">
            <TestedMethod name="public boolean markSupported()"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call markSupported</Description>
            <Expected>markSupported() returns true</Expected>
        </Case>

        <Case ID="testMarkSupported">
            <TestedMethod name="public boolean markSupported()"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call markSupported</Description>
            <Expected>markSupported() returns true</Expected>
        </Case>

        <Case ID="testReset">
            <TestedMethod name="reset()"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call reset()</Description>
            <Expected>behaves like superclass</Expected>
        </Case>

        <Case ID="testReadByte">
            <TestedMethod name="public int read() "/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read()</Description>
            <Expected>read() returns expected value</Expected>
        </Case>

        <Case ID="testReadBytes">
            <TestedClass name="java.io.InputStream"/>
            <TestedMethod name="public int read(byte[] b)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read(byte[])</Description>
            <Expected>read(byte[]) returns expected value</Expected>
        </Case>

        <Case ID="testReadBytes0001">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read(byte[], int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0002">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read(byte[], int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testReadBytes0003">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read(byte[] buf, int offset, int len); buf.length &lt; offset + len</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>
        
        <Case ID="testReadBytesNull">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read(null, int, int)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testReadBytesSlice">
            <TestedMethod name="public int read(byte[] b, int off, int len)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call read(byte[] buf, int offset, int len)</Description>
            <Expected>read(byte[] buf, int offset, int len) returns expected value</Expected>
        </Case>

        <Case ID="testReset0001">
            <TestedMethod name="mark(int)"/>
            <TestedMethod name="reset()"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>read some amount of bytes from it, then call mark(10), read next byte from the stream,
            read less than 10 bytes, call reset() and read byte from the stream again
            </Description>
            <Expected>bytes read just after mark() and just after reset() are equal</Expected>
        </Case>

        <Case ID="testReset0002">
            <TestedMethod name="mark(int)"/>
            <TestedMethod name="reset()"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>read some amount of bytes from it, then call mark(10), read next byte from the stream,
            read 9 bytes, call reset() and read byte from the stream again
            </Description>
            <Expected>bytes read just after mark() and just after reset() are equal</Expected>
        </Case>
        
        <Case ID="testSkip">
            <TestedMethod name="public long skip(long n)"/>
            <Precondition>create the ByteArrayInputStream object</Precondition>
            <Description>call skip(3)</Description>
            <Expected>it returns 3 and next byte read from the stream has a proper value</Expected>
        </Case>
    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="ByteArrayInputStreamTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.ByteArrayInputStream.ByteArrayInputStreamTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
</Test> 
