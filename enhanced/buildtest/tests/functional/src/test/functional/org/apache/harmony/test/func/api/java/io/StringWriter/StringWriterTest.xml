<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="StringWriterTest"
    date-of-creation="2006-03-09"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="java.io.StringWriter"/>
        
        <Case ID="testClose">
             <TestedMethod name="StringWriter()"/>
            <TestedMethod name="public void close()"/>
            <TestedMethod name="public StringBuffer getBuffer()"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>write no data to StringWriter, close it and write some data</Description>
            <Expected>data is written after close()</Expected>
        </Case>

        <Case ID="testFlush">
             <TestedMethod name="StringWriter()"/>
            <TestedMethod name="public void flush()"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call flush()</Description>
            <Expected>no exception</Expected>
        </Case>

        <Case ID="testWriteInt">
             <TestedMethod name="StringWriter()"/>
            <TestedMethod name="public void write(int c)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(int) several times and flush() then</Description>
            <Expected>only lower bytes of int are written</Expected>
        </Case>

        <Case ID="testWriteNullArray">
               <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(char[] cbuf)"/>
            <Precondition>create a StringWriter</Precondition>
            <Description>call write((char[]) null)</Description>
            <Expected>NullPointerException is thrown</Expected>
        </Case>

        <Case ID="testWriteNullString">
            <TestedMethod name="public void write(String str)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write((String) null)</Description>
            <Expected>NullPointerException is not thrown</Expected>
        </Case>

        <Case ID="testWriteArray">
               <TestedClass name="java.io.Writer"/>
            <TestedMethod name="public void write(char[] cbuf)"/>
            <Precondition>create a StringWriter</Precondition>
            <Description>call write(char[]) and flush() then</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteString">
            <TestedMethod name="public void write(String str)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(String) and flush()</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteArraySlice">
            <TestedMethod name="public void write(char[] cbuf, int off, int len)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(char[], int, int) and flush()</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteStringSlice">
            <TestedMethod name="public void write(String str, int off, int len)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(String, int, int) and flush()</Description>
            <Expected>data is written properly</Expected>
        </Case>

        <Case ID="testWriteArrayNegativeStart">
            <TestedMethod name="public void write(char[] cbuf, int off, int len)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(char[], int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteArrayNegativeLength">
            <TestedMethod name="public void write(char[] cbuf, int off, int len)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(char[], int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteArrayBigLength">
            <TestedMethod name="public void write(char[] cbuf, int off, int len)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(char[] buf, int start, int length ) 
            such as start + length &gt; buf.length</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteStringNegativeStart">
            <TestedMethod name="public void write(String str, int off, int len)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(String, int &lt; 0, int)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteStringNegativeLength">
            <TestedMethod name="public void write(String str, int off, int len)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(String, int, int &lt; 0)</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

        <Case ID="testWriteStringBigLength">
            <TestedMethod name="public void write(String str, int off, int len)"/>
            <Precondition>create a StringWriter object</Precondition>
            <Description>call write(String src, int start, int length ) 
            such as start + length &gt; src.length()</Description>
            <Expected>IndexOutOfBoundsException is thrown</Expected>
        </Case>

    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="StringWriterTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.StringWriter.StringWriterTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
</Test> 
