<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="logging_01"
    date-of-creation="2005-08-31"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="java.util.logging.Level"/>

        <Case ID="testLevel1">
            <TestedMethod name="protected Level(String name, int value)"/>
            <Precondition>Create the myLevel class extending java.util.Level class</Precondition>
            <Description>Creates 2 myLevel instances using this constructor,
            checks if the constructor with null bundle name works the same way 
            as the constructor without this argument.    
            </Description>
            <Expected>0</Expected>
        </Case>
        <Case ID="testLevel2">
        <TestedMethod name="protected Level(String name, int value, String resourceBundleName)"/>
            <Precondition>Create the myLevel class extending java.util.Level class</Precondition>
            <Description>Creates myLevel instance using this constructor,
            checks its name, value etc.</Description>
            <Expected>0</Expected>
        </Case>
        <Case ID="testIntValue">
            <TestedMethod name="public int intValue()"/>
            <Precondition>None</Precondition>
            <Description>Checks if intValue() returns right values for all possible standard levels.</Description>
            <Expected>0</Expected>
        </Case>
        <Case ID="testParse">
            <TestedMethod name="public static Level parse(String name)"/>
            <Precondition>None</Precondition>
            <Description>Checks if parse() returns right names for all possible standard levels.</Description>
            <Expected>0</Expected>
        </Case>
        <Case ID="testToString">
            <TestedMethod name="public String toString()"/>
            <Precondition>None</Precondition>
            <Description>Checks if toString() returns right strings for all possible standard levels.</Description>
            <Expected>0</Expected>
        </Case>
        <Case ID="testGetLocalizedName">
            <TestedMethod name="public String getLocalizedName()"/>
            <Precondition>None</Precondition>
            <Description>Checks if getLocalized() returns right values for some non-localized 
            as well as localized levels using ResourceBundle with localized values. </Description>
            <Expected>0</Expected>
        </Case>
        
    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="logging_01.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.util.logging.Level.logging_01">
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
</Test> 
