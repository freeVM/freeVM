/*
    Copyright 2005-2006 The Apache Software Foundation or its licensors, as applicable

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

    See the License for the specific language governing permissions and
    limitations under the License.
*/
/**
 * Author: Maxim V. Makarov
 * Version: $Revision: 1.1 $
 */

magic = xCAFEBABE

minor_version = 3

major_version = 45

constant_pool_count = 43

constant_pool {
  /* #1 */ UTF8 = "java/lang/Double"
  /* #2 */ UTF8 = "([Ljava/lang/String;)V"
  /* #3 */ UTF8 = "java/lang/Object"
  /* #4 */ UTF8 = "<init>"
  /* #5 */ Class = #3
  /* #6 */ NameAndType = #4 #11
  /* #7 */ NameAndType = #30 #16
  /* #8 */ Method = #10 #6
  /* #9 */ NameAndType = #27 #21
  /* #10 */ Class = #22
  /* #11 */ UTF8 = "()V"
  /* #12 */ Class = #26
  /* #13 */ UTF8 = "Code"
  /* #14 */ Method = #12 #9
  /* #15 */ UTF8 = "main"
  /* #16 */ UTF8 = "([Ljava/lang/String;)I"
  { x06 x7F xF0 x00 x00 x00 xFF xFF x01 } // NaN
  /* #19 */ UTF8 = "isNaN"
  /* #20 */ UTF8 = "SourceFile"
  /* #21 */ UTF8 = "(I)V"
  /* #22 */ UTF8 = "org/apache/harmony/vts/test/vm/jvms/classFile/constantPool/doubleInfo/doubleInfo08/doubleInfo08p"
  /* #23 */ Method = #5 #6
  /* #24 */ UTF8 = "(D)Z"
  /* #25 */ Class = #1
  /* #26 */ UTF8 = "java/lang/System"
  /* #27 */ UTF8 = "exit"
  /* #28 */ NameAndType = #19 #24
  /* #29 */ Method = #10 #7
  /* #30 */ UTF8 = "test"
  /* #31 */ Method = #25 #28
  { x06 xFF xF0 x00 x00 x00 xFF xFF xFF } // NaN
  /* #34 */ UTF8 = "doubleInfo08p.ccode"
  { x06 x7F xF0 x00 x00 x00 x00 x00 x01 } // NaN
  { x06 x7F xFF xFF xFF xFF xFF xFF xFF } // NaN
  { x06 xFF xF0 x00 x00 x00 x00 x00 x01 } // NaN
  { x06 xFF xFF xFF xFF xFF xFF xFF xFF } // NaN

}

access_flags = PUBLIC SUPER  // x21

this_class = #10  // "doubleInfo08p"

super_class = #5  // "java/lang/Object"

interfaces_count = 0

interfaces {
}

fields_count = 0

methods_count = 3

methods {
  method {
    access_flag = PUBLIC  // x01
    name_index = #4  // "<init>"
    descriptor_index = #11  // "()V"
    attributes_count = 1
      attributes {
        attribute Code {
          attribute_name_index = #13  // "Code"
          attribute_length = 17
          max_stack = 1
          max_locals = 1
          code_length = 5
          code asm {
          0:	aload_0
          1:	invokespecial #23  // "java/lang/Object" "<init>" "()V"
          4:	return
          }
          exception_table_length = 0
          attributes_count = 0
        }
      }
  }
  method {
    access_flag = PUBLIC  // x01
    name_index = #30  // "test"
    descriptor_index = #16  // "([Ljava/lang/String;)I"
    attributes_count = 1
      attributes {
        attribute Code {
          attribute_name_index = #13  // "Code"
          attribute_length = 74
          max_stack = 4
          max_locals = 2
          code_length = 62
          code asm {
          0:	ldc2_w #17  // NaN
          3:	invokestatic #31  // "java/lang/Double" "isNaN" "(D)Z"
          6:	ifne 52
          9:	ldc2_w #32  // NaN
          12:	invokestatic #31  // "java/lang/Double" "isNaN" "(D)Z"
          15:	ifne 43
          18:	ldc2_w #35  // NaN
          21:	invokestatic #31  // "java/lang/Double" "isNaN" "(D)Z"
          24:	ifne 34
          27:	ldc2_w #37  // NaN
          30:	invokestatic #31  // "java/lang/Double" "isNaN" "(D)Z"
          33:	ifne 25
          36:	ldc2_w #39  // NaN
          39:	invokestatic #31  // "java/lang/Double" "isNaN" "(D)Z"
          42:	ifne 16
          45:	ldc2_w #41  // NaN
          48:	invokestatic #31  // "java/lang/Double" "isNaN" "(D)Z"
          51:	ifne 7
          54:	sipush 105
          57:	ireturn
          58:	sipush 104
          61:	ireturn
          }
          exception_table_length = 0
          attributes_count = 0
        }
      }
  }
  method {
    access_flag = PUBLIC STATIC  // x09
    name_index = #15  // "main"
    descriptor_index = #2  // "([Ljava/lang/String;)V"
    attributes_count = 1
      attributes {
        attribute Code {
          attribute_name_index = #13  // "Code"
          attribute_length = 27
          max_stack = 2
          max_locals = 1
          code_length = 15
          code asm {
          0:	new #10  // "doubleInfo08p"
          3:	dup
          4:	invokespecial #8  // "doubleInfo08p" "<init>" "()V"
          7:	aload_0
          8:	invokevirtual #29  // "doubleInfo08p" "test" "([Ljava/lang/String;)I"
          11:	invokestatic #14  // "java/lang/System" "exit" "(I)V"
          14:	return
          }
          exception_table_length = 0
          attributes_count = 0
        }
      }
  }
}

attributes_count = 0
