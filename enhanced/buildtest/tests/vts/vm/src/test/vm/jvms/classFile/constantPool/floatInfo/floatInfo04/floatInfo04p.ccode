/*
    Copyright 2005-2006 The Apache Software Foundation or its licensors, as applicable

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

    See the License for the specific language governing permissions and
    limitations under the License.
*/
/**
 * Author: Maxim V. Makarov
 * Version: $Revision: 1.1 $
 */

magic = xCAFEBABE

minor_version = 3

major_version = 45

constant_pool_count = 37

constant_pool {
  /* #1 */ UTF8 = "([Ljava/lang/String;)V"
  /* #2 */ UTF8 = "java/lang/Object"
  /* #3 */ UTF8 = "<init>"
  /* #4 */ Class = #2
  /* #5 */ NameAndType = #3 #11
  /* #6 */ NameAndType = #29 #17
  /* #7 */ Method = #9 #5
  /* #8 */ NameAndType = #26 #20
  /* #9 */ Class = #21
  { x04 x7F x80 xFF x01 } // float = NaN
  /* #11 */ UTF8 = "()V"
  { x04 xFF x80 xFF xFF } // float = NaN
  /* #13 */ Class = #25
  /* #14 */ UTF8 = "Code"
  /* #15 */ Method = #13 #8
  /* #16 */ UTF8 = "main"
  /* #17 */ UTF8 = "([Ljava/lang/String;)I"
  /* #18 */ UTF8 = "isNaN"
  /* #19 */ UTF8 = "SourceFile"
  /* #20 */ UTF8 = "(I)V"
  /* #21 */ UTF8 = "org/apache/harmony/vts/test/vm/jvms/classFile/constantPool/floatInfo/floatInfo04/floatInfo04p"
  /* #22 */ Method = #4 #5
  /* #23 */ Method = #24 #30
  /* #24 */ Class = #32
  /* #25 */ UTF8 = "java/lang/System"
  /* #26 */ UTF8 = "exit"
  /* #27 */ UTF8 = "(F)Z"
  /* #28 */ Method = #9 #6
  /* #29 */ UTF8 = "test"
  /* #30 */ NameAndType = #18 #27
  /* #31 */ UTF8 = "floatInfo04p.ccode"
  /* #32 */ UTF8 = "java/lang/Float"
 { x04 x7F x80 x00 x01 } // NaN
 { x04 x7F xFF xFF xFF } // NaN
 { x04 xFF x80 x00 x01 } // NaN
 { x04 xFF xFF xFF xFF } // NaN

}

access_flags = PUBLIC SUPER  // x21

this_class = #9  // "floatInfo04p"

super_class = #4  // "java/lang/Object"

interfaces_count = 0

interfaces {
}

fields_count = 0

methods_count = 3

methods {
  method {
    access_flag = PUBLIC  // x01
    name_index = #3  // "<init>"
    descriptor_index = #11  // "()V"
    attributes_count = 1
      attributes {
        attribute Code {
          attribute_name_index = #14  // "Code"
          attribute_length = 17
          max_stack = 1
          max_locals = 1
          code_length = 5
          code asm {
          0:	aload_0
          1:	invokespecial #22  // "java/lang/Object" "<init>" "()V"
          4:	return
          }
          exception_table_length = 0
          attributes_count = 0
        }
      }
  }
  method {
    access_flag = PUBLIC  // x01
    name_index = #29  // "test"
    descriptor_index = #17  // "([Ljava/lang/String;)I"
    attributes_count = 1
      attributes {
        attribute Code {
          attribute_name_index = #14  // "Code"
          attribute_length = 68
          max_stack = 4
          max_locals = 2
          code_length = 56
          code asm {
          0:	ldc #12
          2:	invokestatic #23  // "java/lang/Float" "isNaN" "(F)Z"
          5:	ifne 47
          8:	ldc #10
          10:	invokestatic #23  // "java/lang/Float" "isNaN" "(F)Z"
          13:	ifne 39
          16:	ldc #33
          18:	invokestatic #23  // "java/lang/Float" "isNaN" "(F)Z"
          21:	ifne 31
          24:	ldc #34
          26:	invokestatic #23  // "java/lang/Float" "isNaN" "(F)Z"
          29:	ifne 23
          32:	ldc #35
          34:	invokestatic #23  // "java/lang/Float" "isNaN" "(F)Z"
          37:	ifne 15
          40:	ldc #36
          42:	invokestatic #23  // "java/lang/Float" "isNaN" "(F)Z"
          45:	ifne 7
          48:	sipush 105
          51:	ireturn
          52:	sipush 104
          55:	ireturn

          }
          exception_table_length = 0
          attributes_count = 0
        }
      }
  }
  method {
    access_flag = PUBLIC STATIC  // x09
    name_index = #16  // "main"
    descriptor_index = #1  // "([Ljava/lang/String;)V"
    attributes_count = 1
      attributes {
        attribute Code {
          attribute_name_index = #14  // "Code"
          attribute_length = 27
          max_stack = 2
          max_locals = 1
          code_length = 15
          code asm {
          0:	new #9  // "floatInfo04p"
          3:	dup
          4:	invokespecial #7  // "floatInfo04p" "<init>" "()V"
          7:	aload_0
          8:	invokevirtual #28  // "floatInfo04p" "test" "([Ljava/lang/String;)I"
          11:	invokestatic #15  // "java/lang/System" "exit" "(I)V"
          14:	return
          }
          exception_table_length = 0
          attributes_count = 0
        }
      }
  }
}

attributes_count = 0
