<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->
<!DOCTYPE Test SYSTEM "test.dtd">
<Test
	ID="FrameTest002"
	date-of-creation="2005-11-03"
	timeout="3"
	>
    <!--
    Author:  Anatoly Bondarenko
    Version: $Revision: 1.3 $
    -->
		<Copyright value="apache"/>
		<Author value="Anatoly Bondarenko"/>
		<Description>
         This tests case exercises the JDWP commands: VirtualMachine.AllThreads,
         ThreadReference.Frames and StackFrame.ThisObject for very big number
         of threads running in debuggee and under memory stress in debuggee.
         The test's steps:
         - Debuggee: creates separate thread and starts it big number of times -
            each thread runs some recursive method some number of times
            and then it is suspended by some event; 
         - Debugger: runs VirtualMachine.AllThreads command;
            - for all started and suspended threads runs ThreadReference.Frames command;
            - checks if all returned locations contain expected ClassID and MethodID;
            - checks if StackFrame.ThisObject commands return expected ObjectID or
              null for static methods;
         - Debugger: resumes some threads which continue to run recursive methods some more
            times and wait for some signal to continue and to be suspended again;
            - checks if for all resumed treads ThreadReference.Frames command for
              causes THREAD_NOT_SUSPENDED;
            - checks if for all resumed treads StackFrame.ThisObject command 
              causes THREAD_NOT_SUSPENDED;
         - Debuggee: Creates memory stress until OutOfMemory;
         - Debuggee: sends to each resumed thread signal to continue and be suspeneded again;
         - Debugger: for all threads runs ThreadReference.Frames command again and checks that:
            - all returned FrameIDs for all threads have unique values as before;
            - for all threads which were not resumed returned frameIDs are the same as before;
            - returned locations are correct as before;
            - for all threads StackFrame.ThisObject command for all
              FrameIDs returns the correct ObjectIDs as before;

         Expected results: 
            - NO errors excluding OutOfMemory and expected errors;
   		</Description>

		<Keyword name="stress"/>
		<Keyword name="jpda"/>
		<Source name="FrameTest002.java"/>
		<Source name="FrameDebuggee002.java"/>
		<Modification date="2005-11-03" author="Anatoly Bondarenko"/>

		<Runner ID="Runtime">
			<Option name="-Djpda.settings.timeout=1200000"/>
			<Param name="toRun" value="org.apache.harmony.test.stress.jpda.jdwp.scenario.FRAME002.FrameTest002">
			</Param>
		</Runner>
</Test> 