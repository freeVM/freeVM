<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Copyright 2005-2006 The Apache Software Foundation or its licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project name="get.resources" default="update.external.resources">

    <!-- check we are using ant 1.6.5 or above -->        
    <target name="check.ant.version">
        <propertyregex property="ant.sub.sub.version" input="${ant.version}" regexp="version (\d*)\.(\d*)\.(\d*)" select="\3" defaultValue="0" />
        <propertyregex property="ant.sub.version" input="${ant.version}" regexp="version (\d*)\.(\d*)\.(\d*)" select="\2" defaultValue="0" />
        <propertyregex property="ant.version1" input="${ant.version}" regexp="version (\d*)\.(\d*)\.(\d*)" select="\1" defaultValue="0" />

        <math result="ch1">
            <op op="+" datatype="int">
                <op arg1="${ant.version1}" arg2="10000" op="*" datatype="int"/>
                <op arg1="${ant.sub.version}" arg2="100" op="*" datatype="int"/>
                <num value="${ant.sub.sub.version}"/>
            </op>
        </math>
        <math result="ch2" operand1="10605" operand2="${ch1}" operation="min" datatype="int"/>
        

        <fail>
            <condition>
                <not>
                    <equals arg1="10605" arg2="${ch2}"/>
                </not>
            </condition>
* You have wrong version of ANT :${ant.version}
* Make sure you have Ant 1.6.5 or above installed from
* http://ant.apache.org/bindownload.cgi and that ANT_HOME environment
* variable points out to the Ant installation dir, e.g.
* export ANT_HOME=/usr/local/ant_1.6.5
        </fail>
    </target>

    <target name="init" depends="">
        <!-- precopied folder location -->
        <property name="build.precopied.dir" location="../pre-copied" />
        <condition property="jars.exist">
            <and>
                <available file="tmp/done.txt" />
                <available file="tmp/ant-contrib.jar" />
            </and>
        </condition>

        <!-- cpptasks patching removed  
        <condition property="cpptasks.patched">
            <and>
                <available file="tmp/patched.txt" />
            </and>
        </condition>
        -->
        <echo message="jars: ${jars.exist}" />
    </target>


    <target name="get.antcontrib" depends="init" unless="jars.exist">
        <echo message="here" />
        <ant antfile="get_antcontrib.xml" inheritall="true" />
    </target>

    <!-- plugin the ANTCONTRIB -->
    <target name="plugin.antcontrib" depends="get.antcontrib">
        <!-- plug in the ANTCONTRIB -->
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="tmp/ant-contrib.jar" />
            </classpath>
        </taskdef>
    </target>

    <target name="update.external.resources" depends="get.antcontrib, 
                                                      plugin.antcontrib,
                                                      check.ant.version,
                                                      download.remote.files,
                                                      unzip.resources,
                                                      check.unzipped.externals,
                                                      copy.nessessary.jars,
                                                      apply.patches">
    </target>


    <target name="setup.check.files" depends="setup.resources">
        <property name="CPPTASKS.check.file" value="cpptasks.jar" />
        <property name="JASMIN.check.file" value="jasmin.jar" />
        <property name="APR.check.file" value="file_io/netware/filestat.c" />
        <property name="APRUTIL.check.file" value="encoding/apr_base64.c" />
        <property name="APRICONV.check.file" value="lib/api_version.c" />
        <property name="LOG4CXX.check.file" value="configure.in" />
        <property name="ZLIB.check.file" value="zlib1.dll" />
        <property name="ZLIB-x86_64.check.file" value="zlib1.dll" />
        <property name="CLASSLIB.check.file" value="native-src/README.txt" />
        <property name="XALAN.check.file" value="xalan.jar" />
        <property name="VM.check.file" value="vmcore/src/init/vm_init.cpp" />
        <property name="ANTLR.check.file" value="antlr-2.7.5.jar" />
        <property name="VMMAGIC.check.file" value="vmmagic-20070207.jar" />
        <property name="PATCHES.check.file" value="README.txt" />
    </target>



    <target name="check.unzipped.externals" depends="init,setup.check.files,setup.properties">

        <for param="resource" list="${os.resources}" delimiter=",">
            <sequential>
                <property name="local.@{resource}.home" value="${build.precopied.dir}/${build.os.short}/@{resource}" />
                <check-resource resource="@{resource}" />
            </sequential>
        </for>

        <for param="resource" list="${common.resources}" delimiter=",">
            <sequential>

                <!-- start treating CLASSLIB as special.  We'll remove this
                     once we get a round of review

                     If classlib, just hardwire according to the property
                 -->

                <if>
                    <equals arg1="@{resource}" arg2="CLASSLIB"/>
                    <then>
                        <property name="local.@{resource}.home"
                                  value="${external.dep.CLASSLIB}" />
                        <check-resource resource="@{resource}" />
                    </then>
                    <else>
                        <property name="local.@{resource}.home" value="${build.precopied.dir}/common/@{resource}" />
                        <check-resource resource="@{resource}" />

                    </else>
                </if>
            </sequential>
        </for>
    </target>

    <target name="copy.nessessary.jars">

        <copy file="${external.dep.CLASSLIB}/depends/jars/junit_3.8.2/junit.jar" todir="tmp" />

        <propertyregex property="build.XALAN.path" input="${if.XALAN.exist}" regexp="(.*)/${XALAN.check.file}" select="\1" />
        <copy file="${build.XALAN.path}/xalan.jar" todir="tmp" />

        <propertyregex property="build.CPPTASKS.path" input="${if.CPPTASKS.exist}" regexp="(.*)/${CPPTASKS.check.file}" select="\1" />
        <copy file="${build.CPPTASKS.path}/cpptasks.jar" todir="tmp" />
        <propertyregex property="build.JASMIN.path" input="${if.JASMIN.exist}" regexp="(.*)/${JASMIN.check.file}" select="\1" />
        <copy file="${build.JASMIN.path}/jasmin.jar" todir="tmp" />
        <echo message="done" file="tmp/done.txt" />
    </target>

    <target name="generate.internal.variables" depends="">

        <echo file="${generated.properties.file}" message="" />
        <for param="resource" list="${os.resources},${common.resources}" delimiter=",">
            <sequential>
                <propertycopy override="true" from="local.@{resource}.home" property="build.r.home" />
                <propertycopy property="resourcepath" from="if.@{resource}.exist" override="true" />
                <propertycopy override="true" from="@{resource}.check.file" property="check.file" />
                <propertyregex property="build.@{resource}.path" input="${resourcepath}" regexp="(.*)/${check.file}" select="\1" />
                <propertycopy override="true" property="build.resource.path" from="build.@{resource}.path" />
                <echo file="${generated.properties.file}" append="true">
                    build.@{resource}.home=${build.resource.path}
                </echo>
            </sequential>
        </for>
    </target>



    <target name="setup.resources" depends="plugin.antcontrib">
        <property name="common.resources" value="LOG4CXX,CPPTASKS,XALAN,VM,ANTLR,PATCHES,JASMIN,VMMAGIC" />
        <property name="build.resources" value="CPPTASKS" />
        <if>
            <isset property="if.unix" />
            <then>
                <property name="os.resources" value="APR,APRUTIL,APRICONV" />
                <if>
                    <isset property="if.lnx" />
                    <then>
                        <property name="build.os.short" value="lnx" />
                    </then>
                    <else>
                        <property name="build.os.short" value="macosx" />
                    </else>
                </if>
            </then>
            <else>
                <property name="build.os.short" value="win" />
                <if>
                    <equals arg1="${build.arch}" arg2="em64t" />
                    <then>
                        <property name="os.resources" value="APR,APRUTIL,APRICONV,ZLIB-x86_64" />
                    </then>
                    <else>
                        <property name="os.resources" value="APR,APRUTIL,APRICONV,ZLIB" />
                    </else>
                </if>
            </else>
        </if>
    </target>

    <target name="setup.properties" depends="plugin.antcontrib,setup.resources,setup.check.files">
        <for list="${common.resources},${os.resources}" param="resource" delimiter=",">
            <sequential>
                <propertycopy name="remote.@{resource}.archive" from="env.remote.@{resource}.archive" silent="true" />
                <property name="remote.@{resource}.archive" value="no_settings_in_config_or_environment" />
                <propertycopy name="local.@{resource}.archive" from="env.local.@{resource}.archive" silent="true" />
                <propertycopy name="@{resource}_HOME" from="env.@{resource}_HOME" silent="true" />
                <propertycopy name="remote.@{resource}.archive.type" from="env.remote.@{resource}.archive.type" silent="true" />
                <if>
                    <isset property="@{resource}_HOME" />
                    <then>
                        <propertycopy override="true" property="check.file" from="@{resource}.check.file" />
                        <propertycopy override="true" property="build.RESOURCE_HOME" from="@{resource}_HOME" />
                        <condition property="local.@{resource}.home" value="${build.RESOURCE_HOME}">
                            <available file="${build.RESOURCE_HOME}/${check.file}" />
                        </condition>
                    </then>
                </if>
                <property name="remote.@{resource}.archive.type" value="archive" />

                <if>
                    <and>
                        <equals arg1="${remote.@{resource}.archive}" arg2="no_settings_in_config_or_environment" />
                        <not>
                            <isset property="@{resource}_HOME" />
                        </not>
                    </and>
                    <then>
                        <if>
                            <equals arg1="@{resource}" arg2="VM" />
                            <then>
                                <fail>Error:
* Location of VM is not specified.
*
* Please specify the VM location by setting VM_HOME (for example, in
* make/lnx.properties or make/win.properties or in environment).
*
* See README for details.
                                </fail>
                            </then>
                            <else>
                                <fail>Error:
* Location of @{resource} is not specified.
*
* Please specify the @{resource} location by setting one of:
*   1. remote.@{resource}.archive (make/lnx.properties or make/win.properties)
*   2. local.@{resource}.archive  (make/lnx.properties or make/win.properties)
*   3. @{resource}_HOME           (make/lnx.properties or
*                                  make/win.properties or in environment)
*
* See README for details.
                                </fail>
                            </else>
                        </if>
                    </then>
                </if>
            </sequential>
        </for>
        <propertycopy name="http.proxyHost" from="env.http.proxyHost" silent="true" />
        <propertycopy name="http.proxyPort" from="env.http.proxyPort" silent="true" />
        <if>
            <isset property="http.proxyHost" />
            <then>
                <echo message="using proxy settings: ${http.proxyHost} port:${http.proxyPort}" />
                <setproxy proxyhost="${http.proxyHost}" proxyport="${http.proxyPort}" />
            </then>
        </if>
    </target>

    <target name="download.remote.files" depends="plugin.antcontrib,
                                                  setup.resources, 
                                                  setup.properties">
        <for param="resource" list="${os.resources}" delimiter=",">
            <sequential>
                <get-remote-resource resource="@{resource}" archive.dest.dir="${build.precopied.dir}/archives/${build.os.short}" local.home.dest.dir="${build.precopied.dir}/${build.os.short}" />
            </sequential>
        </for>
        <for param="resource" list="${common.resources}" delimiter=",">
            <sequential>
                <get-remote-resource resource="@{resource}" archive.dest.dir="${build.precopied.dir}/archives/common" local.home.dest.dir="${build.precopied.dir}/common" />
            </sequential>
        </for>
    </target>

    <target name="unzip.resources" depends="download.remote.files">
        <mkdir dir="${build.precopied.dir}" />
        <for param="resource" list="${os.resources}" delimiter=",">
            <sequential>
                <unzip-resource resource="@{resource}" dest.dir="${build.precopied.dir}/${build.os.short}" />
            </sequential>
        </for>
        <for param="resource" list="${common.resources}" delimiter=",">
            <sequential>
                <unzip-resource resource="@{resource}" dest.dir="${build.precopied.dir}/common" />
            </sequential>
        </for>
    </target>

    <target name="clean.update" depends="init">
        <delete dir="${build.precopied.dir}" failonerror="false" />
        <delete file="tmp/patched.txt" />
        <delete file="tmp/done.txt" />
    </target>

    <target name="check.tmp.jars">
        <fail>
            <condition>
                <not>
                    <and>
                        <available file="tmp/junit.jar" />
                        <available file="tmp/xalan.jar" />
                    </and>
                </not>
            </condition>Error:
* External resources are not downloaded.
* Please, execute "build update" before actual building or testing.
*
* For example:
*     c:\build> build.bat update
*     c:\build> build.bat
*
* See README for details.
                </fail>
        <property name="jars.checked" value="true" />
    </target>

    <target name="apply.patches" depends="get.antcontrib, 
                                                      plugin.antcontrib,
                                                      check.ant.version,
                                                      download.remote.files,
                                                      unzip.resources,
                                                      check.unzipped.externals,
                                                      copy.nessessary.jars,
                                                      generate.internal.variables">
        <for param="resource" list="${os.resources}" delimiter=",">
            <sequential>
                <if>
                    <available file="${build.PATCHES.path}/${build.os.short}/@{resource}" />
                    <then>
                        <propertycopy override="true" from="build.@{resource}.path" property="res.path" />
                        <copy todir="${res.path}" overwrite="yes" failonerror="false">
                            <fileset dir="${build.PATCHES.path}/${build.os.short}/@{resource}" includes="**" excludes="*.patch" />
                        </copy>
                    </then>
                </if>
            </sequential>
        </for>
        <for param="resource" list="${common.resources}" delimiter=",">
            <sequential>
                <if>
                    <available file="${build.PATCHES.path}/common/@{resource}" />
                    <then>
                        <propertycopy override="true" from="build.@{resource}.path" property="res.path" />
                        <copy todir="${res.path}" overwrite="yes" failonerror="false">
                            <fileset dir="${build.PATCHES.path}/common/@{resource}" includes="**" excludes="*.patch" />
                        </copy>
                    </then>
                </if>
            </sequential>
        </for>
    </target>

    <target name="setup" depends="check.tmp.jars,
                                  plugin.antcontrib,
                                  check.ant.version,
                                  check.unzipped.externals,
                                  generate.internal.variables" />

    <macrodef name="get-remote-resource">
        <attribute name="resource" />
        <attribute name="archive.dest.dir" />
        <attribute name="local.home.dest.dir" />
        <sequential>
            <if>
                <not>
                    <or>
                        <isset property="local.@{resource}.home" />
                        <isset property="local.@{resource}.archive" />
                    </or>
                </not>
                <then>
                    <propertycopy override="true" property="remote.resource.archive" from="remote.@{resource}.archive" />
                    <propertycopy override="true" property="remote.resource.archive.type" from="remote.@{resource}.archive.type" />
                    <switch value="${remote.resource.archive.type}">
                        <case value="archive">
                            <propertyregex property="archive.@{resource}.filename" input="${remote.resource.archive}" regexp=".*?([^/\\]+)$" select="\1" defaultValue="" />
                            <propertycopy override="true" property="archive.filename" from="archive.@{resource}.filename" silent="true" />
                            <property name="@{resource}.grr.destdir" value="@{archive.dest.dir}" />
                            <property name="local.@{resource}.archive" value="@{archive.dest.dir}/@{resource}/${archive.filename}" />
                        </case>
                        <default>
                            <property name="@{resource}.grr.destdir" value="@{local.home.dest.dir}" />
                            <property name="local.@{resource}.archive" value="@{local.home.dest.dir}/@{resource}" />
                        </default>
                    </switch>
                    <propertycopy override="true" from="@{resource}.grr.destdir" property="dest.dir" />
                    <if>
                        <available file="${dest.dir}/@{resource}.txt" />
                        <then>
                            <loadfile property="old.@{resource}.location" srcFile="${dest.dir}/@{resource}.txt" />
                        </then>
                    </if>
                    <propertycopy override="true" property="old.location" from="old.@{resource}.location" silent="true" />
                    <if>
                        <and>
                            <available file="${dest.dir}/@{resource}.txt" />
                            <equals arg1="${old.location}" arg2="${remote.@{resource}.archive}" />
                        </and>
                        <then>
                        </then>
                        <else>
                            <delete file="${dest.dir}/@{resource}.txt" failonerror="false" />
                            <delete dir="${dest.dir}/@{resource}" />
                            <mkdir dir="${dest.dir}/@{resource}" />
                            <switch value="${remote.resource.archive.type}">
                                <case value="svn">
                                    <echo message="downloading svn: @{resource} from ${remote.resource.archive}" />
                                    <if>
                                        <isset property="if.win" />
                                        <then>
                                            <exec executable="svn.exe" failonerror="true">
                                                <arg line="co --non-interactive ${remote.resource.archive} ${dest.dir}/@{resource}" />
                                            </exec>
                                        </then>
                                        <else>
                                            <exec executable="svn" failonerror="true">
                                                <arg line="co --non-interactive ${remote.resource.archive} ${dest.dir}/@{resource}" />
                                            </exec>
                                        </else>
                                    </if>
                                </case>
                                <default>
                                    <echo message="downloading @{resource} from ${remote.resource.archive}" />
                                    <propertyregex property="archive.@{resource}.filename" input="${remote.resource.archive}" regexp=".*?([^/\\]+)$" select="\1" defaultValue="" />
                                    <propertycopy override="true" property="archive.filename" from="archive.@{resource}.filename" silent="true" />
                                    <if>
                                        <not>
                                            <or>
                                                <contains string="___${remote.resource.archive}" substring="___http:" />
                                                <contains string="___${remote.resource.archive}" substring="___ftp:" />
                                                <contains string="___${remote.resource.archive}" substring="___https:" />
                                                <contains string="___${remote.resource.archive}" substring="___jar:" />
                                            </or>
                                        </not>
                                        <then>
                                            <copy file="${remote.resource.archive}" tofile="${dest.dir}/@{resource}/${archive.filename}" />
                                        </then>
                                        <else>
                                            <get src="${remote.resource.archive}" ignoreerrors="false" dest="${dest.dir}/@{resource}/${archive.filename}" verbose="true" />
                                        </else>
                                    </if>
                                </default>
                            </switch>
                            <echo message="${remote.resource.archive}" file="${dest.dir}/@{resource}.txt" />
                        </else>
                    </if>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="unzip-resource">
        <attribute name="resource" />
        <attribute name="dest.dir" />
        <sequential>
            <propertycopy override="true" property="remote.resource.archive.type" from="remote.@{resource}.archive.type" />
            <if>
                <equals arg1="archive" arg2="${remote.resource.archive.type}" />
                <then>
                    <property name="local.@{resource}.home" value="@{dest.dir}/@{resource}" />
                    <propertycopy override="true" property="resource_HOME" from="local.@{resource}.home" />
                    <if>
                        <available file="@{dest.dir}/@{resource}.txt" />
                        <then>
                            <loadfile property="local.old.@{resource}.location" srcFile="@{dest.dir}/@{resource}.txt" />
                        </then>
                    </if>
                    <propertycopy override="true" property="local.old.location" from="local.old.@{resource}.location" silent="true" />
                    <propertycopy override="true" property="archive.resource.home" from="local.@{resource}.archive" silent="true" />
                    <propertycopy property="remote.archive" override="true" from="remote.@{resource}.archive" silent="true" />
                    <if>
                        <and>
                            <equals arg1="${resource_HOME}" arg2="@{dest.dir}/@{resource}" />
                            <or>
                                <not>
                                    <available file="@{dest.dir}/@{resource}.txt" />
                                </not>
                                <not>
                                    <equals arg1="${local.old.location}" arg2="${remote.archive}${archive.resource.home}" />
                                </not>
                            </or>
                        </and>
                        <then>
                            <delete file="@{dest.dir}/@{resource}.txt" />
                            <delete dir="@{dest.dir}/@{resource}" />
                            <mkdir dir="@{dest.dir}/@{resource}" />
                            <echo message="unzipping: @{resource} from ${archive.resource.home}" />
                            <propertyregex property="file.extension" input="${archive.resource.home}" override="true" regexp=".*(tar.gz|jar|zip)$" replace="\1" defaultValue="aaa" />
                            <fail>
                                <condition>
                                    <equals arg1="${file.extension}" arg2="" />
                                </condition>Error:
*  
*  Unsupported archive type of the archive @{resource}
*  file : ${archive.resource.home}
*  supported archives : jar/tar.gz/zip
*
                            </fail>
                            <mkdir dir="@{dest.dir}/@{resource}" />
                            <if>
                                <equals arg1="${file.extension}" arg2="zip" />
                                <then>
                                    <unzip src="${archive.resource.home}" dest="@{dest.dir}/@{resource}/" />
                                </then>
                            </if>
                            <if>
                                <equals arg1="${file.extension}" arg2="jar" />
                                <then>
                                    <unjar src="${archive.resource.home}" dest="@{dest.dir}/@{resource}/" />
                                </then>
                            </if>
                            <if>
                                <equals arg1="${file.extension}" arg2="tar.gz" />
                                <then>
                                    <gunzip src="${archive.resource.home}" dest="@{dest.dir}/@{resource}/gunzipped.tar" />
                                    <untar src="@{dest.dir}/@{resource}/gunzipped.tar" dest="@{dest.dir}/@{resource}/" />
                                </then>
                            </if>
                            <propertycopy property="remote.archive" override="true" from="remote.@{resource}.archive" silent="true" />
                            <echo file="@{dest.dir}/@{resource}.txt" message="${remote.archive}${archive.resource.home}" />
                        </then>
                    </if>
                </then>
            </if>
        </sequential>
    </macrodef>
    <macrodef name="check-resource">
        <attribute name="resource" />
        <sequential>
            <propertycopy override="true" property="resource_HOME" from="local.@{resource}.home" />
            <propertycopy override="true" property="check.resource.file" from="@{resource}.check.file" />

            <fail>
                <condition>
                    <not>
                        <available file="${resource_HOME}" />
                    </not>
                </condition>Error:
*
* @{resource} can't be found
* This can be because of you have incorrect corresponding location
* in the ${resources.properties.file} or in your environment
* or you have not executed "build update" previously.
*
* See README for details.
            </fail>

            <fileset id="@{resource}.check" dir="${resource_HOME}">
                <include name="*/${check.resource.file}" />
                <include name="${check.resource.file}" />
            </fileset>

            <pathconvert dirsep="/" refid="@{resource}.check" property="if.@{resource}.exist" setonempty="false" />

            <if>
                <not>
                    <isset property="if.@{resource}.exist" />
                </not>
                <then>
                    <fail>Error:
*
* @{resource} cannot be found.
* This can be if you have incorrect corresponding location
* in the ${resources.properties.file} or you have not executed "build update" previously.
*
* See README for details.
                    </fail>
                </then>
            </if>
        </sequential>
    </macrodef>
</project>
