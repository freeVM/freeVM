<?xml version="1.0" encoding="utf-8" ?>
<!--
     Licensed to the Apache Software Foundation (ASF) under one or more
     contributor license agreements.  See the NOTICE file distributed with
     this work for additional information regarding copyright ownership.
     The ASF licenses this file to You under the Apache License, Version 2.0
     (the "License"); you may not use this file except in compliance with
     the License.  You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. -->

<project name="REGRESSION TESTS">
    
    <import file="${basedir}/targets/reg.test.run.xml"/>
    
    <property name="reg.test.src" location="${basedir}/../../src/test/regression"/>
    <property name="reg.test.dir" location="${build.semi.dir}/reg.tests"/>
    <property name="reg.test.class.path" location="${reg.test.dir}/classes"/>
    <property name="reg.test.native.path" location="${reg.test.dir}/native"/>
    <property name="jasmin.jar" location="./tmp/jasmin.jar"/>
    <property name="reg.test.package" value="org.apache.harmony.drlvm.tests.regression"/>
    
    <propertyregex property="reg.test.unpackage" 
        input="${reg.test.package}" regexp="\." replace="/"/>

    <if> <!-- Set up os specific settings - library suffix and prefix -->
        <os family="windows"/>
        <then>
            <property name="lib.prefix" value=""/>
            <property name="lib.suffix" value=".dll"/>
        </then>
        <elseif>
            <os family="unix"/>
            <then>
                <property name="lib.prefix" value="lib"/>
                <property name="lib.suffix" value=".so"/>
            </then>
        </elseif>
        <else>
            <fail>Is not designed for this platform!</fail>
        </else>
    </if>

    <target name="compile-reg-tests-prepare" depends="">
        <mkdir dir="${reg.test.class.path}" />
        <mkdir dir="${reg.test.native.path}" />

        <dirset id="reg.test.src.dirs.set"
                dir="${reg.test.src}"
                includes="*"/>

        <pathconvert pathsep=","
                     property="reg.test.src.dirs.list"
                     refid="reg.test.src.dirs.set" />

        <fileset id="reg.test.src.native.set" dir="${reg.test.src}">
            <include name="**/*.c"/>
            <include name="**/*.cpp"/>
        </fileset>
    </target>

    <target name="compile-reg-tests-j"
            depends="compile-reg-tests-prepare">
        <fileset id="reg.test.src.jasmin.set" 
                 dir="${reg.test.src}"
                 includes="**/*.j">
            <depend targetdir="${reg.test.class.path}">
                <mapper>
                    <chainedmapper>
                        <filtermapper>
                            <replacestring from="\" to="/"/>
                        </filtermapper>
                        <regexpmapper from="^(?:.*/)?H(\d\d*)/([^/].*).j$$" 
                                      to="h\1/\2.class"/>
                        <globmapper from="*" to="${reg.test.unpackage}/*"/>
                    </chainedmapper>
                </mapper>
            </depend>
        </fileset>
        
        <pathconvert pathsep=" "
                     property="reg.test.src.jasmin.list"
                     refid="reg.test.src.jasmin.set"/>
       
        <java jar="${jasmin.jar}" fork="true">
            <arg line="-d ${reg.test.class.path}"/>
            <arg line="${reg.test.src.jasmin.list}"/>
        </java>
    </target>

    <target name="compile-reg-tests-java"
            depends="compile-reg-tests-prepare, compile-reg-tests-j">
        <javac srcdir="${reg.test.src}"
               includes="**/*.java"
               destdir="${reg.test.class.path}"
               source="1.5" target="1.5" listfiles="true"
               debug="true"
               verbose="yes">
            <depend targetdir="${reg.test.class.path}">
                <mapper>
                    <chainedmapper>
                        <filtermapper>
                            <replacestring from="\" to="/"/>
                        </filtermapper>
                        <regexpmapper 
                            from="^(?:.*/)?H(\d\d*)/([^/].*).java$$"
                            to="h\1/\2.class"/>
                        <globmapper from="*" to="${reg.test.unpackage}/*"/>
                    </chainedmapper>
                </mapper>
            </depend>
        </javac>
    </target>

    <target name="compile-reg-tests-native" depends="compile-reg-tests-prepare">

        <for param="nativefile">
            <path>
                <fileset dir="${reg.test.src}" includes="**/*.c,**/*.cpp">
                    <depend targetdir="${reg.test.native.path}">
                        <mapper>
                        <chainedmapper>
                            <filtermapper>
                                <replacestring from="\" to="/"/>
                            </filtermapper>
                            <regexpmapper from="(H\d\d*)/([^/]+)\.c.?.?$$" 
                                          to="\1/${lib.prefix}\2${lib.suffix}"/>
                        </chainedmapper>
                        </mapper>
                    </depend>
                </fileset>
            </path>
            <sequential>
                <var name="outfile" unset="true"/>
                <pathconvert property="outfile">
                    <path path="@{nativefile}"/>
                    <chainedmapper>
                        <filtermapper>
                            <replacestring from="\" to="/"/>
                        </filtermapper>
                        <regexpmapper from="/(H\d\d*)/([^/]+)\.c.?.?$$" to="\1/\2"/>
                    </chainedmapper>
                </pathconvert>
                <var name="outdir" unset="true"/>
                <dirname property="outdir" file="${reg.test.native.path}/${outfile}"/>
                <!-- mkdir dir="${outdir}"/ -->
                <var name="objdir" unset="true"/>
                <property name="objdir" value="${outdir}/_obj"/>
                <mkdir dir="${objdir}"/>

                <echo message="## Compiling reg native ${outname}" />
                <cc name="${build.cxx}"
                    debug="true"
                    runtime="dynamic"
                    multithreaded="true"
                    link="shared"
                    outfile="${reg.test.native.path}/${outfile}"
                    objdir="${objdir}">
                    <includepath path="${build.deploy.dir}/jdk/include" />
                    <!--select os="lnx">
                        <linkerarg value="-lstdc++" />
                    </select-->
                    <fileset file="@{nativefile}"/>
                </cc>
                <condition property="add.manifest">
                    <and>
                        <os family="windows" />
                        <available file="${reg.test.native.path}/${outfile}${shlib.suffix}${manifest.suffix}" />
                    </and>
                </condition>

                <antcall target="reg.embed.manifest" />
            </sequential>
        </for>
    </target>

    <target name="reg.embed.manifest" if="add.manifest">
        <echo message="Adding manifest to ${reg.test.native.path}/${outfile}${shlib.suffix}" />
        <exec executable="mt.exe">
            <arg value="-nologo" />
            <arg value="-manifest" />
            <arg value="${reg.test.native.path}/${outfile}${shlib.suffix}${manifest.suffix}" />
            <arg value="-outputresource:${reg.test.native.path}/${outfile}${shlib.suffix};#2" />
        </exec>
    </target>

    <target name="pre-reg-test" depends="compile-reg-tests-java, compile-reg-tests-native">
        <delete quiet="true" dir="${reg.test.dir}/reports" />
        <mkdir dir="${reg.test.dir}/reports" />       

        <condition property="junit.jar" value="${junit.home}/junit.jar">
            <isset property="junit.home" />
        </condition>
        <property name="junit.jar" 
            location="${external.dep.CLASSLIB}/depends/jars/junit_3.8.2/junit.jar"/>
        <available file="${junit.jar}" property="junit.found"/>
        <fail unless="junit.found">
                ==============================================
                Please set the classpath of junit as follows:
                build.bat -Djunit.jar=%JUNIT_HOME% test
                ==============================================
        </fail>
    </target>

    <target name="reg.test" depends="pre-reg-test, do-regression-testing" />
    
</project>
