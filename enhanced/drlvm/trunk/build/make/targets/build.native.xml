<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project name="BUILD_NATIVE_TARGET">

    <target name="build.native"
            depends="build.native.init,
                     build.native.c,
                     build.native.cpp,
                     build.native.asm,
                     build.native.link,
                     build.native.manifest" />
    <target name="build.native.init" depends="init_component">
        <echo message="## Building native of '${component}'" />

        <propertycopy name="cfg.build"
                      from="${component}.cfg"
                      override="yes" />

        <mkdir dir="${build.dir}" />
        <if>
            <not>
                <isreference refid="c.compiler" />
            </not>
            <then>
                <compiler id="c.compiler" extends="common.c.compiler" />
            </then>
        </if>
        <if>
            <not>
                <isreference refid="cpp.compiler" />
            </not>
            <then>
                <compiler id="cpp.compiler" extends="common.cpp.compiler" />
            </then>
        </if>
        <if>
            <not>
                <isreference refid="linker" />
            </not>
            <then>
                <linker id="linker" extends="common.linker" />
            </then>
        </if>

        <!-- default values (if is not set in descriptor -->
        <property name="outtype" value="static" />
        <property name="libname" value="${component}" />
                
        <!-- setting default values (if they are not defined in the descriptors -->
        <property name="${component}.outtype" value="static" />
        <property name="${component}.libname" value="${component}" />
        <property name="${component}.src" location="${common.src}" />
        <property name="${component}.includes" location="${common.includes}" />
        <property name="libdir" value="${build.dir}/_bin" />

        <mkdir dir="${libdir}" />
        <property name="${component}.libdir" location="${libdir}" />        
        <!-- exporting libdir to other components -->

        <property name="have.to.rebuild" value="true"/>
        <property name="lib.out.dir" location="${libdir}" />
        <mkdir dir="${lib.out.dir}" />

        <condition property="object.suffix" value="obj">
            <isset property="if.win" />
        </condition>
        <property name="object.suffix" value="o" />

            
        <property name="obj.out.dir" location="${build.dir}/_obj" />
        <mkdir dir="${obj.out.dir}" />
    </target>

    <!-- compiles c sources ${c.compiler} must be set in the component descriptor 
                to point what sources have to be compiled -->
    <target name="build.native.c" depends="build.native.init" if="have.to.rebuild">
        <cc objdir="${build.dir}/_obj" debug="${build.is.debug}" runtime="dynamic" multithreaded="true" subsystem="console">
            <compiler refid="c.compiler" />
            <compilerarg value="/Zi" if="is.windows"/>
            <compilerarg value="/Fp${build.dir}/_obj\" if="is.windows"/>
            <compilerarg value="/FR${build.dir}/_obj\" if="is.windows"/>
            <compilerarg value="/Fd${build.dir}/_obj\" if="is.windows"/>

            <linkerarg value="-g" if="is.unix"/>
            <fileset refid="c.fileset" />
        </cc>
    </target>

    <!-- compiles cpp sources ${cpp.compiler} must be set in the component descriptor 
                to point what sources have to be compiled -->
    <target name="build.native.cpp" depends="build.native.init" if="have.to.rebuild">
        <cc objdir="${build.dir}/_obj" debug="${build.is.debug}" runtime="dynamic" multithreaded="true"  subsystem="console">
            <compiler refid="cpp.compiler" />
            <compilerarg value="/Zi" if="is.windows"/>
            <compilerarg value="/Fp${build.dir}/_obj\" if="is.windows"/>
            <compilerarg value="/FR${build.dir}/_obj\" if="is.windows"/>
            <compilerarg value="/Fd${build.dir}/_obj\" if="is.windows"/>

            <compilerarg value="-fpic" if="is.unix"/>
            <linkerarg value="-g" if="is.unix"/>
            <fileset refid="cpp.fileset" />
        </cc>
    </target>

    <target name="build.native.asm.init" depends="build.native.init" if="have.to.rebuild">
        <condition property="asm.executable" value="${build.cxx}">
            <or>
                <equals arg1="${build.cxx}" arg2="gcc"/>
                <equals arg1="${build.cxx}" arg2="icc"/>
            </or>
        </condition>
        <condition property="asm.add.arg" value="-Wa,--fatal-warnings -c -x assembler-with-cpp -g">
            <or>
                <equals arg1="icc" arg2="${asm.executable}" />
                <equals arg1="gcc" arg2="${asm.executable}" />
            </or>
        </condition>
        <condition property="asm.obj.switch" value="-o">
            <or>
                <equals arg1="${build.cxx}" arg2="gcc"/>
                <equals arg1="${build.cxx}" arg2="icc"/>
            </or>
        </condition>
        <condition property="asm.executable" value="ml64">
            <and>
                <isset property="is.windows"/>
                <isset property="is.64bit"/>
            </and>
        </condition>
        <condition property="asm.add.arg" value="/c /Cp /W3 /nologo /Zd /Zi -DWIN32">
            <and>
                <isset property="is.windows"/>
                <isset property="is.64bit"/>
            </and>
        </condition>
        <condition property="asm.executable" value="ml">
            <isset property="is.windows"/>
        </condition>
        <condition property="asm.add.arg" value="/c /Cp /W3 /nologo /coff /Zm /Zd /Zi /Gd -DWIN32">
            <isset property="is.windows"/>
        </condition>
        <condition property="asm.obj.switch" value="/Fo">
            <isset property="is.windows"/>
        </condition>
    </target>

    <target name="build.native.asm" depends="build.native.asm.init" if="have.to.rebuild">
        <for param="file">
            <fileset refid="asm.fileset" />
            <sequential>
                <propertyregex override="yes" property="object" input="@{file}" regexp=".*[/\\]([^\.]*)\.[^\.]*" replace="\1" defaultValue="@{file}" />
                <dependset>
                    <srcfileset refid="asm.fileset" />
                    <targetfilelist dir="${build.dir}" files="${object}.${object.suffix}" />
                </dependset>
                <if>
                    <not>
                        <available file="${build.dir}/${object}.${object.suffix}" />
                    </not>
                    <then>
                        <exec executable="${asm.executable}" failonerror="true">
                            <arg line="${asm.add.arg}" />
                            <arg line=" ${asm.obj.switch}${build.dir}/_obj/${object}.${object.suffix} @{file} " />
                        </exec>
                    </then>
                </if>
            </sequential>
        </for>
    </target>

    <target name="build.native.link.init" if="have.to.rebuild">
        <fileset id="link.fileset" dir="${build.dir}/_obj">
            <include name="*.o" />
            <include name="*.obj" />
        </fileset>

        <pathconvert pathsep="," property="files" refid="link.fileset" />
        <condition property="link.present" value="true">
            <not>
                <equals arg1="${files}" arg2="" />
            </not>
        </condition>

        <condition property="${component}.not.static">
            <and>
                <isset property="link.present" />
                <not>
                    <equals arg1="${outtype}" arg2="static" />
                </not>
            </and>
        </condition>
    </target>

    <!-- links all object files to the output library (static or shared) -->
    <target name="build.native.link"
            depends="build.native.link.init"
            if="link.present">
        <condition property="need.pdb">
            <and>
                <isset property="is.windows"/>
                <isset property="${component}.not.static"/>
            </and>
        </condition>
        <cc name="${build.cxx}"
            debug="${build.is.debug}"
            outfile="${lib.out.dir}/${libname}"
            outtype="${outtype}"  subsystem="console">
            <linkerarg value="/pdb:${build.dir}/_bin/${libname}.pdb" if="need.pdb" />
            <linkerarg value="/debug" if="need.pdb" />
            <linker refid="linker" />
            <fileset refid="link.fileset" />
            <linkerarg value="/NODEFAULTLIB:libcmtd.lib" if="is.windows" unless="is.cfg.release"/>
            <linkerarg value="/NODEFAULTLIB:msvcrt.lib" if="is.windows" unless="is.cfg.release"/>
            <syslibset libs="msvcrtd" if="is.windows" unless="is.cfg.release"/>

            <linkerarg value="/NODEFAULTLIB:libcmt.lib" if="is.windows" unless="is.cfg.debug"/>
            <linkerarg value="/NODEFAULTLIB:msvcrtd.lib" if="is.windows" unless="is.cfg.debug"/>
            <syslibset libs="msvcrt" if="is.windows" unless="is.cfg.debug"/>
            
        </cc>
        <condition property="add.manifest">
            <and>
                <os family="windows" />
                <isset property="${component}.not.static" />
                <available file="${lib.out.dir}/${libname}${shlib.suffix}${manifest.suffix}" />
            </and>
        </condition>
    </target>

    <target name="build.native.manifest"
        depends="build.native.link"
        if="add.manifest">
        <echo message="Adding manifest to ${lib.out.dir}/${libname}${shlib.suffix}" />
        <exec executable="mt.exe">
            <arg value="-nologo" />
            <arg value="-manifest" />
            <arg value="${lib.out.dir}/${libname}${shlib.suffix}${manifest.suffix}" />
            <arg value="-outputresource:${lib.out.dir}/${libname}${shlib.suffix};#2" />
        </exec>
    </target>
</project>
