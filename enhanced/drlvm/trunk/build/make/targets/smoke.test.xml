<?xml version="1.0" encoding="utf-8" ?>
<!--
    Copyright 2005-2006 The Apache Software Foundation or its licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
Author:  Marina V. Goldburt
Version: $Revision: 1.4.2.11 $
-->
<project name="SMOKE TESTS">
    <property name="smoke.test.src" location="${build.VM.home}/tests/smoke" />
    <property name="smoke.test.class.path" location="${build.dir}/_smoke.tests/classes" />
    <property name="smoke.test.native.path" location="${build.dir}/_smoke.tests/natives" />

    <patternset id="smoke.test.java.pattern">
        <include name="**/*.java"/>
        <exclude name="**/Logger.java"/>
    </patternset>
    <patternset id="smoke.test.pattern">
        <include name="**/*.class"/>
        <exclude name="**/*$*.class"/>
    </patternset>

    <target name="smoke.test.native.init">
        <fileset id="smoke.test.native.refid"
                dir="${smoke.test.src}">
            <include name="**/*.c"/>
        </fileset>
        <pathconvert property="smoke.test.native.list"
                     refid="smoke.test.native.refid" pathsep="," />

    </target>

    <target name="smoke.test" depends="clean, compile.smoke.test, java_test_smoke, build_report">
        <available property="test.failed" file="${build.semi.dir}/smoke.test.failed" />
        <fail unless="run.all.tests" if="test.failed"/>
    </target>

    <target name="clean">
        <delete file="${build.semi.dir}/smoke.test.failed"/>
    </target>

    <target name="compile.smoke.test" depends="compile.smoke.test.java, compile.smoke.test.native" />

    <target name="compile.smoke.test.java" depends="init_component">
        <mkdir dir="${smoke.test.class.path}" />
        <javac includeJavaRuntime="yes" srcdir="${smoke.test.src}" 
                destdir="${smoke.test.class.path}" 
                target="${javac.target}" debug="${java.debug.option}">
            <patternset refid="smoke.test.java.pattern" />
            <bootclasspath>
                <fileset dir="${java.home}" includes="**/*.jar" />
            </bootclasspath>
        </javac>
    </target>


    <target name="compile.smoke.test.native" depends="init_component, smoke.test.native.init">
        <mkdir dir="${smoke.test.native.path}" />

        <for list="${smoke.test.native.list}" param="full.file.path" delimiter=",">
            <sequential>
                <var name="outputdir" unset="true" />
                <var name="tmp.outputdir" unset="true" />
                <var name="outputfile" unset="true" />

                <basename property="outputfile" file="@{full.file.path}" suffix=".c"/>
                <dirname property="tmp.outputdir" file="@{full.file.path}" />
                <basename property="outputdir" file="${tmp.outputdir}" />

                <mkdir dir="${smoke.test.native.path}/${outputdir}" />

                <cc name="${build.cxx}"
                    debug="true"
                    runtime="dynamic"
                    multithreaded="true"
                    link="shared"
                    outfile="${smoke.test.native.path}/${outputdir}/${outputfile}">
                    <includepath path="${build.deploy.dir}/jdk/include" />
                    <select os="lnx">
                        <linkerarg value="-lstdc++" />
                    </select>
                    <fileset file="@{full.file.path}" />                    
                </cc>
            </sequential>
        </for>
    </target>

    <target name="jar.smoke.tests" depends="compile.smoke.test">
        <jar jarfile="${build.dir}/_smoke.tests/">
            <fileset dir="${smoke.test.class.path}" includes="**/*.class" />
        </jar>
    </target>
    <target name="java_test_smoke">
        <mkdir dir="${build.dir}/_smoke.tests/reports" />
        <path id="java.class.path">
            <pathelement location="${smoke.test.class.path}" />
            <fileset dir="${build.deploy.dir}/jdk/jre/lib" includes="*.jar" />
        </path>
        <select arch="ia32,em64t">
        <antcall target="java_test_smoke_with_jit_or_interpreter">
            <param name="jit.or.interpreter" value="jit" />
        </antcall>
        </select>
        <antcall target="java_test_smoke_with_jit_or_interpreter">
            <param name="jit.or.interpreter" value="interpreter" />
        </antcall>
    </target>

    <target name="build_report">
        <property name="smoke.tests.report.dir" location="${build.dir}/_smoke.tests/reports/html"/>
        <delete dir="${smoke.tests.report.dir}" />
        <mkdir dir="${smoke.tests.report.dir}" />
        <junitreport todir="${smoke.tests.report.dir}">
            <fileset dir="${build.dir}/_smoke.tests/reports">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="${smoke.tests.report.dir}"/>
        </junitreport>

        <!-- use this property just to get the slashes to display right in the echo -->
        <property name="display-location" location="${smoke.tests.report.dir}/index.html"/>
        <echo message="The test report is in ${display-location}"/>
    </target>

    <target name="java_test_smoke_with_jit_or_interpreter">
        <condition property="using.jit.or.jitrino" value="Using interpreter">
            <contains string="${jit.or.interpreter}" substring="int" />
        </condition>
        <property name="using.jit.or.jitrino" value="Using jitrino" />
        <echo message="${using.jit.or.jitrino}" />
        <property name="classes.location" location="${smoke.test.src}" />
        <pathconvert property="java.path.property" refid="java.class.path" />
        <condition property="int.or.jit.exclude" value="X_int,X_interpreter">
            <contains string="${jit.or.interpreter}" substring="int" />
        </condition>
        <property name="int.or.jit.exclude" value="X_jit,X_jitrino" />
        <property name="EXCLUDE_KEYWORDS" value="XXX,X_${build.os},X_${build.arch},X_drl,${int.or.jit.exclude},slow,perf,stress" />
        <condition property="int.or.jit.arg" value="-Xint">
            <contains string="${jit.or.interpreter}" substring="int" />
        </condition>
        <property name="int.or.jit.arg" value="" />
        
        <property name="exclude.file" location="./excludes/exclude.drlvm_smoke.${hy.platform}.${jit.or.interpreter}" />

        <loadfile property="foo" srcFile="${exclude.file}"/>

        <echo>
        ==================================
        Smoke tests
        ==================================
             
Excluding Tests from ${exclude.file}   
        
${foo}
------------------------------------------------
        </echo>
        <for param="test">
            <fileset dir="${smoke.test.src}">
               <!--  <patternset refid="smoke.test.java.pattern" /> -->
                <include name="**/*.java"/>
                <!-- <exclude name="**/Logger.java"/> -->
                <excludesfile name="${exclude.file}" />

            </fileset>
            <sequential>
                <var name="outdir" unset="true" />
                <var name="tmp.outdir" unset="true" />

                <basename property="filename.@{test}" file="@{test}" />
                <propertycopy name="fname" override="true" from="filename.@{test}" />
                <propertyregex property="classes.location1" override="true" input="${classes.location}" regexp="\\" replace="/" global="true" defaultValue="${classes.location}" />
                <propertyregex property="test1" override="true" input="@{test}" regexp="\\" replace="/" global="true" defaultValue="@{test}" />
                <propertyregex property="class.name.sep" override="true" input="${test1}" regexp="${classes.location1}/(.*).java" replace="\1" />
                <propertyregex property="class.name" override="true" input="${class.name.sep}" regexp="/" replace="\." global="true" defaultValue="${class.name.sep}" />
                <loadfile property="@{test}.src.file" srcFile="@{test}" />
                <propertycopy name="src.file" override="true" from="@{test}.src.file" />
                <propertyregex property="@{test}.keywords" input="${src.file}" regexp="(?m)@keyword(.*)" select="\1" defaultValue="" />
                <propertycopy name="file.keywords" override="true" from="@{test}.keywords" />
                <dirname property="tmp.outdir" file="@{test}" />
                <basename property="outdir" file="${tmp.outdir}" />

                <for param="keyword" list="${EXCLUDE_KEYWORDS}" delimiter=",">
                    <sequential>
                        <condition property="@{test}.is.excluded" value="@{keyword}">
                            <contains string="${file.keywords}" substring="@{keyword}" />
                        </condition>
                    </sequential>
                </for>
                <condition property="@{test}.is.golden" value="true">
                    <contains string="${file.keywords}" substring="golden" />
                </condition>
                <if>
                    <not>
                        <isset property="@{test}.is.excluded" />
                    </not>
                    <then>
                        <!--
                                    Run smoke test @{test} on DRLVM.
                                  -->
                        <condition property="executable.postfix" value=".exe">
                            <isset property="if.win" />
                        </condition>
                        <property name="executable.postfix" value="" />

                        <echo message="Running test : ${class.name}" />

                        <if>
                            <not>
                                <equals arg1="${int.or.jit.arg}" arg2="" />
                            </not>
                            <then>
                                <java newenvironment="yes" dir="${build.deploy.dir}/jdk/jre/bin" output="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out" classname="${class.name}" fork="true" jvm="${build.deploy.dir}/jdk/jre/bin/java${executable.postfix}" error="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out.err">
                                    <jvmarg value="-XX:-vm.assert_dialog" />
                                    <jvmarg value="-Djava.library.path=${smoke.test.native.path}/${outdir}" />
                                    <jvmarg value="${int.or.jit.arg}" />
                                    <jvmarg value="-classpath" />
                                    <jvmarg value="${smoke.test.class.path}" />
                                    <env key="JAVA_HOME" value="${build.deploy.dir}/jdk/jre" />
                                    <env key="LD_LIBRARY_PATH" value="${build.deploy.dir}/jdk/jre/bin:${env.LD_LIBRARY_PATH}" />
                                </java>
                            </then>
                            <else>
                                <java newenvironment="yes" dir="${build.deploy.dir}/jdk/jre/bin" output="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out" classname="${class.name}" fork="true" jvm="${build.deploy.dir}/jdk/jre/bin/java${executable.postfix}" error="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out.err">
                                    <jvmarg value="-XX:vm.assert_dialog=0" />
                                    <jvmarg value="-Djava.library.path=${smoke.test.native.path}/${outdir}" />
                                    <jvmarg value="-classpath" />
                                    <jvmarg value="${smoke.test.class.path}" />

                                    <env key="JAVA_HOME" value="${build.deploy.dir}/jdk/jre" />
                                    <env key="LD_LIBRARY_PATH" value="${build.deploy.dir}/jdk/jre/bin:${env.LD_LIBRARY_PATH}" />
                                </java>
                            </else>
                        </if>
                        <!-- load the test output file to the property - will be used later -->
                        <loadfile property="@{test}.out" srcFile="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out" />
                        <!--
                                    Run smoke test @{test} on JAVA_HOME's JVM.
                                    If ${keywords} contains "golden" we have to run the test twice:
                                    on JAVA_HOME's JVM and on the DRLVM. To compare outputs.
                                  -->
                        <if>
                            <isset property="@{test}.is.golden" />
                            <then>
                                <condition property="java.executable" value="${env.JAVA_HOME}/bin/java${executable.postfix}">
                                    <available file="${env.JAVA_HOME}/bin/java${executable.postfix}" />
                                </condition>
                                <property name="java.executable" value="${env.JAVA_HOME}/bin/java${executable.postfix}" />
                                <java output="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.golden" classname="${class.name}" fork="true" jvm="${java.executable}" error="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.golden.err">
                                    <jvmarg value="-classpath" />
                                    <jvmarg value="${java.path.property}" />
                                    <env key="LD_LIBRARY_PATH" value="${env.JAVA_HOME}/bin:${env.LD_LIBRARY_PATH}" />
                                </java>
                                <!-- load the test output file to the property - will be used later -->
                                <loadfile property="@{test}.golden" srcFile="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.golden" />
                            </then>
                        </if>
                        <!-- Handling the test output (or outputs in "golden" case) -->
                        <if>
                            <isset property="@{test}.is.golden" />
                            <then>
                                <!-- compare JAVA_HOME's JVM output and DRLVM's output -->
                                <condition property="@{test}.is.passed">
                                    <equals arg1="${@{test}.golden}" arg2="${@{test}.out}" />
                                </condition>
                            </then>
                            <else>
                                <!-- whether DRLVM's output contains PASS and doesn't FAIL -->
                                <condition property="@{test}.is.passed">
                                    <and>
                                        <contains string="${@{test}.out}" substring="PASS" casesensitive="false" />
                                        <not>
                                            <contains string="${@{test}.out}" substring="FAIL" casesensitive="false" />
                                        </not>
                                    </and>
                                </condition>
                            </else>
                        </if>
                        <if>
                            <isset property="@{test}.is.passed" />
                            <then>
                                <echo message=" PASSED : ${class.name}" />

                                <!-- create xml-file with test's results -->
<echo file="${build.dir}/_smoke.tests/reports/TEST-${class.name}_${jit.or.interpreter}.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<testsuite errors="0" failures="0" name="@@@@@" tests="1" time="0.01">
<testcase classname="@@@@@" name="test" time="0.1"/>
<system-out><![CDATA[@out]!]></system-out>
<system-err><![CDATA[@err]!]></system-err>
</testsuite>]]> 
</echo>
                                <replace file="${build.dir}/_smoke.tests/reports/TEST-${class.name}_${jit.or.interpreter}.xml" token="@@@@@" value="${class.name}_${jit.or.interpreter}" /> 
                            </then>
                            <else>
                                <echo message="*** FAILED **** : ${class.name}" />
                                <echo message="*** FAILED **** : ${class.name} on ${jit.or.interpreter}${line.separator}" file="${build.semi.dir}/smoke.test.failed" append="true"/>

                                <!-- create xml-file with test's results -->
<echo file="${build.dir}/_smoke.tests/reports/TEST-${class.name}_${jit.or.interpreter}.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<testsuite errors="0" failures="1" name="@@@@@" tests="1" time="0.01">
<testcase classname="@@@@@" name="test" time="0.1"><error message="FAILED"/></testcase>
<system-out><![CDATA[@out]!]></system-out>
<system-err><![CDATA[@err]!]></system-err>
</testsuite>]]> 
</echo>
                                <replace file="${build.dir}/_smoke.tests/reports/TEST-${class.name}_${jit.or.interpreter}.xml" token="@@@@@" value="${class.name}_${jit.or.interpreter}" /> 
                            </else>
                        </if>

                        <!-- grab System.out to xml-file -->
                        <loadfile property="@{test}.tmp.out" srcFile="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out" />
                        <if>
                            <isset property="@{test}.tmp.out" />
                            <then>
                                <replace file="${build.dir}/_smoke.tests/reports/TEST-${class.name}_${jit.or.interpreter}.xml" token="@out]!" value="${@{test}.tmp.out}]" />
                            </then>
                            <else>
                                <replace file="${build.dir}/_smoke.tests/reports/TEST-${class.name}_${jit.or.interpreter}.xml" token="@out]!" value="]" />
                            </else>
                        </if>
                        
                        <!-- grab System.err to xml-file -->
                        <loadfile property="@{test}.tmp.err" srcFile="${build.dir}/_smoke.tests/reports/${class.name}_${jit.or.interpreter}.out.err" />
                        <if>
                            <isset property="@{test}.tmp.err" />
                            <then>
                                <replace file="${build.dir}/_smoke.tests/reports/TEST-${class.name}_${jit.or.interpreter}.xml" token="@err]!" value="${@{test}.tmp.err}]" />
                            </then>
                            <else>
                                <replace file="${build.dir}/_smoke.tests/reports/TEST-${class.name}_${jit.or.interpreter}.xml" token="@err]!" value="]" />
                            </else>
                        </if>

                    </then>
                    <else>
                        <propertycopy override="true" property="exclude.reason" from="@{test}.is.excluded" />
                        <echo message="test ${class.name} is skipped due to ${exclude.reason}" />
                    </else>
                </if>
            </sequential>
        </for>
        <echo message="Please find test classes and results at ${build.dir}/_smoke.tests/" />
    </target>
</project>
