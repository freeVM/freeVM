<?xml version="1.0" encoding="utf-8" ?>
<!--
     Licensed to the Apache Software Foundation (ASF) under one or more
     contributor license agreements.  See the NOTICE file distributed with
     this work for additional information regarding copyright ownership.
     The ASF licenses this file to You under the Apache License, Version 2.0
     (the "License"); you may not use this file except in compliance with
     the License.  You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. -->

 <project name="REGRESSION TESTS RUN" default="do-regression-testing">
     
     <property name="jvm.under.test" value="${build.deploy.dir}/jdk/jre/bin/java"/>
     <property name="reg.test.timeout" value="180000" />
     <property name="reg.test.halt.on.error" value="false"/>
     <!-- Mark used by custom test launchers for test failure notification -->
     <property name="reg.test.failed.mark" value="-=@@@ Reg Test Failed @@@=-"/>
  
     <target name="do-regression-testing" 
             depends="launch-tests,make-report,check-results">
     </target>
 
     <target name="launch-tests">
          <echo>
  ==================================
       Run regression tests
  ==================================
          </echo>
  
         <for param="reg.test.2launch.src.dir">
             <!-- Go through directories containing regression tests -->
             <dirset dir="${reg.test.src}">
                 <include name="H*"/>
             </dirset>
             <sequential>
                 <!-- Set up the property pointing to the natives path -->
                 <var name="reg.test.2launch.native.path" unset="true"/>
                 <pathconvert property="reg.test.2launch.native.path">
                     <path path="@{reg.test.2launch.src.dir}"/>
                     <map from="${reg.test.src}" to="${reg.test.native.path}"/>
                 </pathconvert>
                 <if>
                     <available file="@{reg.test.2launch.src.dir}/run.test.xml"/>
                     <then>
                         <!-- Launch the tests with a custom launchers 
                                                 placed near the tests -->
                         <run-custom-launcher 
                             launcher="@{reg.test.2launch.src.dir}/run.test.xml"/>
                     </then>
                     <else>
                         <!-- Execution of unit tests checking for regression -->
                         <for param="reg.unit.test.src">
                             <!-- Go through unit tests in the directory -->
                             <fileset dir="@{reg.test.2launch.src.dir}">
                                 <include name="*Test.java"/>
                             </fileset>
                             <sequential>
                                 <propertyregex override="yes"
                                   property="unit.test.class" 
                                   input="@{reg.unit.test.src}"
                                   regexp=".*H(\d\d*)[/\\](..*)\.java" 
                                   replace="${reg.test.package}.h\1.\2"/>
                                 <run-junit-test test="${unit.test.class}"/>
                             </sequential>
                         </for>
                     </else>
                 </if>
             </sequential>
         </for>
  
     </target>
 
     <target name="make-report">
          <junitreport todir="${reg.test.dir}/reports">
              <fileset dir="${reg.test.dir}/reports">
                  <include name="TEST*-*.xml"/>
              </fileset>
              <report format="frames" todir="${reg.test.dir}/reports/html"/>
          </junitreport>
         <echo message="========================================"/>
         <echo message="Regression testing report was stored in:"/>
         <echo message="========================================"/>
         <echo message="${reg.test.dir}/reports/html"/>
         <echo message="========================================"/>
     </target>
     
     <target name="check-results">
         <fail if="reg.test.errors" 
             message="There were test failures"/>
     </target>
  
      <!-- Macrodefinition launching the custom launcher -->
      <macrodef name="run-custom-launcher">
          <attribute name="launcher"/>
          <sequential>
             <!-- 
                 Set up try-catch block to catch the test failure.
 
                 It's possible to use <antfetch> task for this purpose:
                     <antfetch 
                         antfile="@{launcher}" target="run-test" 
                         return="reg.test.errors" 
                         inheritAll="true" inheritRefs="true"/>
                 but it fails with NPE while <macrodef> processing...
             -->
             <trycatch property="reg.test.failure.message"
                       reference="reg.test.failure.reference">
                 <try>
                     <ant antfile="@{launcher}" target="run-test" 
                              inheritAll="true" inheritRefs="true">
                          <property name="reg.test.custom.launched" value="true"/>
                     </ant>
                 </try>
                 <catch>
                     <if>
                         <!-- it was a test failure -->
                         <contains string="${reg.test.failure.message}" 
                                   substring="${reg.test.failed.mark}"/>
                         <then>
                             <!-- set up the property -->
                             <property name="reg.test.errors" value="true"/>
                         </then>
                         <else>
                             <!-- propagate the error -->
                             <throw refid="reg.test.failure.reference"/>
                         </else>
                     </if>
                 </catch>
             </trycatch>
          </sequential>
      </macrodef>

    <!-- Macrodefinition launching JUnit test -->
    <macrodef name="run-junit-test">
        <attribute name="test"/>
        <attribute name="vmarg" default=""/>
        <element name="junit-element" optional="true"/>
        <sequential>
            <junit jvm="${jvm.under.test}"
                   fork="yes"
                   haltonfailure="false"
                   haltonerror="false"
                   printsummary="withOutAndErr"
                   dir="${basedir}"
                   failureproperty="reg.test.errors"
                   timeout="${reg.test.timeout}">
                <jvmarg line="@{vmarg}"/>
                <test name="@{test}" todir="${reg.test.dir}/reports"/>
                <classpath>
                    <pathelement path="${reg.test.class.path}"/>
                </classpath>
                <junit-element/>
                <formatter type="brief"/>
                <formatter type="xml"/>
            </junit>
        </sequential>
    </macrodef>
     
    <!-- Macrodefinition launching JVMTI JUnit test -->
    <macrodef name="run-jvmti-test">
        <attribute name="test"/>
        <attribute name="vmarg" default=""/>
        <attribute name="agent"/>
        <element name="jvmti-junit-element" optional="true"/>
        <sequential>
            <run-junit-test test="@{test}" vmarg="@{vmarg}">
                <junit-element>
                    <jvmti-junit-element/>
                    <jvmarg value="-Dvm.assert_dialog=0" />
                    <jvmarg
                        value="-agentpath:${reg.test.2launch.native.path}/${lib.prefix}@{agent}${lib.suffix}"
                        />
                </junit-element>
            </run-junit-test>
        </sequential>
    </macrodef>

    <!-- Macrodefinition launching Plain Java test -->
    <macrodef name="run-pjava-test">
        <attribute name="test"/>
        <attribute name="classpath" default=""/>
        <attribute name="expected-code" default="0"/>
        <attribute name="vmarg" default=""/>
        <attribute name="args" default=""/>
        <element name="java-element" optional="true"/>
        <sequential>
            <echo message="Running regression test: @{test}"/>
            <java jvm="${jvm.under.test}"
                  classname="@{test}"
                  resultproperty="@{test}.res.code"
                  output="${reg.test.dir}/reports/@{test}.txt"
                  fork="yes"
                  timeout="${reg.test.timeout}">
                <java-element/>
                <jvmarg line="@{vmarg}" />
                <arg line="@{args}" />
                <classpath>
                    <pathelement path="${reg.test.class.path}"/>
                    <pathelement path="@{classpath}"/>
                </classpath>
            </java>
            <fail>
test failure: 
Test '@{test}' FAILED! (${@{test}.res.code} exit code)
See ${reg.test.dir}/reports/@{test}.txt file for details.
                <condition>
                    <not>
                        <equals arg1="${@{test}.res.code}" arg2="@{expected-code}"/>
                    </not>
                </condition>
            </fail>
        </sequential>
    </macrodef>

</project>
