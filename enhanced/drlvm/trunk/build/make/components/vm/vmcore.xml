<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
Author: Marina V. Goldburt, Dmitry B. Yershov
Version: $Revision: 1.5.2.3 $
-->
<!--
    This is build descriptor for the component "vm.vmcore".

    Please refer to make/components/README.txt for details about the component
    build descriptor structure.
  -->

<project name="vm.vmcore">

    <target name="stamp_version" if="svn.revision" unless="skip.svn.stamp">
        <copy file="${build.vm.home}/vmcore/include/version_svn_tag_orig.h"
              tofile="${build.vm.home}/vmcore/include/version_svn_tag.h" overwrite="true">
            <filterset>
                <filter token="svn.revision" value="${svn.revision}"/>
            </filterset>
        </copy>
    </target>
    
    <target name="-check-version" if="svn.revision">
        <uptodate property="skip.svn.stamp" srcfile="${build.vm.home}/.svn/entries" 
            targetfile="${build.vm.home}/vmcore/include/version_svn_tag.h"/>
    </target>

    <target name="copy_version" unless="svn.revision">
        <copy file="${build.vm.home}/vmcore/include/version_svn_tag_orig.h"
              tofile="${build.vm.home}/vmcore/include/version_svn_tag.h" overwrite="false">
        </copy>
    </target>

    <target name="-init-unix" if="is.unix">
        <symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/${hy.platform}/libicuuc.so"
            resource="${external.dep.CLASSLIB}/depends/libs/${hy.platform}/libicuuc.so.34"/>
        <symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/${hy.platform}/libicudata.so"
            resource="${external.dep.CLASSLIB}/depends/libs/${hy.platform}/libicudata.so.34"/>
    </target>

    <target name="init" depends="common_vm, -check-version, stamp_version, copy_version, -init-unix">
        <property name="build.depends" value="extra.apr,
                                              extra.aprutil,
                                              extra.log4cxx,
                                              extra.zlib,
                                              vm.encoder,
                                              vm.port, vm.hythr" />

        <property name="libname" value="harmonyvm" />
        <property name="outtype" value="shared" />
        <property name="src" location="${build.vm.home}" />

        <compiler id="c.compiler" extends="common.c.compiler">
            <includepath>
                <pathelement location="${build.vm.home}/include" />
		<pathelement location="${external.dep.CLASSLIB.includes}/icu4c" />		
                <pathelement location="${extra.apr.includes}/apr-1" />
                <pathelement location="${extra.apr.includes}" />
                <pathelement location="${extra.log4cxx.includes}" />
                <pathelement location="${vm.port.includes}" />
            </includepath>

            <defineset define="BUILDING_VM,GC_V4,USE_DLL_JIT,APR_DECLARE_STATIC" />
        </compiler>

        <compiler id="cpp.compiler" extends="common.cpp.compiler">
            <fileset dir="${build.vm.home}/vmcore/src">
                <include name="class_support/*.cpp" />
                <include name="exception/*.cpp" />
                <include name="init/*.cpp" />
                <include name="gc/*.cpp" />
                <include name="interpreter/*.cpp" />
                <include name="jit/*.cpp" />
                <include name="jni/*.cpp" />
                <include name="jvmti/*.cpp" />
                <include name="object/*.cpp" />
                <include name="reflection/*.cpp" />
                <include name="stack/*.cpp" />
                <include name="thread/*.cpp" />
                <include name="thread/helpers/thread_helpers.cpp" />
                <include name="thread/helpers/thread_helpers_${build.arch}.cpp" />
                <include name="util/*.cpp" />
                <include name="verifier/*.cpp" if="use_original_verifier"/>
                <include name="verifier-3363/*/*.cpp" unless="use_original_verifier"/>
            </fileset>

            <fileset dir="${build.vm.home}/vmcore/src/kernel_classes/native">
                <include name="*.cpp" />
                <exclude name="Runtime_win.cpp" if="is.unix"/>
                <exclude name="System_win.cpp" if="is.unix"/>
                <exclude name="Runtime_lnx.cpp" if="is.windows"/>
                <exclude name="System_lnx.cpp" if="is.windows"/>
            </fileset>

            <fileset dir="${build.vm.home}">
                <include name="port/src/lil/*.cpp" />
                <include name="port/src/lil/pim/*.cpp" />
                <include name="vmstart/src/compmgr/*.cpp" />

                <include name="port/src/lil/ipf/pim/*.cpp" if="is.ia64"/>
                <include name="port/src/lil/ia32/pim/*.cpp" if="is.x86"/>
                <include name="port/src/lil/em64t/pim/*.cpp" if="is.x86_64"/>
            </fileset>

            <fileset dir="${build.vm.home}/vmcore/src">
                <include name="thread/win/*.cpp" if="is.windows"/>
                <include name="util/win/*.cpp" if="is.windows"/>

                <include name="util/win/ia32/*.cpp" if="is.windows.x86"/>
                <include name="util/win/em64t/*.cpp" if="is.windows.x86_64"/>
                <include name="util/win/ia32_em64t/*.cpp" if="is.windows" unless="is.ia64"/>
                <include name="util/win/ipf/*.cpp" if="is.windows.ia64"/>

                <include name="util/ipf/**/*.cpp" if="is.ia64"/>
                <include name="util/ia32/**/*.cpp" if="is.x86"/>
                <include name="util/em64t/**/*.cpp" if="is.x86_64"/>

                <include name="thread/linux/*.cpp" if="is.unix"/>
                <include name="util/linux/*.cpp" if="is.unix"/>
                <exclude name="util/linux/signals_ia32.cpp" unless="is.unix.x86"/>
                <exclude name="util/linux/signals_em64t.cpp" unless="is.unix.x86_64"/>
                <exclude name="util/linux/signals_ipf.cpp" unless="is.unix.ia64"/>
            </fileset>

            <includepath path="${extra.zlib.includes}" if="is.windows"/>
            <includepath>
                <pathelement location="${extra.apr.includes}" />
                <pathelement location="${extra.apr.includes}/apr-1" />
                <pathelement location="${extra.log4cxx.includes}" />
		        <pathelement location="${external.dep.CLASSLIB.includes}/icu4c" />

                <dirset dir="${build.vm.home}">
                    <include name="include" />
                    <include name="vmcore/include" />
                    <include name="port/include" />
                
                    <include name="vmcore/src/util/win/include" if="is.windows"/>
                    <include name="vmcore/src/util/linux/include" if="is.unix"/>

                    <include name="vmcore/src/util/ipf/include" if="is.ia64"/>
                    <include name="vmcore/src/util/ipf/base_natives" if="is.ia64"/>
                    <include name="port/src/lil/ipf/pim/include" if="is.ia64"/>

                    <include name="vmcore/src/util/ia32/base_natives" if="is.x86"/>
                    <include name="port/src/encoder/ia32_em64t" if="is.x86"/>
                    <include name="port/src/lil/ia32/pim/include" if="is.x86"/>

                    <include name="vmcore/src/util/em64t/base_natives" if="is.x86_64"/>
                    <include name="port/src/encoder/ia32_em64t" if="is.x86_64"/>
                    <include name="port/src/lil/em64t/pim/include" if="is.x86_64"/>
                </dirset>
            </includepath>

            <defineset define="BUILDING_VM,GC_V4,USE_DLL_JIT,APR_DECLARE_STATIC" />
        </compiler>

        <fileset id="asm.fileset" dir="${build.vm.home}/vmcore">
            <include name="src/util/ipf/base/*.asm" if="is.unix.ia64"/>
            <include name="src/util/win/em64t/*.asm" if="is.windows.x86_64"/>
        </fileset>

        <linker id="linker" extends="common.linker">
            <libset libs="${vm.port.lib}"
                    dir="${vm.port.libdir}" />

            <libset libs="${vm.encoder.lib}"
                     dir="${vm.encoder.libdir}" unless="is.ia64"/>

            <libset libs="${extra.log4cxx.lib}"
                    dir="${extra.log4cxx.libdir}" />

            <libset libs="${extra.aprutil.lib}"
                    dir="${extra.aprutil.libdir}" />

            <libset libs="${extra.apr.lib}"
                    dir="${extra.apr.libdir}" />

            <libset libs="${vm.hythr.lib}"
                    dir="${vm.hythr.libdir}" />

            <libset libs="${vm.port.lib}"
                    dir="${vm.port.libdir}" />

            <libset libs="${extra.zlib.lib}"
                        dir="${extra.zlib.libdir}" if="is.windows"/>

   	        <libset libs="icuuc"
                        dir="${external.dep.CLASSLIB.libdir}" if="is.windows"/>

            <linkerarg value="/DEF:${build.vm.home}/vmcore/src/harmonyvm64.def" if="is.windows.x86_64"/>
            <linkerarg value="/DEF:${build.vm.home}/vmcore/src/harmonyvm.def" if="is.windows.x86"/>
            <linkerarg value="/NODEFAULTLIB:libcmt.lib" if="is.windows" unless="is.cfg.release"/>
            <linkerarg value="/NODEFAULTLIB:msvcrt.lib" if="is.windows"/>

            <linkerarg value="--version-script=${build.vm.home}/vmcore/build/vmcore.exp" if="is.unix"/>
			<libset type="shared" libs="icuuc"
                        	dir="${external.dep.CLASSLIB}/depends/libs/${hy.platform}" if="is.unix"/>
            <syslibset type="shared" libs="m,dl,stdc++,z,xml2,pthread,gcc_s,rt" if="is.linux"/>
            <syslibset type="shared" libs="m,stdc++,z,pthread" if="is.freebsd"/> 
            <libset libs="xml2" dir="/usr/local/lib" if="is.freebsd"/>
            <linkerarg value="--export-dynamic" if="is.freebsd"/>
        </linker>
        
        <echo message="Copying files for internationalization..."/>

        <mkdir dir="${build.semi.dir}/vm/vmcore/_other"/> 
        <copy todir="${build.semi.dir}/vm/vmcore/_other" 
              flatten="true" 
              includeEmptyDirs="false">
              <fileset dir="${build.VM.home}/vmcore/src/init">
                   <include name="harmony*.properties" />
              </fileset>
        </copy>
    </target>
</project>
