<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Copyright 2005-2006 The Apache Software Foundation or its licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
Author: Marina V. Goldburt, Dmitry B. Yershov
Version: $Revision: 1.5.2.3 $
-->
<!--
    This is build descriptor for the component "vm.vmcore".

    Please refer to make/components/README.txt for details about the component
    build descriptor structure.
  -->

<project name="vm.vmcore">

    <target name="stamp_version" depends="common_vm" if="svn.revision">
        <copy file="${build.vm.home}/vmcore/include/version_svn_tag_orig.h"
              tofile="${build.vm.home}/vmcore/include/version_svn_tag.h" overwrite="true">
            <filterset>
                <filter token="svn.revision" value="${svn.revision}"/>
            </filterset>
        </copy>
    </target>

    <target name="copy_version" depends="common_vm" unless="svn.revision">
        <copy file="${build.vm.home}/vmcore/include/version_svn_tag_orig.h"
              tofile="${build.vm.home}/vmcore/include/version_svn_tag.h" overwrite="false">
        </copy>
    </target>

    <target name="init" depends="common_vm, stamp_version, copy_version">
        <property name="build.depends" value="extra.apr,
                                              extra.aprutil,
                                              extra.log4cxx,
                                              extra.zlib,
                                              vm.encoder,
                                              vm.port, vm.hythr" />

        <property name="libname" value="harmonyvm" />
        <property name="outtype" value="shared" />
        <property name="src" location="${build.vm.home}" />

        <compiler id="c.compiler" extends="common.c.compiler">
            <includepath>
                <pathelement location="${build.vm.home}/include" />
		<pathelement location="${external.dep.CLASSLIB.includes}/icu4c" />		
                <pathelement location="${extra.apr.includes}/apr-1" />
                <pathelement location="${extra.apr.includes}" />
                <pathelement location="${extra.log4cxx.includes}" />
                <pathelement location="${vm.port.includes}" />
            </includepath>

            
            <defineset define="BUILDING_VM,GC_V4,USE_DLL_JIT,APR_DECLARE_STATIC" />

            <select os="freebsd">
                <defineset define="FREEBSD" />
            </select>
            <select os="macosx">
                <defineset define="MACOSX" />
            </select>
            <select os="lnx">
                <defineset define="LINUX" />
            </select>

        </compiler>

        <compiler id="cpp.compiler" extends="common.cpp.compiler">
            <fileset dir="${build.vm.home}/vmcore/src">
                <include name="class_support/*.cpp" />
                <include name="exception/*.cpp" />
                <include name="init/*.cpp" />
                <include name="gc/*.cpp" />
                <include name="interpreter/*.cpp" />
                <include name="jit/*.cpp" />
                <include name="jni/*.cpp" />
                <include name="jvmti/*.cpp" />
                <include name="object/*.cpp" />
                <include name="reflection/*.cpp" />
                <include name="stack/*.cpp" />
                <include name="thread/*.cpp" />
                <include name="thread/helpers/thread_helpers.cpp" />
                <include name="thread/helpers/thread_helpers_${build.arch}.cpp" />
                <include name="util/*.cpp" />
                <include name="verifier/*.cpp" if="use_original_verifier"/>
                <include name="verifier-3363/*/*.cpp" unless="use_original_verifier"/>
            </fileset>

            <fileset dir="${build.vm.home}/vmcore/src/kernel_classes/native">
                <include name="*.cpp" />

                <select osfamily="unix">
                    <exclude name="Runtime_win.cpp" />
                    <exclude name="System_win.cpp" />
                </select>

                <select os="win">
                    <exclude name="Runtime_lnx.cpp" />
                    <exclude name="System_lnx.cpp" />
                </select>
            </fileset>

            <fileset dir="${build.vm.home}">
                <include name="port/src/lil/*.cpp" />
                <include name="port/src/lil/pim/*.cpp" />
                <include name="vmstart/src/compmgr/*.cpp" />

                <select arch="ipf">
                    <include name="port/src/lil/ipf/pim/*.cpp" />
                </select>

                <select arch="ia32">
                    <include name="port/src/lil/ia32/pim/*.cpp" />
                </select>

                <select arch="em64t">
                    <include name="port/src/lil/em64t/pim/*.cpp" />
                </select>
            </fileset>

            <fileset dir="${build.vm.home}/vmcore/src">
                <select os="win">
                    <include name="thread/win/*.cpp" />
                    <include name="util/win/*.cpp" />
                </select>

                <select os="win" arch="ia32">
                    <include name="util/win/ia32/*.cpp" />
                    <include name="util/win/ia32_em64t/*.cpp" />
                </select>

                <select os="win" arch="em64t">
                    <include name="util/win/em64t/*.cpp" />
                    <include name="util/win/ia32_em64t/*.cpp" />
                </select>

                <select os="win" arch="ipf">
                    <include name="util/win/ipf/*.cpp" />
                </select>

                <select arch="ipf">
                    <include name="util/ipf/base/*.cpp" />
                    <include name="util/ipf/base_natives/*.cpp" />
                    <include name="util/ipf/code_emit/*.cpp" />
                </select>

                <select arch="ia32">
                    <include name="util/ia32/base/*.cpp" />
                    <include name="util/ia32/base_natives/*.cpp" />
                </select>

                <select arch="em64t">
                    <include name="util/em64t/base/*.cpp" />
                    <include name="util/em64t/base_natives/*.cpp" />
                </select>

                <select osfamily="unix">
                    <include name="thread/linux/*.cpp" />
                    <include name="util/linux/os_wrapper.cpp" />
                    <include name="util/linux/stubs.cpp" />
                    <include name="util/linux/crash_handler.cpp" />
                    <include name="util/linux/native_modules.cpp" />

                    <select arch="ia32">
                        <include name="util/linux/signals_ia32.cpp" />
                    </select>

                    <select arch="em64t">
                        <include name="util/linux/signals_em64t.cpp" />
                    </select>

                    <select arch="ipf">
                        <include name="util/linux/signals_ipf.cpp" />
                    </select>
                </select>
            </fileset>

            <includepath>
                <pathelement location="${extra.apr.includes}" />
                <pathelement location="${extra.apr.includes}/apr-1" />
                <pathelement location="${extra.log4cxx.includes}" />
		<pathelement location="${external.dep.CLASSLIB.includes}/icu4c" />		
                <select os="win">
                    <pathelement location="${extra.zlib.includes}" />
                </select>
            </includepath>

            <includepath>
                <dirset dir="${build.vm.home}">
                    <include name="include" />
                    <include name="vmcore/include" />
                    <include name="port/include" />
                </dirset>
		
		<pathelement path="${external.dep.CLASSLIB.includes}/icu4c" />
                <pathelement path="${extra.log4cxx.includes}" />

                <select os="win">
                    <dirset dir="${build.vm.home}">
                        <include name="vmcore/src/util/win/include" />
                        <include name="vm/win" />
                    </dirset>

                    <pathelement path="${extra.zlib.includes}" />
                </select>

                <select osfamily="unix">
                    <dirset dir="${build.vm.home}">
                        <include name="vm/common/base" />
                        <include name="vmcore/src/util/linux/include" />
                        <include name="vm/linux" />
                    </dirset>
                </select>

                <select arch="ipf">
                    <dirset dir="${build.vm.home}">
                        <include name="vmcore/src/util/ipf/include" />
                        <include name="vm/ipf/base" />
                        <include name="vmcore/src/util/ipf/base_natives" />
                        <include name="vm/ipf/dynopt_ipf" />
                        <include name="port/src/lil/ipf/pim/include" />

                        <select os="win">
                            <include name="vm/common/dynopt" />
                        </select>
                    </dirset>
                </select>

                <select arch="ia32">
                    <dirset dir="${build.vm.home}">
                        <include name="vmcore/src/util/ia32/base_natives" />
                        <include name="vm/ia32/debugger/include" />
                        <include name="port/src/encoder/ia32_em64t" />
                        <include name="port/src/lil/ia32/pim/include" />
                    </dirset>
                </select>

                <select arch="em64t">
                    <dirset dir="${build.vm.home}">
                        <include name="vmcore/src/util/em64t/base_natives" />
                        <include name="vm/em64t/debugger/include" />
                        <include name="port/src/encoder/ia32_em64t" />
                        <include name="port/src/lil/em64t/pim/include" />
                    </dirset>
                </select>
            </includepath>

            <select os="win" cfg="release" cxx="icl">
                <compilerarg value="/Qip" />
            </select>

            <defineset define="BUILDING_VM,GC_V4,USE_DLL_JIT,APR_DECLARE_STATIC" />
        </compiler>

        <select os="lnx" arch="ia32">
            <fileset id="asm.fileset"
                     dir="${build.vm.home}/vmcore">
                <include name="src/util/ia32/base/*.asm" />
            </fileset>
        </select>

        <select os="lnx" arch="ipf">
            <fileset id="asm.fileset"
                 dir="${build.vm.home}/vmcore">
                <include name="src/util/ipf/base/*.asm" />
            </fileset>
        </select>

        <select os="win" arch="em64t">
            <fileset id="asm.fileset"
                 dir="${build.vm.home}/vmcore">
                <include name="src/util/win/em64t/*.asm" />
            </fileset>
        </select>

	<select os="lnx" >
		<select arch="ia32">
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/linux.x86/libicuuc.so"
				resource="${external.dep.CLASSLIB}/depends/libs/linux.x86/libicuuc.so.34"/>
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/linux.x86/libicudata.so"
				resource="${external.dep.CLASSLIB}/depends/libs/linux.x86/libicudata.so.34"/>
		</select>
		<select arch="em64t">
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/linux.x86_64/libicuuc.so"
				resource="${external.dep.CLASSLIB}/depends/libs/linux.x86_64/libicuuc.so.34"/>
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/linux.x86_64/libicudata.so"
				resource="${external.dep.CLASSLIB}/depends/libs/linux.x86_64/libicudata.so.34"/>
		</select>
		<select arch="ipf">
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/linux.ia64/libicuuc.so"
				resource="${external.dep.CLASSLIB}/depends/libs/linux.ia64/libicuuc.so.34"/>
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/linux.ia64/libicudata.so"
				resource="${external.dep.CLASSLIB}/depends/libs/linux.ia64/libicudata.so.34"/>
		</select>
	</select>
	<select os="freebsd" >
		<select arch="ia32">
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/freebsd.x86/libicuuc.so"
				resource="${external.dep.CLASSLIB}/depends/libs/freebsd.x86/libicuuc.so.34"/>
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/freebsd.x86/libicudata.so"
				resource="${external.dep.CLASSLIB}/depends/libs/freebsd.x86/libicudata.so.34"/>
		</select>
		<select arch="em64t">
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/freebsd.x86_64/libicuuc.so"
				resource="${external.dep.CLASSLIB}/depends/libs/freebsd.x86_64/libicuuc.so.34"/>
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/freebsd.x86_64/libicudata.so"
				resource="${external.dep.CLASSLIB}/depends/libs/freebsd.x86_64/libicudata.so.34"/>
		</select>
		<select arch="ipf">
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/freebsd.ia64/libicuuc.so"
				resource="${external.dep.CLASSLIB}/depends/libs/freebsd.ia64/libicuuc.so.34"/>
			<symlink overwrite="yes" link="${external.dep.CLASSLIB}/depends/libs/freebsd.ia64/libicudata.so"
				resource="${external.dep.CLASSLIB}/depends/libs/freebsd.ia64/libicudata.so.34"/>
		</select>
	</select>

        <linker id="linker" extends="common.linker">
            <libset libs="${vm.port.lib}"
                    dir="${vm.port.libdir}" />

            <select arch="ia32,em64t">
                 <libset libs="${vm.encoder.lib}"
                     dir="${vm.encoder.libdir}" />
            </select>

            <libset libs="${extra.log4cxx.lib}"
                    dir="${extra.log4cxx.libdir}" />

            <libset libs="${extra.aprutil.lib}"
                    dir="${extra.aprutil.libdir}" />

            <libset libs="${extra.apr.lib}"
                    dir="${extra.apr.libdir}" />

            <libset libs="${vm.hythr.lib}"
                    dir="${vm.hythr.libdir}" />

            <libset libs="${vm.port.lib}"
                    dir="${vm.port.libdir}" />

            <select os="win">
                <libset libs="${extra.zlib.lib}"
                        dir="${extra.zlib.libdir}" />

       	        <libset libs="icuuc"
                        dir="${external.dep.CLASSLIB.libdir}" />			
            </select>

            <select os="win">
                <select arch="em64t">
                    <linkerarg value="/DEF:${build.vm.home}/vmcore/src/harmonyvm64.def"/>
                </select>
                <select arch="ia32">
                    <linkerarg value="/DEF:${build.vm.home}/vmcore/src/harmonyvm.def"/>
                </select>
                <select cfg="debug">
                    <linkerarg value="/NODEFAULTLIB:libcmt.lib" />
                    <linkerarg value="/NODEFAULTLIB:msvcrt.lib" />
                </select>
                <select arch="em64t" cfg="release">
                    <linkerarg value="/NODEFAULTLIB:msvcrt.lib" />
                </select>
            </select>

            <select os="lnx">
                <syslibset type="shared" libs="m,dl,stdc++,z,xml2,pthread,gcc_s,rt" /> 
                <linkerarg value="--version-script=${build.vm.home}/vmcore/build/vmcore.exp" />
		<select arch="ia32">
			<libset type="shared" libs="icuuc"
                        	dir="${external.dep.CLASSLIB}/depends/libs/linux.x86" />
		</select>
		<select arch="em64t">
			<libset type="shared" libs="icuuc"
                        	dir="${external.dep.CLASSLIB}/depends/libs/linux.x86_64" />
		</select>
		<select arch="ipf">
			<libset type="shared" libs="icuuc"
                        	dir="${external.dep.CLASSLIB}/depends/libs/linux.ia64" />
		</select>
            </select>
            <select os="freebsd">
                <syslibset type="shared" libs="m,stdc++,z,pthread" /> 
                <libset libs="xml2" dir="/usr/local/lib" />
                <linkerarg value="--export-dynamic" />
                <linkerarg value="--version-script=${build.vm.home}/vmcore/build/vmcore.exp" />
		<select arch="ia32">
			<libset type="shared" libs="icuuc"
                        	dir="${external.dep.CLASSLIB}/depends/libs/freebsd.x86" />
		</select>
		<select arch="em64t">
			<libset type="shared" libs="icuuc"
                        	dir="${external.dep.CLASSLIB}/depends/libs/freebsd.x86_64" />
		</select>
		<select arch="ipf">
			<libset type="shared" libs="icuuc"
                        	dir="${external.dep.CLASSLIB}/depends/libs/freebsd.ia64" />
		</select>
            </select>
        </linker>
        <echo message="Copying files for internationalization..."/>

        <mkdir dir="${build.semi.dir}/vm/vmcore/_other"/> 
        <copy todir="${build.semi.dir}/vm/vmcore/_other" 
              flatten="true" 
              includeEmptyDirs="false">
              <fileset dir="${build.VM.home}/vmcore/src/init">
                   <include name="harmony*.properties" />
              </fileset>
        </copy>
    </target>
</project>
