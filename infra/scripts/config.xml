<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License. -->

<project name="config" default="generate-config" basedir=".">

    <!-- temporary file to store intermediate results of iteration -->
    <property name="tmp.file" value="tmp.txt" />

    <target name="generate-config">

        <!--FIXME: delete dir="${config.dir}" /-->
        <mkdir dir="${config.dir}" />

        <!-- first stage: generate initial props -->
        <subant genericantfile="${scripts.dir}/config.xml"
                target="generate"
                inheritall="true"
                inheritrefs="true">
            <dirset dir="${adaptors.dir}" includes="${test.suites}" />
        </subant>

        <!-- second stage: re-generate properties
             to expand required if there is a value set -->
        <property name="all.props" location="${config.dir}/all.props" />
        <concat destfile="${all.props}">
            <fileset dir="${config.dir}" includes="*.properties" />
            <filterchain>
                <linecontainsregexp>
                    <!-- filter out undefined props -->
                    <regexp pattern="=[^$]" />
                </linecontainsregexp>
            </filterchain>
        </concat>

        <subant genericantfile="${scripts.dir}/config.xml"
                target="re-generate"
                inheritall="false"
                inheritrefs="true">
            <dirset dir="${adaptors.dir}" includes="${test.suites}" />
            <propertyset>
                <propertyref name="all.props" />
                <propertyref name="scripts.dir" />
                <propertyref name="framework.local.configuration.file" />
                <propertyset refid="global.build.parameters.id" />
            </propertyset>
        </subant>

        <!-- third stage: extract required properties
             to a separate file - 'required-parameters.properties'  -->
        <ant antfile="${scripts.dir}/config.xml"
             target="-gen-required-parameters"
             inheritall="false">
            <propertyset>
                <propertyref name="all.props" />
                <propertyref name="scripts.dir" />
                <propertyref name="config.dir" />
                <!--propertyref name="framework.local.configuration.file" /-->
                <propertyset refid="global.build.parameters.id" />
            </propertyset>
        </ant>
    </target>

    <!-- The target is workaround for properties cycle dependencies
         parameters.xml -> adaptor.xml -> parameters.xml
         TODO: need to resolve the cycle dependencies
         -->
    <target name="generate">

        <basename file="${basedir}" property="suite.name" />

        <subant genericantfile="${scripts.dir}/tmp-config.xml"
                target="-generate-tmp-config"
                inheritall="true"
                inheritrefs="true"
                buildpath="${scripts.dir}">
        </subant>
    </target>

    <!-- The target is workaround for properties cycle dependencies
             framework.local.properties
              -> parameters.xml -> framework.local.properties
         TODO: need to resolve the cycle dependencies
         -->
    <target name="re-generate">

        <basename file="${basedir}" property="suite.name" />

        <echo>Generate config for: ${suite.name}</echo>

        <!-- Load framework properties -->
        <xmlproperty file="${scripts.dir}/parameters.xml"
                     collapseAttributes="true"
                     semanticAttributes="true"
                     prefix="framework" />

        <!-- Load suites properties -->
        <property file="${all.props}" />

        <!-- Load local properties -->
        <loadproperties srcfile="${framework.local.configuration.file}">
            <filterchain>
                <expandproperties />
                <!-- workaround for windows paths: replace '\' with '/'
                     otherwise '\' is lost -->
                <replaceregex pattern="\\" replace="/" flags="g" />
            </filterchain>
        </loadproperties>

        <echoproperties destfile="${config.dir}/${suite.name}.properties">
            <propertyset>
                <propertyref prefix="${suite.name}" />
                <propertyref prefix="framework" />
                <propertyset refid="global.build.parameters.id" />
            </propertyset>
        </echoproperties>
    </target>

    <target name="-gen-required-parameters">

        <echo file="${config.dir}/required-parameters.properties">#
# Required Parameters Settings File
# TODO: add more words here

</echo>

        <property name="all.props" location="${config.dir}/all.props" />
        <concat destfile="${all.props}">
            <fileset dir="${config.dir}" includes="*.properties" />
            <filterchain>
                <linecontainsregexp>
                    <!-- filter out undefined props -->
                    <regexp pattern="=[^$]" />
                </linecontainsregexp>
            </filterchain>
        </concat>

        <property file="${all.props}" />

        <propertyset id="tmp.id">
            <propertyref regex=".+parameters\.required\..+\.description$" />
        </propertyset>
        <property name="tmp.str" refid="tmp.id" />
        <echo message="${tmp.str}" file="${tmp.file}" />

        <ant antfile="${scripts.dir}/config.xml"
             target="-iterate"
             inheritall="false">
            <propertyset>
                <propertyref name="scripts.dir" />
                <propertyref name="config.dir" />
            </propertyset>
        </ant>

        <delete file="${tmp.file}" />
    </target>

    <target name="-iterate">
        <!-- check if next iteration should be done -->
        <condition property="donext">
            <length file="${tmp.file}" length="0" when="greater" />
        </condition>
        <ant antfile="${scripts.dir}/config.xml"
             target="-flash-next-required-property"
             inheritall="false">
            <propertyset>
                <propertyref name="donext" />
                <propertyref name="scripts.dir" />
                <propertyref name="config.dir" />
            </propertyset>
        </ant>
    </target>

    <target name="-flash-next-required-property" if="donext">
        <loadproperties srcfile="${tmp.file}">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="^([^=]+)\.description=.*"
                                  replace="propname=\1" />
                </tokenfilter>
            </filterchain>
        </loadproperties>
        <loadproperties srcfile="${tmp.file}">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="^[^=]+=[^,]+,? ?(.*)$"
                                  replace="rest=\1" />
                </tokenfilter>
            </filterchain>
        </loadproperties>
        <echo message="${rest}" file="${tmp.file}" />

        <property file="${config.dir}/all.props" />
        <flash-property propname="${propname}" />

        <subant genericantfile="${scripts.dir}/config.xml"
                target="-iterate"
                inheritall="false"
                buildpath="${scripts.dir}">
            <propertyset>
                <propertyref name="scripts.dir" />
                <propertyref name="config.dir" />
            </propertyset>
        </subant>

    </target>

    <macrodef name="flash-property">
        <attribute name="propname" />
        <sequential>
            <echo file="${config.dir}/required-parameters.properties"
                  append="true">
#${@{propname}.description}
@{propname}=${@{propname}}
</echo>
        </sequential>
    </macrodef>
</project>

