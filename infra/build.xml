<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. -->

<!-- ====================================================================== 
                           Main Entry Points for BTI
     ====================================================================== -->
<project name="build-test-infrastructure" default="run" basedir=".">

    <!-- Use this property on setup stage to specify particular 
         test suites to run -->
    <property name="test.suites" value="*" />

    <!-- define only the properties used before installation 
         other properties should be defined in ${framework.properties.file} -->
    <property name="root.dir" location="${basedir}" />
    <property name="adaptors.dir" location="${root.dir}/adaptors" />
    <property name="scripts.dir" location="${root.dir}/scripts" />

    <property name="framework.local.configuration.file"
              location="${root.dir}/framework.local.properties" />
    <property file="${framework.local.configuration.file}" />

    <!-- ================================================================== 
         ================================================================== -->
    <property name="framework.properties.file"
              location="${scripts.dir}/framework.properties" />
    <property file="${framework.properties.file}" />

    <property name="framework.implementation.file"
              location="${scripts.dir}/framework.xml" />
    <import file="${framework.implementation.file}" optional="true" />

    <!-- create coma separated list of selected test suites -->
    <dirset id="test.suites.dirs.ref"
            dir="${adaptors.dir}"
            includes="${test.suites}" />
    <pathconvert pathsep=","
                 property="test.suites.names.list"
                 refid="test.suites.dirs.ref">
        <flattenmapper />
    </pathconvert>

    <!-- For correct framework operation, all global properties defined 
         by framework SHOULD be added to this set -->
    <propertyset id="global.build.parameters.id">
        <propertyref name="root.dir" />
        <propertyref name="ant.home" />
        <propertyref name="adaptors.dir" />
        <propertyref name="scripts.dir" />
        <propertyref name="config.dir" />
        <propertyref name="checkouts.dir" />
        <propertyref name="framework.properties.file" />
        <propertyref name="framework.implementation.file" />
        <propertyref name="test.suites.names.list" />
    </propertyset>

    <!-- ================================================================== 
                         Install
         ================================================================== -->

    <target name="install"
            depends="fetch-depends,
                     checkout-projects,
                     patch-ant,
                     generate-config" />

    <target name="-check-selected-names">

        <property name="tmp.file" value="tmp.txt" />

        <echo file="${tmp.file}">tmp.file.prop=${test.suites}</echo>
        <loadproperties srcfile="${tmp.file}">
            <!-- test suites list may contain spaces -->
            <filterchain>
                <replaceregex pattern=" " replace="" flags="g" />
            </filterchain>
        </loadproperties>

        <length property="test.suites.names.list.length"
                string="${test.suites.names.list}" />
        <length property="tmp.file.prop.length" string="${tmp.file.prop}" />

        <fail>
            <condition>
                <and>
                    <not>
                        <!-- if an adaptor doesn't exists 
                             test.suites.names.list doesn't contain it -->
                        <equals arg1="${tmp.file.prop.length}"
                                arg2="${test.suites.names.list.length}" />
                    </not>
                    <not>
                        <!-- OK when '*' was specified -->
                        <equals arg1="${test.suites}" arg2="*" />
                    </not>
                </and>
            </condition>...
------
ERROR: Could not found adaptor for some specified test suites
------ 
       Please, check the names specified by test.suites property:
               test.suites=${test.suites}
        </fail>

        <delete file="${tmp.file}" />
    </target>

    <target name="-init-install">

        <!-- create dirs -->
        <mkdir dir="${build.dir}" />
        <mkdir dir="${checkouts.dir}" />
        <mkdir dir="${results.dir}" />
        <mkdir dir="${temp.files.dir}" />
        <mkdir dir="${classes.dir}" />

        <delete dir="${config.dir}" />
        <mkdir dir="${config.dir}" />

        <!-- init properties -->
        <condition property="is.ant.1.6.5">
            <contains string="${ant.version}" substring="1.6.5" />
        </condition>
        <condition property="is.ant.1.7.0">
            <contains string="${ant.version}" substring="1.7.0" />
        </condition>
    </target>

    <target name="fetch-depends" depends="-init-install,-check-selected-names">
        <property name="download.xml" location="${scripts.dir}/download.xml" />

        <!-- create empty file -->
        <echo file="${external.resources.location}" message="" />

        <!-- download framework dependencies -->
        <subant genericantfile="${download.xml}"
                target="download-all"
                buildpath="${scripts.dir}"
                inheritall="true" />

        <!-- download suites dependencies -->
        <subant genericantfile="${download.xml}"
                target="download-all"
                inheritall="true">
            <dirset dir="${adaptors.dir}" includes="${test.suites}" />
        </subant>
    </target>

    <target name="checkout-projects"
            depends="-init-install,-check-selected-names">
        <property name="svn.xml" location="${scripts.dir}/svn.xml" />

        <!-- download suites dependencies -->
        <subant genericantfile="${svn.xml}"
                target="checkout-all"
                inheritall="true">
            <dirset dir="${adaptors.dir}" includes="${test.suites}" />
        </subant>
    </target>

    <!-- Tasks to patch Ant's Bug described at: 
         http://issues.apache.org/bugzilla/show_bug.cgi?id=30569
        -->
    <target name="-patch-ant-1.6.5" depends="-init-install" if="is.ant.1.6.5">
        <property name="ant.to.patch" value="1.6.5" />
        <property name="ant.patch.url"
                  value="https://issues.apache.org/bugzilla/attachment.cgi?id=15681" />
    </target>
    <target name="-patch-ant-1.7.0" depends="-init-install" if="is.ant.1.7.0">
        <property name="ant.to.patch" value="1.7.0" />
        <property name="ant.patch.url"
                  value="https://issues.apache.org/bugzilla/attachment.cgi?id=19566" />
    </target>

    <target name="patch-ant"
            depends="-patch-ant-1.6.5,-patch-ant-1.7.0,-setup-proxy"
            if="ant.to.patch">

        <mkdir dir="${temp.files.dir}/${ant.to.patch}" />
        <property name="ant.patch.file"
                  location="${temp.files.dir}/${ant.to.patch}/SubAnt.java" />

        <!-- FIXME: download only if required (i.e. no patch file) -->
        <get src="${ant.patch.url}"
             dest="${ant.patch.file}"
             usetimestamp="true"
             verbose="true" />

        <javac srcdir="${temp.files.dir}/${ant.to.patch}"
               destdir="${classes.dir}"
               includesfile="${ant.patch.file}">
            <depend targetdir="${classes.dir}/org/apache/tools/ant/taskdefs">
                <mapper>
                    <globmapper from="*.java" to="*.class" />
                </mapper>
            </depend>
        </javac>
    </target>

    <target name="generate-config" depends="-check-selected-names">

        <!-- TODO: properties generated here currently are unused
             need to check/fix properties flow -->
        <subant genericantfile="${scripts.dir}/config.xml"
                target="generate-config"
                inheritall="true"
                inheritrefs="true"
                buildpath="${scripts.dir}">
        </subant>
        
        <!-- TODO check generated required-parameters.properties -->
    </target>
    <!-- ================================================================== 
                         Framework Setup Functionality
         ================================================================== -->

    <target name="setup"
            depends="-init-install,
                     create-local-configuration,
                     setup-framework,
                     -save-suites-configuration,
                     load-required-parameters,
                     save-required-parameters" />

    <target name="-save-suites-configuration" depends="define-ant-contrib">
        <echo file="${selected.suites.configuration}"># autogenerated file containing test run setup information

# Selected test suites will be executed in the following order:${line.separator}</echo>
        <echo file="${selected.suites.configuration}"
              append="true"
              message="test.suites.names.list=${test.suites.names.list}${line.separator}" />

        <echo file="${selected.suites.configuration}" append="true">
# This order has been obtained on the base of the following
# information about dependencies between test suites:${line.separator}</echo>

        <for list="${test.suites.names.list}" param="suite">
            <sequential>
                <echo file="${selected.suites.configuration}"
                      append="true"
                      message="@{suite}.parameters.depends=${@{suite}.parameters.depends}${line.separator}" />
            </sequential>
        </for>
    </target>

    <condition property="framework.local.config.exists">
        <available file="${framework.local.configuration.file}" />
    </condition>

    <target name="create-local-configuration"
            unless="framework.local.config.exists">
        <!-- create the file for local BTI configuration -->
        <echo file="${framework.local.configuration.file}">#
# Any BTI framework local configuration properties 
# should be specified in this file. 
# For more information on which parameters can be configured see
#     ${scripts.dir}/parameters.xml
</echo>
    </target>



    <!-- ================================================================== 
                          Test Execution Functionality
         ================================================================== -->
    <target name="run"
            depends="check-setup, init-framework, init-suites, setup-suites, run-suites" />

    <target name="run-cc"
            description="run-cc"
            depends="check-setup, init-framework, setup-suites, check-status,
                        create-cc-configuration">
        <java jar="${ext.cc.location}/lib/cruisecontrol-launcher.jar"
              dir="${cc.work.dir}"
              fork="true">
            <classpath>
                <fileset dir="${ext.cc.location}/lib">
                    <include name="*.jar" />
                </fileset>
            </classpath>
            <sysproperty key="javax.management.builder.initial"
                         value="mx4j.server.MX4JMBeanServerBuilder" />
            <arg line="-configfile ${cc.config.file} -webapppath ${ext.cc.location}/webapps/cruisecontrol -jmxport ${framework.parameters.cc.jmxport} -webport ${framework.parameters.cc.webport}" />
            <jvmarg line="-Xmx700M" />
        </java>
    </target>

    <target name="check-setup">
        <fail>
            <condition>
                <not>
                    <available file="${required.parameters.location}" />
                </not>
            </condition>...
------
ERROR: Could not find ${required.parameters.location}. Please, do 'setup' first.
------
        </fail>
        <fail>
            <condition>
                <not>
                    <available file="${selected.suites.configuration}" />
                </not>
            </condition>...
------
ERROR: Could not find ${selected.suites.configuration}. Please, do 'setup' first.
------
        </fail>
    </target>

    <target name="test-mail" depends="define-ant-contrib">
        <xmlproperty file="${scripts.dir}/parameters.xml"
                     collapseAttributes="true"
                     semanticAttributes="true"
                     prefix="framework" />
        <ant antfile="${scripts.dir}/cc-exec-adaptor.xml">
            <property name="suite.name" value="test-mail" />
            <property name="test-mail.parameters.mail.from"
                      value="Test-Mail@Test.Com" />
            <property name="test-mail.parameters.cc.from"
                      value="Test@Test.Com" />
            <property name="test-mail.parameters.mail.summary"
                      value="${root.dir}/.summary.txt" />
            <property name="test-mail.parameters.cc.message"
                      value="${root.dir}/README.txt" />
            <property name="test-mail.parameters.cc.attachs"
                      value="${root.dir}/README.txt,${root.dir}/build.xml" />
            <property name="test-mail.parameters.mail.subject.suffix"
                      value=" (ignore this message)" />
            <property name="test-mail.parameters.mail.suppress.exelogs"
                      value="true" />

            <property name="mail.execution.status" value="TEST MAIL" />
            <property name="thisbuildsuccessful" value="false" />
        </ant>
    </target>

    <target name="clean"
            description="clean"
            depends="init-framework, clean-suites" />

    <target name="distclean" description="distclean" />

    <target name="-setup-proxy" if="http.proxyHost">
        <setproxy proxyhost="${http.proxyHost}" proxyport="${http.proxyPort}" />
    </target>

</project>
