<?xml version="1.0" encoding="UTF-8"?>

<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  implied.  See the License for the specific language governing
  permissions and limitations under the License.

 -->

<project name="Common Platform definitions" default="echo" basedir="..">
    <description>
        Ant file of common properties to be imported by other ant files
    </description>

    <!-- Javac properties -->
    <!-- Explicitly set to ECJ as the default compiler. -->
    <property name="hy.javac.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
    <property name="hy.javac.source" value="1.5" />
    <property name="hy.javac.target" value="1.5" />
    <property name="hy.javac.debug" value="on" />
    <property name="hy.javac.maxmem" value="384M" />

    <!-- Conditions for operating systems -->
    <condition property="is.windows">
        <os family="Windows" />
    </condition>
    <condition property="is.linux">
        <os name="linux" />
    </condition>
    <condition property="is.unix">
        <os family="unix" />
    </condition>

    <!-- Normalized operating system name -->

    <!-- this special case makes sense -->
    <condition property="hy.os" value="windows">
        <isset property="is.windows"/>
    </condition>
    <condition property="hy.os" value="linux">
        <os name="linux" />
    </condition>

    <property name="hy.os" value="${os.name}" />



    <!-- Conditions for different architectures -->
    <condition property="is.x86_64">
        <or>
            <equals arg1="x86_64" arg2="${os.arch}"/>
            <equals arg1="amd64" arg2="${os.arch}"/>
        </or>
    </condition>
    <condition property="is.x86">
	<and>
	    <not>
                <isset property="is.x86_64" />
            </not>
            <or>
                <os arch="x86"/>
                <os arch="i386"/>
            </or>
        </and>
    </condition>
    <condition property="is.ia64">
        <os arch="ia64" />
    </condition>
    <condition property="is.64bit">
        <or>
            <isset property="is.ia64" />
            <isset property="is.x86_64" />
        </or>
    </condition>
    <condition property="is.32bit">
        <or>
            <isset property="is.x86" />
        </or>
    </condition>
    <condition property="hy.bits" value="32">
        <isset property="is.32bit" />
    </condition>
    <property name="hy.bits" value="64" />

    <!-- Normalized architecture name -->
    <condition property="hy.arch" value="x86_64">
        <isset property="is.x86_64" />
    </condition>
    <condition property="hy.arch" value="x86">
        <and>
            <isset property="is.x86" />
            <isset property="is.32bit" />
        </and>
    </condition>
    <property name="hy.arch" value="${os.arch}" />
    
    <condition property="hy.arch.define" value="HYX86">
        <equals arg1="${hy.arch}" arg2="x86"/>
    </condition>
    <condition property="hy.arch.define" value="HYX86_64">
        <equals arg1="${hy.arch}" arg2="x86_64"/>
    </condition>
    <condition property="hy.cflags" value="-fpic">
        <equals arg1="${hy.arch}" arg2="x86_64"/>
    </condition>
    <property name="hy.cflags" value="-march=pentium3"/>
    
    <!-- Normalized platform name -->
    <property name="hy.platform" value="${hy.os}.${hy.arch}"/>
    <property name="hy.platform.path" value="${hy.os}/${hy.arch}"/>

    <condition property="exe.suffix" value=".exe">
        <isset property="is.windows"/>
    </condition>
    <property name="exe.suffix" value="" />

    <condition property="shlib.suffix" value=".dll">
        <isset property="is.windows"/>
    </condition>
    <property name="shlib.suffix" value=".so" />

    <condition property="linklib.suffix" value=".lib">
        <isset property="is.windows"/>
    </condition>
    <property name="linklib.suffix" value=".so" />

    <condition property="make.command" value="nmake.exe">
        <isset property="is.windows"/>
    </condition>
    <property name="make.command" value="make" />

    <property name="png.home" value="/usr" />
    <property name="lcms.home" value="/usr" />
    <property name="jpeg.home" value="/usr" />

    <!-- default property for call-modules macro - i.e. all modules -->
    <property name="build.module" value="*" />

    <target name="echo" depends="svn-prop, svn-info"
            description="Display the properties defined by this ant file" >
        <echo>
Harmony javac properties:

  hy.javac.compiler = ${hy.javac.compiler}
  hy.javac.target = ${hy.javac.target}
  hy.javac.source = ${hy.javac.source}
  hy.javac.debug  = ${hy.javac.debug}
  hy.javac.maxmem = ${hy.javac.maxmem}

Harmony platform properties:

  hy.os = ${hy.os}
  hy.arch = ${hy.arch}
  hy.bits = ${hy.bits}
  hy.platform = ${hy.platform}
  hy.platform.path = ${hy.platform.path}

  is.windows = ${is.windows}
  is.unix = ${is.unix}
  is.linux = ${is.linux}
  is.32bit = ${is.32bit}
  is.64bit = ${is.64bit}
  is.x86 = ${is.x86}
  is.x86_64 = ${is.x86_64}
  is.ia64 = ${is.ia64}

  exe.suffix = ${exe.suffix}
  shlib.suffix = ${shlib.suffix}
  make.command = ${make.command}

  hy.hdk = ${hy.hdk}
  hy.cflags = ${hy.cflags}
  hy.arch.define = ${hy.arch.define}


The following property is only set if the "svn-prop" target has been
called:

  svn.revision = ${svn.revision}


The following property is only set if the "svn-info" target has been
called:

  svn.info = ${svn.info}

Ant native properties, for information, but please use Harmony
properties in preference to these:

  os.name = ${os.name}
  os.arch = ${os.arch}

        </echo>
    </target>

    <target name="svn-prop">
        <exec executable="svn">
            <arg value="--non-interactive" />
            <arg value="info" />
            <redirector outputproperty="svn.revision">
                <outputfilterchain>
                    <linecontains>
                        <contains value="Revision: " />
                    </linecontains>
                    <tokenfilter>
                        <replacestring from="Revision: " to=""/>
                    </tokenfilter>
                </outputfilterchain>
            </redirector>
        </exec>
    </target>

    <target name="svn-info">
        <exec executable="svn"
              failifexecutionfails="false"
              resultproperty="svn.rc">
            <arg value="info" />
            <redirector outputproperty="svn.info.tmp">
                <outputfilterchain>
                    <linecontainsregexp>
                        <regexp pattern="Repository Root:|Revision:" />
                    </linecontainsregexp>
                    <tokenfilter>
                        <replacestring from="Repository Root: " to=""/>
                        <replacestring from="Revision: " to=" "/>
                    </tokenfilter>
                    <striplinebreaks/>
                </outputfilterchain>
            </redirector>
        </exec>
        <condition property="svn.info" value="${svn.info.tmp}" >
            <equals arg1="${svn.rc}" arg2="0" />
        </condition>
        <tstamp>
            <format property="svn.info" pattern="'Unknown revision at' dd-MMM-yyyy hh:mm aa"/>
        </tstamp>
    </target>

    <macrodef name="call-modules">
        <attribute name="target" />
        <sequential>
            <subant target="@{target}">
                <dirset dir="modules" includes="${build.module}" />
            </subant>
        </sequential>
    </macrodef>

    <!-- macros for modules -->
    <!-- TOFIX move to a shared file in the HDK/build/make directory. -->

    <macrodef name="make">
        <attribute name="dir" />
        <attribute name="target" default="" />
        <sequential>
            <exec failonerror="true"
                  executable="${make.command}"
                  dir="@{dir}">
                <env key="HY_HDK" value="${hy.hdk}" />
                <env key="HY_ARCH" value="${hy.arch}" />
                <env key="HY_OS" value="${hy.os}" />
                <env key="HY_PLATFORM" value="${hy.platform}" />
                <env key="HY_CFLAGS" value="${hy.cflags}" />
                <env key="HY_ARCH_DEFINE" value="${hy.arch.define}" />
                <arg line="@{target}" />
            </exec>
        </sequential>
    </macrodef>
</project>
