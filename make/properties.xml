<!--

  Copyright 2006 The Apache Software Foundation or its
  licensors, as applicable

  Licensed under the Apache License, Version 2.0 (the "License"); you
  may not use this file except in compliance with the License.  You
  may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  implied.  See the License for the specific language governing
  permissions and limitations under the License.

 -->

<project name="Common Platform definitions" default="echo" basedir="..">

    <!-- Module implementation properties -->
    <property name="hy.rmi.module" value="rmi" />

    <!-- Javac properties -->
    <property name="hy.javac.source" value="1.5" />
    <property name="hy.javac.target" value="jsr14" />
    <property name="hy.javac.debug" value="on" />
    <property name="hy.javac.maxmem" value="384M" />

    <!-- Conditions for operating systems -->
    <condition property="is.windows">
        <os family="Windows" />
    </condition>
    <condition property="is.linux">
        <os name="linux" />
    </condition>
    <condition property="is.unix">
        <os family="unix" />
    </condition>

    <!-- Normalized operating system name -->

    <!-- this special case makes sense -->
    <condition property="hy.os" value="windows">
        <isset property="is.windows"/>
    </condition>
    <condition property="hy.os" value="linux">
        <os name="linux" />
    </condition>

    <property name="hy.os" value="${os.name}" />



    <!-- Conditions for different architectures -->
    <condition property="is.x86_64">
        <os arch="x86_64"/>
    </condition>
    <condition property="is.x86">
        <or>
            <os arch="x86"/>
            <os arch="i386"/>
        </or>
    </condition>
    <condition property="is.ia64">
        <os arch="ia64" />
    </condition>
    <condition property="is.64bit">
        <or>
            <os arch="ia64" />
            <os arch="x86_64"/>
        </or>
    </condition>
    <condition property="is.32bit">
        <or>
            <os arch="x86"/>
        </or>
    </condition>
    <condition property="hy.bits" value="32">
        <isset property="is.32bit" />
    </condition>
    <property name="hy.bits" value="64" />

    <!-- Normalized architecture name -->
    <condition property="hy.arch" value="x86">
        <isset property="is.x86" />
    </condition>
    <property name="hy.arch" value="${os.arch}" />

    <!-- Normalized platform name -->
    <property name="hy.platform" value="${hy.os}.${hy.arch}"/>
    <property name="hy.platform.path" value="${hy.os}/${hy.arch}"/>

    <condition property="exe.suffix" value=".exe">
        <isset property="is.windows"/>
    </condition>
    <property name="exe.suffix" value="" />

    <condition property="shlib.suffix" value=".dll">
        <isset property="is.windows"/>
    </condition>
    <property name="shlib.suffix" value=".so" />

    <condition property="linklib.suffix" value=".lib">
        <isset property="is.windows"/>
    </condition>
    <property name="linklib.suffix" value=".so" />

    <condition property="make.command" value="nmake.exe">
        <isset property="is.windows"/>
    </condition>
    <property name="make.command" value="make" />

    <target name="echo" depends="svn-prop" >
        <echo>

Harmony module implementation properties:

  hy.rmi.module = ${hy.rmi.module}


Harmony javac properties:

  hy.javac.target = ${hy.javac.target}
  hy.javac.source = ${hy.javac.source}
  hy.javac.debug  = ${hy.javac.debug}
  hy.javac.maxmem = ${hy.javac.maxmem}

Harmony platform properties:

  hy.os = ${hy.os}
  hy.arch = ${hy.arch}
  hy.bits = ${hy.bits}
  hy.platform = ${hy.platform}
  hy.platform.path = ${hy.platform.path}

  is.windows = ${is.windows}
  is.unix = ${is.unix}
  is.linux = ${is.linux}
  is.32bit = ${is.32bit}
  is.64bit = ${is.64bit}
  is.x86 = ${is.x86}
  is.x86_64 = ${is.x86_64}
  is.ia64 = ${is.ia64}

  exe.suffix = ${exe.suffix}
  shlib.suffix = ${shlib.suffix}
  make.command = ${make.command}


The following property is only set if the "svn-prop" target has been
called:

  svn.revision = ${svn.revision}


Ant native properties, for information, but please use Harmony
properties in preference to these:

  os.name = ${os.name}
  os.arch = ${os.arch}

        </echo>
    </target>

    <target name="svn-prop">
        <exec executable="svn">
            <arg value="--non-interactive" />
            <arg value="info" />
            <redirector outputproperty="svn.revision">
                <outputfilterchain>
                    <linecontains>
                        <contains value="Revision: " />
                    </linecontains>
                    <tokenfilter>
                        <replacestring from="Revision: " to=""/>
                    </tokenfilter>
                </outputfilterchain>
            </redirector>
        </exec>
    </target>

    <macrodef name="call-modules">
        <attribute name="target" />
        <sequential>
            <antcall target="call-modules-all">
                <param name="target" value="@{target}" />
            </antcall>
            <antcall target="call-modules-one">
                <param name="target" value="@{target}" />
            </antcall>
        </sequential>
    </macrodef>

    <target name="call-modules-all" unless="build.module">
        <subant target="${target}">
            <fileset dir="modules">
                <include name="*/build.xml" />
                <exclude name="rmi*/build.xml" />
            </fileset>
            <fileset dir="modules">
                <include name="${hy.rmi.module}/build.xml" />
            </fileset>
        </subant>
    </target>

    <target name="call-modules-one" if="build.module">
        <subant target="${target}">
            <dirset dir="modules" includes="${build.module}" />
        </subant>
    </target>

    <!-- macros for modules -->
    <!-- TOFIX move to a shared file in the HDK/build/make directory. -->

    <macrodef name="make">
        <attribute name="dir" />
        <attribute name="target" default="" />
        <sequential>
            <exec failonerror="true"
                  executable="${make.command}"
                  dir="@{dir}">
                <env key="HY_HDK" value="${hy.hdk}" />
                <arg line="@{target}" />
            </exec>
        </sequential>
    </macrodef>
    
</project>
