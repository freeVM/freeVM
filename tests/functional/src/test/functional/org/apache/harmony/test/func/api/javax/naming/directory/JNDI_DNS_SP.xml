<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!--
-->
<Test ID="JNDI_DNS_SP" date-of-creation="2004-11-30"
    timeout="1">
    
    

    <APITestDescription>
        <TestedClass name="javax.naming.InitialContext" />
        <TestedMethod
            name="public Object addToEnvironment(String propName, Object propVal)" />
        <TestedMethod
            name="public Name composeName(Name name, Name prefix)" />
        <TestedMethod
            name="public String composeName(String name, String prefix)" />
        <TestedMethod name="protected Context getDefaultInitCtx()" />
        <TestedMethod name="public Hashtable&lt;?,?&gt; getEnvironment()" />
        <TestedMethod name="public String getNameInNamespace()" />
        <TestedMethod name="public NameParser getNameParser(Name name)" />
        <TestedMethod
            name="public NameParser getNameParser(String name)  throws NamingException" />
        <TestedMethod
            name="protected Context getURLOrDefaultInitCtx(Name name) " />
        <TestedMethod
            name="protected Context getURLOrDefaultInitCtx(String name) " />
        <TestedMethod
            name="protected void init(Hashtable&lt;?,?&gt; environment) " />
        <TestedMethod name="NamingEnumeration&lt;NameClassPair&gt; list(Name name)" />
        <TestedMethod name="NamingEnumeration&lt;NameClassPair&gt; list(String name)" />
        <TestedMethod
            name="NamingEnumeration&lt;Binding&gt; listBindings(String name)" />
        <TestedMethod
            name="public NamingEnumeration&lt;Binding&gt; listBindings(Name name)" />
        <TestedMethod name="public Object lookup(Name name)" />
        <TestedMethod name="public Object lookup(String name)" />
        <TestedMethod name="public Object lookupLink(Name name)" />
        <TestedMethod name="public Object lookupLink(String name)" />
        <TestedMethod
            name="public Object removeFromEnvironment(String propName)" />

        <TestedClass name="javax.naming.CompositeName" />
        <TestedMethod name="public Name add(int posn, String comp)" />
        <TestedMethod name="public Name add(String comp)" />
        <TestedMethod name="public Name addAll(int posn, Name n)" />
        <TestedMethod name="public Name addAll(Name suffix)" />
        <TestedMethod name="public boolean equals(Object obj)" />
        <TestedMethod name="public String toString()" />

        <TestedClass name="javax.naming.directory.InitialDirContext" />
        <TestedMethod name="public Attributes getAttributes(Name name)" />
        <TestedMethod
            name="public Attributes getAttributes(String name)" />
        <TestedMethod
            name="public Attributes getAttributes(String name, String[] attrIds)" />
        <TestedMethod
            name="public Attributes getAttributes(Name name, String[] attrIds)" />

        <TestedClass name="javax.naming.directory.BasicAttributes" />
        <TestedMethod name="public boolean equals(Object obj)" />
        <TestedMethod name="public Attribute get(String attrID)" />
        <TestedMethod name="public NamingEnumeration&lt;Attribute&gt; getAll()" />
        <TestedMethod name="public NamingEnumeration&lt;String&gt; getIDs()" />
        <TestedMethod name="public int size()" />

        <TestedClass name="javax.naming.directory.BasicAttribute" />
        <TestedMethod name="public boolean contains(Object attrVal)" />
        <TestedMethod name="public boolean equals(Object obj)" />
        <TestedMethod name="public Object get()" />
        <TestedMethod name="public Object get(int ix)" />
        <TestedMethod name="public NamingEnumeration&lt;?&gt; getAll()" />
        <TestedMethod name="public String getID()" />
        <TestedMethod name="public int size()" />

        <TestedClass name="javax.naming.spi.DirectoryManager" />
        <TestedMethod
            name="public static DirContext getContinuationDirContext(CannotProceedException cpe)" />
        <TestedMethod
            name="public static Object getObjectInstance(Object refInfo, Name name, Context nameCtx, Hashtable&lt;?,?&gt; environment, Attributes attrs)" />

        <TestedClass name="javax.naming.spi.NamingManager" />
        <TestedMethod
            name="public static Context getInitialContext(Hashtable&lt;?,?&gt; env) throws NamingException" />


        <Description>
            Test design:

            All data, required for test, are in the
            org/apache/harmony/test/func/api/javax/naming/share/jndiDNSTest.xml
            file. This test is divided into the following tests:

            1. Set environment parameters, create new InitialContext()
            object. Test fails if NamingException is thrown. 2. list()
            all bindings in the initial context. This method should
            retrieve host1 and host2 DirContext objects. Compare
            retrieved objects with described in the xml. Objects are
            equal if they have equal names and attributes. 3.
            lookup("host1") in the initial context. This method should
            retrieve host1 DirContext object. 4. lookup("host2") in the
            initial context. This method should retrieve host2. 5.
            lookup("host3.host2") in the initial context. This method
            should retrieve host3. 6. getAttributes("host1", {a, mx,
            txt}). This method should retrieve a, mx and txt attributes,
            associated with host1. Compare retrieved attributes with
            described in the xml. Attributes are equal if their ids,
            syntaxes and values are equal. 7. getAttributes("host2",
            null). This method should retrieve all attributes,
            associated with host2. 8. getAttributes("host3.host2", {}).
            This method should retrieve empty Attributes object. 9. Add
            new property to the environment of initial context:
            initCtx.addToEnvironment("name", "value"). Check if property
            added: initCtx.getEnvironment().get("name") should return
            "value". 10. Remove property from the environment of initial
            context: initCtx.removeFromEnvironment("name"). Check if
            property removed: initCtx.getEnvironment().get("name")
            should return null. 11. Federation test. For this test
            implementation of the javax.naming.spi.DirObjectFactory
            interface is required. 11.1. Add to environment
            javax.naming.factory.object=MyDirObjectFacrotyImplementation
            property. 11.2. Invoke lookup("www.example.com/index.html")
            in the initial context. This method should retrieve String
            representation of the index.html HTML document. To reach
            that document MyDirObjectFacrotyImplementation uses
            NetContext Service Provider. 11.3. Check if retrieved string
            is valid.
        </Description>
    </APITestDescription>

    <Keyword name="functional" />

    <Source name="JNDITest.java" />
    <Runner ID="Runtime">
        <Param name="toRun"
            value="org.apache.harmony.test.func.api.javax.naming.directory.JNDITest">            <Option name="vmParam" value="-cp" />            <Option name="vmParam"
                value="$TestSuiteRoot$FileSeparatorbin$FileSeparatorclasses$PathSeparator$TestSuiteRoot$FileSeparatorbin$FileSeparatorlib$FileSeparatorjndi$FileSeparatorproviders.jar" />
            <Option name="xmlPath"
                value="org/apache/harmony/test/func/api/javax/naming/share/jndiDNSTest.xml" />
            <Option name="testName" value="extended" />
            <Option name="PROVIDER_URL" value="$DNS_PROVIDER_URL" />
        </Param>
    </Runner>

    <Restriction name="OtherVMOnly" />
</Test>

