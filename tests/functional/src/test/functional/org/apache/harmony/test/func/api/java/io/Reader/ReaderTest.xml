<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!-- 
-->


<Test
    ID="ReaderTest"
    date-of-creation="2004-11-18"
    timeout="1"
    >

    
    
    
    <MulticaseTestDescription>
        <TestedClass name="java.io.Reader"/>
        

        <Case ID="testNullObjectInConstructor">
            <TestedMethod name="Reader(Object)"/>
            <Precondition></Precondition>
            <Description>call constructor Reader(null)</Description>
            <Expected>NullPointerException</Expected>
        </Case>

        <Case ID="testReadChar">
            <TestedMethod name="protected Reader()"/>
            <TestedMethod name="public int read() "/>
            <Precondition>create a Reader object</Precondition>
            <Description>call Reader.read()</Description>
            <Expected>no exception is thrown and proper value is returned</Expected>
        </Case>

        <Case ID="testReadChars0001">
            <TestedMethod name="protected Reader()"/>
            <TestedMethod name="public int read(char[] cbuf) "/>
            <Precondition>create a Reader object</Precondition>
            <Description>call Reader.read(char[])</Description>
            <Expected>proper values are read</Expected>
        </Case>

        <Case ID="testSkipNegative">
            <TestedMethod name="public long skip(long n)"/>
            <Precondition>create a Reader object</Precondition>
            <Description>call Reader.skip(negative value)</Description>
            <Expected>IllegalArgumentException is thrown</Expected>
        </Case>

        <Case ID="testSkip">
            <TestedMethod name="public long skip(long n)"/>
            <Precondition>create a Reader object</Precondition>
            <Description>call Reader.skip(arg) and Reader.read() after it</Description>
            <Expected>proper value is read</Expected>
        </Case>

        <Case ID="testReady">
            <TestedMethod name="public boolean ready() throws IOException"/>
            <Precondition>create a Reader object</Precondition>
            <Description>call Reader.ready()</Description>
            <Expected>return value is 'false'</Expected>
        </Case>

        <Case ID="testMarkSupported">
            <TestedMethod name="public boolean markSupported()"/>
            <Precondition>create a Reader object</Precondition>
            <Description>call Reader.markSupported()</Description>
            <Expected>return value is 'false'</Expected>
        </Case>

        <Case ID="testMark">
            <TestedMethod name="public void mark(int readAheadLimit)"/>
            <Precondition>create a Reader object</Precondition>
            <Description>call Reader.mark()</Description>
            <Expected>IOException is thrown if markSupported() is 'false' and not thrown otherwise</Expected>
        </Case>
        
        <Case ID="testReset">
            <TestedMethod name="mark(int)"/>
            <TestedMethod name="reset()"/>
            <Precondition>applicable for readers with markSupported(). create the Reader object</Precondition>
            <Description>read some amount of chars from it, then call mark(10), read next char from the stream,
            read 9 chars, call reset() and read char from the stream again
            </Description>
            <Expected>chars read just after mark() and just after reset() are equal</Expected>
        </Case>
        
    </MulticaseTestDescription>

    <Keyword name="functional"/>    
    
    <Source name="ReaderTest.java"/>

    <Runner ID="MultiCase">
        <Param name="toRun" value="org.apache.harmony.test.func.api.java.io.Reader.ReaderTest">
                <Option name="-reference" value="$ReferenceRuntime"/>
                <Option name="-tested" value="$TestedRuntime"/>
                <Option name="-temp" value="$TempStorage"/>
                <Option name="-usedCP" value="$CP"/>
                <Option name="-bootCP" value="$bootClassPath"/>
                <Option name="-atomic" value="$performance.tests.atomic"/>
                <Option name="-sets" value="$performance.tests.sets"/>
                <Option name="-mode" value="$performance.tests.mode"/>
                <Option name="-threads" value="$qa.threads"/>
        </Param>
    </Runner>
</Test> 
