<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<Test
    ID="F_ClassLoaderTest_01"
        date-of-creation="2004-12-22"
    timeout="1"
        >
        <!--
        -->
            
                
                <APITestDescription>
                    <TestedClass name="java.lang.ClassLoader"/>
                    <TestedMethod name="public static ClassLoader getSystemClassLoader()"/>
                    <TestedMethod name="protected ClassLoader(ClassLoader parent)"/>
                    <TestedMethod name="protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException"/>
                    <TestedMethod name="protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException"/>
                    <TestedMethod name="public InputStream getResourceAsStream(String name)"/>
                    <TestedMethod name="protected Package getPackage(String name)"/>
                    <TestedMethod name="protected Package definePackage(String name, String specTitle, String specVersion, String specVendor, String implTitle, String implVersion, String implVendor, URL sealBase)"/>
                    <TestedMethod name="protected final Class&lt;?&gt; defineClass(String name, byte[] b, int off, int len, ProtectionDomain protectionDomain) throws ClassFormatError"/>
                    <TestedMethod name="protected URL findResource(String name)"/>
                    <TestedMethod name="public final ClassLoader getParent()"/>
                    <TestedMethod name="protected final Class&lt;?&gt; findLoadedClass(String name)"/>
                    
                    <TestedClass name="java.lang.Class"/>
                    <TestedMethod name="public T newInstance() throws InstantiationException, IllegalAccessException"/>
                    <TestedMethod name="public Field getField(String name)"/>
                    <TestedMethod name="public Package getPackage()"/>
                    <TestedMethod name="public ProtectionDomain getProtectionDomain()"/>
                    
                    <TestedClass name="java.io.DataInputStream"/>
                    <TestedMethod name="public DataInputStream(InputStream in)"/>
                    <TestedMethod name="public final void readFully(byte[] b, int off, int len)"/>
                    
                    <TestedClass name="java.io.FilterInputStream"/>
                    <TestedMethod name="public int available()"/>
                    
                    <TestedClass name="java.lang.reflect.Field"/>
                    <TestedMethod name="public void set(Object obj, Object value)"/>
                    <TestedMethod name="public int getInt(Object obj)"/>
                    
                    <TestedClass name="java.lang.String"/>
                    <TestedMethod name="public String replace(char oldChar, char newChar)"/>
                    <TestedMethod name="public String substring(int beginIndex, int endIndex)"/>
                    <TestedMethod name="public int lastIndexOf(int ch)"/>
                    
                    <TestedClass name="java.lang.Package"/>
                    <TestedMethod name="public boolean isSealed()"/>
                    
                    <TestedClass name="java.lang.Object"/>
                    <TestedMethod name="public final Class&lt;? extends Object&gt; getClass()"/>
                    
                    <TestedClass name="java.lang.ClassNotFoundException"/>
                    <TestedMethod name="public ClassNotFoundException()"/>
                    
                    <TestedClass name="java.lang.Throwable"/>
                    <TestedMethod name="public void printStackTrace()"/>
                
                    <Description>
                        Test ClassLoader.
                    </Description>
                </APITestDescription>
                
                <Keyword name="functional"/>
                <Source name="F_ClassLoaderTest_01.java"/>
                <Modification date="2004-12-23" />
                
        <Runner ID="Runtime">
            <Option name="-cp" value="$CP$PathSeparator$TestSuiteTestRoot"/>                
            <Param name="toRun" value="org.apache.harmony.test.func.api.java.lang.F_ClassLoaderTest_01.F_ClassLoaderTest_01">
            </Param>
        </Runner>
        <Restriction name="OtherVMOnly"/>
</Test>
