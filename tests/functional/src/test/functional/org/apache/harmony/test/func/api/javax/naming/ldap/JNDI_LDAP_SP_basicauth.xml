<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='../../../../../../../../../../test.xsl'?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
-->
<!DOCTYPE Test SYSTEM '../../../../../../../../../../test.dtd'>
<!--
-->
<Test ID="JNDI_LDAP_SP_basicauth" date-of-creation="2004-11-30"
    timeout="1">
    
    

    <APITestDescription>
        <TestedClass name="javax.naming.InitialContext" />
        <TestedMethod
            name="public Object addToEnvironment(String propName, Object propVal)" />
        <TestedMethod
            name="public Name composeName(Name name, Name prefix)" />
        <TestedMethod
            name="public String composeName(String name, String prefix)" />
        <TestedMethod name="protected Context getDefaultInitCtx()" />
        <TestedMethod name="public Hashtable&lt;?,?&gt; getEnvironment()" />
        <TestedMethod name="public String getNameInNamespace()" />
        <TestedMethod name="public NameParser getNameParser(Name name)" />
        <TestedMethod
            name="public NameParser getNameParser(String name)  throws NamingException" />
        <TestedMethod
            name="protected Context getURLOrDefaultInitCtx(Name name) " />
        <TestedMethod
            name="protected Context getURLOrDefaultInitCtx(String name) " />
        <TestedMethod
            name="protected void init(Hashtable&lt;?,?&gt; environment)" />
        <TestedMethod name="NamingEnumeration&lt;NameClassPair&gt; list(Name name)" />
        <TestedMethod name="NamingEnumeration&lt;NameClassPair&gt; list(String name)" />
        <TestedMethod
            name="NamingEnumeration&lt;Binding&gt; listBindings(String name)" />
        <TestedMethod
            name="public NamingEnumeration&lt;Binding&gt; listBindings(Name name)" />
        <TestedMethod name="public Object lookup(Name name)" />
        <TestedMethod name="public Object lookup(String name)" />
        <TestedMethod name="public Object lookupLink(Name name)" />
        <TestedMethod name="public Object lookupLink(String name)" />
        <TestedMethod
            name="public Object removeFromEnvironment(String propName)" />

        <TestedClass name="javax.naming.CompositeName" />
        <TestedMethod name="public Name add(int posn, String comp)" />
        <TestedMethod name="public Name add(String comp)" />
        <TestedMethod name="public Name addAll(int posn, Name n)" />
        <TestedMethod name="public Name addAll(Name suffix)" />
        <TestedMethod name="public boolean equals(Object obj)" />
        <TestedMethod name="public String toString()" />

        <TestedClass name="javax.naming.directory.InitialDirContext" />
        <TestedMethod name="public Attributes getAttributes(Name name)" />
        <TestedMethod
            name="public Attributes getAttributes(String name)" />
        <TestedMethod
            name="public Attributes getAttributes(String name, String[] attrIds)" />
        <TestedMethod
            name="public Attributes getAttributes(Name name, String[] attrIds)" />

        <TestedClass name="javax.naming.directory.BasicAttributes" />
        <TestedMethod name="public boolean equals(Object obj)" />
        <TestedMethod name="public Attribute get(String attrID)" />
        <TestedMethod name="public NamingEnumeration&lt;Attribute&gt; getAll()" />
        <TestedMethod name="public NamingEnumeration&lt;String&gt; getIDs()" />
        <TestedMethod name="public int size()" />

        <Description>
Test design:

1.    Basic authentication (Context.SECURITY_AUTHENTICATION = none)
1.1.    Set environment properties:
INITIAL_CONTEXT_FACTORY="com.sun.jndi.ldap.LdapCtxFactory"
PROVIDER_URL="ldap://mstmrtd001:389/dc=example,dc=com"
SECURITY_AUTHENTICATION="none"
1.2.    Create new InitialContext().
1.3.    list() all bindings in the initial context, check retrieved names of the bindings.
1.4.    lookup(ctx1) in the initial context. This method should retrieve ctx1 DirContext object. Compare retrieved object with described in XML file. Two DirContext objects are equal if they have equal names and attributes.
1.5.    lookup(ctx2) in the ctx1 sub context.
1.6.    Test getAttributes(String name, String[] attrIds) method:
1.6.1.    Invoke getAttributes(ctx2, {telephoneNumber, sn}). This method should return telephoneNumber and sn attributes, associated with ctx2. Compare retrieved attributes with described in the xml:
1.6.1.1.    Check if retrieved Attributes object contains only two attributes - telephoneNumber and sn.
1.6.1.2.    Compare each attribute with described in xml. Two attributes are equal if their ids, syntaxes and values are equal.
1.6.2.    getAttributes(ctx1, {}). This method should retrieve empty Attributes object.
1.6.3.    getAttributes(ctx2, null). This method should retrieve all attributes, associated with ctx2.
1.7.    Test search(String name, Attributes matchingAttributes, String[] attributesToReturn) method: 
1.7.1.    Invoke search('ou=People,ou=TestCtx', '{telephonenumber=telephoneNumber: 7654321}', 'null').  This method should return only one SearchResult object which represents bind1 sub context. attributeToReturn=null means that all binding attributes should be retrieved. 
Validate retrieved object:
1.7.1.1.    Check binding name.
1.7.1.2.    Check attributes.
1.7.2.    search('ou=People,ou=TestCtx', '{telephonenumber=telephoneNumber: 1234567}', 'cn').This method should retrieve bind1, bind2 and only "cn" attributes for each binding.
1.7.3.    search('ou=People,ou=TestCtx', '{telephonenumber=telephoneNumber: 1234567}', 'cn'). This method should retrieve bind1 and bind2 with none attributes for each binding. 
1.8.     Test search(String name, String filterExpr, Object[] filterArgs, SearchControls cons) method:
1.8.1.    search('ou=People,ou=TestCtx', '(&amp;(telephoneNumber=1*)(sn=Test*))', {}, SearchControls.SUBTREE_SCOPE). This method should return two SearchResult objects which represents bind1 and bind2.
Validate retrieved object:
1.8.1.1.    Check names of each binding.
1.8.1.2.    Check attributes.
1.8.2.    search('ou=People,ou=TestCtx', '(&amp;(telephoneNumber=7*)(sn={0}))', {Test1}, SearchControls.ONELEVEL_SCOPE). => should retrieve bind1
1.8.3.    search('ou=People,ou=TestCtx', '(&amp;(telephoneNumber=1*)(sn=Test*))', {}, SearchControls.OBJECT_SCOPE) => should return empty NamingEnumeration object.
        </Description>
    </APITestDescription>
    
    <Keyword name="functional"/>

    <Source name="../directory/JNDITest.java" />
    <Runner ID="Runtime">
        <Param name="toRun"
            value="org.apache.harmony.test.func.api.javax.naming.directory.JNDITest">            <Option name="vmParam" value="-cp" />            <Option name="vmParam"
                value="$TestSuiteRoot$FileSeparatorbin$FileSeparatorclasses$PathSeparator$TestSuiteRoot$FileSeparatorbin$FileSeparatorlib$FileSeparatorjndi$FileSeparatorproviders.jar" />
            <Option name="xmlPath"
                value="org/apache/harmony/test/func/api/javax/naming/share/jndiLDAPTest.xml" />
            <Option name="testName" value="basic" />
            <Option name="PROVIDER_URL" value="$LDAP_PROVIDER_URL" />
        </Param>
    </Runner>

    <Restriction name="OtherVMOnly" />
</Test>

