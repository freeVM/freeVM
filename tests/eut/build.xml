<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project name="buildeut" default="run" basedir=".">

    <description>
        Run Eclipse Unit Tests suites on Apache Harmony
        http://harmony.apache.org
    </description>

    <!-- ================ Setting global properties ================ -->
    <property file="eut.properties" />

    <tstamp>
        <format property="timestamp" pattern="yyyyMMdd_HHmm" />
    </tstamp>

    <property name="work.dir" value="${basedir}" />

    <property name="eut.work.dir" location="${work.dir}/eclipse-testing" />

    <property name="eut.tmp.dir" value="${work.dir}/eclipse-testing/tmp" />

    <property name="results.root.dir" value="${basedir}/results" />

    <property name="results.dir" value="${results.root.dir}/${timestamp}" />

    <property name="vm.options" value="" />

    <condition property="cvs.settings.specified">
        <and>
            <isset property="cvs_user" />
            <isset property="cvs_password" />
            <isset property="cvs_host" />
            <isset property="cvs_root" />
        </and>
    </condition>

    <condition property="tests.undefined">
        <or>
          <not><isset property="tests" /></not>
          <length string="${tests}" trim="true" when="equal" length="0" />
        </or>
    </condition>

    <condition property="tests.list" value="${tests}">
        <not><isset property="tests.undefined" /></not>
    </condition>

    <!-- Define Eclipse Automated Test version specific properties -->
    <condition property="eclipse.launcher" 
        value="eclipse/startup.jar"
        else="eclipse/plugins/org.eclipse.equinox.launcher_1.0.0.v20070606.jar">
        <equals arg1="${eclipse.buildid}" arg2="3.2" />
    </condition>

    <!-- Define architecture and OS -->
    <condition property="os" value="linux">
        <and>
            <os family="unix" />
            <os name="linux" />
        </and>
    </condition>

    <condition property="os" value="windows">
        <os family="windows" />
    </condition>

    <condition property="arch" value="x86">
        <and>
            <contains string="${os.arch}" substring="86" />
            <not>
                <contains string="${os.arch}" substring="64" />
            </not>
        </and>
    </condition>

    <condition property="arch" value="x86_64">
        <or>
            <contains string="${os.arch}" substring="86_64" />
            <contains string="${os.arch}" substring="amd64" />
        </or>
    </condition>

    <condition property="is.windows">
        <os family="windows" />
    </condition>

    <condition property="is.linux">
        <and>
            <os family="unix" />
            <os name="linux" />
        </and>
    </condition>

    <condition property="is.windows.x86">
        <and>
            <isset property="is.windows" />
            <equals arg1="${arch}" arg2="x86" />
        </and>
    </condition>

    <condition property="is.linux.x86">
        <and>
            <isset property="is.linux" />
            <equals arg1="${arch}" arg2="x86" />
        </and>
    </condition>

    <condition property="is.linux.x86_64">
        <and>
            <isset property="is.linux" />
            <equals arg1="${arch}" arg2="x86_64" />
        </and>
    </condition>

    <!-- Define arch/os -specific properties -->

    <condition property="eclipse.filename"
               value="${eclipse.filename.prefix}-win32.zip">
        <isset property="is.windows.x86" />
    </condition>

    <condition property="eclipse.filename"
               value="${eclipse.filename.prefix}-linux-gtk.tar.gz">
        <isset property="is.linux.x86" />
    </condition>

    <condition property="eclipse.filename"
               value="${eclipse.filename.prefix}-linux-gtk-x86_64.tar.gz">
        <isset property="is.linux.x86_64" />
    </condition>

    <condition property="os.eclipse.notation" value="win32">
        <isset property="is.windows.x86" />
    </condition>

    <condition property="os.eclipse.notation" value="linux">
        <isset property="is.linux" />
    </condition>

    <condition property="ws" value="win32">
        <isset property="is.windows.x86" />
    </condition>

    <!-- Assuming that GTK is default Window System type on Linux -->
    <condition property="ws" value="gtk">
        <isset property="is.linux" />
    </condition>

    <!-- ======== check host configuration ===== -->
    <target name="check-linux-config" if="is.linux">
        <check-limit option="-n" value="8128" name="open files" />
        <check-limit option="-s" value="8128" name="stack size" />
        <check-limit option="-m" value="2000000" name="max memory size" />
    </target>

    <macrodef name="check-limit">
        <attribute name="option" />
        <attribute name="value" />
        <attribute name="name" />
        <sequential>

            <exec executable="/bin/sh" resultproperty="exit.code.@{option}">
                <arg value="-c" />
                <arg value="test @{value} -le `ulimit @{option} | sed 's#unlimited#@{value}#'`" />
            </exec>

            <fail message="Host configuration: limit for @{name} should be at least @{value}">
                <condition>
                    <not>
                        <equals arg1="${exit.code.@{option}}" arg2="0" />
                    </not>
                </condition>
            </fail>
        </sequential>
    </macrodef>


    <!-- ================ Setup ================ -->
    <target name="setup"
            depends="check-linux-config,install.eut,install.eclipse,build.utils"
            description="Download and install EUT, Eclipse SDK; configuring EUT settings">
    </target>

    <target name="install.eut"
            description="Download and unpack Eclipse Unit Tests archive">
        <mkdir dir="${work.dir}" />
        <get src="${eut.location}/${eut.filename}"
             dest="${work.dir}/${eut.filename}"
             usetimestamp="true"
             verbose="true" />
    </target>

    <target name="install.eclipse"
            description="Download Eclipse archive"
            depends="install.eut">
        <mkdir dir="${eut.work.dir}" />
        <get src="${eclipse.location}/${eclipse.filename}"
             dest="${eut.work.dir}/${eclipse.filename}"
             usetimestamp="true"
             verbose="true" />
    </target>

    <target name="build.utils" description="Build utilities classes">
        <mkdir dir="${work.dir}/utils/classes" />
        <javac srcdir="${basedir}/utils/src"
               destdir="${work.dir}/utils/classes"
               includes="**/*.java" />
    </target>

    <!-- ================ Run ================ -->
    <pathconvert targetos="unix" property="test.jre.home.path">
        <path id="test.jre.home.path.id">
            <pathelement location="${test.jre.home}" />
        </path>
    </pathconvert>

    <pathconvert targetos="unix" property="eut.tmp.dir.path">
        <path id="eut.tmp.dir.path.id">
            <pathelement location="${eut.tmp.dir}" />
        </path>
    </pathconvert>

    <property name="vm.options.ext"
        value="${vm.options} 
        -Duser.home=${eut.tmp.dir.path}/home
        -Djava.io.tmpdir=${eut.tmp.dir.path}/tmp" />

    <target name="run"
            description="Configure and run EUT, process results"
            depends="check-linux-config,define-suites-list">
        <taskdef resource="net/sf/antcontrib/antlib.xml">
            <classpath>
                <pathelement location="${ext.ant-contrib.location}" />
            </classpath>
        </taskdef>

        <!-- create the results directory to collect each suite result -->
        <delete dir="${results.dir}" />
        <mkdir dir="${results.dir}/results" />

        <!-- iterate over suites -->
        <for list="${tests.list}" param="suite" keepgoing="true" trim="true">
            <sequential>
                <echo message="" />
                <echo message="" />
                <echo message="Starting @{suite} run" />
                <echo message="" />
                <echo message="" />

                <antcall target="run.suite">
                    <param name="suite" value="@{suite}" />
                </antcall>

                <antcall target="kill.zombies" />

                <!-- copy results now - they are deleted by next suite run -->
                <!-- if suite is skipped then no "results" & copying fails -->
                <copy todir="${results.dir}/results" failonerror="false">
                    <fileset dir="${eut.work.dir}/results" />
                </copy>
            </sequential>
        </for>
        <antcall target="run.postprocess" />
    </target>

    <target name="kill.zombies" if="is.linux">
        <exec executable="killall" failonerror="false">
            <arg line="${test.jre.home.path}/jre/bin/java" />
        </exec>
    </target>

    <target name="define-suites-list" if="tests.undefined">
        <echo message="extracting suite list from ${eut.work.dir}/test.xml" />

        <!-- unpack test.xml from eclipse-Automated-Tests-*.zip -->
        <unzip src="${work.dir}/${eut.filename}" dest="${work.dir}">
            <patternset>
                <include name="eclipse-testing/test.xml"/>
            </patternset>
        </unzip>

        <!-- parse eclipse-testing/text.xml to get the suite list -->
        <java classpath="${work.dir}/utils/classes"
              classname="org.apache.harmony.eut.extractor.EUTSuiteExtractor"
              fork="true"
              failonerror="true" 
              output="${eut.work.dir}/eut.suites.run.properties">
            <arg value="${eut.work.dir}/test.xml" />
        </java>

        <!-- read "tests.list" property -->
        <property file="${eut.work.dir}/eut.suites.run.properties" />
    </target>

    <target name="configure.eut.run.properties"
            description="EUT ant inherent runner reads this property file - it's a
        way to pass properties from BTI run environment to EUT run one">
        <echo file="${eut.work.dir}/eut.run.properties" append="false">
            J2SE-5.0=${test.jre.home.path}/bin/java
            jvm=${test.jre.home.path}/bin/java
            extraVMargs=${vm.options.ext}
            timeout=${timeout}
            runtimeArchive=${eclipse.filename}
            user.home=${eut.tmp.dir.path}/home
            java.io.tmpdir=${eut.tmp.dir.path}/tmp
        </echo>
    </target>

    <target name="configure.eut.run.properties.teamcvs"
            description="Specify CVS settings for Team CVS tests"
            if="cvs.settings.specified">
        <echo file="${eut.work.dir}/eut.run.properties" append="true">
            cvs_user=${cvs_user}
            cvs_password=${cvs_password}
            cvs_host=${cvs_host}
            cvs_root=${cvs_root}
        </echo>
    </target>

    <!-- Because of EUT are quite sensetive to running environment      -->
    <!-- one needs to remove all trash from previous run.               -->
    <!-- The safest way is just to reinstall EUT/SDK files from scratch -->
    <target name="refresh.eut.installation">

        <!-- if files can't be deleted it may mean the zomby uses it 
             - invalid run anyway (so failonerror is true) -->
        <delete failonerror="true" includeemptydirs="true">
            <fileset dir="${eut.work.dir}" excludes="${eclipse.filename}" />
        </delete>

        <!-- unpack eclipse-Automated-Tests-*.zip archive -->
        <unzip src="${work.dir}/${eut.filename}" dest="${work.dir}" />

        <!-- SDK is either zip or tar.gz archive -->
        <antcall target="unpack.SDK" />

        <!-- unzip -qq -o -C eclipse-junit-tests*.zip */plugins/org.eclipse.test* -->
        <echo message="Unpacking junit tests..."/>
        <unzip dest="${eut.work.dir}" overwrite="true">
            <fileset dir="${eut.work.dir}">
                <include name="eclipse-junit-tests*.zip"/>
            </fileset>
            <patternset>
                <include name="*/plugins/org.eclipse.test*"/>
            </patternset>
        </unzip>

        <!-- create the directories for HOME and TMP in eut.work.dir -->
        <mkdir dir="${eut.tmp.dir}" />
        <mkdir dir="${eut.tmp.dir}/home" />
        <mkdir dir="${eut.tmp.dir}/tmp" />
    </target>

    <target name="unpack.SDK"
            depends="unpack.SDK.with.unzip, unpack.SDK.with.untar">
        <echo message="SDK is unpacked..."/>
    </target>

    <target name="unpack.SDK.with.unzip" if="is.windows">
        <unzip src="${eut.work.dir}/${eclipse.filename}" dest="${eut.work.dir}"
            overwrite="true" />
    </target>

    <target name="unpack.SDK.with.untar" if="is.linux">
        <untar src="${eut.work.dir}/${eclipse.filename}" dest="${eut.work.dir}"
            overwrite="true" compression="gzip" />
    </target>

    <!--                                                         -->
    <!--                                                         -->
    <!-- Launch main EUT script                                  -->
    <!-- (derived from eclipse-testing/runtests(.bat)            -->
    <!--                                                         -->
    <target name="run.suite"
        description="Refresh EUT installation and run a single EUT suite"
        depends="refresh.eut.installation,
            configure.eut.run.properties,
            configure.eut.run.properties.teamcvs">
        <java
            fork="true"
            newenvironment="true"
            jar="${eut.work.dir}/${eclipse.launcher}"
            dir="${eut.work.dir}"
            failonerror="false"
            logError="false"
            resultproperty="resultproperty">
            <jvmarg value="-Dosgi.os=${os.eclipse.notation}" />
            <jvmarg value="-Dosgi.ws=${ws}" />
            <jvmarg value="-Dosgi.arch=${arch}" />
            <arg value="-data" />
            <arg value="workspace" />
            <arg value="-application" />
            <arg value="org.eclipse.ant.core.antRunner" />
            <arg value="-file" />
            <arg value="test.xml" />
            <arg value="${suite}" />
            <arg value="-Dos=${os.eclipse.notation}" />
            <arg value="-Dws=${ws}" />
            <arg value="-Darch=${arch}" />
            <arg value="-Dclean=true" />
            <arg value="-propertyfile" />
            <arg value="eut.run.properties" />
            <arg value="-logger" />
            <arg value="org.apache.tools.ant.DefaultLogger" />
            <redirector alwaysLog="true" logError="false"
                    output="${results.dir}/output.txt" append="true"/>
        </java>
    </target>

    <!--                                       -->
    <!--                                       -->
    <!-- Process results and generate summary  -->
    <!--                                       -->
    <!--                                       -->
    <target name="run.postprocess"
            depends="
            setup.efl,
            generate.reports,
            duplicate.results.in.latest,
            exit.based.on.eut.status"
            description="Processes JUnit reports and creates a summary">
    </target>

    <!-- Concats EFL files for specific platform -->
    <target name="setup.efl"
            description="Combine a platform specific EFL file or create empty one">
        <delete file="${results.dir}/eut.efl" />
        <touch file="${results.dir}/eut.efl" />
        <concat destfile="${results.dir}/eut.efl">
            <filelist dir="${basedir}/config"
                      files="
                eut${eclipse.buildid}.efl
                eut${eclipse.buildid}.${os.eclipse.notation}.efl
                eut${eclipse.buildid}.${os.eclipse.notation}.${ws}.efl
                eut${eclipse.buildid}.${os.eclipse.notation}.${ws}.${arch}.efl" />
        </concat>
    </target>

    <!-- Print arch, os and JRE under test info to report file -->
    <target name="generate.reports"
            depends="setup.efl,compose.report.get.java.version">

        <!-- Run reporter -->
        <java classpath="${work.dir}/utils/classes"
              classname="org.apache.harmony.eut.reporter.EUTReporter"
              fork="true"
              failonerror="false"
              resultproperty="reporter.exit.code"
              output="${work.dir}/r_output.txt">
            <arg value="${eclipse.buildid}" />
            <arg value="${results.dir}" />
            <arg value="${os.eclipse.notation}" />
            <arg value="${ws}" />
            <arg value="${arch}" />
            <arg value="${vm.options.ext}" />
        </java>

        <concat destfile="${results.dir}/output.txt" append="true">
            <fileset dir="${work.dir}" includes="r_output.txt" />
        </concat>
        <delete file="${work.dir}/r_output.txt" />
        <delete file="${basedir}/tested.java.version" />
        <delete file="${basedir}/running.java.version" />

    </target>

    <!-- Copy specific files of report to 'latest' directory -->
    <target name="duplicate.results.in.latest">
        <delete dir="${results.root.dir}/latest" />
        <mkdir dir="${results.root.dir}/latest" />
        <copy todir="${results.root.dir}/latest">
            <fileset dir="${results.dir}">
                <include name="results/html/*.html" />
                <include name="output.txt" />
                <include name="report.txt" />
                <include name="index.html" />
                <include name="eut.efl" />
            </fileset>
        </copy>
    </target>

    <!-- produce ant runner exit code based on EUT results -->
    <target name="exit.based.on.eut.status" depends="generate.reports">
        <fail message="EUT failed: There are unexpected failures">
            <condition>
                <equals arg1="${reporter.exit.code}" arg2="1" />
            </condition>
        </fail>

        <fail message="EUT failed: Fatal Error: some reports are unavailable">
            <condition>
                <equals arg1="${reporter.exit.code}" arg2="2" />
            </condition>
        </fail>

        <fail message="EUT failed: Fatal Error: reporter internal error">
            <condition>
                <equals arg1="${reporter.exit.code}" arg2="3" />
            </condition>
        </fail>

        <fail message="EUT failed: Fatal Error: magic error (never happens)">
            <condition>
                <not>
                    <equals arg1="${reporter.exit.code}" arg2="0" />
                </not>
            </condition>
        </fail>
        <echo message="EUT passed!" />
    </target>

    <target name="compose.report.get.java.version">

        <!-- tested java is specified in ${test.jre.home.path} var  -->
        <java jvm="${test.jre.home.path}/bin/java"
              fork="true"
              classname="."
              failonerror="false"
              logError="false"
              output="${basedir}/tested.java.version">
            <jvmarg value="-version" />
        </java>

        <!-- runtests(.bat) gets the running java directly from PATH var -->
        <java jvm="java"
              fork="true"
              classname="."
              failonerror="false"
              logError="false"
              output="${basedir}/running.java.version">
            <jvmarg value="-version" />
        </java>
    </target>

</project>
