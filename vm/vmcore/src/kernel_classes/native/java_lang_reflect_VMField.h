/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Alexey V. Varlamov
 * @version $Revision$
 */

/*
 * THE FILE HAS BEEN AUTOGENERATED BY INTEL IJH TOOL.
 * Please be aware that all changes made to this file manually
 * will be overwritten by the tool if it runs again.
 */

#include <jni.h>
/* Header for class java.lang.reflect.VMField */

#ifndef _Included_java_lang_reflect_VMField
#define _Included_java_lang_reflect_VMField
#ifdef __cplusplus
extern "C" {
#endif

/* Native methods */
/*
 * Method: java.lang.reflect.VMField.getObject(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL Java_java_lang_reflect_VMField_getObject
    (JNIEnv *, jclass, jobject, jlong);
/*
* Class:     java_lang_reflect_VMField
* Method:    getBoolean
* Signature: (Ljava/lang/Object;Ljava/lang/Object;)Z
*/
JNIEXPORT jboolean JNICALL Java_java_lang_reflect_VMField_getBoolean
(JNIEnv *, jclass, jobject, jlong);

/*
* Class:     java_lang_reflect_VMField
* Method:    getChar
* Signature: (Ljava/lang/Object;Ljava/lang/Object;)C
*/
JNIEXPORT jchar JNICALL Java_java_lang_reflect_VMField_getChar
(JNIEnv *, jclass, jobject, jlong);

/*
* Class:     java_lang_reflect_VMField
* Method:    getByte
* Signature: (Ljava/lang/Object;Ljava/lang/Object;)B
*/
JNIEXPORT jbyte JNICALL Java_java_lang_reflect_VMField_getByte
(JNIEnv *, jclass, jobject, jlong);

/*
* Class:     java_lang_reflect_VMField
* Method:    getShort
* Signature: (Ljava/lang/Object;Ljava/lang/Object;)S
*/
JNIEXPORT jshort JNICALL Java_java_lang_reflect_VMField_getShort
(JNIEnv *, jclass, jobject, jlong);

/*
* Class:     java_lang_reflect_VMField
* Method:    getInt
* Signature: (Ljava/lang/Object;Ljava/lang/Object;)I
*/
JNIEXPORT jint JNICALL Java_java_lang_reflect_VMField_getInt
(JNIEnv *, jclass, jobject, jlong);

/*
* Class:     java_lang_reflect_VMField
* Method:    getLong
* Signature: (Ljava/lang/Object;Ljava/lang/Object;)J
*/
JNIEXPORT jlong JNICALL Java_java_lang_reflect_VMField_getLong
(JNIEnv *, jclass, jobject, jlong);

/*
* Class:     java_lang_reflect_VMField
* Method:    getFloat
* Signature: (Ljava/lang/Object;Ljava/lang/Object;)F
*/
JNIEXPORT jfloat JNICALL Java_java_lang_reflect_VMField_getFloat
(JNIEnv *, jclass, jobject, jlong);

/*
* Class:     java_lang_reflect_VMField
* Method:    getDouble
* Signature: (Ljava/lang/Object;Ljava/lang/Object;)D
*/
JNIEXPORT jdouble JNICALL Java_java_lang_reflect_VMField_getDouble
(JNIEnv *, jclass, jobject, jlong);

/*
 * Method: java.lang.reflect.VMField.setObject(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_java_lang_reflect_VMField_setObject
    (JNIEnv *, jclass, jobject, jlong, jobject);

/*
* Class:     java_lang_reflect_VMField
* Method:    setBoolean
* Signature: (Ljava/lang/Object;Ljava/lang/Object;Z)V
*/
JNIEXPORT void JNICALL Java_java_lang_reflect_VMField_setBoolean
(JNIEnv *, jclass, jobject, jlong, jboolean);

/*
* Class:     java_lang_reflect_VMField
* Method:    setChar
* Signature: (Ljava/lang/Object;Ljava/lang/Object;C)V
*/
JNIEXPORT void JNICALL Java_java_lang_reflect_VMField_setChar
(JNIEnv *, jclass, jobject, jlong, jchar);

/*
* Class:     java_lang_reflect_VMField
* Method:    setByte
* Signature: (Ljava/lang/Object;Ljava/lang/Object;B)V
*/
JNIEXPORT void JNICALL Java_java_lang_reflect_VMField_setByte
(JNIEnv *, jclass, jobject, jlong, jbyte);

/*
* Class:     java_lang_reflect_VMField
* Method:    setShort
* Signature: (Ljava/lang/Object;Ljava/lang/Object;S)V
*/
JNIEXPORT void JNICALL Java_java_lang_reflect_VMField_setShort
(JNIEnv *, jclass, jobject, jlong, jshort);

/*
* Class:     java_lang_reflect_VMField
* Method:    setInt
* Signature: (Ljava/lang/Object;Ljava/lang/Object;I)V
*/
JNIEXPORT void JNICALL Java_java_lang_reflect_VMField_setInt
(JNIEnv *, jclass, jobject, jlong, jint);

/*
* Class:     java_lang_reflect_VMField
* Method:    setLong
* Signature: (Ljava/lang/Object;Ljava/lang/Object;J)V
*/
JNIEXPORT void JNICALL Java_java_lang_reflect_VMField_setLong
(JNIEnv *, jclass, jobject, jlong, jlong);

/*
* Class:     java_lang_reflect_VMField
* Method:    setFloat
* Signature: (Ljava/lang/Object;Ljava/lang/Object;F)V
*/
JNIEXPORT void JNICALL Java_java_lang_reflect_VMField_setFloat
(JNIEnv *, jclass, jobject, jlong, jfloat);

/*
* Class:     java_lang_reflect_VMField
* Method:    setDouble
* Signature: (Ljava/lang/Object;Ljava/lang/Object;D)V
*/
JNIEXPORT void JNICALL Java_java_lang_reflect_VMField_setDouble
(JNIEnv *, jclass, jobject, jlong, jdouble);


#ifdef __cplusplus
}
#endif
#endif
