/*
 *  Copyright 2005-2006 The Apache Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/** 
 * @author Andrey Chernyshev
 * @version $Revision: 1.1.6.5 $
 */  

/*
 * THE FILE HAS BEEN AUTOGENERATED BY INTEL IJH TOOL.
 * Please be aware that all changes made to this file manually
 * will be overwritten by the tool if it runs again.
 */

#include <jni.h>


/* Header for class org.apache.harmony.util.concurrent.Atomics */

#ifndef _ORG_APACHE_HARMONY_UTIL_CONCURRENT_ATOMICS_H
#define _ORG_APACHE_HARMONY_UTIL_CONCURRENT_ATOMICS_H

#ifdef __cplusplus
extern "C" {
#endif


/* Native methods */

/*
 * Method: org.apache.harmony.util.concurrent.Atomics.getFieldOffset(Ljava/lang/reflect/Field;)J
 */
JNIEXPORT jlong JNICALL
Java_org_apache_harmony_util_concurrent_Atomics_getFieldOffset(JNIEnv *, jclass, jobject);

/*
 * Method: org.apache.harmony.util.concurrent.Atomics.compareAndSetInt(Ljava/lang/Object;JII)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_apache_harmony_util_concurrent_Atomics_compareAndSetInt__Ljava_lang_Object_2JII(JNIEnv *, jclass, 
    jobject, jlong, jint, jint);

/*
 * Method: org.apache.harmony.util.concurrent.Atomics.compareAndSetBoolean(Ljava/lang/Object;JZZ)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_apache_harmony_util_concurrent_Atomics_compareAndSetBoolean__Ljava_lang_Object_2JZZ(JNIEnv *, jclass, 
    jobject, jlong, jboolean, jboolean);

/*
 * Method: org.apache.harmony.util.concurrent.Atomics.compareAndSetLong(Ljava/lang/Object;JJJ)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_apache_harmony_util_concurrent_Atomics_compareAndSetLong__Ljava_lang_Object_2JJJ(JNIEnv *, jclass, 
    jobject, jlong, jlong, jlong);

/*
 * Method: org.apache.harmony.util.concurrent.Atomics.compareAndSetObject(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_apache_harmony_util_concurrent_Atomics_compareAndSetObject__Ljava_lang_Object_2JLjava_lang_Object_2Ljava_lang_Object_2(JNIEnv *, jclass, 
    jobject, jlong, jobject, jobject);

/*
 * Method: org.apache.harmony.util.concurrent.Atomics.compareAndSetInt([IIII)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_apache_harmony_util_concurrent_Atomics_compareAndSetInt___3IIII(JNIEnv *, jclass, 
    jintArray, jint, jint, jint);

/*
 * Method: org.apache.harmony.util.concurrent.Atomics.compareAndSetBoolean([ZIZZ)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_apache_harmony_util_concurrent_Atomics_compareAndSetBoolean___3ZIZZ(JNIEnv *, jclass, 
    jbooleanArray, jint, jboolean, jboolean);

/*
 * Method: org.apache.harmony.util.concurrent.Atomics.compareAndSetLong([JIJJ)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_apache_harmony_util_concurrent_Atomics_compareAndSetLong___3JIJJ(JNIEnv *, jclass, 
    jlongArray, jint, jlong, jlong);

/*
 * Method: org.apache.harmony.util.concurrent.Atomics.compareAndSetObject([Ljava/lang/Object;ILjava/lang/Object;Ljava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL
Java_org_apache_harmony_util_concurrent_Atomics_compareAndSetObject___3Ljava_lang_Object_2ILjava_lang_Object_2Ljava_lang_Object_2(JNIEnv *, jclass, 
    jobjectArray, jint, jobject, jobject);


#ifdef __cplusplus
}
#endif

#endif /* _ORG_APACHE_HARMONY_UTIL_CONCURRENT_ATOMICS_H */

