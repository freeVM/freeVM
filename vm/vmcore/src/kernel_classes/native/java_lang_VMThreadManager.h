/*
 *  Copyright 2005-2006 The Apache Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Andrey Chernyshev
 * @version $Revision: 1.1.2.1.2.2 $
 */

/*
 * THE FILE HAS BEEN AUTOGENERATED BY INTEL IJH TOOL.
 * Please be aware that all changes made to this file manually
 * will be overwritten by the tool if it runs again.
 */

#include <jni.h>
/* Header for class java.lang.VMThreadManager */

#ifndef _JAVA_LANG_VMTHREADMANAGER_H
#define _JAVA_LANG_VMTHREADMANAGER_H
#ifdef __cplusplus
extern "C" {
#endif

/* Native methods */

/*
 * Method: java.lang.VMThreadManager.currentThread()Ljava/lang/Thread;
 */
JNIEXPORT jobject JNICALL Java_java_lang_VMThreadManager_currentThread
    (JNIEnv *, jclass);

/*
 * Method: java.lang.VMThreadManager.holdsLock(Ljava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_VMThreadManager_holdsLock
    (JNIEnv *, jclass, jobject);

/*
 * Method: java.lang.VMThreadManager.interrupt(Ljava/lang/Thread;)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_interrupt
    (JNIEnv *, jclass, jobject);

/*
 * Method: java.lang.VMThreadManager.isInterrupted()Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_VMThreadManager_isInterrupted__
    (JNIEnv *, jclass);

/*
 * Method: java.lang.VMThreadManager.isInterrupted(Ljava/lang/Thread;)Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_VMThreadManager_isInterrupted__Ljava_lang_Thread_2
    (JNIEnv *, jclass, jobject);

/*
 * Method: java.lang.VMThreadManager.notify(Ljava/lang/Object;)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_notify
    (JNIEnv *, jclass, jobject);

/*
 * Method: java.lang.VMThreadManager.notifyAll(Ljava/lang/Object;)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_notifyAll
    (JNIEnv *, jclass, jobject);

/*
 * Method: java.lang.VMThreadManager.resume(Ljava/lang/Thread;)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_resume
    (JNIEnv *, jclass, jobject);

/*
 * Method: java.lang.VMThreadManager.setPriority(Ljava/lang/Thread;I)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_setPriority
    (JNIEnv *, jclass, jobject, jint);

/*
 * Method: java.lang.VMThreadManager.sleep(JI)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_sleep
    (JNIEnv *, jclass, jlong, jint);

/*
 * Method: java.lang.VMThreadManager.start(Ljava/lang/Thread;JZI)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_start
    (JNIEnv *, jclass, jobject, jlong, jboolean, jint);

/*
 * Method: java.lang.VMThreadManager.stop(Ljava/lang/Thread;Ljava/lang/Throwable;)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_stop
    (JNIEnv *, jclass, jobject, jthrowable);

/*
 * Method: java.lang.VMThreadManager.suspend(Ljava/lang/Thread;)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_suspend
    (JNIEnv *, jclass, jobject);

/*
 * Method: java.lang.VMThreadManager.wait(Ljava/lang/Object;JI)I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_wait
    (JNIEnv *, jclass, jobject, jlong, jint);

/*
 * Method: java.lang.VMThreadManager.yield()I
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_yield
    (JNIEnv *, jclass);

/*
 * Method: java.lang.VMThreadManager.attach()V
 */
JNIEXPORT void JNICALL Java_java_lang_VMThreadManager_attach
    (JNIEnv *, jclass, jobject);


/*
 * Method: java.lang.VMThreadManager.isDead(Ljava/lang/Thread;)Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_VMThreadManager_isAlive
    (JNIEnv *, jclass, jobject);

/*
 * Method: java.lang.VMThreadManager.join(Ljava/lang/Thread;JI)I
 * Throws: java.lang.InterruptedException
 */
JNIEXPORT jint JNICALL Java_java_lang_VMThreadManager_join
    (JNIEnv *, jclass, jobject, jlong, jint);

/*
 * Method: java.lang.VMThreadManager.init(Ljava/lang/Thread;)V
 */
JNIEXPORT jlong JNICALL Java_java_lang_VMThreadManager_init
    (JNIEnv *, jclass, jobject, jobject, jlong);
#ifdef __cplusplus
}
#endif
#endif
