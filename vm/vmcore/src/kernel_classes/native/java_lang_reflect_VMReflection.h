/*
 *  Copyright 2005-2006 The Apache Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/** 
 * @author Euguene Ostrovsky
 * @version $Revision: 1.1.2.1.4.6 $
 */  

/*
 * THE FILE HAS BEEN AUTOGENERATED BY INTEL IJH TOOL.
 * Please be aware that all changes made to this file manually
 * will be overwritten by the tool if it runs again.
 */

#include <jni.h>


/* Header for class java.lang.reflect.VMReflection */

#ifndef _JAVA_LANG_REFLECT_VMREFLECTION_H
#define _JAVA_LANG_REFLECT_VMREFLECTION_H

#ifdef __cplusplus
extern "C" {
#endif


/* Native methods */

/*
 * Method: java.lang.reflect.VMReflection.getDeclaringClass(Ljava/lang/Object;)Ljava/lang/Class;
 */
JNIEXPORT jclass JNICALL
Java_java_lang_reflect_VMReflection_getDeclaringClass(JNIEnv *, jclass, 
    jobject);

/*
 * Method: java.lang.reflect.VMReflection.getExceptionTypes(Ljava/lang/Object;)[Ljava/lang/Class;
 */
JNIEXPORT jobjectArray JNICALL
Java_java_lang_reflect_VMReflection_getExceptionTypes(JNIEnv *, jclass, 
    jobject);

/*
 * Method: java.lang.reflect.VMReflection.getFieldType(Ljava/lang/Object;)Ljava/lang/Class;
 */
JNIEXPORT jclass JNICALL
Java_java_lang_reflect_VMReflection_getFieldType(JNIEnv *, jclass, 
    jobject);

/*
 * Method: java.lang.reflect.VMReflection.getFieldValue(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL
Java_java_lang_reflect_VMReflection_getFieldValue(JNIEnv *, jclass, 
    jobject, jobject);

/*
 * Method: java.lang.reflect.VMReflection.getMethodReturnType(Ljava/lang/Object;)Ljava/lang/Class;
 */
JNIEXPORT jclass JNICALL
Java_java_lang_reflect_VMReflection_getMethodReturnType(JNIEnv *, jclass, 
    jobject);

/*
 * Method: java.lang.reflect.VMReflection.getModifiers(Ljava/lang/Object;)I
 */
JNIEXPORT jint JNICALL
Java_java_lang_reflect_VMReflection_getModifiers(JNIEnv *, jclass, 
    jobject);

/*
 * Method: java.lang.reflect.VMReflection.getName(Ljava/lang/Object;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL
Java_java_lang_reflect_VMReflection_getName(JNIEnv *, jclass, 
    jobject);

/*
 * Method: java.lang.reflect.VMReflection.getParameterTypes(Ljava/lang/Object;)[Ljava/lang/Class;
 */
JNIEXPORT jobjectArray JNICALL
Java_java_lang_reflect_VMReflection_getParameterTypes(JNIEnv *, jclass, 
    jobject);

/*
 * Method: java.lang.reflect.VMReflection.invokeMethod(Ljava/lang/Object;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
 * Throws: java.lang.reflect.InvocationTargetException
 */
JNIEXPORT jobject JNICALL
Java_java_lang_reflect_VMReflection_invokeMethod(JNIEnv *, jclass, 
    jobject, jobject, jobjectArray);

/*
 * Method: java.lang.reflect.VMReflection.newArrayInstance(Ljava/lang/Class;[I)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL
Java_java_lang_reflect_VMReflection_newArrayInstance(JNIEnv *, jclass, 
    jclass, jintArray);

/*
 * Method: java.lang.reflect.VMReflection.newClassInstance(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
 * Throws: java.lang.reflect.InvocationTargetException
 */
JNIEXPORT jobject JNICALL
Java_java_lang_reflect_VMReflection_newClassInstance(JNIEnv *, jclass, 
    jobject, jobjectArray);

/*
 * Method: java.lang.reflect.VMReflection.setFieldValue(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL
Java_java_lang_reflect_VMReflection_setFieldValue(JNIEnv *, jclass, 
    jobject, jobject, jobject);


#ifdef __cplusplus
}
#endif

#endif /* _JAVA_LANG_REFLECT_VMREFLECTION_H */

