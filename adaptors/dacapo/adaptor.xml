<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. -->

<project name="dacapo" default="run" basedir=".">

    <property environment="env"/>

    <property name="work.dir" location="${results.dir}/${suite.name}"/>
    <property name="output.log" value="${work.dir}/${suite.name}_output.txt"/>

    <target name="setup">
        <description>${suite.name} setup</description>
        <mkdir dir="${work.dir}"/>
        <mkdir dir="${checkouts.dir}/${suite.name}"/>

        <!-- download dacapo if needed-->
        <available property="doesnt.need.download" file="${checkouts.dir}/${suite.name}/${dacapo.parameters.optional.jar.name}"/>
        <antcall target="-dacapo.download"/>

        <!-- extract xalan.jar from dacapo.jar as it's needed for xalan workload -->
        <!-- we're checking here antlr/* presence by xalan.jar presence for simplicity -->
        <available property="doesnt.need.extracting" file="${checkouts.dir}/${suite.name}/xalan.jar"/>
        <antcall target="-xalan_antlr.extracting"/>

    </target>

    <target name="-dacapo.download" unless="doesnt.need.download">
        <get src="${dacapo.parameters.optional.download.address}/${dacapo.parameters.optional.jar.name}"
            dest="${checkouts.dir}/${suite.name}/${dacapo.parameters.optional.jar.name}" usetimestamp="false" verbose="true"/>
    </target>

    <target name="-xalan_antlr.extracting" unless="doesnt.need.extracting">
        <unjar src="${checkouts.dir}/${suite.name}/${dacapo.parameters.optional.jar.name}" dest="${checkouts.dir}/${suite.name}">
            <patternset includes="xalan.jar,antlr/**/*"/>
        </unjar>
    </target>

    <target name="run">
        <description>${suite.name} run</description>

        <echo file="${output.log}" message="Running of ${dacapo.parameters.optional.jar.name} on ${dacapo.jdk.to.test.home} runtime...${line.separator}"/>
        <echo file="${output.log}" message="Set of tests: ${dacapo.parameters.optional.benchmarks}${line.separator}" append="true"/>
        <echo file="${results.dir}/${suite.name}/stdout.log" message=""/>

        <!-- get version info from runtime to attach it to report -->
        <echo file="${results.dir}/${suite.name}/version.log">
        </echo>
        <exec executable="${dacapo.jdk.to.test.home}/bin/java" dir="${results.dir}/${suite.name}" failonerror="false">
            <arg line="-version"/>
            <redirector alwaysLog="true" output="${results.dir}/${suite.name}/version.log"/>
        </exec>

        <exec executable="${dacapo.jdk.to.test.home}/bin/java"
              dir="${results.dir}/${suite.name}"
              append="true"
              failonerror="false"
              error="${output.log}">
            <arg line="-Xbootclasspath/p:${checkouts.dir}/${suite.name}/xalan.jar${path.separator}${checkouts.dir}/${suite.name}" />
            <arg line="-jar ${checkouts.dir}/${suite.name}/${dacapo.parameters.optional.jar.name}" />
            <arg line="-s ${dacapo.parameters.optional.size}" />
            <arg line="${dacapo.parameters.optional.benchmarks}" />
            <redirector alwaysLog="true"
                        output="${results.dir}/${suite.name}/stdout.log" />
            <env key="JAVA_HOME" value="${dacapo.jdk.to.test.home}" />
            <env key="PATH"
                 value="${dacapo.jdk.to.test.home}/bin${path.separator}${env.PATH}" />
        </exec>

        <!-- count "number" of requested workloads -->
        <echo file="${work.dir}/dacapo_tests.tmp">${dacapo.parameters.optional.benchmarks}</echo>
        <loadfile srcFile="${work.dir}/dacapo_tests.tmp" property="number.of.tests" failonerror="false">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="\s*\w+\s*" replace="." flags="g"/>
                </tokenfilter>
            </filterchain>
        </loadfile>

        <!-- count "number" of executed workloads -->
        <copy file="${output.log}" tofile="${work.dir}/dacapo_runned_tests.tmp" overwrite="true" failonerror="false">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="^===== DaCapo \w+ PASSED in \d+ msec =====.*"/>
                </linecontainsregexp>
                <tokenfilter>
                    <replaceregex pattern="^.*$" replace="." flags="mg"/>
                </tokenfilter>
            </filterchain>
        </copy>
        <replaceregexp file="${work.dir}/dacapo_runned_tests.tmp" match="\r|\n" replace="" flags="sg"/>
        <loadfile srcFile="${work.dir}/dacapo_runned_tests.tmp" property="number.of.runned.tests" failonerror="false"/>

        <echo>Number of tests: (${number.of.tests})</echo>
        <echo>N of runned tests(${number.of.runned.tests})</echo>

        <fail message="Not all workloads completed successfully">
            <condition>
                <not>
                    <equals arg1="${number.of.tests}" arg2="${number.of.runned.tests}"/>
                </not>
            </condition>
        </fail>

    </target>

    <target name="clean">
        <description>${suite.name} clean</description>
        <echo>${suite.name} clean does nothing.</echo>
    </target>

</project>

