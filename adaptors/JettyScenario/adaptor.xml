<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
     
         http://www.apache.org/licenses/LICENSE-2.0
     
     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License. -->

<!-- ====================================================================== 
                            BT Adaptor for Jetty scenario
     ====================================================================== -->
<project name="JettyScenario" default="run" basedir=".">

    <property name="scenario.dir" location="${checkouts.dir}/${suite.name}"/>
    <property name="scenario.src.dir" location="${test.sources.dir}/${suite.name}"/>
    <property name="scenario.bin.dir" location="${scenario.dir}/classes"/>
    <property name="scenario.results.dir" location="${results.dir}/${suite.name}"/>

    <condition property="test.fw.vm.opts" value="${JettyScenario.parameters.optional.tested.vm.options}" else="">
        <equals arg1="${jetty.server.jvm}" arg2="${scenario.framework.jvm}"/>
    </condition>

    <target name="setup">
        <echo level="info" message="============= Adaptor for ${suite.name}: Set Up .."/>
        <echo level="info" message=""/>
        <echo level="info" message="=== External dependencies ========================"/>
        <echo level="info" message="Jetty location:    ${ext.jetty-6.1.2rc1.location}"/>
        <echo level="info" message="=================================================="/>
        <echo level="info" message="HtmlUnit location: ${ext.htmlunit-1.11.location}"/>
        <echo level="info" message="=================================================="/>
        <echo level="info" message=""/>
        <echo level="info" message="=== Required parameters =========================="/>
        <echo level="info" message="Jetty JVM:    ${JettyScenario.parameters.required.jetty.server.jvm}"/>
        <echo level="info" message="Scenario JVM: ${JettyScenario.parameters.required.scenario.framework.jvm}"/>
        <echo level="info" message="=================================================="/>

        <!--
            Performing scenario setup in the following order:

            1. Update sources from repository
            2. Create working directory
            3. Compile scenario sources
        -->

        <svn-update-bt path="${scenario.src.dir}"/>

        <mkdir dir="${scenario.bin.dir}"/>

        <antcall target="-compile-sources"/>
    </target>

    <target name="-compile-sources">
        <javac srcdir="${test.sources.dir}/${suite.name}/src"
               destdir="${scenario.bin.dir}">
            <classpath>
                <pathelement location="${scenario.bin.dir}"/>
                <pathelement location="${ext.junit.location}"/>
                <fileset dir="${ext.htmlunit-1.11.location}">
                    <include name="lib/*.jar"/>
                </fileset>
            </classpath>
        </javac>
    </target>

    <target name="-compile-if-needed" if="repository.updated">
        <antcall target="-compile-sources"/>
    </target>

    <target name="run" depends="-compile-if-needed">
        <echo level="info" message="============= Adaptor for ${suite.name}: Run .."/>

        <!--
            Performing scenario run in the following order:

            0. Check that specified java executable exists
            1. Create directory for scenario results
            2. Remove previous Jetty server log, if any
            3. Start Jetty server and wait until it is started
            4. Run the scenario by 'junit' task
            5. Stop Jetty server
            6. Collect logs and results in results directory
        -->

        <condition property="server.vm.not.exist">
            <not>
                <available file="${jetty.server.jvm}"/>
            </not>
        </condition>
        <fail message="Path to JVM does not exist: ${jetty.server.jvm}" if="server.vm.not.exist"/>

        <condition property="fw.vm.not.exist">
            <not>
                <available file="${scenario.framework.jvm}"/>
            </not>
        </condition>
        <fail message="Path to JVM does not exist: ${scenario.framework.jvm}" if="fw.vm.not.exist"/>

        <mkdir dir="${scenario.results.dir}"/>
        <delete file="${scenario.results.dir}/jetty.log"/>

        <parallel>
            <sequential>
                <echo level="info" message="Starting Jetty server"/>
                <java jvm="${JettyScenario.parameters.required.jetty.server.jvm}"
                      dir="${ext.jetty-6.1.2rc1.location}"
                      classname="start.jar"
                      fork="true"
                      timeout="1${JettyScenario.parameters.optional.jetty.server.timeout}000"
                      output="${scenario.results.dir}/jetty.log">
                    <sysproperty key="jetty.port" value="${JettyScenario.parameters.optional.jetty.server.port}"/>
                    <sysproperty key="STOP.PORT"  value="${JettyScenario.parameters.optional.jetty.server.stop.port}"/>
                    <sysproperty key="STOP.KEY"   value="kill"/>
                    <jvmarg line="${JettyScenario.parameters.optional.tested.vm.options} -jar"/>
                </java>
            </sequential>

            <sequential>
                <waitfor maxwait="${JettyScenario.parameters.optional.jetty.server.timeout}"
                         maxwaitunit="second" timeoutproperty="failed.timeout">
                    <and>
                        <available file="${scenario.results.dir}/jetty.log"/>
                        <isfileselected file="${scenario.results.dir}/jetty.log">
                            <contains text="INFO:  Started SelectChannelConnector"/>
                        </isfileselected>
                    </and>
                </waitfor>
                <fail message="Jetty server startup timeout exceeded" if="failed.timeout"/>

                <junit jvm="${JettyScenario.parameters.required.scenario.framework.jvm}"
                       dir="${scenario.dir}"
                       fork="true"
                       forkmode="once"
                       haltonerror="false"
                       haltonfailure="false"
                       printsummary="on"
                       failureproperty="scenario.failed">
                    <jvmarg line="${test.fw.vm.opts}"/>
                    <sysproperty key="jetty.scenario.resources.path"  value="${scenario.src.dir}/resources"/>
                    <sysproperty key="jetty.scenario.results.path"    value="${scenario.results.dir}"/>
                    <sysproperty key="jetty.scenario.savepages"       value="${JettyScenario.parameters.optional.do.save.pages}"/>
                    <sysproperty key="jetty.server.startup.timeout"   value="${JettyScenario.parameters.optional.jetty.server.timeout}"/>
                    <sysproperty key="org.apache.commons.logging.Log" value="org.apache.commons.logging.impl.SimpleLog"/>
                    <sysproperty key="org.apache.commons.logging.simplelog.defaultlog" value="error"/>
                    <classpath >
                        <pathelement location="${scenario.bin.dir}"/>
                        <pathelement location="${ext.junit.location}"/>
                        <fileset dir="${ext.htmlunit-1.11.location}">
                            <include name="lib/*.jar"/>
                        </fileset>
                    </classpath>
                    <formatter type="plain"/>
                    <formatter type="xml"/>
                    <test name="org.apache.harmony.test.jetty.JettyScenario" todir="${scenario.results.dir}"/>
                </junit>

                <junitreport todir="${scenario.results.dir}">
                    <fileset dir="${scenario.results.dir}">
                        <include name="TEST-*.xml"/>
                    </fileset>
                    <report format="frames" todir="${scenario.results.dir}/html"/>
                </junitreport>

                <antcall target="-compose-notification"/>

                <echo level="info" message="Stopping Jetty server"/>
                <java jvm="${JettyScenario.parameters.required.jetty.server.jvm}"
                      dir="${ext.jetty-6.1.2rc1.location}"
                      classname="start.jar"
                      fork="true"
                      failonerror="true">
                    <sysproperty key="jetty.port" value="${JettyScenario.parameters.optional.jetty.server.port}"/>
                    <sysproperty key="STOP.PORT" value="${JettyScenario.parameters.optional.jetty.server.stop.port}"/>
                    <sysproperty key="STOP.KEY" value="kill"/>
                    <jvmarg line="${JettyScenario.parameters.optional.tested.vm.options} -jar"/>
                    <arg value="--stop"/>
                </java>
                <fail message="Jetty scenario failed" if="scenario.failed"/>
            </sequential>
        </parallel>

    </target>

    <target name="clean">
        <echo level="info" message="============= Adaptor for ${suite.name}: Clean .."/>
        <echo level="info" message="Removing all from working directory"/>
        <delete dir="${scenario.dir}"/>
        <echo level="info" message="Removing all from results directory"/>
        <delete dir="${scenario.results.dir}"/>
    </target>

    <!--
        Compose Jetty scenario summary
    -->

    <property name="ls" value="${line.separator}"/>

    <target name="-compose-notification">
        <echo file="${scenario.results.dir}/notification.txt"
              message="Jetty server JRE:${ls}${ls}"/>

        <exec executable="${JettyScenario.parameters.required.jetty.server.jvm}"
              output="${scenario.results.dir}/notification.txt" append="true">
            <arg value="-version"/>
        </exec>

        <echo file="${scenario.results.dir}/notification.txt" append="true"
              message="${ls}Scenario framework JRE:${ls}${ls}"/>

        <exec executable="${JettyScenario.parameters.required.scenario.framework.jvm}"
              output="${scenario.results.dir}/notification.txt" append="true">
            <arg value="-version"/>
        </exec>

        <echo file="${scenario.results.dir}/notification.txt" append="true"
              message="${ls}================================================================================${ls}Scenario results:${ls}${ls}"/>

        <concat destfile="${scenario.results.dir}/notification.txt" append="true">
            <fileset dir="${scenario.results.dir}" includes="TEST-*.txt"/>
        </concat>

        <echo file="${scenario.results.dir}/notification.txt" append="true"
              message="${ls}================================================================================${ls}Jetty server output:${ls}${ls}"/>

        <concat destfile="${scenario.results.dir}/notification.txt" append="true">
            <filelist dir="${scenario.results.dir}" files="jetty.log"/>
        </concat>

        <echo file="${scenario.results.dir}/notification.txt" append="true"
              message="${ls}================================================================================${ls}"/>
    </target>
    
</project>
