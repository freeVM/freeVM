<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
    Copyright 2005 - 2006 The Apache Software Foundation or its licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
Author:  Alexey A. Petrenko
Version: $Revision$
-->
<project name="HarmonyAWTBuild" default="dist" basedir="..">

    <description> Build for AWT and Java2D stuff </description>



    <!-- set global properties for this build. -->

    <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>

    <!--

         In order to use Eclipse compiler (ver. 3.1.0 and higher) you will need to add
         the compiler's jars to the CLASSPATH and path to jni.h
         to INCLUDE environment variables before build start.
         For example:
         
         unpack %ECLIPSE_HOME%/plugins/org.eclipse.jdt.core_3.1.1.jar 
         into %ECLIPSE_HOME%/plugins/ folder 
         
         set CLASSPATH=%ECLIPSE_HOME%/plugins/org.eclipse.jdt.core_3.1.1/jdtCompilerAdapter.jar;\                
         %ECLIPSE_HOME%/plugins/org.eclipse.jdt.core_3.1.1;%CLASSPATH%

         property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"

         In order to use default compiler set build.compiler property:
         property name="build.compiler" value="modern"
         
     -->

    <property name="build.dir" value=".."/>
    <property name="harmony.path" location="../.." />
    <property name="harmony.depends.build.path" location="${harmony.path}/depends/jars/build" />
    <property name="build.path" location="${build.dir}/../build" />
    <property environment="env"/>


    <condition property="if.win" value="true">
        <os family="Windows" />
    </condition>

    <condition property="if.linux" value="true">
        <and>
            <os name="linux" />
            <os family="unix" />
        </and>
    </condition>

    <condition property="if.x86_64" value="true">
        <contains string="${os.arch}" substring="x86_64"/>
    </condition>
 
    <condition property="if.x86" value="true">
        <and>
          <contains string="${os.arch}" substring="86"/>
            <not>
               <isset property="if.x86_64"/>
            </not>
        </and>
    </condition>


    <condition property="if.ipf" value="true">
        <contains string="${os.arch}" substring="ia64"/>
    </condition>


    <!-- Platform dependency -->

    <target name="timestamp" description="Set up a timestamp">
        <tstamp>
            <format property="build-date" pattern="yyyyMMdd" locale="en" />
        </tstamp>
        <tstamp>
            <format property="build-time" pattern="yyyyMMdd_HHmm)" />
        </tstamp>
        <echo message="build-date=${build-date}" />
        <echo message="build-time=${build-time}" />
        <echo message="on platform=${os.name} version=${os.version} arch=${os.arch}" />
        <echo message="with java home = ${java.home} VM version = ${java.vm.version} vendor = ${java.vm.vendor}" />
    </target>

    <target name="setname.win" if="if.win">
        <property name="platform.name" value="win" />
        <property name="libpr" value=""/>
        <property name="libsf" value=".dll"/>
    </target>

    <target name="setname.linux" if="if.linux">
        <property name="platform.name" value="lnx" />
        <property name="libpr" value="lib"/>
        <property name="libsf" value=".so"/>
    </target>


    <!-- INIT TARGETS -->

    <target name="init" depends="timestamp, setname.win, setname.linux">

        <echo message="platform name=${platform.name}" />

        <property name="java.debug.option" value="on" />
        <property name="native.debug.option" value="on" />

        <property name="src" location="${basedir}/src" />
        <property name="src.common.java" location="${src}/common/java" />
        <property name="src.common.native" location="${src}/common/native" />
        <property name="src.win.java" location="${src}/windows/java" />
        <property name="src.win.native" location="${src}/windows/native" />
        <property name="src.linux.java" location="${src}/linux/java" />
        <property name="src.linux.native" location="${src}/linux/native" />
        <property name="src.tst" value="${basedir}/test" />
        <property name="src.tst.common" value="${src.tst}/common" />

        <property name="harmonybin.path" value="deploy/jdk/jre"/>
        <property name="build.lib.path" location="${harmony.path}/${harmonybin.path}/bin" />
        <property name="build.jars.path" location="${harmony.path}/${harmonybin.path}/lib/boot" />
        <property name="build.ext.path" location="${harmony.path}/${harmonybin.path}/lib/ext" />
        <property name="build.bin.path" location="${harmony.path}/${harmonybin.path}/bin" />

        <property name="tmp" location="${build.path}/tmp" />
        <property name="source.ver" value="1.4" />

        <property name="native.lib.name" value="**/*"/>


        <!-- TaskDefs -->
        <path id="cc.cp">
            <pathelement location="${harmony.depends.build.path}/cpptasks.jar"/>
        </path>
        <taskdef resource="cpptasks.tasks">
            <classpath refid="cc.cp"/>
        </taskdef>
        <typedef resource="cpptasks.types">
            <classpath refid="cc.cp"/>
        </typedef>


        <echo message="if.x86_64=${if.x86_64}"/>
        <echo message="if.x86=${if.x86}"/>
        <echo message="if.ipf=${if.ipf}"/>

        <echo message="create base dirs..." />
        <mkdir dir="${build.path}" />
        <mkdir dir="${tmp}" />
        <mkdir dir="${build.lib.path}" />

    </target>
    
    <target name="init.java_home">

        <property name="JAVA_HOME" value="${env.JAVA_HOME}" />
        <echo message="JAVA_HOME=${JAVA_HOME}"/>

    </target>

    <target name="init.win" depends="init, init.java_home" if="if.win">
        <property name="target.os" value="windows"/>

        <property name="native.include.path" value="${harmony.path}/native-src/win.IA32/include;${harmony.path}/modules/luni/src/main/native/include/shared" />
        <property name="native.zlib.include" value="${harmony.path}/native-src/win.IA32/zlib;${harmony.path}/native-src/win.IA32/zlib/dist" />
        <property name="native.zlib.lib" value="${harmony.path}/native-src/win.IA32/lib" />
        <property name="harmony.depends.native.build.path" location="${harmony.path}/depends/libs/build/" />

        <property name="native.compiler" value="msvc" />
        <property name="library.ext" value=".dll" />

        <property name="cPath" value="${PATH};${env.PATH}" />
        <property name="cINCLUDE" value="${INCLUDE};${env.include};${env.INCLUDE};${native.include.path};${native.zlib.include}" />
        <property name="cLIB" value="${env.LIB};${native.zlib.lib}" />
        <property name="src.java" value="${src.win.java}" />
        <property name="compile.native.tail" value="windows" />

        <property name="src.tst.common.ps" value="${src.tst}/windows" />

        <property name="jni_h.path"    location="${native.include.path}"/>

    </target>

    
    <target name="init.linux" depends="init, init.java_home" if="if.linux">
        <property name="target.os" value="unix"/>

        <property name="native.include.path" value="${harmony.path}/native-src/linux.IA32/include:${harmony.path}/modules/luni/src/main/native/include/shared" />
        <property name="harmony.depends.native.build.path" location="${harmony.path}/depends/libs/build/" />
        

        <property name="native.compiler" value="gcc" />
        <property name="library.ext" value=".so" />

        <property name="cPath" value="${env.PATH}" />
        <property name="cINCLUDE" value="${env.INCLUDE};${native.include.path}" />
        <property name="cLIB" value="${env.LIB}" />
        <property name="src.java" value="${src.linux.java}" />
        <property name="compile.native.tail" value="linux" />

        <property name="src.tst.common.ps" value="${src.tst}/linux" />

        <property name="jni_h.path"    location="${native.include.path}"/>

    </target>


    <!-- AWT PACKAGES SETS -->

    <patternset id="awt">
        <include name="java/awt/**"/>
        <include name="org/apache/harmony/awt/**"/>
    </patternset>


    <patternset id="api.src.all">
        <patternset refid="awt"/>
    </patternset>

    <target name="compile.misc" description="Building Misc binaries">
        <ant antfile="${basedir}/../misc/make/build.xml" inheritAll="false"></ant>
    </target>

    <!-- AWT TARGETS -->

    <target name="dist" depends="build, build.native" />

    <target name="build" depends="init, init.win, init.linux, compile.misc, compile.api, build.jars"
        description="Building AWT binaries">
        <!-- clean up -->
        <delete dir="${tmp}"/>
    </target>


    <target name="tests" depends="build, tests.compile"
        description="Building AWT tests">
    </target>


    <target name="tests.run" depends="tests, run"
        description="Running AWT tests">
    </target>


    <target name="tests.gen" depends="tests"
        description="Generating serialized stuff for tests">
    </target>

    <target name="clean">
        <delete dir="${build.path}"/>
    </target>

    <!-- SUPPORT TARGETS -->


    <target name="build.jars">
        <mkdir dir="${build.jars.path}"/>

        <antcall target="build.one.jar">
            <param name="ref.id" value="awt"/>
        </antcall>
    </target>


    <target name="compile.api" description="Compile AWT API sources">
        <mkdir dir="${build.path}/classes" />
        <echo message="Compiling api classes from ${src.common.java}, ${src.java}" />
        <javac sourcepath="${harmony.path}/modules/swing/src/common/java"
            destdir="${build.path}/classes"
            source="${source.ver}"
            debug="${java.debug.option}">
            <src>
                <pathelement location="${src.common.java}"/>
                <pathelement location="${src.java}"/>
            </src>
            <patternset refid="api.src.all"/>
            <bootclasspath>
                <pathelement path="${build.path}/classes"/>
                <fileset dir="${java.home}/lib">
                    <include name="*.jar"/>
                    <include name="boot/*.jar"/>
                </fileset>
            </bootclasspath>
        </javac>
    </target>


    <target name="build.one.jar">
        <property name="jar.name" value="${ref.id}.jar"/>
        <jar destfile="${build.jars.path}/${jar.name}">
            <fileset dir="${build.path}/classes">
                <patternset refid="${ref.id}"/>
            </fileset>
        </jar>
    </target>


    <target name="build.native"  depends="init, init.win, init.linux">
        <!-- Building the native code -->

        <echo message="jni_h.path=${jni_h.path}"/>

        <subant target="" inheritall="true">
            <fileset dir="make/native/common" includes="*.xml"/>
            <fileset dir="make/native/${compile.native.tail}" includes="*.xml"/>
        </subant>
    </target>

    <target name="exclude.tests.win" if="if.win">
        <property name="exclude.tests.list" value="" />
    </target>

    <target name="exclude.tests.linux" if="if.linux">
        <property name="exclude.tests.list" value="**/font/**" />
    </target>

    <target name="tests.compile" depends="exclude.tests.win, exclude.tests.linux">

        <echo message="Compiling AWT tests from ${src.tst.common}/unit, ${src.tst.common.ps}/unit" />
    
        <mkdir dir="${build.path}/tests" />

        <javac srcdir="${src.tst.common}/unit;${src.tst.common.ps}/unit"
               destdir="${build.path}/tests"
               sourcepath=""
               classpath="${env.CLASSPATH};${build.path}/tests;${test.deps.path}"
               source="${source.ver}"
               debug="${java.debug.option}"
        >
            <bootclasspath>
                <pathelement path="${build.path}/classes"/>
                <fileset dir="${java.home}/lib">
                    <include name="boot/*.jar"/>
                    <include name="*.jar"/>
                </fileset>
            </bootclasspath>

        <include name="**/*.java"/>
        <exclude name="${exclude.tests.list}" />

        </javac>
    </target>

    <target name="run">

    </target>


    <!--                                                       -->
    <!-- test.classlib : Running AWT tests against the    -->
    <!--                 Harmony classlib.  This also uses     -->
    <!--                 the HarmonyVM (or whatever) found     -->
    <!--                 at ../../deploy/jre                   -->
    <!--                                                       -->

    <target name="test.classlib" depends="tests"
        description="Running AWT tests on Harmony classlib">

        <property name="tests.output" value="${basedir}/tmp/testout" />
        <mkdir dir="${tests.output}" />
        <mkdir dir="${build.path}/tests/java/awt/shapes" />
        <mkdir dir="${build.path}/tests/java/awt/geom/shapes" />
        <copy todir="${build.path}/tests/java/awt/shapes">
               <fileset dir="${src.tst.common}/unit/java/awt/shapes/" />
        </copy>
        <copy todir="${build.path}/tests/java/awt/geom/shapes">
              <fileset dir="${src.tst.common}/unit/java/awt/geom/shapes/" />
        </copy>

        <property name="vm.home" location="${harmony.path}/${harmonybin.path}" />

        <junit fork="yes"
            forkmode="perTest"
            printsummary="withOutAndErr"
            errorproperty="test.error"
            showoutput="on"
            haltonfailure="off"
            dir="${basedir}"
            jvm="${vm.home}/bin/java">

            <env key="JAVA_HOME" value="${vm.home}"/>

            <!-- to pick up junit.jar -->
            <jvmarg value="-Xbootclasspath/a:${build.path}/tests${path.separator}${java.class.path}"/>

            <jvmarg value="-DTEST_SRC_DIR=${src.tst.common}/unit"/>

            <formatter type="plain" />

            <batchtest todir="${tests.output}">
                <fileset dir="${src.tst.common}/unit">
                    <include name="**/*Test*.java"/>
                    <exclude name="java/awt/AWTTestCase.java"/>
                    <exclude name="java/awt/SerializeTestCase.java"/>
                    <exclude name="java/awt/geom/ShapeTest.java"/>
                    <exclude name="java/awt/geom/ShapeTestCase.java"/>
                    <exclude name="java/awt/geom/GeomTestCase.java"/>
                    <exclude name="java/awt/geom/PathIteratorTestCase.java"/>
                    <exclude name="org/apache/harmony/awt/gl/MultiRectAreaTestCase.java"/>
                    <exclude name="java/awt/datatransfer/SystemFlavorMapTest.java"/>
                    <exclude name="java/awt/MenuTest.java"/>
                    <exclude name="${exclude.tests.list}" />
                </fileset>
            </batchtest>
        </junit>
    </target>

</project>
