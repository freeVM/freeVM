<!--
    Copyright 2005 - 2006 The Apache Software Foundation or its licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
Author:  Oleg V. Khaschansky
Version: $Revision$
-->
<project name="MyBuild" default="dist" basedir="../..">

    <description> Build for ... </description>

    <!-- set global properties for this build -->

    <target name="init.win" if="if.win" depends="set.lib.name">
        <echo message="init windows build..."/>
        <property name="unpack.objs.command" value=""/>
        <echo message="win.lib.name=${win.lib.name}"/>
    </target>

    <target name="check.native.debug.options">
        <condition property="native.debug.code">
            <and>
                <equals casesensitive="false" arg1="${native.debug.option}" arg2="on" />
            </and>
        </condition>
    </target>

    <target name="native.debug.on" depends="check.native.debug.options" if="native.debug.code">
        <property name="win.lib.name" value="lcms114d.lib"/>
    </target>

    <target name="native.debug.off" depends="check.native.debug.options" unless="native.debug.code">
        <property name="win.lib.name" value="lcms114.lib"/>
    </target>
   
    <target name="set.lib.name" depends="native.debug.on, native.debug.off"/>

    <target name="init.linux" if="if.linux">
        <echo message="init linux build..."/>
    </target>

    <target name="init" depends="init.win, init.linux">

        <property name="LCMS.path" value="lib/lcms/"/>

        <path id="dir.current">
            <pathelement path="${ant.file}"/>
        </path>

        <condition property="middle" value="make\\native\\common\\">
            <and>
                <os family="windows"/>
            </and>
        </condition>

        <condition property="middle" value="make/native/common/">
            <and>
                <os family="unix"/>
            </and>
        </condition>

        <echo message="middle=${middle}"/>

        <pathconvert targetos="${target.os}" property="library.name" refid="dir.current">
            <mapper type="regexp" from="^(.*)${middle}(.*).xml" to="\2"/>
        </pathconvert>

        <property name="ntvlibname.path" value="${src.common.native}/gl/cmm"/>

        <echo message="ant.file.os=${ant.file.os}"/>
        <echo message="middle=${middle}"/>
        <echo message="middle.os=${middle.os}"/>
        <echo message="library.name=${library.name}"/>
        <echo message="ntvlibname.path=${ntvlibname.path}"/>

        <property name="lib_tmp" location="${tmp}/${library.name}"/>
        <mkdir dir="${lib_tmp}"/>


        <condition property="unpack.objs.command" value="ar -xo ${lib_tmp}/liblcms.a">
            <and>
                <os family="unix"/>
            </and>
        </condition>

        <property name="unpack.objs.command" value=""/>

        <echo message="unpack.objs.command=${unpack.objs.command}"/>

    </target>


    <target name="unpack.objs" if="if.linux">
        <exec command="${unpack.objs.command}" dir="${lib_tmp}"/>
    </target>

    <target name="copylibs.win" if="if.win">
        <copy tofile="${lib_tmp}/${win.lib.name}" file="${harmony.depends.native.build.path}/lcms/lcms114.lib" overwrite="true"/>
    </target>

    <target name="copylibs.lnx" if="if.linux">
        <!-- Copy library for proper architecture -->
        <antcall target="copylib.lnx.ia32"/>
        <antcall target="copylib.lnx.ipf"/>
        <antcall target="copylib.lnx.em64t"/>
    </target>

    <target name="copylib.lnx.ia32" if="if.x86">
        <copy tofile="${lib_tmp}/liblcms.a" file="${harmony.depends.native.build.path}/lcms/liblcms.ia32" overwrite="true"/>
    </target>

    <target name="copylib.lnx.em64t" if="if.x86_64">
        <copy tofile="${lib_tmp}/liblcms.a" file="${harmony.depends.native.build.path}/lcms/liblcms.em64t" overwrite="true"/>
    </target>


    <target name="copylib.lnx.ipf" if="if.ipf">
        <copy tofile="${lib_tmp}/liblcms.a" file="${harmony.depends.native.build.path}/lcms/liblcms.ipf" overwrite="true"/>
    </target>

    <target name="compile.common.native" depends="init">

        <echo message="make common native..."/>

        <!-- Compile the native code from ${src.common.native} 
         and putting .dll or .so to ${lib_tmp}/lib -->

        <property name="path.to.build.native" value="${ntvlibname.path}"/>

        <echo message="path.to.build.native=${path.to.build.native}"/>

        <!-- Copy configuration files, different for different platforms -->
        <antcall target="copylibs.win"/>
        <antcall target="copylibs.lnx"/>

        <!-- Unpack object files from the static library -->
        <antcall target="unpack.objs"/>

        <!-- Compile using msvc or gcc -->

        <!-- ==========================================================   -->
        <cc name="${native.compiler}"
            outfile="${lib_tmp}/${library.name}"
            outtype="shared"
            runtime="static"
            debug="${native.debug.option}"
            multithreaded="false"
            >
            <env key="PATH" value="${cPath}"/>
            <env key="INCLUDE" value="${cINCLUDE}"/>
            <env key="LIB" value="${cLIB}"/>
            <env key="TMP" value="${tmp}"/>

            <fileset dir="${path.to.build.native}" includes="*.cpp"/>
            <fileset dir="${path.to.build.native}" includes="*.c"/>
            <fileset dir="${lib_tmp}" includes="lib*.o"/>
            
            <compilerarg value="-I${path.to.build.native}"/>
            <compilerarg value="-I${path.to.build.native}/include"/>
            <compilerarg value="-I${jni_h.path}"/>
            <compilerarg value="-I${lib_tmp}"/>
            <compilerarg value="-I${harmony.depends.native.build.path}/lcms"/>

            <compilerarg value="-LD" if="if.win"/>
            <compilerarg value="-ML" if="if.win"/>
            <compilerarg value="/O3" if="if.icl"/>
            <compilerarg value="/O2" if="if.msvc"/>

            <linkerarg value="${win.lib.name}" if="if.win"/>
        </cc>

        <!-- ==========================================================   -->

        <copy todir="${build.lib.path}">
            <fileset dir="${lib_tmp}" includes="${library.name}${library.ext}"/>
            <fileset dir="${lib_tmp}" includes="${library.name}.pdb"/>
            <fileset dir="${lib_tmp}" includes="lib${library.name}.so"/>
        </copy>
    </target>

    <target name="dist" depends="compile.common.native" description="">
        <echo message="Compiling native finished ..."/>
    </target>
</project>

