/*
 *  Copyright 2005 - 2006 The Apache Software Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Pavel Dolgov
 * @version $Revision$
 */


/* DO NOT EDIT THIS FILE - it is machine generated */

#include "org_apache_harmony_awt_nativebridge_linux_X11.h"
#include "org_apache_harmony_awt_nativebridge_linux_ErrorHandler.h"

static libHandler libX11;
static libHandler libXtst;
JNIEXPORT void JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_init (JNIEnv * env, jclass cls) {
    LOAD_LIB(libX11, X11);
    LOAD_LIB(libXtst, Xtst);
    XInitThreads();
    XSetErrorHandler(errorHandler);
}

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall0( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jlong param_5, jint param_6, jint param_7, jint param_8, jint param_9) {
    return (jlong)((void * ( *) (void *, void *, int, int, int, void *, int, int, int, int)) fnptr1234)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3, (int) param_4, (void *) param_5, (int) param_6, (int) param_7, (int) param_8, (int) param_9);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall1( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0) {
    return (jint)((int ( *) (void *)) fnptr1234)((void *) param_0);
}
JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall2( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jint param_1, jint param_2) {
    return (jlong)((long ( *) (void *, int, int)) fnptr1234)((void *) param_0, (int) param_1, (int) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall3( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    return (jint)((int ( *) (void *, int, int, long)) fnptr1234)((void *) param_0, (int) param_1, (int) param_2, (long) param_3);
}
JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall4( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4) {
    return (jlong)((void * ( *) (void *, int, int, int, int)) fnptr1234)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall5( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jlong param_1) {
    return (jint)((int ( *) (void *, long)) fnptr1234)((void *) param_0, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_proxycall6( JNIEnv *env, jobject self, jlong fnptr1234, jlong extension) {
    return (jint)((int ( *) (void *)) fnptr1234)((void *) extension);
}

void * (* pXGetSubImage) (void *, long, int, int, int, int, long, int, void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetSubImage( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jlong param_6, jint param_7, jlong param_8, jint param_9, jint param_10) {
    if (pXGetSubImage == NULL) {
        pXGetSubImage = (void * (*) (void *, long, int, int, int, int, long, int, void *, int, int)) FindFunction(libX11, "XGetSubImage");
    }
    return (jlong) (* pXGetSubImage)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (long) param_6, (int) param_7, (void *) param_8, (int) param_9, (int) param_10);
}

int (* pXAllocColor) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XAllocColor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXAllocColor == NULL) {
        pXAllocColor = (int (*) (void *, long, void *)) FindFunction(libX11, "XAllocColor");
    }
    return (jint) (* pXAllocColor)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* pXLookupString) (void *, void *, int, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XLookupString( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3, jlong param_4) {
    if (pXLookupString == NULL) {
        pXLookupString = (int (*) (void *, void *, int, void *, void *)) FindFunction(libX11, "XLookupString");
    }
    return (jint) (* pXLookupString)((void *) param_0, (void *) param_1, (int) param_2, (void *) param_3, (void *) param_4);
}

int (* pXGetWMNormalHints) (void *, long, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetWMNormalHints( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (pXGetWMNormalHints == NULL) {
        pXGetWMNormalHints = (int (*) (void *, long, void *, void *)) FindFunction(libX11, "XGetWMNormalHints");
    }
    return (jint) (* pXGetWMNormalHints)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3);
}

long (* pXCreatePixmapCursor) (void *, long, long, void *, void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreatePixmapCursor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jint param_5, jint param_6) {
    if (pXCreatePixmapCursor == NULL) {
        pXCreatePixmapCursor = (long (*) (void *, long, long, void *, void *, int, int)) FindFunction(libX11, "XCreatePixmapCursor");
    }
    return (jlong) (* pXCreatePixmapCursor)((void *) param_0, (long) param_1, (long) param_2, (void *) param_3, (void *) param_4, (int) param_5, (int) param_6);
}

int (* pXSetInputFocus) (void *, long, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetInputFocus( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3) {
    if (pXSetInputFocus == NULL) {
        pXSetInputFocus = (int (*) (void *, long, int, long)) FindFunction(libX11, "XSetInputFocus");
    }
    return (jint) (* pXSetInputFocus)((void *) param_0, (long) param_1, (int) param_2, (long) param_3);
}

void * (* pXOpenDisplay) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XOpenDisplay( JNIEnv *env, jobject self, jlong param_0) {
    if (pXOpenDisplay == NULL) {
        pXOpenDisplay = (void * (*) (void *)) FindFunction(libX11, "XOpenDisplay");
    }
    return (jlong) (* pXOpenDisplay)((void *) param_0);
}

int (* pXGrabServer) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGrabServer( JNIEnv *env, jobject self, jlong param_0) {
    if (pXGrabServer == NULL) {
        pXGrabServer = (int (*) (void *)) FindFunction(libX11, "XGrabServer");
    }
    return (jint) (* pXGrabServer)((void *) param_0);
}

long (* pXCreateFontCursor) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateFontCursor( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXCreateFontCursor == NULL) {
        pXCreateFontCursor = (long (*) (void *, int)) FindFunction(libX11, "XCreateFontCursor");
    }
    return (jlong) (* pXCreateFontCursor)((void *) param_0, (int) param_1);
}

void * (* pXCreateImage) (void *, void *, int, int, int, void *, int, int, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateImage( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jlong param_5, jint param_6, jint param_7, jint param_8, jint param_9) {
    if (pXCreateImage == NULL) {
        pXCreateImage = (void * (*) (void *, void *, int, int, int, void *, int, int, int, int)) FindFunction(libX11, "XCreateImage");
    }
    return (jlong) (* pXCreateImage)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3, (int) param_4, (void *) param_5, (int) param_6, (int) param_7, (int) param_8, (int) param_9);
}

int (* pXRestackWindows) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XRestackWindows( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (pXRestackWindows == NULL) {
        pXRestackWindows = (int (*) (void *, void *, int)) FindFunction(libX11, "XRestackWindows");
    }
    return (jint) (* pXRestackWindows)((void *) param_0, (void *) param_1, (int) param_2);
}

int (* pXDefaultDepth) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultDepth( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXDefaultDepth == NULL) {
        pXDefaultDepth = (int (*) (void *, int)) FindFunction(libX11, "XDefaultDepth");
    }
    return (jint) (* pXDefaultDepth)((void *) param_0, (int) param_1);
}

int (* pXFree) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFree( JNIEnv *env, jobject self, jlong param_0) {
    if (pXFree == NULL) {
        pXFree = (int (*) (void *)) FindFunction(libX11, "XFree");
    }
    return (jint) (* pXFree)((void *) param_0);
}

int (* pXMoveWindow) (void *, long, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XMoveWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3) {
    if (pXMoveWindow == NULL) {
        pXMoveWindow = (int (*) (void *, long, int, int)) FindFunction(libX11, "XMoveWindow");
    }
    return (jint) (* pXMoveWindow)((void *) param_0, (long) param_1, (int) param_2, (int) param_3);
}

int (* pXScreenCount) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XScreenCount( JNIEnv *env, jobject self, jlong param_0) {
    if (pXScreenCount == NULL) {
        pXScreenCount = (int (*) (void *)) FindFunction(libX11, "XScreenCount");
    }
    return (jint) (* pXScreenCount)((void *) param_0);
}

long (* pXDefaultRootWindow) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultRootWindow( JNIEnv *env, jobject self, jlong param_0) {
    if (pXDefaultRootWindow == NULL) {
        pXDefaultRootWindow = (long (*) (void *)) FindFunction(libX11, "XDefaultRootWindow");
    }
    return (jlong) (* pXDefaultRootWindow)((void *) param_0);
}

int (* pXResizeWindow) (void *, long, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XResizeWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3) {
    if (pXResizeWindow == NULL) {
        pXResizeWindow = (int (*) (void *, long, int, int)) FindFunction(libX11, "XResizeWindow");
    }
    return (jint) (* pXResizeWindow)((void *) param_0, (long) param_1, (int) param_2, (int) param_3);
}

int (* pXFillPolygon) (void *, long, void *, void *, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFillPolygon( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5, jint param_6) {
    if (pXFillPolygon == NULL) {
        pXFillPolygon = (int (*) (void *, long, void *, void *, int, int, int)) FindFunction(libX11, "XFillPolygon");
    }
    return (jint) (* pXFillPolygon)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (int) param_4, (int) param_5, (int) param_6);
}

int (* pXTestFakeMotionEvent) (void *, int, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTestFakeMotionEvent( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jlong param_4) {
    if (pXTestFakeMotionEvent == NULL) {
        pXTestFakeMotionEvent = (int (*) (void *, int, int, int, long)) FindFunction(libXtst, "XTestFakeMotionEvent");
    }
    return (jint) (* pXTestFakeMotionEvent)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (long) param_4);
}

void * (* pXCreateGC) (void *, long, long, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateGC( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (pXCreateGC == NULL) {
        pXCreateGC = (void * (*) (void *, long, long, void *)) FindFunction(libX11, "XCreateGC");
    }
    return (jlong) (* pXCreateGC)((void *) param_0, (long) param_1, (long) param_2, (void *) param_3);
}

int (* pXTestFakeKeyEvent) (void *, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTestFakeKeyEvent( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    if (pXTestFakeKeyEvent == NULL) {
        pXTestFakeKeyEvent = (int (*) (void *, int, int, long)) FindFunction(libXtst, "XTestFakeKeyEvent");
    }
    return (jint) (* pXTestFakeKeyEvent)((void *) param_0, (int) param_1, (int) param_2, (long) param_3);
}

int (* pXCopyArea) (void *, long, long, void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCopyArea( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8, jint param_9) {
    if (pXCopyArea == NULL) {
        pXCopyArea = (int (*) (void *, long, long, void *, int, int, int, int, int, int)) FindFunction(libX11, "XCopyArea");
    }
    return (jint) (* pXCopyArea)((void *) param_0, (long) param_1, (long) param_2, (void *) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8, (int) param_9);
}

long (* pXKeycodeToKeysym) (void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XKeycodeToKeysym( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2) {
    if (pXKeycodeToKeysym == NULL) {
        pXKeycodeToKeysym = (long (*) (void *, int, int)) FindFunction(libX11, "XKeycodeToKeysym");
    }
    return (jlong) (* pXKeycodeToKeysym)((void *) param_0, (int) param_1, (int) param_2);
}

int (* pXImageByteOrder) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XImageByteOrder( JNIEnv *env, jobject self, jlong param_0) {
    if (pXImageByteOrder == NULL) {
        pXImageByteOrder = (int (*) (void *)) FindFunction(libX11, "XImageByteOrder");
    }
    return (jint) (* pXImageByteOrder)((void *) param_0);
}

int (* pXDefaultScreen) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultScreen( JNIEnv *env, jobject self, jlong param_0) {
    if (pXDefaultScreen == NULL) {
        pXDefaultScreen = (int (*) (void *)) FindFunction(libX11, "XDefaultScreen");
    }
    return (jint) (* pXDefaultScreen)((void *) param_0);
}

int (* pXConvertSelection) (void *, long, long, long, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XConvertSelection( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5) {
    if (pXConvertSelection == NULL) {
        pXConvertSelection = (int (*) (void *, long, long, long, long, long)) FindFunction(libX11, "XConvertSelection");
    }
    return (jint) (* pXConvertSelection)((void *) param_0, (long) param_1, (long) param_2, (long) param_3, (long) param_4, (long) param_5);
}

long (* pXGetSelectionOwner) (void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetSelectionOwner( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXGetSelectionOwner == NULL) {
        pXGetSelectionOwner = (long (*) (void *, long)) FindFunction(libX11, "XGetSelectionOwner");
    }
    return (jlong) (* pXGetSelectionOwner)((void *) param_0, (long) param_1);
}

int (* pXFillRectangles) (void *, long, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFillRectangles( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4) {
    if (pXFillRectangles == NULL) {
        pXFillRectangles = (int (*) (void *, long, void *, void *, int)) FindFunction(libX11, "XFillRectangles");
    }
    return (jint) (* pXFillRectangles)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (int) param_4);
}

int (* pXSetIconName) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetIconName( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXSetIconName == NULL) {
        pXSetIconName = (int (*) (void *, long, void *)) FindFunction(libX11, "XSetIconName");
    }
    return (jint) (* pXSetIconName)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* pXDisplayWidthMM) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayWidthMM( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXDisplayWidthMM == NULL) {
        pXDisplayWidthMM = (int (*) (void *, int)) FindFunction(libX11, "XDisplayWidthMM");
    }
    return (jint) (* pXDisplayWidthMM)((void *) param_0, (int) param_1);
}

int (* pXMapWindow) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XMapWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXMapWindow == NULL) {
        pXMapWindow = (int (*) (void *, long)) FindFunction(libX11, "XMapWindow");
    }
    return (jint) (* pXMapWindow)((void *) param_0, (long) param_1);
}

int (* pXParseColor) (void *, long, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XParseColor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (pXParseColor == NULL) {
        pXParseColor = (int (*) (void *, long, void *, void *)) FindFunction(libX11, "XParseColor");
    }
    return (jint) (* pXParseColor)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3);
}

int (* pXTestFakeButtonEvent) (void *, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTestFakeButtonEvent( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    if (pXTestFakeButtonEvent == NULL) {
        pXTestFakeButtonEvent = (int (*) (void *, int, int, long)) FindFunction(libXtst, "XTestFakeButtonEvent");
    }
    return (jint) (* pXTestFakeButtonEvent)((void *) param_0, (int) param_1, (int) param_2, (long) param_3);
}

int (* pXGetWindowProperty) (void *, long, long, long, long, int, long, void *, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetWindowProperty( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jint param_5, jlong param_6, jlong param_7, jlong param_8, jlong param_9, jlong param_10, jlong param_11) {
    if (pXGetWindowProperty == NULL) {
        pXGetWindowProperty = (int (*) (void *, long, long, long, long, int, long, void *, void *, void *, void *, void *)) FindFunction(libX11, "XGetWindowProperty");
    }
    return (jint) (* pXGetWindowProperty)((void *) param_0, (long) param_1, (long) param_2, (long) param_3, (long) param_4, (int) param_5, (long) param_6, (void *) param_7, (void *) param_8, (void *) param_9, (void *) param_10, (void *) param_11);
}

int (* pXIconifyWindow) (void *, long, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XIconifyWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (pXIconifyWindow == NULL) {
        pXIconifyWindow = (int (*) (void *, long, int)) FindFunction(libX11, "XIconifyWindow");
    }
    return (jint) (* pXIconifyWindow)((void *) param_0, (long) param_1, (int) param_2);
}

void * (* pXAllocWMHints) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XAllocWMHints( JNIEnv *env, jobject self) {
    if (pXAllocWMHints == NULL) {
        pXAllocWMHints = (void * (*) (void)) FindFunction(libX11, "XAllocWMHints");
    }
    return (jlong) (* pXAllocWMHints)();
}

void * (* pXGetVisualInfo) (void *, long, void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetVisualInfo( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (pXGetVisualInfo == NULL) {
        pXGetVisualInfo = (void * (*) (void *, long, void *, void *)) FindFunction(libX11, "XGetVisualInfo");
    }
    return (jlong) (* pXGetVisualInfo)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3);
}

int (* pXSetFunction) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetFunction( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (pXSetFunction == NULL) {
        pXSetFunction = (int (*) (void *, void *, int)) FindFunction(libX11, "XSetFunction");
    }
    return (jint) (* pXSetFunction)((void *) param_0, (void *) param_1, (int) param_2);
}

int (* pXDestroyWindow) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDestroyWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXDestroyWindow == NULL) {
        pXDestroyWindow = (int (*) (void *, long)) FindFunction(libX11, "XDestroyWindow");
    }
    return (jint) (* pXDestroyWindow)((void *) param_0, (long) param_1);
}

long (* pXRootWindow) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XRootWindow( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXRootWindow == NULL) {
        pXRootWindow = (long (*) (void *, int)) FindFunction(libX11, "XRootWindow");
    }
    return (jlong) (* pXRootWindow)((void *) param_0, (int) param_1);
}

int (* pXLowerWindow) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XLowerWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXLowerWindow == NULL) {
        pXLowerWindow = (int (*) (void *, long)) FindFunction(libX11, "XLowerWindow");
    }
    return (jint) (* pXLowerWindow)((void *) param_0, (long) param_1);
}

void * (* pXGetAtomName) (void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetAtomName( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXGetAtomName == NULL) {
        pXGetAtomName = (void * (*) (void *, long)) FindFunction(libX11, "XGetAtomName");
    }
    return (jlong) (* pXGetAtomName)((void *) param_0, (long) param_1);
}

int (* pXSelectInput) (void *, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSelectInput( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXSelectInput == NULL) {
        pXSelectInput = (int (*) (void *, long, long)) FindFunction(libX11, "XSelectInput");
    }
    return (jint) (* pXSelectInput)((void *) param_0, (long) param_1, (long) param_2);
}

void * (* pXGetImage) (void *, long, int, int, int, int, long, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetImage( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jlong param_6, jint param_7) {
    if (pXGetImage == NULL) {
        pXGetImage = (void * (*) (void *, long, int, int, int, int, long, int)) FindFunction(libX11, "XGetImage");
    }
    return (jlong) (* pXGetImage)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (long) param_6, (int) param_7);
}

int (* pXDrawRectangle) (void *, long, void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDrawRectangle( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6) {
    if (pXDrawRectangle == NULL) {
        pXDrawRectangle = (int (*) (void *, long, void *, int, int, int, int)) FindFunction(libX11, "XDrawRectangle");
    }
    return (jint) (* pXDrawRectangle)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6);
}

int (* pXUngrabPointer) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XUngrabPointer( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXUngrabPointer == NULL) {
        pXUngrabPointer = (int (*) (void *, long)) FindFunction(libX11, "XUngrabPointer");
    }
    return (jint) (* pXUngrabPointer)((void *) param_0, (long) param_1);
}

int (* pXSetForeground) (void *, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetForeground( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXSetForeground == NULL) {
        pXSetForeground = (int (*) (void *, void *, long)) FindFunction(libX11, "XSetForeground");
    }
    return (jint) (* pXSetForeground)((void *) param_0, (void *) param_1, (long) param_2);
}

int (* pXMapRaised) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XMapRaised( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXMapRaised == NULL) {
        pXMapRaised = (int (*) (void *, long)) FindFunction(libX11, "XMapRaised");
    }
    return (jint) (* pXMapRaised)((void *) param_0, (long) param_1);
}

long (* pXAllPlanes) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XAllPlanes( JNIEnv *env, jobject self) {
    if (pXAllPlanes == NULL) {
        pXAllPlanes = (long (*) (void)) FindFunction(libX11, "XAllPlanes");
    }
    return (jlong) (* pXAllPlanes)();
}

char (* pXKeysymToKeycode) (void *, long) = NULL;

JNIEXPORT jbyte  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XKeysymToKeycode( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXKeysymToKeycode == NULL) {
        pXKeysymToKeycode = (char (*) (void *, long)) FindFunction(libX11, "XKeysymToKeycode");
    }
    return (jbyte) (* pXKeysymToKeycode)((void *) param_0, (long) param_1);
}

int (* pXQueryPointer) (void *, long, void *, void *, void *, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryPointer( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5, jlong param_6, jlong param_7, jlong param_8) {
    if (pXQueryPointer == NULL) {
        pXQueryPointer = (int (*) (void *, long, void *, void *, void *, void *, void *, void *, void *)) FindFunction(libX11, "XQueryPointer");
    }
    return (jint) (* pXQueryPointer)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4, (void *) param_5, (void *) param_6, (void *) param_7, (void *) param_8);
}

int (* pXDisplayWidth) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayWidth( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXDisplayWidth == NULL) {
        pXDisplayWidth = (int (*) (void *, int)) FindFunction(libX11, "XDisplayWidth");
    }
    return (jint) (* pXDisplayWidth)((void *) param_0, (int) param_1);
}

int (* pXDisplayHeightMM) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayHeightMM( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXDisplayHeightMM == NULL) {
        pXDisplayHeightMM = (int (*) (void *, int)) FindFunction(libX11, "XDisplayHeightMM");
    }
    return (jint) (* pXDisplayHeightMM)((void *) param_0, (int) param_1);
}

int (* pXChangeProperty) (void *, long, long, long, int, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XChangeProperty( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5, jlong param_6, jint param_7) {
    if (pXChangeProperty == NULL) {
        pXChangeProperty = (int (*) (void *, long, long, long, int, int, void *, int)) FindFunction(libX11, "XChangeProperty");
    }
    return (jint) (* pXChangeProperty)((void *) param_0, (long) param_1, (long) param_2, (long) param_3, (int) param_4, (int) param_5, (void *) param_6, (int) param_7);
}

int (* pXCheckTypedEvent) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCheckTypedEvent( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (pXCheckTypedEvent == NULL) {
        pXCheckTypedEvent = (int (*) (void *, int, void *)) FindFunction(libX11, "XCheckTypedEvent");
    }
    return (jint) (* pXCheckTypedEvent)((void *) param_0, (int) param_1, (void *) param_2);
}

int (* pXPutImage) (void *, long, void *, void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XPutImage( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8, jint param_9) {
    if (pXPutImage == NULL) {
        pXPutImage = (int (*) (void *, long, void *, void *, int, int, int, int, int, int)) FindFunction(libX11, "XPutImage");
    }
    return (jint) (* pXPutImage)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8, (int) param_9);
}

int (* pXStoreName) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XStoreName( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXStoreName == NULL) {
        pXStoreName = (int (*) (void *, long, void *)) FindFunction(libX11, "XStoreName");
    }
    return (jint) (* pXStoreName)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* pXSetClipRectangles) (void *, void *, int, int, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetClipRectangles( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jlong param_4, jint param_5, jint param_6) {
    if (pXSetClipRectangles == NULL) {
        pXSetClipRectangles = (int (*) (void *, void *, int, int, void *, int, int)) FindFunction(libX11, "XSetClipRectangles");
    }
    return (jint) (* pXSetClipRectangles)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3, (void *) param_4, (int) param_5, (int) param_6);
}

int (* pXChangeWindowAttributes) (void *, long, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XChangeWindowAttributes( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (pXChangeWindowAttributes == NULL) {
        pXChangeWindowAttributes = (int (*) (void *, long, long, void *)) FindFunction(libX11, "XChangeWindowAttributes");
    }
    return (jint) (* pXChangeWindowAttributes)((void *) param_0, (long) param_1, (long) param_2, (void *) param_3);
}

void * (* pXDisplayString) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayString( JNIEnv *env, jobject self, jlong param_0) {
    if (pXDisplayString == NULL) {
        pXDisplayString = (void * (*) (void *)) FindFunction(libX11, "XDisplayString");
    }
    return (jlong) (* pXDisplayString)((void *) param_0);
}

int (* pXSetFillRule) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetFillRule( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (pXSetFillRule == NULL) {
        pXSetFillRule = (int (*) (void *, void *, int)) FindFunction(libX11, "XSetFillRule");
    }
    return (jint) (* pXSetFillRule)((void *) param_0, (void *) param_1, (int) param_2);
}

int (* pXInitImage) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XInitImage( JNIEnv *env, jobject self, jlong param_0) {
    if (pXInitImage == NULL) {
        pXInitImage = (int (*) (void *)) FindFunction(libX11, "XInitImage");
    }
    return (jint) (* pXInitImage)((void *) param_0);
}

int (* pXSetDashes) (void *, void *, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetDashes( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3, jint param_4) {
    if (pXSetDashes == NULL) {
        pXSetDashes = (int (*) (void *, void *, int, void *, int)) FindFunction(libX11, "XSetDashes");
    }
    return (jint) (* pXSetDashes)((void *) param_0, (void *) param_1, (int) param_2, (void *) param_3, (int) param_4);
}

int (* pXSetWMHints) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetWMHints( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXSetWMHints == NULL) {
        pXSetWMHints = (int (*) (void *, long, void *)) FindFunction(libX11, "XSetWMHints");
    }
    return (jint) (* pXSetWMHints)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* pXPending) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XPending( JNIEnv *env, jobject self, jlong param_0) {
    if (pXPending == NULL) {
        pXPending = (int (*) (void *)) FindFunction(libX11, "XPending");
    }
    return (jint) (* pXPending)((void *) param_0);
}

long (* pXVisualIDFromVisual) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XVisualIDFromVisual( JNIEnv *env, jobject self, jlong param_0) {
    if (pXVisualIDFromVisual == NULL) {
        pXVisualIDFromVisual = (long (*) (void *)) FindFunction(libX11, "XVisualIDFromVisual");
    }
    return (jlong) (* pXVisualIDFromVisual)((void *) param_0);
}

int (* pXSendEvent) (void *, long, int, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSendEvent( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3, jlong param_4) {
    if (pXSendEvent == NULL) {
        pXSendEvent = (int (*) (void *, long, int, long, void *)) FindFunction(libX11, "XSendEvent");
    }
    return (jint) (* pXSendEvent)((void *) param_0, (long) param_1, (int) param_2, (long) param_3, (void *) param_4);
}

int (* pXDrawLine) (void *, long, void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDrawLine( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6) {
    if (pXDrawLine == NULL) {
        pXDrawLine = (int (*) (void *, long, void *, int, int, int, int)) FindFunction(libX11, "XDrawLine");
    }
    return (jint) (* pXDrawLine)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6);
}

long (* pXCreatePixmap) (void *, long, int, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreatePixmap( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4) {
    if (pXCreatePixmap == NULL) {
        pXCreatePixmap = (long (*) (void *, long, int, int, int)) FindFunction(libX11, "XCreatePixmap");
    }
    return (jlong) (* pXCreatePixmap)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4);
}

int (* pXDefineCursor) (void *, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefineCursor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXDefineCursor == NULL) {
        pXDefineCursor = (int (*) (void *, long, long)) FindFunction(libX11, "XDefineCursor");
    }
    return (jint) (* pXDefineCursor)((void *) param_0, (long) param_1, (long) param_2);
}

int (* pXDrawLines) (void *, long, void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDrawLines( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jint param_4, jint param_5) {
    if (pXDrawLines == NULL) {
        pXDrawLines = (int (*) (void *, long, void *, void *, int, int)) FindFunction(libX11, "XDrawLines");
    }
    return (jint) (* pXDrawLines)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (int) param_4, (int) param_5);
}

void (* pXSetWMNormalHints) (void *, long, void *) = NULL;

JNIEXPORT void  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetWMNormalHints( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXSetWMNormalHints == NULL) {
        pXSetWMNormalHints = (void (*) (void *, long, void *)) FindFunction(libX11, "XSetWMNormalHints");
    }
    (* pXSetWMNormalHints)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* pXTranslateCoordinates) (void *, long, long, int, int, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTranslateCoordinates( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jlong param_5, jlong param_6, jlong param_7) {
    if (pXTranslateCoordinates == NULL) {
        pXTranslateCoordinates = (int (*) (void *, long, long, int, int, void *, void *, void *)) FindFunction(libX11, "XTranslateCoordinates");
    }
    return (jint) (* pXTranslateCoordinates)((void *) param_0, (long) param_1, (long) param_2, (int) param_3, (int) param_4, (void *) param_5, (void *) param_6, (void *) param_7);
}

int (* pXSetStandardProperties) (void *, long, void *, void *, long, void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetStandardProperties( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5, jint param_6, jlong param_7) {
    if (pXSetStandardProperties == NULL) {
        pXSetStandardProperties = (int (*) (void *, long, void *, void *, long, void *, int, void *)) FindFunction(libX11, "XSetStandardProperties");
    }
    return (jint) (* pXSetStandardProperties)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5, (int) param_6, (void *) param_7);
}

long (* pXDefaultColormap) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultColormap( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXDefaultColormap == NULL) {
        pXDefaultColormap = (long (*) (void *, int)) FindFunction(libX11, "XDefaultColormap");
    }
    return (jlong) (* pXDefaultColormap)((void *) param_0, (int) param_1);
}

void * (* pXAllocSizeHints) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XAllocSizeHints( JNIEnv *env, jobject self) {
    if (pXAllocSizeHints == NULL) {
        pXAllocSizeHints = (void * (*) (void)) FindFunction(libX11, "XAllocSizeHints");
    }
    return (jlong) (* pXAllocSizeHints)();
}

int (* pXFlush) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFlush( JNIEnv *env, jobject self, jlong param_0) {
    if (pXFlush == NULL) {
        pXFlush = (int (*) (void *)) FindFunction(libX11, "XFlush");
    }
    return (jint) (* pXFlush)((void *) param_0);
}

int (* pXGetWindowAttributes) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetWindowAttributes( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXGetWindowAttributes == NULL) {
        pXGetWindowAttributes = (int (*) (void *, long, void *)) FindFunction(libX11, "XGetWindowAttributes");
    }
    return (jint) (* pXGetWindowAttributes)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* pXFreePixmap) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFreePixmap( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXFreePixmap == NULL) {
        pXFreePixmap = (int (*) (void *, long)) FindFunction(libX11, "XFreePixmap");
    }
    return (jint) (* pXFreePixmap)((void *) param_0, (long) param_1);
}

int (* pXGetGeometry) (void *, long, void *, void *, void *, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetGeometry( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5, jlong param_6, jlong param_7, jlong param_8) {
    if (pXGetGeometry == NULL) {
        pXGetGeometry = (int (*) (void *, long, void *, void *, void *, void *, void *, void *, void *)) FindFunction(libX11, "XGetGeometry");
    }
    return (jint) (* pXGetGeometry)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4, (void *) param_5, (void *) param_6, (void *) param_7, (void *) param_8);
}

int (* pXQueryColors) (void *, long, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryColors( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3) {
    if (pXQueryColors == NULL) {
        pXQueryColors = (int (*) (void *, long, void *, int)) FindFunction(libX11, "XQueryColors");
    }
    return (jint) (* pXQueryColors)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3);
}

int (* pXQueryBestCursor) (void *, long, int, int, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryBestCursor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jlong param_4, jlong param_5) {
    if (pXQueryBestCursor == NULL) {
        pXQueryBestCursor = (int (*) (void *, long, int, int, void *, void *)) FindFunction(libX11, "XQueryBestCursor");
    }
    return (jint) (* pXQueryBestCursor)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (void *) param_4, (void *) param_5);
}

int (* pXNextEvent) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XNextEvent( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXNextEvent == NULL) {
        pXNextEvent = (int (*) (void *, void *)) FindFunction(libX11, "XNextEvent");
    }
    return (jint) (* pXNextEvent)((void *) param_0, (void *) param_1);
}

void * (* pXDefaultVisual) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDefaultVisual( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXDefaultVisual == NULL) {
        pXDefaultVisual = (void * (*) (void *, int)) FindFunction(libX11, "XDefaultVisual");
    }
    return (jlong) (* pXDefaultVisual)((void *) param_0, (int) param_1);
}

long (* pXCreateWindow) (void *, long, int, int, int, int, int, int, int, void *, long, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8, jlong param_9, jlong param_10, jlong param_11) {
    if (pXCreateWindow == NULL) {
        pXCreateWindow = (long (*) (void *, long, int, int, int, int, int, int, int, void *, long, void *)) FindFunction(libX11, "XCreateWindow");
    }
    return (jlong) (* pXCreateWindow)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8, (void *) param_9, (long) param_10, (void *) param_11);
}

int (* pXFreeGC) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFreeGC( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXFreeGC == NULL) {
        pXFreeGC = (int (*) (void *, void *)) FindFunction(libX11, "XFreeGC");
    }
    return (jint) (* pXFreeGC)((void *) param_0, (void *) param_1);
}

int (* pXBitmapPad) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XBitmapPad( JNIEnv *env, jobject self, jlong param_0) {
    if (pXBitmapPad == NULL) {
        pXBitmapPad = (int (*) (void *)) FindFunction(libX11, "XBitmapPad");
    }
    return (jint) (* pXBitmapPad)((void *) param_0);
}

int (* pXGetPointerMapping) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetPointerMapping( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (pXGetPointerMapping == NULL) {
        pXGetPointerMapping = (int (*) (void *, void *, int)) FindFunction(libX11, "XGetPointerMapping");
    }
    return (jint) (* pXGetPointerMapping)((void *) param_0, (void *) param_1, (int) param_2);
}

void * (* pXSetErrorHandler) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetErrorHandler( JNIEnv *env, jobject self, jlong param_0) {
    if (pXSetErrorHandler == NULL) {
        pXSetErrorHandler = (void * (*) (void *)) FindFunction(libX11, "XSetErrorHandler");
    }
    return (jlong) (* pXSetErrorHandler)((void *) param_0);
}

int (* pXSetTransientForHint) (void *, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetTransientForHint( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXSetTransientForHint == NULL) {
        pXSetTransientForHint = (int (*) (void *, long, long)) FindFunction(libX11, "XSetTransientForHint");
    }
    return (jint) (* pXSetTransientForHint)((void *) param_0, (long) param_1, (long) param_2);
}

int (* pXFreeCursor) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFreeCursor( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXFreeCursor == NULL) {
        pXFreeCursor = (int (*) (void *, long)) FindFunction(libX11, "XFreeCursor");
    }
    return (jint) (* pXFreeCursor)((void *) param_0, (long) param_1);
}

int (* pXFillRectangle) (void *, long, void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFillRectangle( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6) {
    if (pXFillRectangle == NULL) {
        pXFillRectangle = (int (*) (void *, long, void *, int, int, int, int)) FindFunction(libX11, "XFillRectangle");
    }
    return (jint) (* pXFillRectangle)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6);
}

int (* pXSetWMProtocols) (void *, long, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetWMProtocols( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3) {
    if (pXSetWMProtocols == NULL) {
        pXSetWMProtocols = (int (*) (void *, long, void *, int)) FindFunction(libX11, "XSetWMProtocols");
    }
    return (jint) (* pXSetWMProtocols)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3);
}

int (* pXCloseDisplay) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCloseDisplay( JNIEnv *env, jobject self, jlong param_0) {
    if (pXCloseDisplay == NULL) {
        pXCloseDisplay = (int (*) (void *)) FindFunction(libX11, "XCloseDisplay");
    }
    return (jint) (* pXCloseDisplay)((void *) param_0);
}

int (* pXQueryTree) (void *, long, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryTree( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4, jlong param_5) {
    if (pXQueryTree == NULL) {
        pXQueryTree = (int (*) (void *, long, void *, void *, void *, void *)) FindFunction(libX11, "XQueryTree");
    }
    return (jint) (* pXQueryTree)((void *) param_0, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4, (void *) param_5);
}

int (* pXGetInputFocus) (void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetInputFocus( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXGetInputFocus == NULL) {
        pXGetInputFocus = (int (*) (void *, void *, void *)) FindFunction(libX11, "XGetInputFocus");
    }
    return (jint) (* pXGetInputFocus)((void *) param_0, (void *) param_1, (void *) param_2);
}

long (* pXInternAtom) (void *, void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XInternAtom( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (pXInternAtom == NULL) {
        pXInternAtom = (long (*) (void *, void *, int)) FindFunction(libX11, "XInternAtom");
    }
    return (jlong) (* pXInternAtom)((void *) param_0, (void *) param_1, (int) param_2);
}

int (* pXSetClipOrigin) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetClipOrigin( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3) {
    if (pXSetClipOrigin == NULL) {
        pXSetClipOrigin = (int (*) (void *, void *, int, int)) FindFunction(libX11, "XSetClipOrigin");
    }
    return (jint) (* pXSetClipOrigin)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3);
}

int (* pXTestQueryExtension) (void *, void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XTestQueryExtension( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3, jlong param_4) {
    if (pXTestQueryExtension == NULL) {
        pXTestQueryExtension = (int (*) (void *, void *, void *, void *, void *)) FindFunction(libXtst, "XTestQueryExtension");
    }
    return (jint) (* pXTestQueryExtension)((void *) param_0, (void *) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}

long (* pXCreateSimpleWindow) (void *, long, int, int, int, int, int, long, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateSimpleWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6, jlong param_7, jlong param_8) {
    if (pXCreateSimpleWindow == NULL) {
        pXCreateSimpleWindow = (long (*) (void *, long, int, int, int, int, int, long, long)) FindFunction(libX11, "XCreateSimpleWindow");
    }
    return (jlong) (* pXCreateSimpleWindow)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (long) param_7, (long) param_8);
}

int (* pXUngrabServer) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XUngrabServer( JNIEnv *env, jobject self, jlong param_0) {
    if (pXUngrabServer == NULL) {
        pXUngrabServer = (int (*) (void *)) FindFunction(libX11, "XUngrabServer");
    }
    return (jint) (* pXUngrabServer)((void *) param_0);
}

int (* pXFillArc) (void *, long, void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XFillArc( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8) {
    if (pXFillArc == NULL) {
        pXFillArc = (int (*) (void *, long, void *, int, int, int, int, int, int)) FindFunction(libX11, "XFillArc");
    }
    return (jint) (* pXFillArc)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8);
}

void * (* pXScreenOfDisplay) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XScreenOfDisplay( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXScreenOfDisplay == NULL) {
        pXScreenOfDisplay = (void * (*) (void *, int)) FindFunction(libX11, "XScreenOfDisplay");
    }
    return (jlong) (* pXScreenOfDisplay)((void *) param_0, (int) param_1);
}

int (* pXSetClipMask) (void *, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetClipMask( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXSetClipMask == NULL) {
        pXSetClipMask = (int (*) (void *, void *, long)) FindFunction(libX11, "XSetClipMask");
    }
    return (jint) (* pXSetClipMask)((void *) param_0, (void *) param_1, (long) param_2);
}

int (* pXChangeGC) (void *, void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XChangeGC( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (pXChangeGC == NULL) {
        pXChangeGC = (int (*) (void *, void *, long, void *)) FindFunction(libX11, "XChangeGC");
    }
    return (jint) (* pXChangeGC)((void *) param_0, (void *) param_1, (long) param_2, (void *) param_3);
}

long (* pXCreateBitmapFromData) (void *, long, void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XCreateBitmapFromData( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4) {
    if (pXCreateBitmapFromData == NULL) {
        pXCreateBitmapFromData = (long (*) (void *, long, void *, int, int)) FindFunction(libX11, "XCreateBitmapFromData");
    }
    return (jlong) (* pXCreateBitmapFromData)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4);
}

int (* pXDeleteProperty) (void *, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDeleteProperty( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXDeleteProperty == NULL) {
        pXDeleteProperty = (int (*) (void *, long, long)) FindFunction(libX11, "XDeleteProperty");
    }
    return (jint) (* pXDeleteProperty)((void *) param_0, (long) param_1, (long) param_2);
}

void * (* pXGetWMHints) (void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGetWMHints( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXGetWMHints == NULL) {
        pXGetWMHints = (void * (*) (void *, long)) FindFunction(libX11, "XGetWMHints");
    }
    return (jlong) (* pXGetWMHints)((void *) param_0, (long) param_1);
}

int (* pXSetSelectionOwner) (void *, long, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XSetSelectionOwner( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (pXSetSelectionOwner == NULL) {
        pXSetSelectionOwner = (int (*) (void *, long, long, long)) FindFunction(libX11, "XSetSelectionOwner");
    }
    return (jint) (* pXSetSelectionOwner)((void *) param_0, (long) param_1, (long) param_2, (long) param_3);
}

int (* pXDestroyImage) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDestroyImage( JNIEnv *env, jobject self, jlong ximage) {
    if (pXDestroyImage == NULL) {
        pXDestroyImage = (int (*) (void *)) FindFunction(libX11, "XDestroyImage");
    }
    return (jint) (* pXDestroyImage)((void *) ximage);
}

int (* pXDrawArc) (void *, long, void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDrawArc( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8) {
    if (pXDrawArc == NULL) {
        pXDrawArc = (int (*) (void *, long, void *, int, int, int, int, int, int)) FindFunction(libX11, "XDrawArc");
    }
    return (jint) (* pXDrawArc)((void *) param_0, (long) param_1, (void *) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8);
}

int (* pXGrabPointer) (void *, long, int, int, int, int, long, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XGrabPointer( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jint param_4, jint param_5, jlong param_6, jlong param_7, jlong param_8) {
    if (pXGrabPointer == NULL) {
        pXGrabPointer = (int (*) (void *, long, int, int, int, int, long, long, long)) FindFunction(libX11, "XGrabPointer");
    }
    return (jint) (* pXGrabPointer)((void *) param_0, (long) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (long) param_6, (long) param_7, (long) param_8);
}

int (* pXDisplayHeight) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XDisplayHeight( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pXDisplayHeight == NULL) {
        pXDisplayHeight = (int (*) (void *, int)) FindFunction(libX11, "XDisplayHeight");
    }
    return (jint) (* pXDisplayHeight)((void *) param_0, (int) param_1);
}

int (* pXQueryColor) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XQueryColor( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pXQueryColor == NULL) {
        pXQueryColor = (int (*) (void *, long, void *)) FindFunction(libX11, "XQueryColor");
    }
    return (jint) (* pXQueryColor)((void *) param_0, (long) param_1, (void *) param_2);
}

int (* pXRaiseWindow) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XRaiseWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pXRaiseWindow == NULL) {
        pXRaiseWindow = (int (*) (void *, long)) FindFunction(libX11, "XRaiseWindow");
    }
    return (jint) (* pXRaiseWindow)((void *) param_0, (long) param_1);
}

int (* pXWithdrawWindow) (void *, long, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_linux_X11_XWithdrawWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (pXWithdrawWindow == NULL) {
        pXWithdrawWindow = (int (*) (void *, long, int)) FindFunction(libX11, "XWithdrawWindow");
    }
    return (jint) (* pXWithdrawWindow)((void *) param_0, (long) param_1, (int) param_2);
}

