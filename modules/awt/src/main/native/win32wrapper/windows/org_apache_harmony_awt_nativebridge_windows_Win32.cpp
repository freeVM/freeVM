/*
 *  Copyright 2005 - 2006 The Apache Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Pavel Dolgov
 * @version $Revision$
 */

/* DO NOT EDIT THIS FILE - it is based on Win32 headers and has been generated by nativebridge tool.*/

#include "org_apache_harmony_awt_nativebridge_windows_Win32.h"

static libHandler libcomdlg32;
static libHandler libWinmm;
static libHandler libShell32;
static libHandler libShlwapi;
static libHandler libGdi32;
static libHandler libUxTheme;
static libHandler libImm32;
static libHandler libKernel32;
static libHandler libOle32;
static libHandler libUser32;
JNIEXPORT void JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_init (JNIEnv * env, jclass cls) {
    LOAD_LIB(libcomdlg32, "comdlg32");
    LOAD_LIB(libWinmm, "Winmm");
    LOAD_LIB(libShell32, "Shell32");
    LOAD_LIB(libShlwapi, "Shlwapi");
    LOAD_LIB(libGdi32, "Gdi32");
    LOAD_LIB(libUxTheme, "UxTheme");
    LOAD_LIB(libImm32, "Imm32");
    LOAD_LIB(libKernel32, "Kernel32");
    LOAD_LIB(libOle32, "Ole32");
    LOAD_LIB(libUser32, "User32");
}


int (__stdcall * p_nbridge_FillRect) (void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_FillRect( JNIEnv *env, jobject self, jlong hDC, jlong lprc, jlong hbr) {
    if (p_nbridge_FillRect == NULL) {
        p_nbridge_FillRect = (int (__stdcall *) (void *, void *, void *)) FindFunction(libUser32, "FillRect");
    }
    return (jint) (* p_nbridge_FillRect)((void *) hDC, (void *) lprc, (void *) hbr);
}

int  (__stdcall * p_nbridge_LineTo) (void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_LineTo( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2) {
    if (p_nbridge_LineTo == NULL) {
        p_nbridge_LineTo = (int  (__stdcall *) (void *, int, int)) FindFunction(libGdi32, "LineTo");
    }
    return (jint) (* p_nbridge_LineTo)((void *) param_0, (int) param_1, (int) param_2);
}

long  (__stdcall * p_nbridge_GetWindowLongW) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetWindowLongW( JNIEnv *env, jobject self, jlong hWnd, jint nIndex) {
    if (p_nbridge_GetWindowLongW == NULL) {
        p_nbridge_GetWindowLongW = (long  (__stdcall *) (void *, int)) FindFunction(libUser32, "GetWindowLongW");
    }
    return (jint) (* p_nbridge_GetWindowLongW)((void *) hWnd, (int) nIndex);
}

int  (__stdcall * p_nbridge_PeekMessageW) (void *, void *, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PeekMessageW( JNIEnv *env, jobject self, jlong lpMsg, jlong hWnd, jint wMsgFilterMin, jint wMsgFilterMax, jint wRemoveMsg) {
    if (p_nbridge_PeekMessageW == NULL) {
        p_nbridge_PeekMessageW = (int  (__stdcall *) (void *, void *, int, int, int)) FindFunction(libUser32, "PeekMessageW");
    }
    return (jint) (* p_nbridge_PeekMessageW)((void *) lpMsg, (void *) hWnd, (int) wMsgFilterMin, (int) wMsgFilterMax, (int) wRemoveMsg);
}

int  (__stdcall * p_nbridge_BitBlt) (void *, int, int, int, int, void *, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_BitBlt( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jlong param_5, jint param_6, jint param_7, jint param_8) {
    if (p_nbridge_BitBlt == NULL) {
        p_nbridge_BitBlt = (int  (__stdcall *) (void *, int, int, int, int, void *, int, int, long)) FindFunction(libGdi32, "BitBlt");
    }
    return (jint) (* p_nbridge_BitBlt)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (void *) param_5, (int) param_6, (int) param_7, (long) param_8);
}
JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall0( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jint param_1, jlong param_2, jlong param_3) {
    return (jlong)((__w64 unsigned int  (__stdcall *) (void *, int, WPARAM, LONG_PTR)) fnptr1234)((void *) param_0, (int) param_1, (WPARAM) param_2, (LONG_PTR) param_3);
}

int  (__stdcall * p_nbridge_GetSaveFileNameW) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetSaveFileNameW( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_GetSaveFileNameW == NULL) {
        p_nbridge_GetSaveFileNameW = (int  (__stdcall *) (void *)) FindFunction(libcomdlg32, "GetSaveFileNameW");
    }
    return (jint) (* p_nbridge_GetSaveFileNameW)((void *) param_0);
}

int  (__stdcall * p_nbridge_CreateCaret) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateCaret( JNIEnv *env, jobject self, jlong hWnd, jlong hBitmap, jint nWidth, jint nHeight) {
    if (p_nbridge_CreateCaret == NULL) {
        p_nbridge_CreateCaret = (int  (__stdcall *) (void *, void *, int, int)) FindFunction(libUser32, "CreateCaret");
    }
    return (jint) (* p_nbridge_CreateCaret)((void *) hWnd, (void *) hBitmap, (int) nWidth, (int) nHeight);
}

int  (__stdcall * p_nbridge_ImmDestroyContext) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmDestroyContext( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_ImmDestroyContext == NULL) {
        p_nbridge_ImmDestroyContext = (int  (__stdcall *) (void *)) FindFunction(libImm32, "ImmDestroyContext");
    }
    return (jint) (* p_nbridge_ImmDestroyContext)((void *) param_0);
}

long  (__stdcall * p_nbridge_ImmGetCompositionStringW) (void *, long, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmGetCompositionStringW( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2, jint param_3) {
    if (p_nbridge_ImmGetCompositionStringW == NULL) {
        p_nbridge_ImmGetCompositionStringW = (long  (__stdcall *) (void *, long, void *, long)) FindFunction(libImm32, "ImmGetCompositionStringW");
    }
    return (jint) (* p_nbridge_ImmGetCompositionStringW)((void *) param_0, (long) param_1, (void *) param_2, (long) param_3);
}

int (__stdcall * p_nbridge_GetSystemMetrics) (int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetSystemMetrics( JNIEnv *env, jobject self, jint nIndex) {
    if (p_nbridge_GetSystemMetrics == NULL) {
        p_nbridge_GetSystemMetrics = (int (__stdcall *) (int)) FindFunction(libUser32, "GetSystemMetrics");
    }
    return (jint) (* p_nbridge_GetSystemMetrics)((int) nIndex);
}

int  (__stdcall * p_nbridge_SetForegroundWindow) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetForegroundWindow( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_SetForegroundWindow == NULL) {
        p_nbridge_SetForegroundWindow = (int  (__stdcall *) (void *)) FindFunction(libUser32, "SetForegroundWindow");
    }
    return (jint) (* p_nbridge_SetForegroundWindow)((void *) hWnd);
}

__w64 long  (__stdcall * p_nbridge_SendMessageW) (void *, int, WPARAM, LONG_PTR) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SendMessageW( JNIEnv *env, jobject self, jlong hWnd, jint Msg, jlong wParam, jlong lParam) {
    if (p_nbridge_SendMessageW == NULL) {
        p_nbridge_SendMessageW = (__w64 long  (__stdcall *) (void *, int, WPARAM, LONG_PTR)) FindFunction(libUser32, "SendMessageW");
    }
    return (jlong) (* p_nbridge_SendMessageW)((void *) hWnd, (int) Msg, (WPARAM) wParam, (LONG_PTR) lParam);
}

long  (__stdcall * p_nbridge_GetThemeSysFont) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysFont( JNIEnv *env, jobject self, jlong hTheme, jint iFontId, jlong plf) {
    if (p_nbridge_GetThemeSysFont == NULL) {
        p_nbridge_GetThemeSysFont = (long  (__stdcall *) (void *, int, void *)) FindFunction(libUxTheme, "GetThemeSysFont");
    }
    return (jint) (* p_nbridge_GetThemeSysFont)((void *) hTheme, (int) iFontId, (void *) plf);
}

int  (__stdcall * p_nbridge_SystemParametersInfoW) (int, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SystemParametersInfoW( JNIEnv *env, jobject self, jint uiAction, jint uiParam, jlong pvParam, jint fWinIni) {
    if (p_nbridge_SystemParametersInfoW == NULL) {
        p_nbridge_SystemParametersInfoW = (int  (__stdcall *) (int, int, void *, int)) FindFunction(libUser32, "SystemParametersInfoW");
    }
    return (jint) (* p_nbridge_SystemParametersInfoW)((int) uiAction, (int) uiParam, (void *) pvParam, (int) fWinIni);
}

unsigned int  (__stdcall * p_nbridge_GetCaretBlinkTime) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetCaretBlinkTime( JNIEnv *env, jobject self) {
    if (p_nbridge_GetCaretBlinkTime == NULL) {
        p_nbridge_GetCaretBlinkTime = (unsigned int  (__stdcall *) (void)) FindFunction(libUser32, "GetCaretBlinkTime");
    }
    return (jint) (* p_nbridge_GetCaretBlinkTime)();
}

void * (__stdcall * p_nbridge_CreateDCW) (void *, void *, void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateDCW( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (p_nbridge_CreateDCW == NULL) {
        p_nbridge_CreateDCW = (void * (__stdcall *) (void *, void *, void *, void *)) FindFunction(libGdi32, "CreateDCW");
    }
    return (jlong) (* p_nbridge_CreateDCW)((void *) param_0, (void *) param_1, (void *) param_2, (void *) param_3);
}

int  (__stdcall * p_nbridge_Arc) (void *, int, int, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Arc( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8) {
    if (p_nbridge_Arc == NULL) {
        p_nbridge_Arc = (int  (__stdcall *) (void *, int, int, int, int, int, int, int, int)) FindFunction(libGdi32, "Arc");
    }
    return (jint) (* p_nbridge_Arc)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8);
}

int  (__stdcall * p_nbridge_ImmReleaseContext) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmReleaseContext( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_ImmReleaseContext == NULL) {
        p_nbridge_ImmReleaseContext = (int  (__stdcall *) (void *, void *)) FindFunction(libImm32, "ImmReleaseContext");
    }
    return (jint) (* p_nbridge_ImmReleaseContext)((void *) param_0, (void *) param_1);
}

int  (__stdcall * p_nbridge_PolyPolygon) (void *, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PolyPolygon( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3) {
    if (p_nbridge_PolyPolygon == NULL) {
        p_nbridge_PolyPolygon = (int  (__stdcall *) (void *, void *, void *, int)) FindFunction(libGdi32, "PolyPolygon");
    }
    return (jint) (* p_nbridge_PolyPolygon)((void *) param_0, (void *) param_1, (void *) param_2, (int) param_3);
}

void * (__stdcall * p_nbridge_CreatePen) (int, int, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreatePen( JNIEnv *env, jobject self, jint param_0, jint param_1, jint param_2) {
    if (p_nbridge_CreatePen == NULL) {
        p_nbridge_CreatePen = (void * (__stdcall *) (int, int, long)) FindFunction(libGdi32, "CreatePen");
    }
    return (jlong) (* p_nbridge_CreatePen)((int) param_0, (int) param_1, (long) param_2);
}

short  (__stdcall * p_nbridge_GetKeyState) (int) = NULL;

JNIEXPORT jshort  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetKeyState( JNIEnv *env, jobject self, jint nVirtKey) {
    if (p_nbridge_GetKeyState == NULL) {
        p_nbridge_GetKeyState = (short  (__stdcall *) (int)) FindFunction(libUser32, "GetKeyState");
    }
    return (jshort) (* p_nbridge_GetKeyState)((int) nVirtKey);
}

void * (__stdcall * p_nbridge_CreateIconIndirect) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateIconIndirect( JNIEnv *env, jobject self, jlong piconinfo) {
    if (p_nbridge_CreateIconIndirect == NULL) {
        p_nbridge_CreateIconIndirect = (void * (__stdcall *) (void *)) FindFunction(libUser32, "CreateIconIndirect");
    }
    return (jlong) (* p_nbridge_CreateIconIndirect)((void *) piconinfo);
}

int  (__stdcall * p_nbridge_RoundRect) (void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_RoundRect( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6) {
    if (p_nbridge_RoundRect == NULL) {
        p_nbridge_RoundRect = (int  (__stdcall *) (void *, int, int, int, int, int, int)) FindFunction(libGdi32, "RoundRect");
    }
    return (jint) (* p_nbridge_RoundRect)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6);
}

void * (__stdcall * p_nbridge_ExtCreateRegion) (void *, long, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ExtCreateRegion( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (p_nbridge_ExtCreateRegion == NULL) {
        p_nbridge_ExtCreateRegion = (void * (__stdcall *) (void *, long, void *)) FindFunction(libGdi32, "ExtCreateRegion");
    }
    return (jlong) (* p_nbridge_ExtCreateRegion)((void *) param_0, (long) param_1, (void *) param_2);
}

long  (__stdcall * p_nbridge_GetThemeSysInt) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysInt( JNIEnv *env, jobject self, jlong hTheme, jint iIntId, jlong piValue) {
    if (p_nbridge_GetThemeSysInt == NULL) {
        p_nbridge_GetThemeSysInt = (long  (__stdcall *) (void *, int, void *)) FindFunction(libUxTheme, "GetThemeSysInt");
    }
    return (jint) (* p_nbridge_GetThemeSysInt)((void *) hTheme, (int) iIntId, (void *) piValue);
}

int  (__stdcall * p_nbridge_TrackMouseEvent) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_TrackMouseEvent( JNIEnv *env, jobject self, jlong lpEventTrack) {
    if (p_nbridge_TrackMouseEvent == NULL) {
        p_nbridge_TrackMouseEvent = (int  (__stdcall *) (void *)) FindFunction(libUser32, "TrackMouseEvent");
    }
    return (jint) (* p_nbridge_TrackMouseEvent)((void *) lpEventTrack);
}

void * (__stdcall * p_nbridge_CreateWindowExW) (long, void *, void *, long, int, int, int, int, void *, void *, void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateWindowExW( JNIEnv *env, jobject self, jint dwExStyle, jlong lpClassName, jlong lpWindowName, jint dwStyle, jint X, jint Y, jint nWidth, jint nHeight, jlong hWndParent, jlong hMenu, jlong hInstance, jlong lpParam) {
    if (p_nbridge_CreateWindowExW == NULL) {
        p_nbridge_CreateWindowExW = (void * (__stdcall *) (long, void *, void *, long, int, int, int, int, void *, void *, void *, void *)) FindFunction(libUser32, "CreateWindowExW");
    }
    return (jlong) (* p_nbridge_CreateWindowExW)((long) dwExStyle, (void *) lpClassName, (void *) lpWindowName, (long) dwStyle, (int) X, (int) Y, (int) nWidth, (int) nHeight, (void *) hWndParent, (void *) hMenu, (void *) hInstance, (void *) lpParam);
}

void * (__stdcall * p_nbridge_SetClipboardViewer) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetClipboardViewer( JNIEnv *env, jobject self, jlong hWndNewViewer) {
    if (p_nbridge_SetClipboardViewer == NULL) {
        p_nbridge_SetClipboardViewer = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetClipboardViewer");
    }
    return (jlong) (* p_nbridge_SetClipboardViewer)((void *) hWndNewViewer);
}

int  (__stdcall * p_nbridge_Ellipse) (void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Ellipse( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4) {
    if (p_nbridge_Ellipse == NULL) {
        p_nbridge_Ellipse = (int  (__stdcall *) (void *, int, int, int, int)) FindFunction(libGdi32, "Ellipse");
    }
    return (jint) (* p_nbridge_Ellipse)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4);
}

unsigned long  (__stdcall * p_nbridge_GetLastError) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetLastError( JNIEnv *env, jobject self) {
    if (p_nbridge_GetLastError == NULL) {
        p_nbridge_GetLastError = (unsigned long  (__stdcall *) (void)) FindFunction(libKernel32, "GetLastError");
    }
    return (jint) (* p_nbridge_GetLastError)();
}

void (__stdcall * p_nbridge_SHGetSettings) (void *, long) = NULL;

JNIEXPORT void  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHGetSettings( JNIEnv *env, jobject self, jlong lpsfs, jint dwMask) {
    if (p_nbridge_SHGetSettings == NULL) {
        p_nbridge_SHGetSettings = (void (__stdcall *) (void *, long)) FindFunction(libShell32, "SHGetSettings");
    }
    (* p_nbridge_SHGetSettings)((void *) lpsfs, (long) dwMask);
}

void * (__stdcall * p_nbridge_ImmAssociateContext) (void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmAssociateContext( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_ImmAssociateContext == NULL) {
        p_nbridge_ImmAssociateContext = (void * (__stdcall *) (void *, void *)) FindFunction(libImm32, "ImmAssociateContext");
    }
    return (jlong) (* p_nbridge_ImmAssociateContext)((void *) param_0, (void *) param_1);
}

void * (__stdcall * p_nbridge_ImmGetContext) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmGetContext( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_ImmGetContext == NULL) {
        p_nbridge_ImmGetContext = (void * (__stdcall *) (void *)) FindFunction(libImm32, "ImmGetContext");
    }
    return (jlong) (* p_nbridge_ImmGetContext)((void *) param_0);
}

unsigned long  (__stdcall * p_nbridge_GetPixel) (void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetPixel( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2) {
    if (p_nbridge_GetPixel == NULL) {
        p_nbridge_GetPixel = (unsigned long  (__stdcall *) (void *, int, int)) FindFunction(libGdi32, "GetPixel");
    }
    return (jint) (* p_nbridge_GetPixel)((void *) param_0, (int) param_1, (int) param_2);
}

void * (__stdcall * p_nbridge_GetDC) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetDC( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_GetDC == NULL) {
        p_nbridge_GetDC = (void * (__stdcall *) (void *)) FindFunction(libUser32, "GetDC");
    }
    return (jlong) (* p_nbridge_GetDC)((void *) hWnd);
}

int (__stdcall * p_nbridge_GetBkMode) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetBkMode( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_GetBkMode == NULL) {
        p_nbridge_GetBkMode = (int (__stdcall *) (void *)) FindFunction(libGdi32, "GetBkMode");
    }
    return (jint) (* p_nbridge_GetBkMode)((void *) param_0);
}

void * (__stdcall * p_nbridge_GetStockObject) (int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetStockObject( JNIEnv *env, jobject self, jint param_0) {
    if (p_nbridge_GetStockObject == NULL) {
        p_nbridge_GetStockObject = (void * (__stdcall *) (int)) FindFunction(libGdi32, "GetStockObject");
    }
    return (jlong) (* p_nbridge_GetStockObject)((int) param_0);
}

int  (__stdcall * p_nbridge_ValidateRgn) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ValidateRgn( JNIEnv *env, jobject self, jlong hWnd, jlong hRgn) {
    if (p_nbridge_ValidateRgn == NULL) {
        p_nbridge_ValidateRgn = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "ValidateRgn");
    }
    return (jint) (* p_nbridge_ValidateRgn)((void *) hWnd, (void *) hRgn);
}

void (__stdcall * p_nbridge_keybd_event) (char, char, long, ULONG_PTR) = NULL;

JNIEXPORT void  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_keybd_1event( JNIEnv *env, jobject self, jbyte bVk, jbyte bScan, jint dwFlags, jlong dwExtraInfo) {
    if (p_nbridge_keybd_event == NULL) {
        p_nbridge_keybd_event = (void (__stdcall *) (char, char, long, ULONG_PTR)) FindFunction(libUser32, "keybd_event");
    }
    (* p_nbridge_keybd_event)((char) bVk, (char) bScan, (long) dwFlags, (ULONG_PTR) dwExtraInfo);
}

long  (__stdcall * p_nbridge_DrawThemeBackground) (void *, void *, int, int, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DrawThemeBackground( JNIEnv *env, jobject self, jlong hTheme, jlong hdc, jint iPartId, jint iStateId, jlong pRect, jlong pClipRect) {
    if (p_nbridge_DrawThemeBackground == NULL) {
        p_nbridge_DrawThemeBackground = (long  (__stdcall *) (void *, void *, int, int, void *, void *)) FindFunction(libUxTheme, "DrawThemeBackground");
    }
    return (jint) (* p_nbridge_DrawThemeBackground)((void *) hTheme, (void *) hdc, (int) iPartId, (int) iStateId, (void *) pRect, (void *) pClipRect);
}

int  (__stdcall * p_nbridge_GetMonitorInfoW) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetMonitorInfoW( JNIEnv *env, jobject self, jlong hMonitor, jlong lpmi) {
    if (p_nbridge_GetMonitorInfoW == NULL) {
        p_nbridge_GetMonitorInfoW = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "GetMonitorInfoW");
    }
    return (jint) (* p_nbridge_GetMonitorInfoW)((void *) hMonitor, (void *) lpmi);
}

unsigned long  (__stdcall * p_nbridge_GetCurrentThreadId) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetCurrentThreadId( JNIEnv *env, jobject self) {
    if (p_nbridge_GetCurrentThreadId == NULL) {
        p_nbridge_GetCurrentThreadId = (unsigned long  (__stdcall *) (void)) FindFunction(libKernel32, "GetCurrentThreadId");
    }
    return (jint) (* p_nbridge_GetCurrentThreadId)();
}

int  (__stdcall * p_nbridge_DeleteDC) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DeleteDC( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_DeleteDC == NULL) {
        p_nbridge_DeleteDC = (int  (__stdcall *) (void *)) FindFunction(libGdi32, "DeleteDC");
    }
    return (jint) (* p_nbridge_DeleteDC)((void *) param_0);
}

__w64 unsigned long  (__stdcall * p_nbridge_SHGetFileInfoW) (void *, long, void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHGetFileInfoW( JNIEnv *env, jobject self, jlong pszPath, jint dwFileAttributes, jlong psfi, jint cbFileInfo, jint uFlags) {
    if (p_nbridge_SHGetFileInfoW == NULL) {
        p_nbridge_SHGetFileInfoW = (__w64 unsigned long  (__stdcall *) (void *, long, void *, int, int)) FindFunction(libShell32, "SHGetFileInfoW");
    }
    return (jlong) (* p_nbridge_SHGetFileInfoW)((void *) pszPath, (long) dwFileAttributes, (void *) psfi, (int) cbFileInfo, (int) uFlags);
}

__w64 long  (__stdcall * p_nbridge_DispatchMessageW) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DispatchMessageW( JNIEnv *env, jobject self, jlong lpMsg) {
    if (p_nbridge_DispatchMessageW == NULL) {
        p_nbridge_DispatchMessageW = (__w64 long  (__stdcall *) (void *)) FindFunction(libUser32, "DispatchMessageW");
    }
    return (jlong) (* p_nbridge_DispatchMessageW)((void *) lpMsg);
}

int  (__stdcall * p_nbridge_PostThreadMessageW) (long, int, WPARAM, LONG_PTR) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PostThreadMessageW( JNIEnv *env, jobject self, jint idThread, jint Msg, jlong wParam, jlong lParam) {
    if (p_nbridge_PostThreadMessageW == NULL) {
        p_nbridge_PostThreadMessageW = (int  (__stdcall *) (long, int, WPARAM, LONG_PTR)) FindFunction(libUser32, "PostThreadMessageW");
    }
    return (jint) (* p_nbridge_PostThreadMessageW)((long) idThread, (int) Msg, (WPARAM) wParam, (LONG_PTR) lParam);
}

unsigned long  (__stdcall * p_nbridge_GetSysColor) (int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetSysColor( JNIEnv *env, jobject self, jint nIndex) {
    if (p_nbridge_GetSysColor == NULL) {
        p_nbridge_GetSysColor = (unsigned long  (__stdcall *) (int)) FindFunction(libUser32, "GetSysColor");
    }
    return (jint) (* p_nbridge_GetSysColor)((int) nIndex);
}

void * (__stdcall * p_nbridge_GetSystemMenu) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetSystemMenu( JNIEnv *env, jobject self, jlong hWnd, jint bRevert) {
    if (p_nbridge_GetSystemMenu == NULL) {
        p_nbridge_GetSystemMenu = (void * (__stdcall *) (void *, int)) FindFunction(libUser32, "GetSystemMenu");
    }
    return (jlong) (* p_nbridge_GetSystemMenu)((void *) hWnd, (int) bRevert);
}

int  (__stdcall * p_nbridge_SetPixelFormat) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetPixelFormat( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (p_nbridge_SetPixelFormat == NULL) {
        p_nbridge_SetPixelFormat = (int  (__stdcall *) (void *, int, void *)) FindFunction(libGdi32, "SetPixelFormat");
    }
    return (jint) (* p_nbridge_SetPixelFormat)((void *) param_0, (int) param_1, (void *) param_2);
}

int  (__stdcall * p_nbridge_GetCursorPos) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetCursorPos( JNIEnv *env, jobject self, jlong lpPoint) {
    if (p_nbridge_GetCursorPos == NULL) {
        p_nbridge_GetCursorPos = (int  (__stdcall *) (void *)) FindFunction(libUser32, "GetCursorPos");
    }
    return (jint) (* p_nbridge_GetCursorPos)((void *) lpPoint);
}

int  (__stdcall * p_nbridge_PatBlt) (void *, int, int, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PatBlt( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5) {
    if (p_nbridge_PatBlt == NULL) {
        p_nbridge_PatBlt = (int  (__stdcall *) (void *, int, int, int, int, long)) FindFunction(libGdi32, "PatBlt");
    }
    return (jint) (* p_nbridge_PatBlt)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (long) param_5);
}

void * (__stdcall * p_nbridge_SetCursor) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetCursor( JNIEnv *env, jobject self, jlong hCursor) {
    if (p_nbridge_SetCursor == NULL) {
        p_nbridge_SetCursor = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetCursor");
    }
    return (jlong) (* p_nbridge_SetCursor)((void *) hCursor);
}

int  (__stdcall * p_nbridge_AppendMenuW) (void *, int, UINT_PTR, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_AppendMenuW( JNIEnv *env, jobject self, jlong hMenu, jint uFlags, jlong uIDNewItem, jlong lpNewItem) {
    if (p_nbridge_AppendMenuW == NULL) {
        p_nbridge_AppendMenuW = (int  (__stdcall *) (void *, int, UINT_PTR, void *)) FindFunction(libUser32, "AppendMenuW");
    }
    return (jint) (* p_nbridge_AppendMenuW)((void *) hMenu, (int) uFlags, (UINT_PTR) uIDNewItem, (void *) lpNewItem);
}

int  (__stdcall * p_nbridge_SetWindowPlacement) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetWindowPlacement( JNIEnv *env, jobject self, jlong hWnd, jlong lpwndpl) {
    if (p_nbridge_SetWindowPlacement == NULL) {
        p_nbridge_SetWindowPlacement = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "SetWindowPlacement");
    }
    return (jint) (* p_nbridge_SetWindowPlacement)((void *) hWnd, (void *) lpwndpl);
}

void * (__stdcall * p_nbridge_ActivateKeyboardLayout) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ActivateKeyboardLayout( JNIEnv *env, jobject self, jlong hkl, jint Flags) {
    if (p_nbridge_ActivateKeyboardLayout == NULL) {
        p_nbridge_ActivateKeyboardLayout = (void * (__stdcall *) (void *, int)) FindFunction(libUser32, "ActivateKeyboardLayout");
    }
    return (jlong) (* p_nbridge_ActivateKeyboardLayout)((void *) hkl, (int) Flags);
}

unsigned long  (__stdcall * p_nbridge_CommDlgExtendedError) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CommDlgExtendedError( JNIEnv *env, jobject self) {
    if (p_nbridge_CommDlgExtendedError == NULL) {
        p_nbridge_CommDlgExtendedError = (unsigned long  (__stdcall *) (void)) FindFunction(libcomdlg32, "CommDlgExtendedError");
    }
    return (jint) (* p_nbridge_CommDlgExtendedError)();
}

int  (__stdcall * p_nbridge_GlobalUnlock) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GlobalUnlock( JNIEnv *env, jobject self, jlong hMem) {
    if (p_nbridge_GlobalUnlock == NULL) {
        p_nbridge_GlobalUnlock = (int  (__stdcall *) (void *)) FindFunction(libKernel32, "GlobalUnlock");
    }
    return (jint) (* p_nbridge_GlobalUnlock)((void *) hMem);
}

int (__stdcall * p_nbridge_SetROP2) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetROP2( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_SetROP2 == NULL) {
        p_nbridge_SetROP2 = (int (__stdcall *) (void *, int)) FindFunction(libGdi32, "SetROP2");
    }
    return (jint) (* p_nbridge_SetROP2)((void *) param_0, (int) param_1);
}

long  (__stdcall * p_nbridge_SHBindToParent) (void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHBindToParent( JNIEnv *env, jobject self, jlong pidl, jlong riid, jlong ppv, jlong ppidlLast) {
    if (p_nbridge_SHBindToParent == NULL) {
        p_nbridge_SHBindToParent = (long  (__stdcall *) (void *, void *, void *, void *)) FindFunction(libShell32, "SHBindToParent");
    }
    return (jint) (* p_nbridge_SHBindToParent)((void *) pidl, (void *) riid, (void *) ppv, (void *) ppidlLast);
}

unsigned long  (__stdcall * p_nbridge_InSendMessageEx) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_InSendMessageEx( JNIEnv *env, jobject self, jlong lpReserved) {
    if (p_nbridge_InSendMessageEx == NULL) {
        p_nbridge_InSendMessageEx = (unsigned long  (__stdcall *) (void *)) FindFunction(libUser32, "InSendMessageEx");
    }
    return (jint) (* p_nbridge_InSendMessageEx)((void *) lpReserved);
}

int (__stdcall * p_nbridge_GetLocaleInfoW) (long, long, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetLocaleInfoW( JNIEnv *env, jobject self, jint Locale, jint LCType, jlong lpLCData, jint cchData) {
    if (p_nbridge_GetLocaleInfoW == NULL) {
        p_nbridge_GetLocaleInfoW = (int (__stdcall *) (long, long, void *, int)) FindFunction(libKernel32, "GetLocaleInfoW");
    }
    return (jint) (* p_nbridge_GetLocaleInfoW)((long) Locale, (long) LCType, (void *) lpLCData, (int) cchData);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall1( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObject) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObject);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall2( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall3( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall4( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwnd, jlong pbc, jlong pszDisplayName, jlong pchEaten, jlong ppidl, jlong pdwAttributes) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) hwnd, (void *) pbc, (void *) pszDisplayName, (void *) pchEaten, (void *) ppidl, (void *) pdwAttributes);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall5( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwnd, jint grfFlags, jlong ppenumIDList) {
    return (jint)((long  (__stdcall *) (void *, void *, long, void *)) fnptr1234)((void *) This, (void *) hwnd, (long) grfFlags, (void *) ppenumIDList);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall6( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pidl, jlong pbc, jlong riid, jlong ppv) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) pidl, (void *) pbc, (void *) riid, (void *) ppv);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall7( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pidl, jlong pbc, jlong riid, jlong ppv) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) pidl, (void *) pbc, (void *) riid, (void *) ppv);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall8( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong lParam, jlong pidl1, jlong pidl2) {
    return (jint)((long  (__stdcall *) (void *, LONG_PTR, void *, void *)) fnptr1234)((void *) This, (LONG_PTR) lParam, (void *) pidl1, (void *) pidl2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall9( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwndOwner, jlong riid, jlong ppv) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) hwndOwner, (void *) riid, (void *) ppv);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall10( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint cidl, jlong apidl, jlong rgfInOut) {
    return (jint)((long  (__stdcall *) (void *, int, void *, void *)) fnptr1234)((void *) This, (int) cidl, (void *) apidl, (void *) rgfInOut);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall11( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwndOwner, jint cidl, jlong apidl, jlong riid, jlong rgfReserved, jlong ppv) {
    return (jint)((long  (__stdcall *) (void *, void *, int, void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) hwndOwner, (int) cidl, (void *) apidl, (void *) riid, (void *) rgfReserved, (void *) ppv);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall12( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pidl, jint uFlags, jlong pName) {
    return (jint)((long  (__stdcall *) (void *, void *, long, void *)) fnptr1234)((void *) This, (void *) pidl, (long) uFlags, (void *) pName);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall13( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwnd, jlong pidl, jlong pszName, jint uFlags, jlong ppidlOut) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) hwnd, (void *) pidl, (void *) pszName, (long) uFlags, (void *) ppidlOut);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall14( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObject) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObject);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall15( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall16( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall17( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong punk) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) punk);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall18( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong punk) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) punk);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall19( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall20( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pbindopts) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) pbindopts);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall21( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pbindopts) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) pbindopts);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall22( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pprot) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) pprot);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall23( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pszKey, jlong punk) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) pszKey, (void *) punk);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall24( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pszKey, jlong ppunk) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) pszKey, (void *) ppunk);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall25( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong ppenum) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) ppenum);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall26( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pszKey) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) pszKey);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall27( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObject) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObject);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall28( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall29( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}

long  (__stdcall * p_nbridge_SHGetDataFromIDListW) (void *, void *, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHGetDataFromIDListW( JNIEnv *env, jobject self, jlong psf, jlong pidl, jint nFormat, jlong pv, jint cb) {
    if (p_nbridge_SHGetDataFromIDListW == NULL) {
        p_nbridge_SHGetDataFromIDListW = (long  (__stdcall *) (void *, void *, int, void *, int)) FindFunction(libShell32, "SHGetDataFromIDListW");
    }
    return (jint) (* p_nbridge_SHGetDataFromIDListW)((void *) psf, (void *) pidl, (int) nFormat, (void *) pv, (int) cb);
}

int  (__stdcall * p_nbridge_ScreenToClient) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ScreenToClient( JNIEnv *env, jobject self, jlong hWnd, jlong lpPoint) {
    if (p_nbridge_ScreenToClient == NULL) {
        p_nbridge_ScreenToClient = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "ScreenToClient");
    }
    return (jint) (* p_nbridge_ScreenToClient)((void *) hWnd, (void *) lpPoint);
}

void * (__stdcall * p_nbridge_GetParent) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetParent( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_GetParent == NULL) {
        p_nbridge_GetParent = (void * (__stdcall *) (void *)) FindFunction(libUser32, "GetParent");
    }
    return (jlong) (* p_nbridge_GetParent)((void *) hWnd);
}

void * (__stdcall * p_nbridge_SetFocus) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetFocus( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_SetFocus == NULL) {
        p_nbridge_SetFocus = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetFocus");
    }
    return (jlong) (* p_nbridge_SetFocus)((void *) hWnd);
}

int (__stdcall * p_nbridge_DescribePixelFormat) (void *, int, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DescribePixelFormat( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    if (p_nbridge_DescribePixelFormat == NULL) {
        p_nbridge_DescribePixelFormat = (int (__stdcall *) (void *, int, int, void *)) FindFunction(libGdi32, "DescribePixelFormat");
    }
    return (jint) (* p_nbridge_DescribePixelFormat)((void *) param_0, (int) param_1, (int) param_2, (void *) param_3);
}

unsigned long  (__stdcall * p_nbridge_SetTextColor) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetTextColor( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_SetTextColor == NULL) {
        p_nbridge_SetTextColor = (unsigned long  (__stdcall *) (void *, long)) FindFunction(libGdi32, "SetTextColor");
    }
    return (jint) (* p_nbridge_SetTextColor)((void *) param_0, (long) param_1);
}

void * (__stdcall * p_nbridge_MonitorFromWindow) (void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MonitorFromWindow( JNIEnv *env, jobject self, jlong hwnd, jint dwFlags) {
    if (p_nbridge_MonitorFromWindow == NULL) {
        p_nbridge_MonitorFromWindow = (void * (__stdcall *) (void *, long)) FindFunction(libUser32, "MonitorFromWindow");
    }
    return (jlong) (* p_nbridge_MonitorFromWindow)((void *) hwnd, (long) dwFlags);
}

int (__stdcall * p_nbridge_GetDIBits) (void *, void *, int, int, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetDIBits( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jlong param_4, jlong param_5, jint param_6) {
    if (p_nbridge_GetDIBits == NULL) {
        p_nbridge_GetDIBits = (int (__stdcall *) (void *, void *, int, int, void *, void *, int)) FindFunction(libGdi32, "GetDIBits");
    }
    return (jint) (* p_nbridge_GetDIBits)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3, (void *) param_4, (void *) param_5, (int) param_6);
}

unsigned long  (__stdcall * p_nbridge_FormatMessageW) (long, void *, long, long, void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_FormatMessageW( JNIEnv *env, jobject self, jint dwFlags, jlong lpSource, jint dwMessageId, jint dwLanguageId, jlong lpBuffer, jint nSize, jlong Arguments) {
    if (p_nbridge_FormatMessageW == NULL) {
        p_nbridge_FormatMessageW = (unsigned long  (__stdcall *) (long, void *, long, long, void *, long, void *)) FindFunction(libKernel32, "FormatMessageW");
    }
    return (jint) (* p_nbridge_FormatMessageW)((long) dwFlags, (void *) lpSource, (long) dwMessageId, (long) dwLanguageId, (void *) lpBuffer, (long) nSize, (void *) Arguments);
}

long  (__stdcall * p_nbridge_SHGetDesktopFolder) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHGetDesktopFolder( JNIEnv *env, jobject self, jlong ppshf) {
    if (p_nbridge_SHGetDesktopFolder == NULL) {
        p_nbridge_SHGetDesktopFolder = (long  (__stdcall *) (void *)) FindFunction(libShell32, "SHGetDesktopFolder");
    }
    return (jint) (* p_nbridge_SHGetDesktopFolder)((void *) ppshf);
}

int  (__stdcall * p_nbridge_ImmSetCompositionWindow) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmSetCompositionWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_ImmSetCompositionWindow == NULL) {
        p_nbridge_ImmSetCompositionWindow = (int  (__stdcall *) (void *, void *)) FindFunction(libImm32, "ImmSetCompositionWindow");
    }
    return (jint) (* p_nbridge_ImmSetCompositionWindow)((void *) param_0, (void *) param_1);
}

unsigned int  (__stdcall * p_nbridge_SendInput) (int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SendInput( JNIEnv *env, jobject self, jint cInputs, jlong pInputs, jint cbSize) {
    if (p_nbridge_SendInput == NULL) {
        p_nbridge_SendInput = (unsigned int  (__stdcall *) (int, void *, int)) FindFunction(libUser32, "SendInput");
    }
    return (jint) (* p_nbridge_SendInput)((int) cInputs, (void *) pInputs, (int) cbSize);
}

int  (__stdcall * p_nbridge_DeleteObject) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DeleteObject( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_DeleteObject == NULL) {
        p_nbridge_DeleteObject = (int  (__stdcall *) (void *)) FindFunction(libGdi32, "DeleteObject");
    }
    return (jint) (* p_nbridge_DeleteObject)((void *) param_0);
}

int  (__stdcall * p_nbridge_ImmIsIME) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmIsIME( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_ImmIsIME == NULL) {
        p_nbridge_ImmIsIME = (int  (__stdcall *) (void *)) FindFunction(libImm32, "ImmIsIME");
    }
    return (jint) (* p_nbridge_ImmIsIME)((void *) param_0);
}
JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall30( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jint param_1, jlong param_2, jlong param_3) {
    return (jlong)((__w64 long  (__stdcall *) (void *, int, WPARAM, LONG_PTR)) fnptr1234)((void *) param_0, (int) param_1, (WPARAM) param_2, (LONG_PTR) param_3);
}

unsigned short  (__stdcall * p_nbridge_RegisterClassExW) (void *) = NULL;

JNIEXPORT jshort  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_RegisterClassExW( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_RegisterClassExW == NULL) {
        p_nbridge_RegisterClassExW = (unsigned short  (__stdcall *) (void *)) FindFunction(libUser32, "RegisterClassExW");
    }
    return (jshort) (* p_nbridge_RegisterClassExW)((void *) param_0);
}

void * (__stdcall * p_nbridge_GetWindowDC) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetWindowDC( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_GetWindowDC == NULL) {
        p_nbridge_GetWindowDC = (void * (__stdcall *) (void *)) FindFunction(libUser32, "GetWindowDC");
    }
    return (jlong) (* p_nbridge_GetWindowDC)((void *) hWnd);
}

unsigned int  (__stdcall * p_nbridge_RegisterClipboardFormatW) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_RegisterClipboardFormatW( JNIEnv *env, jobject self, jlong lpszFormat) {
    if (p_nbridge_RegisterClipboardFormatW == NULL) {
        p_nbridge_RegisterClipboardFormatW = (unsigned int  (__stdcall *) (void *)) FindFunction(libUser32, "RegisterClipboardFormatW");
    }
    return (jint) (* p_nbridge_RegisterClipboardFormatW)((void *) lpszFormat);
}

unsigned int  (__stdcall * p_nbridge_EnumClipboardFormats) (int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EnumClipboardFormats( JNIEnv *env, jobject self, jint format) {
    if (p_nbridge_EnumClipboardFormats == NULL) {
        p_nbridge_EnumClipboardFormats = (unsigned int  (__stdcall *) (int)) FindFunction(libUser32, "EnumClipboardFormats");
    }
    return (jint) (* p_nbridge_EnumClipboardFormats)((int) format);
}

void * (__stdcall * p_nbridge_GetFocus) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetFocus( JNIEnv *env, jobject self) {
    if (p_nbridge_GetFocus == NULL) {
        p_nbridge_GetFocus = (void * (__stdcall *) (void)) FindFunction(libUser32, "GetFocus");
    }
    return (jlong) (* p_nbridge_GetFocus)();
}

void * (__stdcall * p_nbridge_CreateRectRgn) (int, int, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateRectRgn( JNIEnv *env, jobject self, jint param_0, jint param_1, jint param_2, jint param_3) {
    if (p_nbridge_CreateRectRgn == NULL) {
        p_nbridge_CreateRectRgn = (void * (__stdcall *) (int, int, int, int)) FindFunction(libGdi32, "CreateRectRgn");
    }
    return (jlong) (* p_nbridge_CreateRectRgn)((int) param_0, (int) param_1, (int) param_2, (int) param_3);
}

int  (__stdcall * p_nbridge_DestroyCursor) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DestroyCursor( JNIEnv *env, jobject self, jlong hCursor) {
    if (p_nbridge_DestroyCursor == NULL) {
        p_nbridge_DestroyCursor = (int  (__stdcall *) (void *)) FindFunction(libUser32, "DestroyCursor");
    }
    return (jint) (* p_nbridge_DestroyCursor)((void *) hCursor);
}

void * (__stdcall * p_nbridge_GetClipboardData) (int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetClipboardData( JNIEnv *env, jobject self, jint uFormat) {
    if (p_nbridge_GetClipboardData == NULL) {
        p_nbridge_GetClipboardData = (void * (__stdcall *) (int)) FindFunction(libUser32, "GetClipboardData");
    }
    return (jlong) (* p_nbridge_GetClipboardData)((int) uFormat);
}

int  (__stdcall * p_nbridge_MoveToEx) (void *, int, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MoveToEx( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    if (p_nbridge_MoveToEx == NULL) {
        p_nbridge_MoveToEx = (int  (__stdcall *) (void *, int, int, void *)) FindFunction(libGdi32, "MoveToEx");
    }
    return (jint) (* p_nbridge_MoveToEx)((void *) param_0, (int) param_1, (int) param_2, (void *) param_3);
}

int  (__stdcall * p_nbridge_ImmNotifyIME) (void *, long, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmNotifyIME( JNIEnv *env, jobject self, jlong param_0, jint dwAction, jint dwIndex, jint dwValue) {
    if (p_nbridge_ImmNotifyIME == NULL) {
        p_nbridge_ImmNotifyIME = (int  (__stdcall *) (void *, long, long, long)) FindFunction(libImm32, "ImmNotifyIME");
    }
    return (jint) (* p_nbridge_ImmNotifyIME)((void *) param_0, (long) dwAction, (long) dwIndex, (long) dwValue);
}

void * (__stdcall * p_nbridge_WindowFromPoint) (POINT) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_WindowFromPoint( JNIEnv *env, jobject self, jlong Point) {
    if (p_nbridge_WindowFromPoint == NULL) {
        p_nbridge_WindowFromPoint = (void * (__stdcall *) (POINT)) FindFunction(libUser32, "WindowFromPoint");
    }
    return (jlong) (* p_nbridge_WindowFromPoint)(*((POINT *) Point));
}

void * (__stdcall * p_nbridge_SetCapture) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetCapture( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_SetCapture == NULL) {
        p_nbridge_SetCapture = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetCapture");
    }
    return (jlong) (* p_nbridge_SetCapture)((void *) hWnd);
}

int  (__stdcall * p_nbridge_DestroyCaret) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DestroyCaret( JNIEnv *env, jobject self) {
    if (p_nbridge_DestroyCaret == NULL) {
        p_nbridge_DestroyCaret = (int  (__stdcall *) (void)) FindFunction(libUser32, "DestroyCaret");
    }
    return (jint) (* p_nbridge_DestroyCaret)();
}

int  (__stdcall * p_nbridge_SetWindowTextW) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetWindowTextW( JNIEnv *env, jobject self, jlong hWnd, jlong lpString) {
    if (p_nbridge_SetWindowTextW == NULL) {
        p_nbridge_SetWindowTextW = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "SetWindowTextW");
    }
    return (jint) (* p_nbridge_SetWindowTextW)((void *) hWnd, (void *) lpString);
}

int  (__stdcall * p_nbridge_DrawFocusRect) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DrawFocusRect( JNIEnv *env, jobject self, jlong hDC, jlong lprc) {
    if (p_nbridge_DrawFocusRect == NULL) {
        p_nbridge_DrawFocusRect = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "DrawFocusRect");
    }
    return (jint) (* p_nbridge_DrawFocusRect)((void *) hDC, (void *) lprc);
}

void * (__stdcall * p_nbridge_CreateBrushIndirect) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateBrushIndirect( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_CreateBrushIndirect == NULL) {
        p_nbridge_CreateBrushIndirect = (void * (__stdcall *) (void *)) FindFunction(libGdi32, "CreateBrushIndirect");
    }
    return (jlong) (* p_nbridge_CreateBrushIndirect)((void *) param_0);
}

unsigned int  (__stdcall * p_nbridge_MapVirtualKeyW) (int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MapVirtualKeyW( JNIEnv *env, jobject self, jint uCode, jint uMapType) {
    if (p_nbridge_MapVirtualKeyW == NULL) {
        p_nbridge_MapVirtualKeyW = (unsigned int  (__stdcall *) (int, int)) FindFunction(libUser32, "MapVirtualKeyW");
    }
    return (jint) (* p_nbridge_MapVirtualKeyW)((int) uCode, (int) uMapType);
}

int (__stdcall * p_nbridge_GetRgnBox) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetRgnBox( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_GetRgnBox == NULL) {
        p_nbridge_GetRgnBox = (int (__stdcall *) (void *, void *)) FindFunction(libGdi32, "GetRgnBox");
    }
    return (jint) (* p_nbridge_GetRgnBox)((void *) param_0, (void *) param_1);
}

void * (__stdcall * p_nbridge_GetActiveWindow) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetActiveWindow( JNIEnv *env, jobject self) {
    if (p_nbridge_GetActiveWindow == NULL) {
        p_nbridge_GetActiveWindow = (void * (__stdcall *) (void)) FindFunction(libUser32, "GetActiveWindow");
    }
    return (jlong) (* p_nbridge_GetActiveWindow)();
}

int (__stdcall * p_nbridge_WideCharToMultiByte) (int, long, void *, int, void *, int, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_WideCharToMultiByte( JNIEnv *env, jobject self, jint CodePage, jint dwFlags, jlong lpWideCharStr, jint cchWideChar, jlong lpMultiByteStr, jint cbMultiByte, jlong lpDefaultChar, jlong lpUsedDefaultChar) {
    if (p_nbridge_WideCharToMultiByte == NULL) {
        p_nbridge_WideCharToMultiByte = (int (__stdcall *) (int, long, void *, int, void *, int, void *, void *)) FindFunction(libKernel32, "WideCharToMultiByte");
    }
    return (jint) (* p_nbridge_WideCharToMultiByte)((int) CodePage, (long) dwFlags, (void *) lpWideCharStr, (int) cchWideChar, (void *) lpMultiByteStr, (int) cbMultiByte, (void *) lpDefaultChar, (void *) lpUsedDefaultChar);
}

int  (__stdcall * p_nbridge_IsThemeActive) () = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_IsThemeActive( JNIEnv *env, jobject self) {
    if (p_nbridge_IsThemeActive == NULL) {
        p_nbridge_IsThemeActive = (int  (__stdcall *) ()) FindFunction(libUxTheme, "IsThemeActive");
    }
    return (jint) (* p_nbridge_IsThemeActive)();
}

unsigned long  (__stdcall * p_nbridge_GetThemeSysColor) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysColor( JNIEnv *env, jobject self, jlong hTheme, jint iColorId) {
    if (p_nbridge_GetThemeSysColor == NULL) {
        p_nbridge_GetThemeSysColor = (unsigned long  (__stdcall *) (void *, int)) FindFunction(libUxTheme, "GetThemeSysColor");
    }
    return (jint) (* p_nbridge_GetThemeSysColor)((void *) hTheme, (int) iColorId);
}

__w64 unsigned long  (__stdcall * p_nbridge_GlobalSize) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GlobalSize( JNIEnv *env, jobject self, jlong hMem) {
    if (p_nbridge_GlobalSize == NULL) {
        p_nbridge_GlobalSize = (__w64 unsigned long  (__stdcall *) (void *)) FindFunction(libKernel32, "GlobalSize");
    }
    return (jlong) (* p_nbridge_GlobalSize)((void *) hMem);
}

int  (__stdcall * p_nbridge_FillRgn) (void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_FillRgn( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (p_nbridge_FillRgn == NULL) {
        p_nbridge_FillRgn = (int  (__stdcall *) (void *, void *, void *)) FindFunction(libGdi32, "FillRgn");
    }
    return (jint) (* p_nbridge_FillRgn)((void *) param_0, (void *) param_1, (void *) param_2);
}

int  (__stdcall * p_nbridge_DrawFrameControl) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DrawFrameControl( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3) {
    if (p_nbridge_DrawFrameControl == NULL) {
        p_nbridge_DrawFrameControl = (int  (__stdcall *) (void *, void *, int, int)) FindFunction(libUser32, "DrawFrameControl");
    }
    return (jint) (* p_nbridge_DrawFrameControl)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3);
}

int  (__stdcall * p_nbridge_EmptyClipboard) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EmptyClipboard( JNIEnv *env, jobject self) {
    if (p_nbridge_EmptyClipboard == NULL) {
        p_nbridge_EmptyClipboard = (int  (__stdcall *) (void)) FindFunction(libUser32, "EmptyClipboard");
    }
    return (jint) (* p_nbridge_EmptyClipboard)();
}

int  (__stdcall * p_nbridge_DestroyWindow) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DestroyWindow( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_DestroyWindow == NULL) {
        p_nbridge_DestroyWindow = (int  (__stdcall *) (void *)) FindFunction(libUser32, "DestroyWindow");
    }
    return (jint) (* p_nbridge_DestroyWindow)((void *) hWnd);
}

long  (__stdcall * p_nbridge_CloseThemeData) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CloseThemeData( JNIEnv *env, jobject self, jlong hTheme) {
    if (p_nbridge_CloseThemeData == NULL) {
        p_nbridge_CloseThemeData = (long  (__stdcall *) (void *)) FindFunction(libUxTheme, "CloseThemeData");
    }
    return (jint) (* p_nbridge_CloseThemeData)((void *) hTheme);
}

int  (__stdcall * p_nbridge_TextOutW) (void *, int, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_TextOutW( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3, jint param_4) {
    if (p_nbridge_TextOutW == NULL) {
        p_nbridge_TextOutW = (int  (__stdcall *) (void *, int, int, void *, int)) FindFunction(libGdi32, "TextOutW");
    }
    return (jint) (* p_nbridge_TextOutW)((void *) param_0, (int) param_1, (int) param_2, (void *) param_3, (int) param_4);
}

int  (__stdcall * p_nbridge_GetCaretPos) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetCaretPos( JNIEnv *env, jobject self, jlong lpPoint) {
    if (p_nbridge_GetCaretPos == NULL) {
        p_nbridge_GetCaretPos = (int  (__stdcall *) (void *)) FindFunction(libUser32, "GetCaretPos");
    }
    return (jint) (* p_nbridge_GetCaretPos)((void *) lpPoint);
}

int (__stdcall * p_nbridge_GetThemeSysSize) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysSize( JNIEnv *env, jobject self, jlong hTheme, jint iSizeId) {
    if (p_nbridge_GetThemeSysSize == NULL) {
        p_nbridge_GetThemeSysSize = (int (__stdcall *) (void *, int)) FindFunction(libUxTheme, "GetThemeSysSize");
    }
    return (jint) (* p_nbridge_GetThemeSysSize)((void *) hTheme, (int) iSizeId);
}

int (__stdcall * p_nbridge_SelectClipRgn) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SelectClipRgn( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_SelectClipRgn == NULL) {
        p_nbridge_SelectClipRgn = (int (__stdcall *) (void *, void *)) FindFunction(libGdi32, "SelectClipRgn");
    }
    return (jint) (* p_nbridge_SelectClipRgn)((void *) param_0, (void *) param_1);
}

long  (__stdcall * p_nbridge_SHGetFolderLocation) (void *, int, void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHGetFolderLocation( JNIEnv *env, jobject self, jlong hwnd, jint csidl, jlong hToken, jint dwFlags, jlong ppidl) {
    if (p_nbridge_SHGetFolderLocation == NULL) {
        p_nbridge_SHGetFolderLocation = (long  (__stdcall *) (void *, int, void *, long, void *)) FindFunction(libShell32, "SHGetFolderLocation");
    }
    return (jint) (* p_nbridge_SHGetFolderLocation)((void *) hwnd, (int) csidl, (void *) hToken, (long) dwFlags, (void *) ppidl);
}

void * (__stdcall * p_nbridge_ImmCreateContext) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmCreateContext( JNIEnv *env, jobject self) {
    if (p_nbridge_ImmCreateContext == NULL) {
        p_nbridge_ImmCreateContext = (void * (__stdcall *) (void)) FindFunction(libImm32, "ImmCreateContext");
    }
    return (jlong) (* p_nbridge_ImmCreateContext)();
}

long  (__stdcall * p_nbridge_CLSIDFromString) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CLSIDFromString( JNIEnv *env, jobject self, jlong lpsz, jlong pclsid) {
    if (p_nbridge_CLSIDFromString == NULL) {
        p_nbridge_CLSIDFromString = (long  (__stdcall *) (void *, void *)) FindFunction(libOle32, "CLSIDFromString");
    }
    return (jint) (* p_nbridge_CLSIDFromString)((void *) lpsz, (void *) pclsid);
}

long  (__stdcall * p_nbridge_StrRetToBufW) (void *, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_StrRetToBufW( JNIEnv *env, jobject self, jlong pstr, jlong pidl, jlong pszBuf, jint cchBuf) {
    if (p_nbridge_StrRetToBufW == NULL) {
        p_nbridge_StrRetToBufW = (long  (__stdcall *) (void *, void *, void *, int)) FindFunction(libShlwapi, "StrRetToBufW");
    }
    return (jint) (* p_nbridge_StrRetToBufW)((void *) pstr, (void *) pidl, (void *) pszBuf, (int) cchBuf);
}

int (__stdcall * p_nbridge_SetPolyFillMode) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetPolyFillMode( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_SetPolyFillMode == NULL) {
        p_nbridge_SetPolyFillMode = (int (__stdcall *) (void *, int)) FindFunction(libGdi32, "SetPolyFillMode");
    }
    return (jint) (* p_nbridge_SetPolyFillMode)((void *) param_0, (int) param_1);
}

void * (__stdcall * p_nbridge_LocalFree) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_LocalFree( JNIEnv *env, jobject self, jlong hMem) {
    if (p_nbridge_LocalFree == NULL) {
        p_nbridge_LocalFree = (void * (__stdcall *) (void *)) FindFunction(libKernel32, "LocalFree");
    }
    return (jlong) (* p_nbridge_LocalFree)((void *) hMem);
}

void * (__stdcall * p_nbridge_CreateCompatibleDC) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateCompatibleDC( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_CreateCompatibleDC == NULL) {
        p_nbridge_CreateCompatibleDC = (void * (__stdcall *) (void *)) FindFunction(libGdi32, "CreateCompatibleDC");
    }
    return (jlong) (* p_nbridge_CreateCompatibleDC)((void *) param_0);
}

void * (__stdcall * p_nbridge_CreateCompatibleBitmap) (void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateCompatibleBitmap( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2) {
    if (p_nbridge_CreateCompatibleBitmap == NULL) {
        p_nbridge_CreateCompatibleBitmap = (void * (__stdcall *) (void *, int, int)) FindFunction(libGdi32, "CreateCompatibleBitmap");
    }
    return (jlong) (* p_nbridge_CreateCompatibleBitmap)((void *) param_0, (int) param_1, (int) param_2);
}

__w64 long  (__stdcall * p_nbridge_DefWindowProcW) (void *, int, WPARAM, LONG_PTR) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DefWindowProcW( JNIEnv *env, jobject self, jlong hWnd, jint Msg, jlong wParam, jlong lParam) {
    if (p_nbridge_DefWindowProcW == NULL) {
        p_nbridge_DefWindowProcW = (__w64 long  (__stdcall *) (void *, int, WPARAM, LONG_PTR)) FindFunction(libUser32, "DefWindowProcW");
    }
    return (jlong) (* p_nbridge_DefWindowProcW)((void *) hWnd, (int) Msg, (WPARAM) wParam, (LONG_PTR) lParam);
}

int  (__stdcall * p_nbridge_CloseClipboard) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CloseClipboard( JNIEnv *env, jobject self) {
    if (p_nbridge_CloseClipboard == NULL) {
        p_nbridge_CloseClipboard = (int  (__stdcall *) (void)) FindFunction(libUser32, "CloseClipboard");
    }
    return (jint) (* p_nbridge_CloseClipboard)();
}

void * (__stdcall * p_nbridge_SetActiveWindow) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetActiveWindow( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_SetActiveWindow == NULL) {
        p_nbridge_SetActiveWindow = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetActiveWindow");
    }
    return (jlong) (* p_nbridge_SetActiveWindow)((void *) hWnd);
}

int (__stdcall * p_nbridge_GetDeviceCaps) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetDeviceCaps( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_GetDeviceCaps == NULL) {
        p_nbridge_GetDeviceCaps = (int (__stdcall *) (void *, int)) FindFunction(libGdi32, "GetDeviceCaps");
    }
    return (jint) (* p_nbridge_GetDeviceCaps)((void *) param_0, (int) param_1);
}

void * (__stdcall * p_nbridge_CreatePatternBrush) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreatePatternBrush( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_CreatePatternBrush == NULL) {
        p_nbridge_CreatePatternBrush = (void * (__stdcall *) (void *)) FindFunction(libGdi32, "CreatePatternBrush");
    }
    return (jlong) (* p_nbridge_CreatePatternBrush)((void *) param_0);
}

void (__stdcall * p_nbridge_mouse_event) (long, long, long, long, ULONG_PTR) = NULL;

JNIEXPORT void  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_mouse_1event( JNIEnv *env, jobject self, jint dwFlags, jint dx, jint dy, jint dwData, jlong dwExtraInfo) {
    if (p_nbridge_mouse_event == NULL) {
        p_nbridge_mouse_event = (void (__stdcall *) (long, long, long, long, ULONG_PTR)) FindFunction(libUser32, "mouse_event");
    }
    (* p_nbridge_mouse_event)((long) dwFlags, (long) dx, (long) dy, (long) dwData, (ULONG_PTR) dwExtraInfo);
}

int  (__stdcall * p_nbridge_EnumDisplayDevicesW) (void *, long, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EnumDisplayDevicesW( JNIEnv *env, jobject self, jlong lpDevice, jint iDevNum, jlong lpDisplayDevice, jint dwFlags) {
    if (p_nbridge_EnumDisplayDevicesW == NULL) {
        p_nbridge_EnumDisplayDevicesW = (int  (__stdcall *) (void *, long, void *, long)) FindFunction(libUser32, "EnumDisplayDevicesW");
    }
    return (jint) (* p_nbridge_EnumDisplayDevicesW)((void *) lpDevice, (long) iDevNum, (void *) lpDisplayDevice, (long) dwFlags);
}

long  (__stdcall * p_nbridge_SetWindowLongW) (void *, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetWindowLongW( JNIEnv *env, jobject self, jlong hWnd, jint nIndex, jint dwNewLong) {
    if (p_nbridge_SetWindowLongW == NULL) {
        p_nbridge_SetWindowLongW = (long  (__stdcall *) (void *, int, long)) FindFunction(libUser32, "SetWindowLongW");
    }
    return (jint) (* p_nbridge_SetWindowLongW)((void *) hWnd, (int) nIndex, (long) dwNewLong);
}

int  (__stdcall * p_nbridge_Polygon) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Polygon( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (p_nbridge_Polygon == NULL) {
        p_nbridge_Polygon = (int  (__stdcall *) (void *, void *, int)) FindFunction(libGdi32, "Polygon");
    }
    return (jint) (* p_nbridge_Polygon)((void *) param_0, (void *) param_1, (int) param_2);
}

int (__stdcall * p_nbridge_GetUpdateRgn) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetUpdateRgn( JNIEnv *env, jobject self, jlong hWnd, jlong hRgn, jint bErase) {
    if (p_nbridge_GetUpdateRgn == NULL) {
        p_nbridge_GetUpdateRgn = (int (__stdcall *) (void *, void *, int)) FindFunction(libUser32, "GetUpdateRgn");
    }
    return (jint) (* p_nbridge_GetUpdateRgn)((void *) hWnd, (void *) hRgn, (int) bErase);
}

int  (__stdcall * p_nbridge_Pie) (void *, int, int, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Pie( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8) {
    if (p_nbridge_Pie == NULL) {
        p_nbridge_Pie = (int  (__stdcall *) (void *, int, int, int, int, int, int, int, int)) FindFunction(libGdi32, "Pie");
    }
    return (jint) (* p_nbridge_Pie)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8);
}

void * (__stdcall * p_nbridge_GetClipboardOwner) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetClipboardOwner( JNIEnv *env, jobject self) {
    if (p_nbridge_GetClipboardOwner == NULL) {
        p_nbridge_GetClipboardOwner = (void * (__stdcall *) (void)) FindFunction(libUser32, "GetClipboardOwner");
    }
    return (jlong) (* p_nbridge_GetClipboardOwner)();
}

int  (__stdcall * p_nbridge_ShowWindow) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ShowWindow( JNIEnv *env, jobject self, jlong hWnd, jint nCmdShow) {
    if (p_nbridge_ShowWindow == NULL) {
        p_nbridge_ShowWindow = (int  (__stdcall *) (void *, int)) FindFunction(libUser32, "ShowWindow");
    }
    return (jint) (* p_nbridge_ShowWindow)((void *) hWnd, (int) nCmdShow);
}

int (__stdcall * p_nbridge_MapWindowPoints) (void *, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MapWindowPoints( JNIEnv *env, jobject self, jlong hWndFrom, jlong hWndTo, jlong lpPoints, jint cPoints) {
    if (p_nbridge_MapWindowPoints == NULL) {
        p_nbridge_MapWindowPoints = (int (__stdcall *) (void *, void *, void *, int)) FindFunction(libUser32, "MapWindowPoints");
    }
    return (jint) (* p_nbridge_MapWindowPoints)((void *) hWndFrom, (void *) hWndTo, (void *) lpPoints, (int) cPoints);
}

int (__stdcall * p_nbridge_ChoosePixelFormat) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ChoosePixelFormat( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_ChoosePixelFormat == NULL) {
        p_nbridge_ChoosePixelFormat = (int (__stdcall *) (void *, void *)) FindFunction(libGdi32, "ChoosePixelFormat");
    }
    return (jint) (* p_nbridge_ChoosePixelFormat)((void *) param_0, (void *) param_1);
}

int  (__stdcall * p_nbridge_PolyPolyline) (void *, void *, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PolyPolyline( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3) {
    if (p_nbridge_PolyPolyline == NULL) {
        p_nbridge_PolyPolyline = (int  (__stdcall *) (void *, void *, void *, long)) FindFunction(libGdi32, "PolyPolyline");
    }
    return (jint) (* p_nbridge_PolyPolyline)((void *) param_0, (void *) param_1, (void *) param_2, (long) param_3);
}

int (__stdcall * p_nbridge_GetRandomRgn) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetRandomRgn( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (p_nbridge_GetRandomRgn == NULL) {
        p_nbridge_GetRandomRgn = (int (__stdcall *) (void *, void *, int)) FindFunction(libGdi32, "GetRandomRgn");
    }
    return (jint) (* p_nbridge_GetRandomRgn)((void *) param_0, (void *) param_1, (int) param_2);
}

void * (__stdcall * p_nbridge_ExtCreatePen) (long, long, void *, long, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ExtCreatePen( JNIEnv *env, jobject self, jint param_0, jint param_1, jlong param_2, jint param_3, jlong param_4) {
    if (p_nbridge_ExtCreatePen == NULL) {
        p_nbridge_ExtCreatePen = (void * (__stdcall *) (long, long, void *, long, void *)) FindFunction(libGdi32, "ExtCreatePen");
    }
    return (jlong) (* p_nbridge_ExtCreatePen)((long) param_0, (long) param_1, (void *) param_2, (long) param_3, (void *) param_4);
}

long  (__stdcall * p_nbridge_ChangeDisplaySettingsExW) (void *, void *, void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ChangeDisplaySettingsExW( JNIEnv *env, jobject self, jlong lpszDeviceName, jlong lpDevMode, jlong hwnd, jint dwflags, jlong lParam) {
    if (p_nbridge_ChangeDisplaySettingsExW == NULL) {
        p_nbridge_ChangeDisplaySettingsExW = (long  (__stdcall *) (void *, void *, void *, long, void *)) FindFunction(libUser32, "ChangeDisplaySettingsExW");
    }
    return (jint) (* p_nbridge_ChangeDisplaySettingsExW)((void *) lpszDeviceName, (void *) lpDevMode, (void *) hwnd, (long) dwflags, (void *) lParam);
}

unsigned long  (__stdcall * p_nbridge_GetRegionData) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetRegionData( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (p_nbridge_GetRegionData == NULL) {
        p_nbridge_GetRegionData = (unsigned long  (__stdcall *) (void *, long, void *)) FindFunction(libGdi32, "GetRegionData");
    }
    return (jint) (* p_nbridge_GetRegionData)((void *) param_0, (long) param_1, (void *) param_2);
}

int  (__stdcall * p_nbridge_InflateRect) (void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_InflateRect( JNIEnv *env, jobject self, jlong lprc, jint dx, jint dy) {
    if (p_nbridge_InflateRect == NULL) {
        p_nbridge_InflateRect = (int  (__stdcall *) (void *, int, int)) FindFunction(libUser32, "InflateRect");
    }
    return (jint) (* p_nbridge_InflateRect)((void *) lprc, (int) dx, (int) dy);
}

unsigned long  (__stdcall * p_nbridge_SetBkColor) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetBkColor( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_SetBkColor == NULL) {
        p_nbridge_SetBkColor = (unsigned long  (__stdcall *) (void *, long)) FindFunction(libGdi32, "SetBkColor");
    }
    return (jint) (* p_nbridge_SetBkColor)((void *) param_0, (long) param_1);
}

void * (__stdcall * p_nbridge_GetAncestor) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetAncestor( JNIEnv *env, jobject self, jlong hwnd, jint gaFlags) {
    if (p_nbridge_GetAncestor == NULL) {
        p_nbridge_GetAncestor = (void * (__stdcall *) (void *, int)) FindFunction(libUser32, "GetAncestor");
    }
    return (jlong) (* p_nbridge_GetAncestor)((void *) hwnd, (int) gaFlags);
}

int  (__stdcall * p_nbridge_GetThemeSysBool) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysBool( JNIEnv *env, jobject self, jlong hTheme, jint iBoolId) {
    if (p_nbridge_GetThemeSysBool == NULL) {
        p_nbridge_GetThemeSysBool = (int  (__stdcall *) (void *, int)) FindFunction(libUxTheme, "GetThemeSysBool");
    }
    return (jint) (* p_nbridge_GetThemeSysBool)((void *) hTheme, (int) iBoolId);
}

int  (__stdcall * p_nbridge_TranslateMessage) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_TranslateMessage( JNIEnv *env, jobject self, jlong lpMsg) {
    if (p_nbridge_TranslateMessage == NULL) {
        p_nbridge_TranslateMessage = (int  (__stdcall *) (void *)) FindFunction(libUser32, "TranslateMessage");
    }
    return (jint) (* p_nbridge_TranslateMessage)((void *) lpMsg);
}

void * (__stdcall * p_nbridge_CreateSolidBrush) (long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateSolidBrush( JNIEnv *env, jobject self, jint param_0) {
    if (p_nbridge_CreateSolidBrush == NULL) {
        p_nbridge_CreateSolidBrush = (void * (__stdcall *) (long)) FindFunction(libGdi32, "CreateSolidBrush");
    }
    return (jlong) (* p_nbridge_CreateSolidBrush)((long) param_0);
}

void * (__stdcall * p_nbridge_OpenThemeData) (void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_OpenThemeData( JNIEnv *env, jobject self, jlong hwnd, jlong pszClassList) {
    if (p_nbridge_OpenThemeData == NULL) {
        p_nbridge_OpenThemeData = (void * (__stdcall *) (void *, void *)) FindFunction(libUxTheme, "OpenThemeData");
    }
    return (jlong) (* p_nbridge_OpenThemeData)((void *) hwnd, (void *) pszClassList);
}

int  (__stdcall * p_nbridge_GetWindowPlacement) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetWindowPlacement( JNIEnv *env, jobject self, jlong hWnd, jlong lpwndpl) {
    if (p_nbridge_GetWindowPlacement == NULL) {
        p_nbridge_GetWindowPlacement = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "GetWindowPlacement");
    }
    return (jint) (* p_nbridge_GetWindowPlacement)((void *) hWnd, (void *) lpwndpl);
}

int  (__stdcall * p_nbridge_ReleaseCapture) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ReleaseCapture( JNIEnv *env, jobject self) {
    if (p_nbridge_ReleaseCapture == NULL) {
        p_nbridge_ReleaseCapture = (int  (__stdcall *) (void)) FindFunction(libUser32, "ReleaseCapture");
    }
    return (jint) (* p_nbridge_ReleaseCapture)();
}

int (__stdcall * p_nbridge_MultiByteToWideChar) (int, long, void *, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MultiByteToWideChar( JNIEnv *env, jobject self, jint CodePage, jint dwFlags, jlong lpMultiByteStr, jint cbMultiByte, jlong lpWideCharStr, jint cchWideChar) {
    if (p_nbridge_MultiByteToWideChar == NULL) {
        p_nbridge_MultiByteToWideChar = (int (__stdcall *) (int, long, void *, int, void *, int)) FindFunction(libKernel32, "MultiByteToWideChar");
    }
    return (jint) (* p_nbridge_MultiByteToWideChar)((int) CodePage, (long) dwFlags, (void *) lpMultiByteStr, (int) cbMultiByte, (void *) lpWideCharStr, (int) cchWideChar);
}

int  (__stdcall * p_nbridge_PlaySoundW) (void *, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PlaySoundW( JNIEnv *env, jobject self, jlong pszSound, jlong hmod, jint fdwSound) {
    if (p_nbridge_PlaySoundW == NULL) {
        p_nbridge_PlaySoundW = (int  (__stdcall *) (void *, void *, long)) FindFunction(libWinmm, "PlaySoundW");
    }
    return (jint) (* p_nbridge_PlaySoundW)((void *) pszSound, (void *) hmod, (long) fdwSound);
}

int (__stdcall * p_nbridge_GetObjectW) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetObjectW( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (p_nbridge_GetObjectW == NULL) {
        p_nbridge_GetObjectW = (int (__stdcall *) (void *, int, void *)) FindFunction(libGdi32, "GetObjectW");
    }
    return (jint) (* p_nbridge_GetObjectW)((void *) param_0, (int) param_1, (void *) param_2);
}

void * (__stdcall * p_nbridge_LoadCursorW) (void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_LoadCursorW( JNIEnv *env, jobject self, jlong hInstance, jlong lpCursorName) {
    if (p_nbridge_LoadCursorW == NULL) {
        p_nbridge_LoadCursorW = (void * (__stdcall *) (void *, void *)) FindFunction(libUser32, "LoadCursorW");
    }
    return (jlong) (* p_nbridge_LoadCursorW)((void *) hInstance, (void *) lpCursorName);
}

long  (__stdcall * p_nbridge_EnableTheming) (int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EnableTheming( JNIEnv *env, jobject self, jint fEnable) {
    if (p_nbridge_EnableTheming == NULL) {
        p_nbridge_EnableTheming = (long  (__stdcall *) (int)) FindFunction(libUxTheme, "EnableTheming");
    }
    return (jint) (* p_nbridge_EnableTheming)((int) fEnable);
}

int  (__stdcall * p_nbridge_IsIconic) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_IsIconic( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_IsIconic == NULL) {
        p_nbridge_IsIconic = (int  (__stdcall *) (void *)) FindFunction(libUser32, "IsIconic");
    }
    return (jint) (* p_nbridge_IsIconic)((void *) hWnd);
}

int  (__stdcall * p_nbridge_EnableWindow) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EnableWindow( JNIEnv *env, jobject self, jlong hWnd, jint bEnable) {
    if (p_nbridge_EnableWindow == NULL) {
        p_nbridge_EnableWindow = (int  (__stdcall *) (void *, int)) FindFunction(libUser32, "EnableWindow");
    }
    return (jint) (* p_nbridge_EnableWindow)((void *) hWnd, (int) bEnable);
}

int  (__stdcall * p_nbridge_PostMessageW) (void *, int, WPARAM, LONG_PTR) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PostMessageW( JNIEnv *env, jobject self, jlong hWnd, jint Msg, jlong wParam, jlong lParam) {
    if (p_nbridge_PostMessageW == NULL) {
        p_nbridge_PostMessageW = (int  (__stdcall *) (void *, int, WPARAM, LONG_PTR)) FindFunction(libUser32, "PostMessageW");
    }
    return (jint) (* p_nbridge_PostMessageW)((void *) hWnd, (int) Msg, (WPARAM) wParam, (LONG_PTR) lParam);
}

void * (__stdcall * p_nbridge_GlobalLock) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GlobalLock( JNIEnv *env, jobject self, jlong hMem) {
    if (p_nbridge_GlobalLock == NULL) {
        p_nbridge_GlobalLock = (void * (__stdcall *) (void *)) FindFunction(libKernel32, "GlobalLock");
    }
    return (jlong) (* p_nbridge_GlobalLock)((void *) hMem);
}

int (__stdcall * p_nbridge_ReleaseDC) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ReleaseDC( JNIEnv *env, jobject self, jlong hWnd, jlong hDC) {
    if (p_nbridge_ReleaseDC == NULL) {
        p_nbridge_ReleaseDC = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "ReleaseDC");
    }
    return (jint) (* p_nbridge_ReleaseDC)((void *) hWnd, (void *) hDC);
}

int (__stdcall * p_nbridge_GetKeyboardLayoutList) (int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetKeyboardLayoutList( JNIEnv *env, jobject self, jint nBuff, jlong lpList) {
    if (p_nbridge_GetKeyboardLayoutList == NULL) {
        p_nbridge_GetKeyboardLayoutList = (int (__stdcall *) (int, void *)) FindFunction(libUser32, "GetKeyboardLayoutList");
    }
    return (jint) (* p_nbridge_GetKeyboardLayoutList)((int) nBuff, (void *) lpList);
}

void * (__stdcall * p_nbridge_SelectObject) (void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SelectObject( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (p_nbridge_SelectObject == NULL) {
        p_nbridge_SelectObject = (void * (__stdcall *) (void *, void *)) FindFunction(libGdi32, "SelectObject");
    }
    return (jlong) (* p_nbridge_SelectObject)((void *) param_0, (void *) param_1);
}

void * (__stdcall * p_nbridge_GetKeyboardLayout) (long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetKeyboardLayout( JNIEnv *env, jobject self, jint idThread) {
    if (p_nbridge_GetKeyboardLayout == NULL) {
        p_nbridge_GetKeyboardLayout = (void * (__stdcall *) (long)) FindFunction(libUser32, "GetKeyboardLayout");
    }
    return (jlong) (* p_nbridge_GetKeyboardLayout)((long) idThread);
}

int  (__stdcall * p_nbridge_GetWindowRect) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetWindowRect( JNIEnv *env, jobject self, jlong hWnd, jlong lpRect) {
    if (p_nbridge_GetWindowRect == NULL) {
        p_nbridge_GetWindowRect = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "GetWindowRect");
    }
    return (jint) (* p_nbridge_GetWindowRect)((void *) hWnd, (void *) lpRect);
}

int  (__stdcall * p_nbridge_DrawEdge) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DrawEdge( JNIEnv *env, jobject self, jlong hdc, jlong qrc, jint edge, jint grfFlags) {
    if (p_nbridge_DrawEdge == NULL) {
        p_nbridge_DrawEdge = (int  (__stdcall *) (void *, void *, int, int)) FindFunction(libUser32, "DrawEdge");
    }
    return (jint) (* p_nbridge_DrawEdge)((void *) hdc, (void *) qrc, (int) edge, (int) grfFlags);
}

int  (__stdcall * p_nbridge_GetMessageW) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetMessageW( JNIEnv *env, jobject self, jlong lpMsg, jlong hWnd, jint wMsgFilterMin, jint wMsgFilterMax) {
    if (p_nbridge_GetMessageW == NULL) {
        p_nbridge_GetMessageW = (int  (__stdcall *) (void *, void *, int, int)) FindFunction(libUser32, "GetMessageW");
    }
    return (jint) (* p_nbridge_GetMessageW)((void *) lpMsg, (void *) hWnd, (int) wMsgFilterMin, (int) wMsgFilterMax);
}

int (__stdcall * p_nbridge_GetPixelFormat) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetPixelFormat( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_GetPixelFormat == NULL) {
        p_nbridge_GetPixelFormat = (int (__stdcall *) (void *)) FindFunction(libGdi32, "GetPixelFormat");
    }
    return (jint) (* p_nbridge_GetPixelFormat)((void *) param_0);
}

void * (__stdcall * p_nbridge_SetClipboardData) (int, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetClipboardData( JNIEnv *env, jobject self, jint uFormat, jlong hMem) {
    if (p_nbridge_SetClipboardData == NULL) {
        p_nbridge_SetClipboardData = (void * (__stdcall *) (int, void *)) FindFunction(libUser32, "SetClipboardData");
    }
    return (jlong) (* p_nbridge_SetClipboardData)((int) uFormat, (void *) hMem);
}

int (__stdcall * p_nbridge_MulDiv) (int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MulDiv( JNIEnv *env, jobject self, jint nNumber, jint nNumerator, jint nDenominator) {
    if (p_nbridge_MulDiv == NULL) {
        p_nbridge_MulDiv = (int (__stdcall *) (int, int, int)) FindFunction(libKernel32, "MulDiv");
    }
    return (jint) (* p_nbridge_MulDiv)((int) nNumber, (int) nNumerator, (int) nDenominator);
}

void * (__stdcall * p_nbridge_CreateBitmap) (int, int, int, int, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateBitmap( JNIEnv *env, jobject self, jint param_0, jint param_1, jint param_2, jint param_3, jlong param_4) {
    if (p_nbridge_CreateBitmap == NULL) {
        p_nbridge_CreateBitmap = (void * (__stdcall *) (int, int, int, int, void *)) FindFunction(libGdi32, "CreateBitmap");
    }
    return (jlong) (* p_nbridge_CreateBitmap)((int) param_0, (int) param_1, (int) param_2, (int) param_3, (void *) param_4);
}

int (__stdcall * p_nbridge_GetClipboardFormatNameW) (int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetClipboardFormatNameW( JNIEnv *env, jobject self, jint format, jlong lpszFormatName, jint cchMaxCount) {
    if (p_nbridge_GetClipboardFormatNameW == NULL) {
        p_nbridge_GetClipboardFormatNameW = (int (__stdcall *) (int, void *, int)) FindFunction(libUser32, "GetClipboardFormatNameW");
    }
    return (jint) (* p_nbridge_GetClipboardFormatNameW)((int) format, (void *) lpszFormatName, (int) cchMaxCount);
}

int  (__stdcall * p_nbridge_SetWindowPos) (void *, void *, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetWindowPos( JNIEnv *env, jobject self, jlong hWnd, jlong hWndInsertAfter, jint X, jint Y, jint cx, jint cy, jint uFlags) {
    if (p_nbridge_SetWindowPos == NULL) {
        p_nbridge_SetWindowPos = (int  (__stdcall *) (void *, void *, int, int, int, int, int)) FindFunction(libUser32, "SetWindowPos");
    }
    return (jint) (* p_nbridge_SetWindowPos)((void *) hWnd, (void *) hWndInsertAfter, (int) X, (int) Y, (int) cx, (int) cy, (int) uFlags);
}

int  (__stdcall * p_nbridge_ImmSetOpenStatus) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmSetOpenStatus( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_ImmSetOpenStatus == NULL) {
        p_nbridge_ImmSetOpenStatus = (int  (__stdcall *) (void *, int)) FindFunction(libImm32, "ImmSetOpenStatus");
    }
    return (jint) (* p_nbridge_ImmSetOpenStatus)((void *) param_0, (int) param_1);
}

int  (__stdcall * p_nbridge_SetCaretPos) (int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetCaretPos( JNIEnv *env, jobject self, jint X, jint Y) {
    if (p_nbridge_SetCaretPos == NULL) {
        p_nbridge_SetCaretPos = (int  (__stdcall *) (int, int)) FindFunction(libUser32, "SetCaretPos");
    }
    return (jint) (* p_nbridge_SetCaretPos)((int) X, (int) Y);
}

int  (__stdcall * p_nbridge_GetOpenFileNameW) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetOpenFileNameW( JNIEnv *env, jobject self, jlong param_0) {
    if (p_nbridge_GetOpenFileNameW == NULL) {
        p_nbridge_GetOpenFileNameW = (int  (__stdcall *) (void *)) FindFunction(libcomdlg32, "GetOpenFileNameW");
    }
    return (jint) (* p_nbridge_GetOpenFileNameW)((void *) param_0);
}

void * (__stdcall * p_nbridge_CreateDIBSection) (void *, void *, int, void *, void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateDIBSection( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3, jlong param_4, jint param_5) {
    if (p_nbridge_CreateDIBSection == NULL) {
        p_nbridge_CreateDIBSection = (void * (__stdcall *) (void *, void *, int, void *, void *, long)) FindFunction(libGdi32, "CreateDIBSection");
    }
    return (jlong) (* p_nbridge_CreateDIBSection)((void *) param_0, (void *) param_1, (int) param_2, (void *) param_3, (void *) param_4, (long) param_5);
}

int (__stdcall * p_nbridge_SetBkMode) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetBkMode( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (p_nbridge_SetBkMode == NULL) {
        p_nbridge_SetBkMode = (int (__stdcall *) (void *, int)) FindFunction(libGdi32, "SetBkMode");
    }
    return (jint) (* p_nbridge_SetBkMode)((void *) param_0, (int) param_1);
}

int  (__stdcall * p_nbridge_Rectangle) (void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Rectangle( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4) {
    if (p_nbridge_Rectangle == NULL) {
        p_nbridge_Rectangle = (int  (__stdcall *) (void *, int, int, int, int)) FindFunction(libGdi32, "Rectangle");
    }
    return (jint) (* p_nbridge_Rectangle)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4);
}

unsigned int  (__stdcall * p_nbridge_GetDoubleClickTime) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetDoubleClickTime( JNIEnv *env, jobject self) {
    if (p_nbridge_GetDoubleClickTime == NULL) {
        p_nbridge_GetDoubleClickTime = (unsigned int  (__stdcall *) (void)) FindFunction(libUser32, "GetDoubleClickTime");
    }
    return (jint) (* p_nbridge_GetDoubleClickTime)();
}

int  (__stdcall * p_nbridge_GetClientRect) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetClientRect( JNIEnv *env, jobject self, jlong hWnd, jlong lpRect) {
    if (p_nbridge_GetClientRect == NULL) {
        p_nbridge_GetClientRect = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "GetClientRect");
    }
    return (jint) (* p_nbridge_GetClientRect)((void *) hWnd, (void *) lpRect);
}

int  (__stdcall * p_nbridge_UpdateWindow) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_UpdateWindow( JNIEnv *env, jobject self, jlong hWnd) {
    if (p_nbridge_UpdateWindow == NULL) {
        p_nbridge_UpdateWindow = (int  (__stdcall *) (void *)) FindFunction(libUser32, "UpdateWindow");
    }
    return (jint) (* p_nbridge_UpdateWindow)((void *) hWnd);
}

void * (__stdcall * p_nbridge_GlobalAlloc) (int, SIZE_T) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GlobalAlloc( JNIEnv *env, jobject self, jint uFlags, jlong dwBytes) {
    if (p_nbridge_GlobalAlloc == NULL) {
        p_nbridge_GlobalAlloc = (void * (__stdcall *) (int, SIZE_T)) FindFunction(libKernel32, "GlobalAlloc");
    }
    return (jlong) (* p_nbridge_GlobalAlloc)((int) uFlags, (SIZE_T) dwBytes);
}

int  (__stdcall * p_nbridge_ChangeClipboardChain) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ChangeClipboardChain( JNIEnv *env, jobject self, jlong hWndRemove, jlong hWndNewNext) {
    if (p_nbridge_ChangeClipboardChain == NULL) {
        p_nbridge_ChangeClipboardChain = (int  (__stdcall *) (void *, void *)) FindFunction(libUser32, "ChangeClipboardChain");
    }
    return (jint) (* p_nbridge_ChangeClipboardChain)((void *) hWndRemove, (void *) hWndNewNext);
}

int  (__stdcall * p_nbridge_OpenClipboard) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_OpenClipboard( JNIEnv *env, jobject self, jlong hWndNewOwner) {
    if (p_nbridge_OpenClipboard == NULL) {
        p_nbridge_OpenClipboard = (int  (__stdcall *) (void *)) FindFunction(libUser32, "OpenClipboard");
    }
    return (jint) (* p_nbridge_OpenClipboard)((void *) hWndNewOwner);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall31( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall32( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall33( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall34( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall35( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jint param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, long, long, long, void *)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (long) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall36( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (long) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall37( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jint param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, long, long, long, void *)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (long) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall38( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall39( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall40( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall41( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall42( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall43( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall44( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall45( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall46( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall47( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall48( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall49( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall50( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall51( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall52( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall53( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall54( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall55( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall56( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall57( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall58( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall59( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5) {
    return (jint)((long  (__stdcall *) (void *, long, long, long, long, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (long) param_3, (long) param_4, (long) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall60( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall61( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall62( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall63( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall64( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall65( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall66( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2, jint param_3) {
    return (jint)((long  (__stdcall *) (void *, void *, long, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2, (long) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall67( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall68( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall69( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall70( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall71( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall72( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall73( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall74( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall75( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall76( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall77( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall78( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall79( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall80( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall81( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall82( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall83( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall84( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall85( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall86( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall87( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall88( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall89( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall90( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall91( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall92( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall93( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall94( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall95( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall96( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall97( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall98( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jint param_3) {
    return (jint)((long  (__stdcall *) (void *, long, long, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (long) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall99( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall100( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObject) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObject);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall101( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall102( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall103( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint celt, jlong rgelt, jlong pceltFetched) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) celt, (void *) rgelt, (void *) pceltFetched);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall104( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint celt) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) celt);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall105( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall106( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong ppenum) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) ppenum);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall107( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall108( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall109( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall110( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall111( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall112( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3, jint param_4, jlong param_5) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall113( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2, jint param_3) {
    return (jint)((long  (__stdcall *) (void *, void *, long, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2, (long) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall114( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jlong param_3, jlong param_4, jint param_5) {
    return (jint)((long  (__stdcall *) (void *, long, long, void *, void *, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (void *) param_3, (void *) param_4, (long) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall115( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall116( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall117( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall118( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall119( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall120( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall121( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall122( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall123( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall124( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall125( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall126( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall127( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall128( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall129( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall130( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall131( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall132( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jint param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (long) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall133( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall134( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall135( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall136( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall137( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, long, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall138( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall139( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall140( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3, jint param_4, jlong param_5) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall141( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall142( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall143( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall144( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall145( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall146( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall147( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jint param_3, jint param_4) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, long, long)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (long) param_3, (long) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall148( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall149( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall150( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall151( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall152( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall153( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall154( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall155( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall156( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall157( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall158( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((unsigned long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall159( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall160( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall161( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3, jint param_4, jlong param_5) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall162( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2, jint param_3) {
    return (jint)((long  (__stdcall *) (void *, void *, long, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2, (long) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall163( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jlong param_3, jlong param_4, jint param_5) {
    return (jint)((long  (__stdcall *) (void *, long, long, void *, void *, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (void *) param_3, (void *) param_4, (long) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall164( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall165( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall166( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3) {
    return (jint)((long  (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall167( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall168( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall169( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall170( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall171( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall172( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall173( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall174( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall175( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall176( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall177( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall178( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall179( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall180( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall181( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jint param_3, jlong param_4) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (long) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall182( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall183( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long  (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall184( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall185( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall186( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2) {
    return (jint)((long  (__stdcall *) (void *, long, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall187( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall188( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long  (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall189( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3, jint param_4, jlong param_5) {
    return (jint)((long  (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall190( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long  (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall191( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long  (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}


