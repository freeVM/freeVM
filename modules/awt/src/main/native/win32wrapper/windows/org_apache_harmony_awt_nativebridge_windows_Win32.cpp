/*
 *  Copyright 2005 - 2006 The Apache Software Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Pavel Dolgov
 * @version $Revision$
 */

/* DO NOT EDIT THIS FILE - it is machine generated */

#include "org_apache_harmony_awt_nativebridge_windows_Win32.h"

static libHandler libGdiPlus;
static libHandler libShell32;
static libHandler libDDraw;
static libHandler libShlwapi;
static libHandler libGdi32;
static libHandler libUxTheme;
static libHandler libImm32;
static libHandler libKernel32;
static libHandler libOle32;
static libHandler libUser32;
JNIEXPORT void JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_init (JNIEnv * env, jclass cls) {
    LOAD_LIB(libGdiPlus, "GdiPlus");
    LOAD_LIB(libShell32, "Shell32");
    LOAD_LIB(libDDraw, "DDraw");
    LOAD_LIB(libShlwapi, "Shlwapi");
    LOAD_LIB(libGdi32, "Gdi32");
    LOAD_LIB(libUxTheme, "UxTheme");
    LOAD_LIB(libImm32, "Imm32");
    LOAD_LIB(libKernel32, "Kernel32");
    LOAD_LIB(libOle32, "Ole32");
    LOAD_LIB(libUser32, "User32");
}


int (__stdcall * pFillRect) (void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_FillRect( JNIEnv *env, jobject self, jlong hDC, jlong lprc, jlong hbr) {
    if (pFillRect == NULL) {
        pFillRect = (int (__stdcall *) (void *, void *, void *)) FindFunction(libUser32, "FillRect");
    }
    return (jint) (* pFillRect)((void *) hDC, (void *) lprc, (void *) hbr);
}

int (__stdcall * pLineTo) (void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_LineTo( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2) {
    if (pLineTo == NULL) {
        pLineTo = (int (__stdcall *) (void *, int, int)) FindFunction(libGdi32, "LineTo");
    }
    return (jint) (* pLineTo)((void *) param_0, (int) param_1, (int) param_2);
}

long (__stdcall * pGetWindowLongW) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetWindowLongW( JNIEnv *env, jobject self, jlong hWnd, jint nIndex) {
    if (pGetWindowLongW == NULL) {
        pGetWindowLongW = (long (__stdcall *) (void *, int)) FindFunction(libUser32, "GetWindowLongW");
    }
    return (jint) (* pGetWindowLongW)((void *) hWnd, (int) nIndex);
}

int (__stdcall * pPeekMessageW) (void *, void *, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PeekMessageW( JNIEnv *env, jobject self, jlong lpMsg, jlong hWnd, jint wMsgFilterMin, jint wMsgFilterMax, jint wRemoveMsg) {
    if (pPeekMessageW == NULL) {
        pPeekMessageW = (int (__stdcall *) (void *, void *, int, int, int)) FindFunction(libUser32, "PeekMessageW");
    }
    return (jint) (* pPeekMessageW)((void *) lpMsg, (void *) hWnd, (int) wMsgFilterMin, (int) wMsgFilterMax, (int) wRemoveMsg);
}

int (__stdcall * pBitBlt) (void *, int, int, int, int, void *, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_BitBlt( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jlong param_5, jint param_6, jint param_7, jint param_8) {
    if (pBitBlt == NULL) {
        pBitBlt = (int (__stdcall *) (void *, int, int, int, int, void *, int, int, long)) FindFunction(libGdi32, "BitBlt");
    }
    return (jint) (* pBitBlt)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (void *) param_5, (int) param_6, (int) param_7, (long) param_8);
}

int (__stdcall * pCreateCaret) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateCaret( JNIEnv *env, jobject self, jlong hWnd, jlong hBitmap, jint nWidth, jint nHeight) {
    if (pCreateCaret == NULL) {
        pCreateCaret = (int (__stdcall *) (void *, void *, int, int)) FindFunction(libUser32, "CreateCaret");
    }
    return (jint) (* pCreateCaret)((void *) hWnd, (void *) hBitmap, (int) nWidth, (int) nHeight);
}

int (__stdcall * pImmDestroyContext) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmDestroyContext( JNIEnv *env, jobject self, jlong param_0) {
    if (pImmDestroyContext == NULL) {
        pImmDestroyContext = (int (__stdcall *) (void *)) FindFunction(libImm32, "ImmDestroyContext");
    }
    return (jint) (* pImmDestroyContext)((void *) param_0);
}

long (__stdcall * pImmGetCompositionStringW) (void *, long, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmGetCompositionStringW( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2, jint param_3) {
    if (pImmGetCompositionStringW == NULL) {
        pImmGetCompositionStringW = (long (__stdcall *) (void *, long, void *, long)) FindFunction(libImm32, "ImmGetCompositionStringW");
    }
    return (jint) (* pImmGetCompositionStringW)((void *) param_0, (long) param_1, (void *) param_2, (long) param_3);
}

int (__stdcall * pGetSystemMetrics) (int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetSystemMetrics( JNIEnv *env, jobject self, jint nIndex) {
    if (pGetSystemMetrics == NULL) {
        pGetSystemMetrics = (int (__stdcall *) (int)) FindFunction(libUser32, "GetSystemMetrics");
    }
    return (jint) (* pGetSystemMetrics)((int) nIndex);
}

int (__stdcall * pSetForegroundWindow) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetForegroundWindow( JNIEnv *env, jobject self, jlong hWnd) {
    if (pSetForegroundWindow == NULL) {
        pSetForegroundWindow = (int (__stdcall *) (void *)) FindFunction(libUser32, "SetForegroundWindow");
    }
    return (jint) (* pSetForegroundWindow)((void *) hWnd);
}

LONG_PTR (__stdcall * pSendMessageW) (void *, int, WPARAM, LONG_PTR) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SendMessageW( JNIEnv *env, jobject self, jlong hWnd, jint Msg, jlong wParam, jlong lParam) {
    if (pSendMessageW == NULL) {
        pSendMessageW = (LONG_PTR (__stdcall *) (void *, int, WPARAM, LONG_PTR)) FindFunction(libUser32, "SendMessageW");
    }
    return (jlong) (* pSendMessageW)((void *) hWnd, (int) Msg, (WPARAM) wParam, (LONG_PTR) lParam);
}

long (__stdcall * pGetThemeSysFont) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysFont( JNIEnv *env, jobject self, jlong hTheme, jint iFontId, jlong plf) {
    if (pGetThemeSysFont == NULL) {
        pGetThemeSysFont = (long (__stdcall *) (void *, int, void *)) FindFunction(libUxTheme, "GetThemeSysFont");
    }
    return (jint) (* pGetThemeSysFont)((void *) hTheme, (int) iFontId, (void *) plf);
}

int (__stdcall * pSystemParametersInfoW) (int, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SystemParametersInfoW( JNIEnv *env, jobject self, jint uiAction, jint uiParam, jlong pvParam, jint fWinIni) {
    if (pSystemParametersInfoW == NULL) {
        pSystemParametersInfoW = (int (__stdcall *) (int, int, void *, int)) FindFunction(libUser32, "SystemParametersInfoW");
    }
    return (jint) (* pSystemParametersInfoW)((int) uiAction, (int) uiParam, (void *) pvParam, (int) fWinIni);
}

int (__stdcall * pGetCaretBlinkTime) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetCaretBlinkTime( JNIEnv *env, jobject self) {
    if (pGetCaretBlinkTime == NULL) {
        pGetCaretBlinkTime = (int (__stdcall *) (void)) FindFunction(libUser32, "GetCaretBlinkTime");
    }
    return (jint) (* pGetCaretBlinkTime)();
}

void * (__stdcall * pCreateDCW) (void *, void *, void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateDCW( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jlong param_3) {
    if (pCreateDCW == NULL) {
        pCreateDCW = (void * (__stdcall *) (void *, void *, void *, void *)) FindFunction(libGdi32, "CreateDCW");
    }
    return (jlong) (* pCreateDCW)((void *) param_0, (void *) param_1, (void *) param_2, (void *) param_3);
}

int (__stdcall * pArc) (void *, int, int, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Arc( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8) {
    if (pArc == NULL) {
        pArc = (int (__stdcall *) (void *, int, int, int, int, int, int, int, int)) FindFunction(libGdi32, "Arc");
    }
    return (jint) (* pArc)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8);
}

int (__stdcall * pImmReleaseContext) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmReleaseContext( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pImmReleaseContext == NULL) {
        pImmReleaseContext = (int (__stdcall *) (void *, void *)) FindFunction(libImm32, "ImmReleaseContext");
    }
    return (jint) (* pImmReleaseContext)((void *) param_0, (void *) param_1);
}

int (__stdcall * pPolyPolygon) (void *, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PolyPolygon( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3) {
    if (pPolyPolygon == NULL) {
        pPolyPolygon = (int (__stdcall *) (void *, void *, void *, int)) FindFunction(libGdi32, "PolyPolygon");
    }
    return (jint) (* pPolyPolygon)((void *) param_0, (void *) param_1, (void *) param_2, (int) param_3);
}

void * (__stdcall * pCreatePen) (int, int, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreatePen( JNIEnv *env, jobject self, jint param_0, jint param_1, jint param_2) {
    if (pCreatePen == NULL) {
        pCreatePen = (void * (__stdcall *) (int, int, long)) FindFunction(libGdi32, "CreatePen");
    }
    return (jlong) (* pCreatePen)((int) param_0, (int) param_1, (long) param_2);
}

short (__stdcall * pGetKeyState) (int) = NULL;

JNIEXPORT jshort  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetKeyState( JNIEnv *env, jobject self, jint nVirtKey) {
    if (pGetKeyState == NULL) {
        pGetKeyState = (short (__stdcall *) (int)) FindFunction(libUser32, "GetKeyState");
    }
    return (jshort) (* pGetKeyState)((int) nVirtKey);
}

void * (__stdcall * pCreateIconIndirect) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateIconIndirect( JNIEnv *env, jobject self, jlong piconinfo) {
    if (pCreateIconIndirect == NULL) {
        pCreateIconIndirect = (void * (__stdcall *) (void *)) FindFunction(libUser32, "CreateIconIndirect");
    }
    return (jlong) (* pCreateIconIndirect)((void *) piconinfo);
}

int (__stdcall * pRoundRect) (void *, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_RoundRect( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6) {
    if (pRoundRect == NULL) {
        pRoundRect = (int (__stdcall *) (void *, int, int, int, int, int, int)) FindFunction(libGdi32, "RoundRect");
    }
    return (jint) (* pRoundRect)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6);
}

void * (__stdcall * pExtCreateRegion) (void *, long, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ExtCreateRegion( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (pExtCreateRegion == NULL) {
        pExtCreateRegion = (void * (__stdcall *) (void *, long, void *)) FindFunction(libGdi32, "ExtCreateRegion");
    }
    return (jlong) (* pExtCreateRegion)((void *) param_0, (long) param_1, (void *) param_2);
}

long (__stdcall * pGetThemeSysInt) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysInt( JNIEnv *env, jobject self, jlong hTheme, jint iIntId, jlong piValue) {
    if (pGetThemeSysInt == NULL) {
        pGetThemeSysInt = (long (__stdcall *) (void *, int, void *)) FindFunction(libUxTheme, "GetThemeSysInt");
    }
    return (jint) (* pGetThemeSysInt)((void *) hTheme, (int) iIntId, (void *) piValue);
}

int (__stdcall * pTrackMouseEvent) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_TrackMouseEvent( JNIEnv *env, jobject self, jlong lpEventTrack) {
    if (pTrackMouseEvent == NULL) {
        pTrackMouseEvent = (int (__stdcall *) (void *)) FindFunction(libUser32, "TrackMouseEvent");
    }
    return (jint) (* pTrackMouseEvent)((void *) lpEventTrack);
}

void * (__stdcall * pCreateWindowExW) (long, void *, void *, long, int, int, int, int, void *, void *, void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateWindowExW( JNIEnv *env, jobject self, jint dwExStyle, jlong lpClassName, jlong lpWindowName, jint dwStyle, jint X, jint Y, jint nWidth, jint nHeight, jlong hWndParent, jlong hMenu, jlong hInstance, jlong lpParam) {
    if (pCreateWindowExW == NULL) {
        pCreateWindowExW = (void * (__stdcall *) (long, void *, void *, long, int, int, int, int, void *, void *, void *, void *)) FindFunction(libUser32, "CreateWindowExW");
    }
    return (jlong) (* pCreateWindowExW)((long) dwExStyle, (void *) lpClassName, (void *) lpWindowName, (long) dwStyle, (int) X, (int) Y, (int) nWidth, (int) nHeight, (void *) hWndParent, (void *) hMenu, (void *) hInstance, (void *) lpParam);
}

void * (__stdcall * pSetClipboardViewer) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetClipboardViewer( JNIEnv *env, jobject self, jlong hWndNewViewer) {
    if (pSetClipboardViewer == NULL) {
        pSetClipboardViewer = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetClipboardViewer");
    }
    return (jlong) (* pSetClipboardViewer)((void *) hWndNewViewer);
}

int (__stdcall * pEllipse) (void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Ellipse( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4) {
    if (pEllipse == NULL) {
        pEllipse = (int (__stdcall *) (void *, int, int, int, int)) FindFunction(libGdi32, "Ellipse");
    }
    return (jint) (* pEllipse)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4);
}

long (__stdcall * pGetLastError) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetLastError( JNIEnv *env, jobject self) {
    if (pGetLastError == NULL) {
        pGetLastError = (long (__stdcall *) (void)) FindFunction(libKernel32, "GetLastError");
    }
    return (jint) (* pGetLastError)();
}

void * (__stdcall * pImmAssociateContext) (void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmAssociateContext( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pImmAssociateContext == NULL) {
        pImmAssociateContext = (void * (__stdcall *) (void *, void *)) FindFunction(libImm32, "ImmAssociateContext");
    }
    return (jlong) (* pImmAssociateContext)((void *) param_0, (void *) param_1);
}

void * (__stdcall * pImmGetContext) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmGetContext( JNIEnv *env, jobject self, jlong param_0) {
    if (pImmGetContext == NULL) {
        pImmGetContext = (void * (__stdcall *) (void *)) FindFunction(libImm32, "ImmGetContext");
    }
    return (jlong) (* pImmGetContext)((void *) param_0);
}

long (__stdcall * pGetPixel) (void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetPixel( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2) {
    if (pGetPixel == NULL) {
        pGetPixel = (long (__stdcall *) (void *, int, int)) FindFunction(libGdi32, "GetPixel");
    }
    return (jint) (* pGetPixel)((void *) param_0, (int) param_1, (int) param_2);
}

void * (__stdcall * pGetDC) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetDC( JNIEnv *env, jobject self, jlong hWnd) {
    if (pGetDC == NULL) {
        pGetDC = (void * (__stdcall *) (void *)) FindFunction(libUser32, "GetDC");
    }
    return (jlong) (* pGetDC)((void *) hWnd);
}

int (__stdcall * pGetBkMode) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetBkMode( JNIEnv *env, jobject self, jlong param_0) {
    if (pGetBkMode == NULL) {
        pGetBkMode = (int (__stdcall *) (void *)) FindFunction(libGdi32, "GetBkMode");
    }
    return (jint) (* pGetBkMode)((void *) param_0);
}

void * (__stdcall * pGetStockObject) (int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetStockObject( JNIEnv *env, jobject self, jint param_0) {
    if (pGetStockObject == NULL) {
        pGetStockObject = (void * (__stdcall *) (int)) FindFunction(libGdi32, "GetStockObject");
    }
    return (jlong) (* pGetStockObject)((int) param_0);
}

int (__stdcall * pValidateRgn) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ValidateRgn( JNIEnv *env, jobject self, jlong hWnd, jlong hRgn) {
    if (pValidateRgn == NULL) {
        pValidateRgn = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "ValidateRgn");
    }
    return (jint) (* pValidateRgn)((void *) hWnd, (void *) hRgn);
}

void (__stdcall * pkeybd_event) (char, char, long, ULONG_PTR) = NULL;

JNIEXPORT void  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_keybd_1event( JNIEnv *env, jobject self, jbyte bVk, jbyte bScan, jint dwFlags, jlong dwExtraInfo) {
    if (pkeybd_event == NULL) {
        pkeybd_event = (void (__stdcall *) (char, char, long, ULONG_PTR)) FindFunction(libUser32, "keybd_event");
    }
    (* pkeybd_event)((char) bVk, (char) bScan, (long) dwFlags, (ULONG_PTR) dwExtraInfo);
}

long (__stdcall * pDrawThemeBackground) (void *, void *, int, int, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DrawThemeBackground( JNIEnv *env, jobject self, jlong hTheme, jlong hdc, jint iPartId, jint iStateId, jlong pRect, jlong pClipRect) {
    if (pDrawThemeBackground == NULL) {
        pDrawThemeBackground = (long (__stdcall *) (void *, void *, int, int, void *, void *)) FindFunction(libUxTheme, "DrawThemeBackground");
    }
    return (jint) (* pDrawThemeBackground)((void *) hTheme, (void *) hdc, (int) iPartId, (int) iStateId, (void *) pRect, (void *) pClipRect);
}

int (__stdcall * pGetMonitorInfoW) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetMonitorInfoW( JNIEnv *env, jobject self, jlong hMonitor, jlong lpmi) {
    if (pGetMonitorInfoW == NULL) {
        pGetMonitorInfoW = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "GetMonitorInfoW");
    }
    return (jint) (* pGetMonitorInfoW)((void *) hMonitor, (void *) lpmi);
}

long (__stdcall * pGetCurrentThreadId) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetCurrentThreadId( JNIEnv *env, jobject self) {
    if (pGetCurrentThreadId == NULL) {
        pGetCurrentThreadId = (long (__stdcall *) (void)) FindFunction(libKernel32, "GetCurrentThreadId");
    }
    return (jint) (* pGetCurrentThreadId)();
}

int (__stdcall * pDeleteDC) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DeleteDC( JNIEnv *env, jobject self, jlong param_0) {
    if (pDeleteDC == NULL) {
        pDeleteDC = (int (__stdcall *) (void *)) FindFunction(libGdi32, "DeleteDC");
    }
    return (jint) (* pDeleteDC)((void *) param_0);
}

ULONG_PTR (__stdcall * pSHGetFileInfoW) (void *, long, void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHGetFileInfoW( JNIEnv *env, jobject self, jlong pszPath, jint dwFileAttributes, jlong psfi, jint cbFileInfo, jint uFlags) {
    if (pSHGetFileInfoW == NULL) {
        pSHGetFileInfoW = (ULONG_PTR (__stdcall *) (void *, long, void *, int, int)) FindFunction(libShell32, "SHGetFileInfoW");
    }
    return (jlong) (* pSHGetFileInfoW)((void *) pszPath, (long) dwFileAttributes, (void *) psfi, (int) cbFileInfo, (int) uFlags);
}

LONG_PTR (__stdcall * pDispatchMessageW) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DispatchMessageW( JNIEnv *env, jobject self, jlong lpMsg) {
    if (pDispatchMessageW == NULL) {
        pDispatchMessageW = (LONG_PTR (__stdcall *) (void *)) FindFunction(libUser32, "DispatchMessageW");
    }
    return (jlong) (* pDispatchMessageW)((void *) lpMsg);
}

int (__stdcall * pPostThreadMessageW) (long, int, WPARAM, LONG_PTR) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PostThreadMessageW( JNIEnv *env, jobject self, jint idThread, jint Msg, jlong wParam, jlong lParam) {
    if (pPostThreadMessageW == NULL) {
        pPostThreadMessageW = (int (__stdcall *) (long, int, WPARAM, LONG_PTR)) FindFunction(libUser32, "PostThreadMessageW");
    }
    return (jint) (* pPostThreadMessageW)((long) idThread, (int) Msg, (WPARAM) wParam, (LONG_PTR) lParam);
}

long (__stdcall * pGetSysColor) (int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetSysColor( JNIEnv *env, jobject self, jint nIndex) {
    if (pGetSysColor == NULL) {
        pGetSysColor = (long (__stdcall *) (int)) FindFunction(libUser32, "GetSysColor");
    }
    return (jint) (* pGetSysColor)((int) nIndex);
}

void * (__stdcall * pGetSystemMenu) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetSystemMenu( JNIEnv *env, jobject self, jlong hWnd, jint bRevert) {
    if (pGetSystemMenu == NULL) {
        pGetSystemMenu = (void * (__stdcall *) (void *, int)) FindFunction(libUser32, "GetSystemMenu");
    }
    return (jlong) (* pGetSystemMenu)((void *) hWnd, (int) bRevert);
}

int (__stdcall * pSetPixelFormat) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetPixelFormat( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (pSetPixelFormat == NULL) {
        pSetPixelFormat = (int (__stdcall *) (void *, int, void *)) FindFunction(libGdi32, "SetPixelFormat");
    }
    return (jint) (* pSetPixelFormat)((void *) param_0, (int) param_1, (void *) param_2);
}

int (__stdcall * pGetCursorPos) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetCursorPos( JNIEnv *env, jobject self, jlong lpPoint) {
    if (pGetCursorPos == NULL) {
        pGetCursorPos = (int (__stdcall *) (void *)) FindFunction(libUser32, "GetCursorPos");
    }
    return (jint) (* pGetCursorPos)((void *) lpPoint);
}

int (__stdcall * pPatBlt) (void *, int, int, int, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PatBlt( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5) {
    if (pPatBlt == NULL) {
        pPatBlt = (int (__stdcall *) (void *, int, int, int, int, long)) FindFunction(libGdi32, "PatBlt");
    }
    return (jint) (* pPatBlt)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (long) param_5);
}

void * (__stdcall * pSetCursor) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetCursor( JNIEnv *env, jobject self, jlong hCursor) {
    if (pSetCursor == NULL) {
        pSetCursor = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetCursor");
    }
    return (jlong) (* pSetCursor)((void *) hCursor);
}

int (__stdcall * pAppendMenuW) (void *, int, UINT_PTR, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_AppendMenuW( JNIEnv *env, jobject self, jlong hMenu, jint uFlags, jlong uIDNewItem, jlong lpNewItem) {
    if (pAppendMenuW == NULL) {
        pAppendMenuW = (int (__stdcall *) (void *, int, UINT_PTR, void *)) FindFunction(libUser32, "AppendMenuW");
    }
    return (jint) (* pAppendMenuW)((void *) hMenu, (int) uFlags, (UINT_PTR) uIDNewItem, (void *) lpNewItem);
}

int (__stdcall * pSetWindowPlacement) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetWindowPlacement( JNIEnv *env, jobject self, jlong hWnd, jlong lpwndpl) {
    if (pSetWindowPlacement == NULL) {
        pSetWindowPlacement = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "SetWindowPlacement");
    }
    return (jint) (* pSetWindowPlacement)((void *) hWnd, (void *) lpwndpl);
}

void * (__stdcall * pActivateKeyboardLayout) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ActivateKeyboardLayout( JNIEnv *env, jobject self, jlong hkl, jint Flags) {
    if (pActivateKeyboardLayout == NULL) {
        pActivateKeyboardLayout = (void * (__stdcall *) (void *, int)) FindFunction(libUser32, "ActivateKeyboardLayout");
    }
    return (jlong) (* pActivateKeyboardLayout)((void *) hkl, (int) Flags);
}

int (__stdcall * pGlobalUnlock) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GlobalUnlock( JNIEnv *env, jobject self, jlong hMem) {
    if (pGlobalUnlock == NULL) {
        pGlobalUnlock = (int (__stdcall *) (void *)) FindFunction(libKernel32, "GlobalUnlock");
    }
    return (jint) (* pGlobalUnlock)((void *) hMem);
}

int (__stdcall * pSetROP2) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetROP2( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pSetROP2 == NULL) {
        pSetROP2 = (int (__stdcall *) (void *, int)) FindFunction(libGdi32, "SetROP2");
    }
    return (jint) (* pSetROP2)((void *) param_0, (int) param_1);
}

long (__stdcall * pSHBindToParent) (void *, void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHBindToParent( JNIEnv *env, jobject self, jlong pidl, jlong riid, jlong ppv, jlong ppidlLast) {
    if (pSHBindToParent == NULL) {
        pSHBindToParent = (long (__stdcall *) (void *, void *, void *, void *)) FindFunction(libShell32, "SHBindToParent");
    }
    return (jint) (* pSHBindToParent)((void *) pidl, (void *) riid, (void *) ppv, (void *) ppidlLast);
}

long (__stdcall * pInSendMessageEx) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_InSendMessageEx( JNIEnv *env, jobject self, jlong lpReserved) {
    if (pInSendMessageEx == NULL) {
        pInSendMessageEx = (long (__stdcall *) (void *)) FindFunction(libUser32, "InSendMessageEx");
    }
    return (jint) (* pInSendMessageEx)((void *) lpReserved);
}

int (__stdcall * pGetLocaleInfoW) (long, long, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetLocaleInfoW( JNIEnv *env, jobject self, jint Locale, jint LCType, jlong lpLCData, jint cchData) {
    if (pGetLocaleInfoW == NULL) {
        pGetLocaleInfoW = (int (__stdcall *) (long, long, void *, int)) FindFunction(libKernel32, "GetLocaleInfoW");
    }
    return (jint) (* pGetLocaleInfoW)((long) Locale, (long) LCType, (void *) lpLCData, (int) cchData);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall0( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObject) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObject);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall1( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall2( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall3( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwnd, jlong pbc, jlong pszDisplayName, jlong pchEaten, jlong ppidl, jlong pdwAttributes) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) hwnd, (void *) pbc, (void *) pszDisplayName, (void *) pchEaten, (void *) ppidl, (void *) pdwAttributes);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall4( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwnd, jint grfFlags, jlong ppenumIDList) {
    return (jint)((long (__stdcall *) (void *, void *, long, void *)) fnptr1234)((void *) This, (void *) hwnd, (long) grfFlags, (void *) ppenumIDList);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall5( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pidl, jlong pbc, jlong riid, jlong ppv) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) pidl, (void *) pbc, (void *) riid, (void *) ppv);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall6( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pidl, jlong pbc, jlong riid, jlong ppv) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) pidl, (void *) pbc, (void *) riid, (void *) ppv);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall7( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong lParam, jlong pidl1, jlong pidl2) {
    return (jint)((long (__stdcall *) (void *, LONG_PTR, void *, void *)) fnptr1234)((void *) This, (LONG_PTR) lParam, (void *) pidl1, (void *) pidl2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall8( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwndOwner, jlong riid, jlong ppv) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) hwndOwner, (void *) riid, (void *) ppv);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall9( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint cidl, jlong apidl, jlong rgfInOut) {
    return (jint)((long (__stdcall *) (void *, int, void *, void *)) fnptr1234)((void *) This, (int) cidl, (void *) apidl, (void *) rgfInOut);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall10( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwndOwner, jint cidl, jlong apidl, jlong riid, jlong rgfReserved, jlong ppv) {
    return (jint)((long (__stdcall *) (void *, void *, int, void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) hwndOwner, (int) cidl, (void *) apidl, (void *) riid, (void *) rgfReserved, (void *) ppv);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall11( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pidl, jint uFlags, jlong pName) {
    return (jint)((long (__stdcall *) (void *, void *, long, void *)) fnptr1234)((void *) This, (void *) pidl, (long) uFlags, (void *) pName);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall12( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong hwnd, jlong pidl, jlong pszName, jint uFlags, jlong ppidlOut) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) hwnd, (void *) pidl, (void *) pszName, (long) uFlags, (void *) ppidlOut);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall13( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObject) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObject);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall14( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall15( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall16( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong punk) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) punk);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall17( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong punk) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) punk);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall18( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall19( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pbindopts) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) pbindopts);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall20( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pbindopts) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) pbindopts);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall21( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pprot) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) pprot);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall22( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pszKey, jlong punk) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) pszKey, (void *) punk);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall23( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pszKey, jlong ppunk) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) pszKey, (void *) ppunk);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall24( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong ppenum) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) ppenum);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall25( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong pszKey) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) pszKey);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall26( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObject) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObject);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall27( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall28( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}

long (__stdcall * pSHGetDataFromIDListW) (void *, void *, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHGetDataFromIDListW( JNIEnv *env, jobject self, jlong psf, jlong pidl, jint nFormat, jlong pv, jint cb) {
    if (pSHGetDataFromIDListW == NULL) {
        pSHGetDataFromIDListW = (long (__stdcall *) (void *, void *, int, void *, int)) FindFunction(libShell32, "SHGetDataFromIDListW");
    }
    return (jint) (* pSHGetDataFromIDListW)((void *) psf, (void *) pidl, (int) nFormat, (void *) pv, (int) cb);
}

int (__stdcall * pScreenToClient) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ScreenToClient( JNIEnv *env, jobject self, jlong hWnd, jlong lpPoint) {
    if (pScreenToClient == NULL) {
        pScreenToClient = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "ScreenToClient");
    }
    return (jint) (* pScreenToClient)((void *) hWnd, (void *) lpPoint);
}

void * (__stdcall * pGetParent) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetParent( JNIEnv *env, jobject self, jlong hWnd) {
    if (pGetParent == NULL) {
        pGetParent = (void * (__stdcall *) (void *)) FindFunction(libUser32, "GetParent");
    }
    return (jlong) (* pGetParent)((void *) hWnd);
}

void * (__stdcall * pSetFocus) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetFocus( JNIEnv *env, jobject self, jlong hWnd) {
    if (pSetFocus == NULL) {
        pSetFocus = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetFocus");
    }
    return (jlong) (* pSetFocus)((void *) hWnd);
}

int (__stdcall * pDescribePixelFormat) (void *, int, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DescribePixelFormat( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    if (pDescribePixelFormat == NULL) {
        pDescribePixelFormat = (int (__stdcall *) (void *, int, int, void *)) FindFunction(libGdi32, "DescribePixelFormat");
    }
    return (jint) (* pDescribePixelFormat)((void *) param_0, (int) param_1, (int) param_2, (void *) param_3);
}

long (__stdcall * pSetTextColor) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetTextColor( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pSetTextColor == NULL) {
        pSetTextColor = (long (__stdcall *) (void *, long)) FindFunction(libGdi32, "SetTextColor");
    }
    return (jint) (* pSetTextColor)((void *) param_0, (long) param_1);
}

void * (__stdcall * pMonitorFromWindow) (void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MonitorFromWindow( JNIEnv *env, jobject self, jlong hwnd, jint dwFlags) {
    if (pMonitorFromWindow == NULL) {
        pMonitorFromWindow = (void * (__stdcall *) (void *, long)) FindFunction(libUser32, "MonitorFromWindow");
    }
    return (jlong) (* pMonitorFromWindow)((void *) hwnd, (long) dwFlags);
}

int (__stdcall * pGetDIBits) (void *, void *, int, int, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetDIBits( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3, jlong param_4, jlong param_5, jint param_6) {
    if (pGetDIBits == NULL) {
        pGetDIBits = (int (__stdcall *) (void *, void *, int, int, void *, void *, int)) FindFunction(libGdi32, "GetDIBits");
    }
    return (jint) (* pGetDIBits)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3, (void *) param_4, (void *) param_5, (int) param_6);
}

long (__stdcall * pFormatMessageW) (long, void *, long, long, void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_FormatMessageW( JNIEnv *env, jobject self, jint dwFlags, jlong lpSource, jint dwMessageId, jint dwLanguageId, jlong lpBuffer, jint nSize, jlong Arguments) {
    if (pFormatMessageW == NULL) {
        pFormatMessageW = (long (__stdcall *) (long, void *, long, long, void *, long, void *)) FindFunction(libKernel32, "FormatMessageW");
    }
    return (jint) (* pFormatMessageW)((long) dwFlags, (void *) lpSource, (long) dwMessageId, (long) dwLanguageId, (void *) lpBuffer, (long) nSize, (void *) Arguments);
}

long (__stdcall * pSHGetDesktopFolder) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHGetDesktopFolder( JNIEnv *env, jobject self, jlong ppshf) {
    if (pSHGetDesktopFolder == NULL) {
        pSHGetDesktopFolder = (long (__stdcall *) (void *)) FindFunction(libShell32, "SHGetDesktopFolder");
    }
    return (jint) (* pSHGetDesktopFolder)((void *) ppshf);
}

int (__stdcall * pImmSetCompositionWindow) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmSetCompositionWindow( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pImmSetCompositionWindow == NULL) {
        pImmSetCompositionWindow = (int (__stdcall *) (void *, void *)) FindFunction(libImm32, "ImmSetCompositionWindow");
    }
    return (jint) (* pImmSetCompositionWindow)((void *) param_0, (void *) param_1);
}

int (__stdcall * pSendInput) (int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SendInput( JNIEnv *env, jobject self, jint cInputs, jlong pInputs, jint cbSize) {
    if (pSendInput == NULL) {
        pSendInput = (int (__stdcall *) (int, void *, int)) FindFunction(libUser32, "SendInput");
    }
    return (jint) (* pSendInput)((int) cInputs, (void *) pInputs, (int) cbSize);
}

int (__stdcall * pDeleteObject) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DeleteObject( JNIEnv *env, jobject self, jlong param_0) {
    if (pDeleteObject == NULL) {
        pDeleteObject = (int (__stdcall *) (void *)) FindFunction(libGdi32, "DeleteObject");
    }
    return (jint) (* pDeleteObject)((void *) param_0);
}

int (__stdcall * pImmIsIME) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmIsIME( JNIEnv *env, jobject self, jlong param_0) {
    if (pImmIsIME == NULL) {
        pImmIsIME = (int (__stdcall *) (void *)) FindFunction(libImm32, "ImmIsIME");
    }
    return (jint) (* pImmIsIME)((void *) param_0);
}
JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall29( JNIEnv *env, jobject self, jlong fnptr1234, jlong param_0, jint param_1, jlong param_2, jlong param_3) {
    return (jlong)((LONG_PTR (__stdcall *) (void *, int, WPARAM, LONG_PTR)) fnptr1234)((void *) param_0, (int) param_1, (WPARAM) param_2, (LONG_PTR) param_3);
}

short (__stdcall * pRegisterClassExW) (void *) = NULL;

JNIEXPORT jshort  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_RegisterClassExW( JNIEnv *env, jobject self, jlong param_0) {
    if (pRegisterClassExW == NULL) {
        pRegisterClassExW = (short (__stdcall *) (void *)) FindFunction(libUser32, "RegisterClassExW");
    }
    return (jshort) (* pRegisterClassExW)((void *) param_0);
}

void * (__stdcall * pGetWindowDC) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetWindowDC( JNIEnv *env, jobject self, jlong hWnd) {
    if (pGetWindowDC == NULL) {
        pGetWindowDC = (void * (__stdcall *) (void *)) FindFunction(libUser32, "GetWindowDC");
    }
    return (jlong) (* pGetWindowDC)((void *) hWnd);
}

int (__stdcall * pRegisterClipboardFormatW) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_RegisterClipboardFormatW( JNIEnv *env, jobject self, jlong lpszFormat) {
    if (pRegisterClipboardFormatW == NULL) {
        pRegisterClipboardFormatW = (int (__stdcall *) (void *)) FindFunction(libUser32, "RegisterClipboardFormatW");
    }
    return (jint) (* pRegisterClipboardFormatW)((void *) lpszFormat);
}

int (__stdcall * pEnumClipboardFormats) (int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EnumClipboardFormats( JNIEnv *env, jobject self, jint format) {
    if (pEnumClipboardFormats == NULL) {
        pEnumClipboardFormats = (int (__stdcall *) (int)) FindFunction(libUser32, "EnumClipboardFormats");
    }
    return (jint) (* pEnumClipboardFormats)((int) format);
}

void * (__stdcall * pCreateRectRgn) (int, int, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateRectRgn( JNIEnv *env, jobject self, jint param_0, jint param_1, jint param_2, jint param_3) {
    if (pCreateRectRgn == NULL) {
        pCreateRectRgn = (void * (__stdcall *) (int, int, int, int)) FindFunction(libGdi32, "CreateRectRgn");
    }
    return (jlong) (* pCreateRectRgn)((int) param_0, (int) param_1, (int) param_2, (int) param_3);
}

int (__stdcall * pDestroyCursor) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DestroyCursor( JNIEnv *env, jobject self, jlong hCursor) {
    if (pDestroyCursor == NULL) {
        pDestroyCursor = (int (__stdcall *) (void *)) FindFunction(libUser32, "DestroyCursor");
    }
    return (jint) (* pDestroyCursor)((void *) hCursor);
}

void * (__stdcall * pGetClipboardData) (int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetClipboardData( JNIEnv *env, jobject self, jint uFormat) {
    if (pGetClipboardData == NULL) {
        pGetClipboardData = (void * (__stdcall *) (int)) FindFunction(libUser32, "GetClipboardData");
    }
    return (jlong) (* pGetClipboardData)((int) uFormat);
}

int (__stdcall * pMoveToEx) (void *, int, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MoveToEx( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3) {
    if (pMoveToEx == NULL) {
        pMoveToEx = (int (__stdcall *) (void *, int, int, void *)) FindFunction(libGdi32, "MoveToEx");
    }
    return (jint) (* pMoveToEx)((void *) param_0, (int) param_1, (int) param_2, (void *) param_3);
}

int (__stdcall * pImmNotifyIME) (void *, long, long, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmNotifyIME( JNIEnv *env, jobject self, jlong param_0, jint dwAction, jint dwIndex, jint dwValue) {
    if (pImmNotifyIME == NULL) {
        pImmNotifyIME = (int (__stdcall *) (void *, long, long, long)) FindFunction(libImm32, "ImmNotifyIME");
    }
    return (jint) (* pImmNotifyIME)((void *) param_0, (long) dwAction, (long) dwIndex, (long) dwValue);
}

void * (__stdcall * pWindowFromPoint) (POINT) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_WindowFromPoint( JNIEnv *env, jobject self, jlong Point) {
    if (pWindowFromPoint == NULL) {
        pWindowFromPoint = (void * (__stdcall *) (POINT)) FindFunction(libUser32, "WindowFromPoint");
    }
    return (jlong) (* pWindowFromPoint)(*((POINT *) Point));
}

void * (__stdcall * pSetCapture) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetCapture( JNIEnv *env, jobject self, jlong hWnd) {
    if (pSetCapture == NULL) {
        pSetCapture = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetCapture");
    }
    return (jlong) (* pSetCapture)((void *) hWnd);
}

int (__stdcall * pDestroyCaret) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DestroyCaret( JNIEnv *env, jobject self) {
    if (pDestroyCaret == NULL) {
        pDestroyCaret = (int (__stdcall *) (void)) FindFunction(libUser32, "DestroyCaret");
    }
    return (jint) (* pDestroyCaret)();
}

int (__stdcall * pSetWindowTextW) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetWindowTextW( JNIEnv *env, jobject self, jlong hWnd, jlong lpString) {
    if (pSetWindowTextW == NULL) {
        pSetWindowTextW = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "SetWindowTextW");
    }
    return (jint) (* pSetWindowTextW)((void *) hWnd, (void *) lpString);
}

int (__stdcall * pDrawFocusRect) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DrawFocusRect( JNIEnv *env, jobject self, jlong hDC, jlong lprc) {
    if (pDrawFocusRect == NULL) {
        pDrawFocusRect = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "DrawFocusRect");
    }
    return (jint) (* pDrawFocusRect)((void *) hDC, (void *) lprc);
}

void * (__stdcall * pCreateBrushIndirect) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateBrushIndirect( JNIEnv *env, jobject self, jlong param_0) {
    if (pCreateBrushIndirect == NULL) {
        pCreateBrushIndirect = (void * (__stdcall *) (void *)) FindFunction(libGdi32, "CreateBrushIndirect");
    }
    return (jlong) (* pCreateBrushIndirect)((void *) param_0);
}

int (__stdcall * pMapVirtualKeyW) (int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MapVirtualKeyW( JNIEnv *env, jobject self, jint uCode, jint uMapType) {
    if (pMapVirtualKeyW == NULL) {
        pMapVirtualKeyW = (int (__stdcall *) (int, int)) FindFunction(libUser32, "MapVirtualKeyW");
    }
    return (jint) (* pMapVirtualKeyW)((int) uCode, (int) uMapType);
}

int (__stdcall * pGetRgnBox) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetRgnBox( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pGetRgnBox == NULL) {
        pGetRgnBox = (int (__stdcall *) (void *, void *)) FindFunction(libGdi32, "GetRgnBox");
    }
    return (jint) (* pGetRgnBox)((void *) param_0, (void *) param_1);
}

void * (__stdcall * pGetActiveWindow) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetActiveWindow( JNIEnv *env, jobject self) {
    if (pGetActiveWindow == NULL) {
        pGetActiveWindow = (void * (__stdcall *) (void)) FindFunction(libUser32, "GetActiveWindow");
    }
    return (jlong) (* pGetActiveWindow)();
}

int (__stdcall * pWideCharToMultiByte) (int, long, void *, int, void *, int, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_WideCharToMultiByte( JNIEnv *env, jobject self, jint CodePage, jint dwFlags, jlong lpWideCharStr, jint cchWideChar, jlong lpMultiByteStr, jint cbMultiByte, jlong lpDefaultChar, jlong lpUsedDefaultChar) {
    if (pWideCharToMultiByte == NULL) {
        pWideCharToMultiByte = (int (__stdcall *) (int, long, void *, int, void *, int, void *, void *)) FindFunction(libKernel32, "WideCharToMultiByte");
    }
    return (jint) (* pWideCharToMultiByte)((int) CodePage, (long) dwFlags, (void *) lpWideCharStr, (int) cchWideChar, (void *) lpMultiByteStr, (int) cbMultiByte, (void *) lpDefaultChar, (void *) lpUsedDefaultChar);
}

int (__stdcall * pIsThemeActive) () = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_IsThemeActive( JNIEnv *env, jobject self) {
    if (pIsThemeActive == NULL) {
        pIsThemeActive = (int (__stdcall *) ()) FindFunction(libUxTheme, "IsThemeActive");
    }
    return (jint) (* pIsThemeActive)();
}

long (__stdcall * pGetThemeSysColor) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysColor( JNIEnv *env, jobject self, jlong hTheme, jint iColorId) {
    if (pGetThemeSysColor == NULL) {
        pGetThemeSysColor = (long (__stdcall *) (void *, int)) FindFunction(libUxTheme, "GetThemeSysColor");
    }
    return (jint) (* pGetThemeSysColor)((void *) hTheme, (int) iColorId);
}

ULONG_PTR (__stdcall * pGlobalSize) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GlobalSize( JNIEnv *env, jobject self, jlong hMem) {
    if (pGlobalSize == NULL) {
        pGlobalSize = (ULONG_PTR (__stdcall *) (void *)) FindFunction(libKernel32, "GlobalSize");
    }
    return (jlong) (* pGlobalSize)((void *) hMem);
}

int (__stdcall * pFillRgn) (void *, void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_FillRgn( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2) {
    if (pFillRgn == NULL) {
        pFillRgn = (int (__stdcall *) (void *, void *, void *)) FindFunction(libGdi32, "FillRgn");
    }
    return (jint) (* pFillRgn)((void *) param_0, (void *) param_1, (void *) param_2);
}

int (__stdcall * pDrawFrameControl) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DrawFrameControl( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jint param_3) {
    if (pDrawFrameControl == NULL) {
        pDrawFrameControl = (int (__stdcall *) (void *, void *, int, int)) FindFunction(libUser32, "DrawFrameControl");
    }
    return (jint) (* pDrawFrameControl)((void *) param_0, (void *) param_1, (int) param_2, (int) param_3);
}

int (__stdcall * pEmptyClipboard) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EmptyClipboard( JNIEnv *env, jobject self) {
    if (pEmptyClipboard == NULL) {
        pEmptyClipboard = (int (__stdcall *) (void)) FindFunction(libUser32, "EmptyClipboard");
    }
    return (jint) (* pEmptyClipboard)();
}

int (__stdcall * pDestroyWindow) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DestroyWindow( JNIEnv *env, jobject self, jlong hWnd) {
    if (pDestroyWindow == NULL) {
        pDestroyWindow = (int (__stdcall *) (void *)) FindFunction(libUser32, "DestroyWindow");
    }
    return (jint) (* pDestroyWindow)((void *) hWnd);
}

long (__stdcall * pCloseThemeData) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CloseThemeData( JNIEnv *env, jobject self, jlong hTheme) {
    if (pCloseThemeData == NULL) {
        pCloseThemeData = (long (__stdcall *) (void *)) FindFunction(libUxTheme, "CloseThemeData");
    }
    return (jint) (* pCloseThemeData)((void *) hTheme);
}

int (__stdcall * pTextOutW) (void *, int, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_TextOutW( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jlong param_3, jint param_4) {
    if (pTextOutW == NULL) {
        pTextOutW = (int (__stdcall *) (void *, int, int, void *, int)) FindFunction(libGdi32, "TextOutW");
    }
    return (jint) (* pTextOutW)((void *) param_0, (int) param_1, (int) param_2, (void *) param_3, (int) param_4);
}

int (__stdcall * pGetCaretPos) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetCaretPos( JNIEnv *env, jobject self, jlong lpPoint) {
    if (pGetCaretPos == NULL) {
        pGetCaretPos = (int (__stdcall *) (void *)) FindFunction(libUser32, "GetCaretPos");
    }
    return (jint) (* pGetCaretPos)((void *) lpPoint);
}

int (__stdcall * pGetThemeSysSize) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysSize( JNIEnv *env, jobject self, jlong hTheme, jint iSizeId) {
    if (pGetThemeSysSize == NULL) {
        pGetThemeSysSize = (int (__stdcall *) (void *, int)) FindFunction(libUxTheme, "GetThemeSysSize");
    }
    return (jint) (* pGetThemeSysSize)((void *) hTheme, (int) iSizeId);
}

int (__stdcall * pSelectClipRgn) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SelectClipRgn( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pSelectClipRgn == NULL) {
        pSelectClipRgn = (int (__stdcall *) (void *, void *)) FindFunction(libGdi32, "SelectClipRgn");
    }
    return (jint) (* pSelectClipRgn)((void *) param_0, (void *) param_1);
}

long (__stdcall * pSHGetFolderLocation) (void *, int, void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SHGetFolderLocation( JNIEnv *env, jobject self, jlong hwnd, jint csidl, jlong hToken, jint dwFlags, jlong ppidl) {
    if (pSHGetFolderLocation == NULL) {
        pSHGetFolderLocation = (long (__stdcall *) (void *, int, void *, long, void *)) FindFunction(libShell32, "SHGetFolderLocation");
    }
    return (jint) (* pSHGetFolderLocation)((void *) hwnd, (int) csidl, (void *) hToken, (long) dwFlags, (void *) ppidl);
}

void * (__stdcall * pImmCreateContext) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmCreateContext( JNIEnv *env, jobject self) {
    if (pImmCreateContext == NULL) {
        pImmCreateContext = (void * (__stdcall *) (void)) FindFunction(libImm32, "ImmCreateContext");
    }
    return (jlong) (* pImmCreateContext)();
}

long (__stdcall * pCLSIDFromString) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CLSIDFromString( JNIEnv *env, jobject self, jlong lpsz, jlong pclsid) {
    if (pCLSIDFromString == NULL) {
        pCLSIDFromString = (long (__stdcall *) (void *, void *)) FindFunction(libOle32, "CLSIDFromString");
    }
    return (jint) (* pCLSIDFromString)((void *) lpsz, (void *) pclsid);
}

long (__stdcall * pStrRetToBufW) (void *, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_StrRetToBufW( JNIEnv *env, jobject self, jlong pstr, jlong pidl, jlong pszBuf, jint cchBuf) {
    if (pStrRetToBufW == NULL) {
        pStrRetToBufW = (long (__stdcall *) (void *, void *, void *, int)) FindFunction(libShlwapi, "StrRetToBufW");
    }
    return (jint) (* pStrRetToBufW)((void *) pstr, (void *) pidl, (void *) pszBuf, (int) cchBuf);
}

int (__stdcall * pSetPolyFillMode) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetPolyFillMode( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pSetPolyFillMode == NULL) {
        pSetPolyFillMode = (int (__stdcall *) (void *, int)) FindFunction(libGdi32, "SetPolyFillMode");
    }
    return (jint) (* pSetPolyFillMode)((void *) param_0, (int) param_1);
}

void * (__stdcall * pLocalFree) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_LocalFree( JNIEnv *env, jobject self, jlong hMem) {
    if (pLocalFree == NULL) {
        pLocalFree = (void * (__stdcall *) (void *)) FindFunction(libKernel32, "LocalFree");
    }
    return (jlong) (* pLocalFree)((void *) hMem);
}

void * (__stdcall * pCreateCompatibleDC) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateCompatibleDC( JNIEnv *env, jobject self, jlong param_0) {
    if (pCreateCompatibleDC == NULL) {
        pCreateCompatibleDC = (void * (__stdcall *) (void *)) FindFunction(libGdi32, "CreateCompatibleDC");
    }
    return (jlong) (* pCreateCompatibleDC)((void *) param_0);
}

void * (__stdcall * pCreateCompatibleBitmap) (void *, int, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateCompatibleBitmap( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2) {
    if (pCreateCompatibleBitmap == NULL) {
        pCreateCompatibleBitmap = (void * (__stdcall *) (void *, int, int)) FindFunction(libGdi32, "CreateCompatibleBitmap");
    }
    return (jlong) (* pCreateCompatibleBitmap)((void *) param_0, (int) param_1, (int) param_2);
}

LONG_PTR (__stdcall * pDefWindowProcW) (void *, int, WPARAM, LONG_PTR) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DefWindowProcW( JNIEnv *env, jobject self, jlong hWnd, jint Msg, jlong wParam, jlong lParam) {
    if (pDefWindowProcW == NULL) {
        pDefWindowProcW = (LONG_PTR (__stdcall *) (void *, int, WPARAM, LONG_PTR)) FindFunction(libUser32, "DefWindowProcW");
    }
    return (jlong) (* pDefWindowProcW)((void *) hWnd, (int) Msg, (WPARAM) wParam, (LONG_PTR) lParam);
}

int (__stdcall * pCloseClipboard) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CloseClipboard( JNIEnv *env, jobject self) {
    if (pCloseClipboard == NULL) {
        pCloseClipboard = (int (__stdcall *) (void)) FindFunction(libUser32, "CloseClipboard");
    }
    return (jint) (* pCloseClipboard)();
}

void * (__stdcall * pSetActiveWindow) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetActiveWindow( JNIEnv *env, jobject self, jlong hWnd) {
    if (pSetActiveWindow == NULL) {
        pSetActiveWindow = (void * (__stdcall *) (void *)) FindFunction(libUser32, "SetActiveWindow");
    }
    return (jlong) (* pSetActiveWindow)((void *) hWnd);
}

int (__stdcall * pGetDeviceCaps) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetDeviceCaps( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pGetDeviceCaps == NULL) {
        pGetDeviceCaps = (int (__stdcall *) (void *, int)) FindFunction(libGdi32, "GetDeviceCaps");
    }
    return (jint) (* pGetDeviceCaps)((void *) param_0, (int) param_1);
}

void * (__stdcall * pCreatePatternBrush) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreatePatternBrush( JNIEnv *env, jobject self, jlong param_0) {
    if (pCreatePatternBrush == NULL) {
        pCreatePatternBrush = (void * (__stdcall *) (void *)) FindFunction(libGdi32, "CreatePatternBrush");
    }
    return (jlong) (* pCreatePatternBrush)((void *) param_0);
}

void (__stdcall * pmouse_event) (long, long, long, long, ULONG_PTR) = NULL;

JNIEXPORT void  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_mouse_1event( JNIEnv *env, jobject self, jint dwFlags, jint dx, jint dy, jint dwData, jlong dwExtraInfo) {
    if (pmouse_event == NULL) {
        pmouse_event = (void (__stdcall *) (long, long, long, long, ULONG_PTR)) FindFunction(libUser32, "mouse_event");
    }
    (* pmouse_event)((long) dwFlags, (long) dx, (long) dy, (long) dwData, (ULONG_PTR) dwExtraInfo);
}

int (__stdcall * pEnumDisplayDevicesW) (void *, long, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EnumDisplayDevicesW( JNIEnv *env, jobject self, jlong lpDevice, jint iDevNum, jlong lpDisplayDevice, jint dwFlags) {
    if (pEnumDisplayDevicesW == NULL) {
        pEnumDisplayDevicesW = (int (__stdcall *) (void *, long, void *, long)) FindFunction(libUser32, "EnumDisplayDevicesW");
    }
    return (jint) (* pEnumDisplayDevicesW)((void *) lpDevice, (long) iDevNum, (void *) lpDisplayDevice, (long) dwFlags);
}

long (__stdcall * pSetWindowLongW) (void *, int, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetWindowLongW( JNIEnv *env, jobject self, jlong hWnd, jint nIndex, jint dwNewLong) {
    if (pSetWindowLongW == NULL) {
        pSetWindowLongW = (long (__stdcall *) (void *, int, long)) FindFunction(libUser32, "SetWindowLongW");
    }
    return (jint) (* pSetWindowLongW)((void *) hWnd, (int) nIndex, (long) dwNewLong);
}

int (__stdcall * pPolygon) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Polygon( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (pPolygon == NULL) {
        pPolygon = (int (__stdcall *) (void *, void *, int)) FindFunction(libGdi32, "Polygon");
    }
    return (jint) (* pPolygon)((void *) param_0, (void *) param_1, (int) param_2);
}

int (__stdcall * pGetUpdateRgn) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetUpdateRgn( JNIEnv *env, jobject self, jlong hWnd, jlong hRgn, jint bErase) {
    if (pGetUpdateRgn == NULL) {
        pGetUpdateRgn = (int (__stdcall *) (void *, void *, int)) FindFunction(libUser32, "GetUpdateRgn");
    }
    return (jint) (* pGetUpdateRgn)((void *) hWnd, (void *) hRgn, (int) bErase);
}

int (__stdcall * pPie) (void *, int, int, int, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Pie( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5, jint param_6, jint param_7, jint param_8) {
    if (pPie == NULL) {
        pPie = (int (__stdcall *) (void *, int, int, int, int, int, int, int, int)) FindFunction(libGdi32, "Pie");
    }
    return (jint) (* pPie)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4, (int) param_5, (int) param_6, (int) param_7, (int) param_8);
}

void * (__stdcall * pGetClipboardOwner) (void) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetClipboardOwner( JNIEnv *env, jobject self) {
    if (pGetClipboardOwner == NULL) {
        pGetClipboardOwner = (void * (__stdcall *) (void)) FindFunction(libUser32, "GetClipboardOwner");
    }
    return (jlong) (* pGetClipboardOwner)();
}

int (__stdcall * pShowWindow) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ShowWindow( JNIEnv *env, jobject self, jlong hWnd, jint nCmdShow) {
    if (pShowWindow == NULL) {
        pShowWindow = (int (__stdcall *) (void *, int)) FindFunction(libUser32, "ShowWindow");
    }
    return (jint) (* pShowWindow)((void *) hWnd, (int) nCmdShow);
}

int (__stdcall * pMapWindowPoints) (void *, void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MapWindowPoints( JNIEnv *env, jobject self, jlong hWndFrom, jlong hWndTo, jlong lpPoints, jint cPoints) {
    if (pMapWindowPoints == NULL) {
        pMapWindowPoints = (int (__stdcall *) (void *, void *, void *, int)) FindFunction(libUser32, "MapWindowPoints");
    }
    return (jint) (* pMapWindowPoints)((void *) hWndFrom, (void *) hWndTo, (void *) lpPoints, (int) cPoints);
}

int (__stdcall * pChoosePixelFormat) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ChoosePixelFormat( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pChoosePixelFormat == NULL) {
        pChoosePixelFormat = (int (__stdcall *) (void *, void *)) FindFunction(libGdi32, "ChoosePixelFormat");
    }
    return (jint) (* pChoosePixelFormat)((void *) param_0, (void *) param_1);
}

int (__stdcall * pPolyPolyline) (void *, void *, void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_PolyPolyline( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jlong param_2, jint param_3) {
    if (pPolyPolyline == NULL) {
        pPolyPolyline = (int (__stdcall *) (void *, void *, void *, long)) FindFunction(libGdi32, "PolyPolyline");
    }
    return (jint) (* pPolyPolyline)((void *) param_0, (void *) param_1, (void *) param_2, (long) param_3);
}

int (__stdcall * pGetRandomRgn) (void *, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetRandomRgn( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2) {
    if (pGetRandomRgn == NULL) {
        pGetRandomRgn = (int (__stdcall *) (void *, void *, int)) FindFunction(libGdi32, "GetRandomRgn");
    }
    return (jint) (* pGetRandomRgn)((void *) param_0, (void *) param_1, (int) param_2);
}

void * (__stdcall * pExtCreatePen) (long, long, void *, long, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ExtCreatePen( JNIEnv *env, jobject self, jint param_0, jint param_1, jlong param_2, jint param_3, jlong param_4) {
    if (pExtCreatePen == NULL) {
        pExtCreatePen = (void * (__stdcall *) (long, long, void *, long, void *)) FindFunction(libGdi32, "ExtCreatePen");
    }
    return (jlong) (* pExtCreatePen)((long) param_0, (long) param_1, (void *) param_2, (long) param_3, (void *) param_4);
}

long (__stdcall * pChangeDisplaySettingsExW) (void *, void *, void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ChangeDisplaySettingsExW( JNIEnv *env, jobject self, jlong lpszDeviceName, jlong lpDevMode, jlong hwnd, jint dwflags, jlong lParam) {
    if (pChangeDisplaySettingsExW == NULL) {
        pChangeDisplaySettingsExW = (long (__stdcall *) (void *, void *, void *, long, void *)) FindFunction(libUser32, "ChangeDisplaySettingsExW");
    }
    return (jint) (* pChangeDisplaySettingsExW)((void *) lpszDeviceName, (void *) lpDevMode, (void *) hwnd, (long) dwflags, (void *) lParam);
}

long (__stdcall * pGetRegionData) (void *, long, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetRegionData( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (pGetRegionData == NULL) {
        pGetRegionData = (long (__stdcall *) (void *, long, void *)) FindFunction(libGdi32, "GetRegionData");
    }
    return (jint) (* pGetRegionData)((void *) param_0, (long) param_1, (void *) param_2);
}

int (__stdcall * pInflateRect) (void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_InflateRect( JNIEnv *env, jobject self, jlong lprc, jint dx, jint dy) {
    if (pInflateRect == NULL) {
        pInflateRect = (int (__stdcall *) (void *, int, int)) FindFunction(libUser32, "InflateRect");
    }
    return (jint) (* pInflateRect)((void *) lprc, (int) dx, (int) dy);
}

long (__stdcall * pSetBkColor) (void *, long) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetBkColor( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pSetBkColor == NULL) {
        pSetBkColor = (long (__stdcall *) (void *, long)) FindFunction(libGdi32, "SetBkColor");
    }
    return (jint) (* pSetBkColor)((void *) param_0, (long) param_1);
}

void * (__stdcall * pGetAncestor) (void *, int) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetAncestor( JNIEnv *env, jobject self, jlong hwnd, jint gaFlags) {
    if (pGetAncestor == NULL) {
        pGetAncestor = (void * (__stdcall *) (void *, int)) FindFunction(libUser32, "GetAncestor");
    }
    return (jlong) (* pGetAncestor)((void *) hwnd, (int) gaFlags);
}

int (__stdcall * pGetThemeSysBool) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetThemeSysBool( JNIEnv *env, jobject self, jlong hTheme, jint iBoolId) {
    if (pGetThemeSysBool == NULL) {
        pGetThemeSysBool = (int (__stdcall *) (void *, int)) FindFunction(libUxTheme, "GetThemeSysBool");
    }
    return (jint) (* pGetThemeSysBool)((void *) hTheme, (int) iBoolId);
}

int (__stdcall * pTranslateMessage) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_TranslateMessage( JNIEnv *env, jobject self, jlong lpMsg) {
    if (pTranslateMessage == NULL) {
        pTranslateMessage = (int (__stdcall *) (void *)) FindFunction(libUser32, "TranslateMessage");
    }
    return (jint) (* pTranslateMessage)((void *) lpMsg);
}

void * (__stdcall * pCreateSolidBrush) (long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateSolidBrush( JNIEnv *env, jobject self, jint param_0) {
    if (pCreateSolidBrush == NULL) {
        pCreateSolidBrush = (void * (__stdcall *) (long)) FindFunction(libGdi32, "CreateSolidBrush");
    }
    return (jlong) (* pCreateSolidBrush)((long) param_0);
}

void * (__stdcall * pOpenThemeData) (void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_OpenThemeData( JNIEnv *env, jobject self, jlong hwnd, jlong pszClassList) {
    if (pOpenThemeData == NULL) {
        pOpenThemeData = (void * (__stdcall *) (void *, void *)) FindFunction(libUxTheme, "OpenThemeData");
    }
    return (jlong) (* pOpenThemeData)((void *) hwnd, (void *) pszClassList);
}

int (__stdcall * pGetWindowPlacement) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetWindowPlacement( JNIEnv *env, jobject self, jlong hWnd, jlong lpwndpl) {
    if (pGetWindowPlacement == NULL) {
        pGetWindowPlacement = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "GetWindowPlacement");
    }
    return (jint) (* pGetWindowPlacement)((void *) hWnd, (void *) lpwndpl);
}

int (__stdcall * pReleaseCapture) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ReleaseCapture( JNIEnv *env, jobject self) {
    if (pReleaseCapture == NULL) {
        pReleaseCapture = (int (__stdcall *) (void)) FindFunction(libUser32, "ReleaseCapture");
    }
    return (jint) (* pReleaseCapture)();
}

int (__stdcall * pMultiByteToWideChar) (int, long, void *, int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MultiByteToWideChar( JNIEnv *env, jobject self, jint CodePage, jint dwFlags, jlong lpMultiByteStr, jint cbMultiByte, jlong lpWideCharStr, jint cchWideChar) {
    if (pMultiByteToWideChar == NULL) {
        pMultiByteToWideChar = (int (__stdcall *) (int, long, void *, int, void *, int)) FindFunction(libKernel32, "MultiByteToWideChar");
    }
    return (jint) (* pMultiByteToWideChar)((int) CodePage, (long) dwFlags, (void *) lpMultiByteStr, (int) cbMultiByte, (void *) lpWideCharStr, (int) cchWideChar);
}

int (__stdcall * pGetObjectW) (void *, int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetObjectW( JNIEnv *env, jobject self, jlong param_0, jint param_1, jlong param_2) {
    if (pGetObjectW == NULL) {
        pGetObjectW = (int (__stdcall *) (void *, int, void *)) FindFunction(libGdi32, "GetObjectW");
    }
    return (jint) (* pGetObjectW)((void *) param_0, (int) param_1, (void *) param_2);
}

void * (__stdcall * pLoadCursorW) (void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_LoadCursorW( JNIEnv *env, jobject self, jlong hInstance, jlong lpCursorName) {
    if (pLoadCursorW == NULL) {
        pLoadCursorW = (void * (__stdcall *) (void *, void *)) FindFunction(libUser32, "LoadCursorW");
    }
    return (jlong) (* pLoadCursorW)((void *) hInstance, (void *) lpCursorName);
}

long (__stdcall * pEnableTheming) (int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EnableTheming( JNIEnv *env, jobject self, jint fEnable) {
    if (pEnableTheming == NULL) {
        pEnableTheming = (long (__stdcall *) (int)) FindFunction(libUxTheme, "EnableTheming");
    }
    return (jint) (* pEnableTheming)((int) fEnable);
}

int (__stdcall * pIsIconic) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_IsIconic( JNIEnv *env, jobject self, jlong hWnd) {
    if (pIsIconic == NULL) {
        pIsIconic = (int (__stdcall *) (void *)) FindFunction(libUser32, "IsIconic");
    }
    return (jint) (* pIsIconic)((void *) hWnd);
}

int (__stdcall * pEnableWindow) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_EnableWindow( JNIEnv *env, jobject self, jlong hWnd, jint bEnable) {
    if (pEnableWindow == NULL) {
        pEnableWindow = (int (__stdcall *) (void *, int)) FindFunction(libUser32, "EnableWindow");
    }
    return (jint) (* pEnableWindow)((void *) hWnd, (int) bEnable);
}

void * (__stdcall * pGlobalLock) (void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GlobalLock( JNIEnv *env, jobject self, jlong hMem) {
    if (pGlobalLock == NULL) {
        pGlobalLock = (void * (__stdcall *) (void *)) FindFunction(libKernel32, "GlobalLock");
    }
    return (jlong) (* pGlobalLock)((void *) hMem);
}

int (__stdcall * pReleaseDC) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ReleaseDC( JNIEnv *env, jobject self, jlong hWnd, jlong hDC) {
    if (pReleaseDC == NULL) {
        pReleaseDC = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "ReleaseDC");
    }
    return (jint) (* pReleaseDC)((void *) hWnd, (void *) hDC);
}

int (__stdcall * pGetKeyboardLayoutList) (int, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetKeyboardLayoutList( JNIEnv *env, jobject self, jint nBuff, jlong lpList) {
    if (pGetKeyboardLayoutList == NULL) {
        pGetKeyboardLayoutList = (int (__stdcall *) (int, void *)) FindFunction(libUser32, "GetKeyboardLayoutList");
    }
    return (jint) (* pGetKeyboardLayoutList)((int) nBuff, (void *) lpList);
}

void * (__stdcall * pSelectObject) (void *, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SelectObject( JNIEnv *env, jobject self, jlong param_0, jlong param_1) {
    if (pSelectObject == NULL) {
        pSelectObject = (void * (__stdcall *) (void *, void *)) FindFunction(libGdi32, "SelectObject");
    }
    return (jlong) (* pSelectObject)((void *) param_0, (void *) param_1);
}

void * (__stdcall * pGetKeyboardLayout) (long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetKeyboardLayout( JNIEnv *env, jobject self, jint idThread) {
    if (pGetKeyboardLayout == NULL) {
        pGetKeyboardLayout = (void * (__stdcall *) (long)) FindFunction(libUser32, "GetKeyboardLayout");
    }
    return (jlong) (* pGetKeyboardLayout)((long) idThread);
}

int (__stdcall * pGetWindowRect) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetWindowRect( JNIEnv *env, jobject self, jlong hWnd, jlong lpRect) {
    if (pGetWindowRect == NULL) {
        pGetWindowRect = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "GetWindowRect");
    }
    return (jint) (* pGetWindowRect)((void *) hWnd, (void *) lpRect);
}

int (__stdcall * pDrawEdge) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_DrawEdge( JNIEnv *env, jobject self, jlong hdc, jlong qrc, jint edge, jint grfFlags) {
    if (pDrawEdge == NULL) {
        pDrawEdge = (int (__stdcall *) (void *, void *, int, int)) FindFunction(libUser32, "DrawEdge");
    }
    return (jint) (* pDrawEdge)((void *) hdc, (void *) qrc, (int) edge, (int) grfFlags);
}

int (__stdcall * pGetMessageW) (void *, void *, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetMessageW( JNIEnv *env, jobject self, jlong lpMsg, jlong hWnd, jint wMsgFilterMin, jint wMsgFilterMax) {
    if (pGetMessageW == NULL) {
        pGetMessageW = (int (__stdcall *) (void *, void *, int, int)) FindFunction(libUser32, "GetMessageW");
    }
    return (jint) (* pGetMessageW)((void *) lpMsg, (void *) hWnd, (int) wMsgFilterMin, (int) wMsgFilterMax);
}

int (__stdcall * pGetPixelFormat) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetPixelFormat( JNIEnv *env, jobject self, jlong param_0) {
    if (pGetPixelFormat == NULL) {
        pGetPixelFormat = (int (__stdcall *) (void *)) FindFunction(libGdi32, "GetPixelFormat");
    }
    return (jint) (* pGetPixelFormat)((void *) param_0);
}

void * (__stdcall * pSetClipboardData) (int, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetClipboardData( JNIEnv *env, jobject self, jint uFormat, jlong hMem) {
    if (pSetClipboardData == NULL) {
        pSetClipboardData = (void * (__stdcall *) (int, void *)) FindFunction(libUser32, "SetClipboardData");
    }
    return (jlong) (* pSetClipboardData)((int) uFormat, (void *) hMem);
}

int (__stdcall * pMulDiv) (int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_MulDiv( JNIEnv *env, jobject self, jint nNumber, jint nNumerator, jint nDenominator) {
    if (pMulDiv == NULL) {
        pMulDiv = (int (__stdcall *) (int, int, int)) FindFunction(libKernel32, "MulDiv");
    }
    return (jint) (* pMulDiv)((int) nNumber, (int) nNumerator, (int) nDenominator);
}

void * (__stdcall * pCreateBitmap) (int, int, int, int, void *) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateBitmap( JNIEnv *env, jobject self, jint param_0, jint param_1, jint param_2, jint param_3, jlong param_4) {
    if (pCreateBitmap == NULL) {
        pCreateBitmap = (void * (__stdcall *) (int, int, int, int, void *)) FindFunction(libGdi32, "CreateBitmap");
    }
    return (jlong) (* pCreateBitmap)((int) param_0, (int) param_1, (int) param_2, (int) param_3, (void *) param_4);
}

int (__stdcall * pGetClipboardFormatNameW) (int, void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetClipboardFormatNameW( JNIEnv *env, jobject self, jint format, jlong lpszFormatName, jint cchMaxCount) {
    if (pGetClipboardFormatNameW == NULL) {
        pGetClipboardFormatNameW = (int (__stdcall *) (int, void *, int)) FindFunction(libUser32, "GetClipboardFormatNameW");
    }
    return (jint) (* pGetClipboardFormatNameW)((int) format, (void *) lpszFormatName, (int) cchMaxCount);
}

int (__stdcall * pSetWindowPos) (void *, void *, int, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetWindowPos( JNIEnv *env, jobject self, jlong hWnd, jlong hWndInsertAfter, jint X, jint Y, jint cx, jint cy, jint uFlags) {
    if (pSetWindowPos == NULL) {
        pSetWindowPos = (int (__stdcall *) (void *, void *, int, int, int, int, int)) FindFunction(libUser32, "SetWindowPos");
    }
    return (jint) (* pSetWindowPos)((void *) hWnd, (void *) hWndInsertAfter, (int) X, (int) Y, (int) cx, (int) cy, (int) uFlags);
}

int (__stdcall * pImmSetOpenStatus) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ImmSetOpenStatus( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pImmSetOpenStatus == NULL) {
        pImmSetOpenStatus = (int (__stdcall *) (void *, int)) FindFunction(libImm32, "ImmSetOpenStatus");
    }
    return (jint) (* pImmSetOpenStatus)((void *) param_0, (int) param_1);
}

int (__stdcall * pSetCaretPos) (int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetCaretPos( JNIEnv *env, jobject self, jint X, jint Y) {
    if (pSetCaretPos == NULL) {
        pSetCaretPos = (int (__stdcall *) (int, int)) FindFunction(libUser32, "SetCaretPos");
    }
    return (jint) (* pSetCaretPos)((int) X, (int) Y);
}

void * (__stdcall * pCreateDIBSection) (void *, void *, int, void *, void *, long) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_CreateDIBSection( JNIEnv *env, jobject self, jlong param_0, jlong param_1, jint param_2, jlong param_3, jlong param_4, jint param_5) {
    if (pCreateDIBSection == NULL) {
        pCreateDIBSection = (void * (__stdcall *) (void *, void *, int, void *, void *, long)) FindFunction(libGdi32, "CreateDIBSection");
    }
    return (jlong) (* pCreateDIBSection)((void *) param_0, (void *) param_1, (int) param_2, (void *) param_3, (void *) param_4, (long) param_5);
}

int (__stdcall * pSetBkMode) (void *, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_SetBkMode( JNIEnv *env, jobject self, jlong param_0, jint param_1) {
    if (pSetBkMode == NULL) {
        pSetBkMode = (int (__stdcall *) (void *, int)) FindFunction(libGdi32, "SetBkMode");
    }
    return (jint) (* pSetBkMode)((void *) param_0, (int) param_1);
}

int (__stdcall * pRectangle) (void *, int, int, int, int) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_Rectangle( JNIEnv *env, jobject self, jlong param_0, jint param_1, jint param_2, jint param_3, jint param_4) {
    if (pRectangle == NULL) {
        pRectangle = (int (__stdcall *) (void *, int, int, int, int)) FindFunction(libGdi32, "Rectangle");
    }
    return (jint) (* pRectangle)((void *) param_0, (int) param_1, (int) param_2, (int) param_3, (int) param_4);
}

int (__stdcall * pGetDoubleClickTime) (void) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetDoubleClickTime( JNIEnv *env, jobject self) {
    if (pGetDoubleClickTime == NULL) {
        pGetDoubleClickTime = (int (__stdcall *) (void)) FindFunction(libUser32, "GetDoubleClickTime");
    }
    return (jint) (* pGetDoubleClickTime)();
}

int (__stdcall * pGetClientRect) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GetClientRect( JNIEnv *env, jobject self, jlong hWnd, jlong lpRect) {
    if (pGetClientRect == NULL) {
        pGetClientRect = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "GetClientRect");
    }
    return (jint) (* pGetClientRect)((void *) hWnd, (void *) lpRect);
}

int (__stdcall * pUpdateWindow) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_UpdateWindow( JNIEnv *env, jobject self, jlong hWnd) {
    if (pUpdateWindow == NULL) {
        pUpdateWindow = (int (__stdcall *) (void *)) FindFunction(libUser32, "UpdateWindow");
    }
    return (jint) (* pUpdateWindow)((void *) hWnd);
}

void * (__stdcall * pGlobalAlloc) (int, SIZE_T) = NULL;

JNIEXPORT jlong  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_GlobalAlloc( JNIEnv *env, jobject self, jint uFlags, jlong dwBytes) {
    if (pGlobalAlloc == NULL) {
        pGlobalAlloc = (void * (__stdcall *) (int, SIZE_T)) FindFunction(libKernel32, "GlobalAlloc");
    }
    return (jlong) (* pGlobalAlloc)((int) uFlags, (SIZE_T) dwBytes);
}

int (__stdcall * pChangeClipboardChain) (void *, void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_ChangeClipboardChain( JNIEnv *env, jobject self, jlong hWndRemove, jlong hWndNewNext) {
    if (pChangeClipboardChain == NULL) {
        pChangeClipboardChain = (int (__stdcall *) (void *, void *)) FindFunction(libUser32, "ChangeClipboardChain");
    }
    return (jint) (* pChangeClipboardChain)((void *) hWndRemove, (void *) hWndNewNext);
}

int (__stdcall * pOpenClipboard) (void *) = NULL;

JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_OpenClipboard( JNIEnv *env, jobject self, jlong hWndNewOwner) {
    if (pOpenClipboard == NULL) {
        pOpenClipboard = (int (__stdcall *) (void *)) FindFunction(libUser32, "OpenClipboard");
    }
    return (jint) (* pOpenClipboard)((void *) hWndNewOwner);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall30( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall31( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall32( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall33( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall34( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jint param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, long, long, long, void *)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (long) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall35( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (long) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall36( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jint param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, long, long, long, void *)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (long) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall37( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall38( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall39( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall40( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall41( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall42( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall43( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall44( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall45( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall46( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall47( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall48( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall49( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall50( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall51( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall52( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall53( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall54( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall55( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall56( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall57( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall58( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jint param_3, jint param_4, jint param_5) {
    return (jint)((long (__stdcall *) (void *, long, long, long, long, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (long) param_3, (long) param_4, (long) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall59( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall60( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall61( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall62( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall63( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall64( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall65( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2, jint param_3) {
    return (jint)((long (__stdcall *) (void *, void *, long, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2, (long) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall66( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall67( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall68( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall69( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall70( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall71( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall72( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall73( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall74( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall75( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall76( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall77( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall78( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall79( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall80( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall81( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall82( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall83( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall84( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall85( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall86( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall87( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall88( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jint param_3) {
    return (jint)((long (__stdcall *) (void *, long, long, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (long) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall89( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall90( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObject) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObject);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall91( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall92( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall93( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint celt, jlong rgelt, jlong pceltFetched) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) celt, (void *) rgelt, (void *) pceltFetched);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall94( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint celt) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) celt);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall95( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall96( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong ppenum) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) ppenum);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall97( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall98( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall99( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall100( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall101( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall102( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3, jint param_4, jlong param_5) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall103( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2, jint param_3) {
    return (jint)((long (__stdcall *) (void *, void *, long, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2, (long) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall104( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jlong param_3, jlong param_4, jint param_5) {
    return (jint)((long (__stdcall *) (void *, long, long, void *, void *, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (void *) param_3, (void *) param_4, (long) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall105( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall106( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall107( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall108( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall109( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall110( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall111( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall112( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall113( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall114( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall115( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall116( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall117( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall118( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall119( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall120( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall121( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall122( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jint param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (long) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall123( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall124( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall125( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall126( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall127( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, long, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall128( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall129( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall130( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3, jint param_4, jlong param_5) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall131( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall132( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall133( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall134( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall135( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall136( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall137( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jint param_3, jint param_4) {
    return (jint)((long (__stdcall *) (void *, void *, void *, long, long)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (long) param_3, (long) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall138( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall139( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall140( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall141( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall142( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall143( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall144( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall145( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall146( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall147( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall148( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall149( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall150( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall151( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3, jint param_4, jlong param_5) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall152( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2, jint param_3) {
    return (jint)((long (__stdcall *) (void *, void *, long, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2, (long) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall153( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2, jlong param_3, jlong param_4, jint param_5) {
    return (jint)((long (__stdcall *) (void *, long, long, void *, void *, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2, (void *) param_3, (void *) param_4, (long) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall154( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall155( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall156( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, long, void *, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall157( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall158( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall159( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall160( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall161( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall162( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall163( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall164( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall165( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall166( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall167( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall168( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall169( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall170( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall171( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jint param_3, jlong param_4) {
    return (jint)((long (__stdcall *) (void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (long) param_3, (void *) param_4);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall172( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall173( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall174( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall175( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall176( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, long, long)) fnptr1234)((void *) This, (long) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall177( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall178( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall179( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3, jint param_4, jlong param_5) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *, long, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3, (long) param_4, (void *) param_5);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall180( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1) {
    return (jint)((long (__stdcall *) (void *, long)) fnptr1234)((void *) This, (long) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall181( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall182( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong riid, jlong ppvObj) {
    return (jint)((long (__stdcall *) (void *, void *, void *)) fnptr1234)((void *) This, (void *) riid, (void *) ppvObj);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall183( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall184( JNIEnv *env, jobject self, jlong fnptr1234, jlong This) {
    return (jint)((long (__stdcall *) (void *)) fnptr1234)((void *) This);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall185( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jlong param_2, jlong param_3) {
    return (jint)((long (__stdcall *) (void *, void *, void *, void *)) fnptr1234)((void *) This, (void *) param_1, (void *) param_2, (void *) param_3);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall186( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall187( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall188( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1) {
    return (jint)((long (__stdcall *) (void *, void *)) fnptr1234)((void *) This, (void *) param_1);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall189( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jlong param_1, jint param_2) {
    return (jint)((long (__stdcall *) (void *, void *, long)) fnptr1234)((void *) This, (void *) param_1, (long) param_2);
}
JNIEXPORT jint  JNICALL Java_org_apache_harmony_awt_nativebridge_windows_Win32_proxycall190( JNIEnv *env, jobject self, jlong fnptr1234, jlong This, jint param_1, jlong param_2) {
    return (jint)((long (__stdcall *) (void *, long, void *)) fnptr1234)((void *) This, (long) param_1, (void *) param_2);
}


