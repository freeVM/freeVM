<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2005, 2006 The Apache Software Foundation or its
    licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project name="LUNI Build" default="build" basedir=".">
    <description>Build for LUNI component</description>

    <!-- import common properties -->
    <import file="${basedir}/../../make/properties.xml" />

    <!-- set global properties for this build. -->
    <xmlproperty file="make/hyproperties.xml" semanticAttributes="true" />

    <fileset id="classes" dir="${hy.build}">
        <includesfile name="${hy.luni}/make/patternset.txt" />
        <excludesfile name="${hy.hdk}/build/patternsets/luni-kernel.txt" />
        <excludesfile name="${hy.hdk}/build/patternsets/security-kernel.txt" />
    </fileset>
                               
    <!-- Set build.compiler to "org.eclipse.jdt.core.JDTCompilerAdapter" to
	     use the Eclipse Java compiler. -->
    <property name="build.compiler" value="modern" />

	<property file="../../make/depends.properties" />    
    <property name="fdlibm.zip" location="${depends.oss}/fdlibm_5.2.zip" />

    <target name="build" depends="compile.java, build.jar" />

    <target name="copy.native.includes">
	<copy todir="${hy.hdk}/include" overwrite="yes">
	    <fileset dir="${hy.luni.src.main.native}/include/shared">
		<include name="vmi.h" />
		<include name="hyvmls.h" />
		<include name="hypool.h" />
		<include name="hyport.h" />
		<include name="hythread.h" />
		<include name="hycomp.h" />
		<include name="hysocket.h" />
		<include name="hyporterror.h" />
		<include name="gp.h" />
	        <include name="iohelp.h" />
	        <include name="exceptions.h" />
	        <include name="libglob.h" />
    	        <include name="fdlibm.h" />
	        <include name="hymagic.h" />
	        <include name="jsig.h" />
	    </fileset>
	</copy>
	<copy todir="${hy.jdk}/include" overwrite="yes">
	    <fileset dir="${hy.luni.src.main.native}/include/shared">
		<include name="jni.h" />
		<include name="jniport.h" />
	    </fileset>
	</copy>

	<antcall target="copy.native.includes.windows" />
	<antcall target="copy.native.includes.linux" />
    </target>
	
    <target name="copy.native.includes.windows" if="is.windows">
	<copy todir="${hy.hdk}/include" overwrite="yes">
	    <fileset dir="${hy.luni.src.main.native}/include/windows">
    		<include name="hymutex.h" />
    		<include name="jclprots.h" />
    		<include name="hysock.h" />
    		<include name="hyportpg.h" />
    	    </fileset>
	</copy>
    </target>
	
    <target name="copy.native.includes.linux" if="is.linux">
	<copy todir="${hy.hdk}/include" overwrite="yes">
	    <fileset dir="${hy.luni.src.main.native}/include/linux">
    		<include name="hymutex.h" />
    		<include name="jclprots.h" />
    		<include name="hysock.h" />
    		<include name="hyportpg.h" />
    	    </fileset>
	</copy>
    </target>
	
    <!-- Build native code -->
    <target name="build.native"
            depends="build.native.core, build.native.secondary" />
	
    <!-- Build the core luni native components -->
    <target name="build.native.core" >

	<!-- Build sig dll -->
	<make dir="${hy.luni.src.main.native}/sig/${hy.os}" />

	<copy todir="${hy.jdk}/jre/bin" overwrite="yes">
	    <fileset dir="${hy.luni.src.main.native}/sig">
	        <patternset includes="*${shlib.suffix}*" />
	    </fileset>
	</copy>
	    
	<!-- Build common lib -->
	<make dir="${hy.luni.src.main.native}/common/${hy.os}" />
	    
	<!-- Build pool lib -->
	<make dir="${hy.luni.src.main.native}/pool/${hy.os}" />

	<!-- Build thread dll -->
	<make dir="${hy.luni.src.main.native}/thread/${hy.os}" />

    	<copy todir="${hy.jdk}/jre/bin" overwrite="yes">
	    <fileset dir="${hy.luni.src.main.native}/thread">
            	<patternset includes="*${shlib.suffix}*" />
	    </fileset>
	</copy>
    	
	<!-- Build port dll -->
	<make dir="${hy.luni.src.main.native}/port/${hy.os}" />

    	<copy todir="${hy.jdk}/jre/bin" overwrite="yes">
	    <fileset dir="${hy.luni.src.main.native}/port">
            	<patternset includes="*${shlib.suffix}*" />
	    </fileset>
	</copy>
	    
	<!-- Build fdlibm lib -->
	<make dir="${hy.luni.src.main.native}/fdlibm/${hy.os}" />
	    
	<!-- Build vmi dll -->
	<make dir="${hy.luni.src.main.native}/vmi/${hy.os}" />
		
	<!-- On Linux we want to copy the libvmi.so into the
    	     deploy/lib directory so that the natives can link
    	     against it. This is only used at build time - at
    	     runtime the libvmi.so provided by the VM
    	     implementation is loaded
          -->
        <copy todir="${hy.hdk}/lib" overwrite="yes" failonerror="false">
    	    <fileset dir="${hy.luni.src.main.native}/vmi">
    		<include name="libvmi.so"/>
    	    </fileset>
    	</copy>
    </target>
	
    <!-- Build secondary native luni components -->
    <target name="build.native.secondary" >
        <!-- Build luni dll -->
    	<make dir="${hy.luni.src.main.native}/luni/${hy.os}" />
    	<copy todir="${hy.jdk}/jre/bin" overwrite="yes">
	    <fileset dir="${hy.luni.src.main.native}/luni">
            	<patternset includes="*${shlib.suffix}*" />
	    </fileset>
	</copy>
    	
        <!-- Build vmls lib -->
    	<make dir="${hy.luni.src.main.native}/vmls/${hy.os}" />
    	
        <!-- Build launcher executables -->
    	<make dir="${hy.luni.src.main.native}/launcher/${hy.os}" />

    	<!-- Copy across the built executables -->
        <copy todir="${hy.jdk}/jre/bin" overwrite="yes">
            <fileset dir="${hy.luni.src.main.native}/launcher">
                <patternset includes="java${exe.suffix}" />
                <patternset includes="javaw${exe.suffix}" />
            </fileset>
        </copy>
            
        <!-- Make sure the Linux launcher has execute permission -->
        <chmod file="${hy.jdk}/jre/bin/java${exe.suffix}" perm="ugo+x" />

    </target>
    
    <!-- Overlay OSS packages into their required locations -->
    <target name="overlay-oss" >
        <unzip src="${fdlibm.zip}" dest="${hy.luni.src.main.native}/fdlibm_dist" />
        <chmod dir="${hy.luni.src.main.native}/fdlibm_dist" perm="ugo+r" />
    </target>
    
    <!-- Clean overlaid OSS packages -->
    <target name="clean-overlay-oss" >
	    <delete dir="${hy.luni.src.main.native}/fdlibm_dist" quiet="true" />
    </target>
	
	<!-- Clean natives -->
    <target name="clean.native">
        <make dir="${hy.luni.src.main.native}/sig/${hy.os}" target="clean" />
        <make dir="${hy.luni.src.main.native}/common/${hy.os}" target="clean" />
        <make dir="${hy.luni.src.main.native}/pool/${hy.os}" target="clean" />
        <make dir="${hy.luni.src.main.native}/thread/${hy.os}" target="clean" />
        <make dir="${hy.luni.src.main.native}/port/${hy.os}" target="clean" />
        <make dir="${hy.luni.src.main.native}/fdlibm/${hy.os}" target="clean" />
        <make dir="${hy.luni.src.main.native}/vmi/${hy.os}" target="clean" />
        <make dir="${hy.luni.src.main.native}/luni/${hy.os}" target="clean" />
        <make dir="${hy.luni.src.main.native}/vmls/${hy.os}" target="clean" />
        <make dir="${hy.luni.src.main.native}/launcher/${hy.os}"
              target="clean" />
    </target>

    <target name="test" depends="build, compile.tests, run.tests" />

    <target name="clean">
        <delete failonerror="false">
            <fileset refid="classes" />
            <fileset dir="${hy.luni.bin.test}" />
        </delete>
    	<antcall target="clean.native.includes" />
    </target>
	
    <target name="clean.native.includes">
	<delete failonerror="false">
	    <fileset dir="${hy.hdk}/include">
		<include name="vmi.h" />
		<include name="hyvmls.h" />
		<include name="hypool.h" />
		<include name="hyport.h" />
		<include name="hythread.h" />
		<include name="hymutex.h" />
		<include name="jclprots.h" />
		<include name="hycomp.h" />
		<include name="hysocket.h" />
		<include name="hyporterror.h" />
		<include name="gp.h" />
 		<include name="hysock.h" />
		<include name="hyportpg.h" />	 
                <include name="iohelp.h" />
                <include name="exceptions.h" />
	        <include name="libglob.h" />
    	        <include name="fdlibm.h" />
	        <include name="hymagic.h" />
	        <include name="jsig.h" />
	    </fileset>
	</delete>
	<delete failonerror="false">
	    <fileset dir="${hy.jdk}/include">
		<include name="jni.h" />
		<include name="jniport.h" />
	    </fileset>
	</delete>
    </target>

    <target name="compile.java" depends="copy.resources">
        <echo message="Compiling LUNI classes" />

        <javac sourcepath=""
               srcdir="${hy.luni.src.main.java}"
               destdir="${hy.build}"
               source="${hy.javac.source}"
               target="${hy.javac.target}"
               debug="${hy.javac.debug}">

            <bootclasspath>
                <fileset dir="${hy.jdk}/jre/lib/boot">
                    <include name="**/*.jar" />
                </fileset>
            </bootclasspath>
        </javac>
    </target>

    <target name="-svn-detect">
      <available file=".svn" type="dir" property="svn.available"/>
    </target>

    <target name="-svn-prop" depends="-svn-detect" if="svn.available">
        <exec executable="svn">
            <arg value="info" />
            <redirector outputproperty="svn.info">
                <outputfilterchain>
                    <linecontainsregexp>
                        <regexp pattern="Repository Root:|Revision:" />
                    </linecontainsregexp>
                    <tokenfilter>
                        <replacestring from="Repository Root: " to=""/>
                        <replacestring from="Revision: " to=" "/>
                    </tokenfilter>
                    <striplinebreaks/>
                </outputfilterchain>
            </redirector>
        </exec>
    </target>

    <target name="-nosvn-prop" depends="-svn-detect" unless="svn.available">
        <property name="svn.info" value ="Unknown"/>
    </target>

    <target name="build.jar" depends="-svn-prop, -nosvn-prop">
        <jar destfile="${hy.jdk}/jre/lib/boot/luni.jar"
             manifest="${hy.luni}/META-INF/MANIFEST.MF">
            <fileset refid="classes" />
            <manifest>
                <attribute name="Implementation-Version" value="${svn.info}"/> 
            </manifest>
        </jar>
    </target>

    <target name="compile.tests">

        <compile-tests description="api tests" destdir="${hy.luni.bin.test}/api">
            <javac-elements>
                <src>
                    <pathelement location="${hy.luni.src.test}/api/java"/>
                </src>

                <include name="**/*Test.java" />
            </javac-elements>
        </compile-tests>

        <compile-tests description="api injected tests" destdir="${hy.luni.bin.test}/api.injected">
            <javac-elements>
                <src path="${hy.luni.src.test}/api/java.injected"/>
                <include name="**/*Test.java" />
            </javac-elements>
        </compile-tests>

        <compile-tests description="impl injected tests" destdir="${hy.luni.bin.test}/impl.injected">
            <javac-elements>
                <src>
                    <pathelement location="${hy.luni.src.test}/impl/java.injected"/>
                </src>

                <include name="**/*Test.java" />
            </javac-elements>
        </compile-tests>

        <compile-tests description="impl tests" destdir="${hy.luni.bin.test}/impl">
            <javac-elements>
                <src>
                    <pathelement location="${hy.luni.src.test}/java"/>
                    <pathelement location="${hy.luni.src.test}/impl/java"/>
                </src>

                <include name="**/*Test.java" />
            </javac-elements>
        </compile-tests>
    </target>

    <target name="run.tests" depends="run.tests.api, run.tests.impl" />

    <target name="run.tests.api">

        <run-tests description="api tests">
            <junit-elements>
                <classpath>
                    <pathelement path="${hy.luni.bin.test}/api"/>
                    <pathelement path="${hy.luni.src.test.resources}"/>
                    <pathelement path="../../build/tests"/>
                    <pathelement path="${hy.hdk}/build/test/support.jar" />
                </classpath>
                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.luni.src.test}/api/java">
                        <include name="**/*Test.java"/>

                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <run-tests description="api.injected tests">
            <junit-elements>
                <!-- to pick up junit.jar               -->
                <jvmarg value="-Xbootclasspath/a:${hy.luni.bin.test}/api.injected${path.separator}../../../../${junit.jar}${path.separator}../../../../build/tests${path.separator}${hy.hdk}/build/test/support.jar"/>

                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.luni.src.test}/api/java.injected">
                        <include name="**/*Test.java"/>
                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>

    <target name="run.tests.impl" unless="test.noimpl">
        <run-tests description="impl tests">
            <junit-elements>
            <classpath>
                    <pathelement path="${hy.luni.bin.test}/impl"/>
                    <pathelement path="${hy.luni.src.test.resources}"/>
                    <pathelement path="../../build/tests"/>
                <pathelement path="${hy.hdk}/build/test/support.jar" />
            </classpath>
                <!-- Required by various tests that set security manager etc -->
                <jvmarg value="-Djava.security.policy=../../../../support/src/test/resources/config/testing.policy" />

                <!-- Required for running the java.net unit tests -->
                <jvmarg value="-Dtest.ini.file=../../../../support/src/test/resources/config/localhosttest.ini" />


                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.luni.src.test}/impl/java">
                    <include name="**/*Test.java" />
                    </fileset>
                    <fileset dir="${hy.luni.src.test}/java">
                        <include name="**/*Test.java"/>
                    <exclude name="tests/api/java/io/InputStreamReaderTest.java" />
                    <exclude name="tests/api/java/io/OutputStreamWriterTest.java" />
                    <exclude name="tests/api/java/lang/ProcessTest.java" />
                    <exclude name="tests/api/java/net/DatagramSocketTest.java" />
                    <exclude name="tests/api/java/net/HttpURLConnectionTest.java" />
                    <exclude name="tests/api/java/net/JarURLConnectionTest.java" />
                    <exclude name="tests/api/java/net/MulticastSocketTest.java" />
                    <exclude name="tests/api/java/net/SocketImplTest.java" />
                    <exclude name="tests/api/java/net/SocketTest.java" />
                    <exclude name="tests/api/java/net/URLClassLoaderTest.java" />
                    <exclude name="tests/api/java/net/URLConnectionTest.java" />
                    <exclude name="tests/api/java/net/URLTest.java" />
                	<exclude name="tests/api/java/net/SocketPermissionTest.java" />
                </fileset>
            </batchtest>

            </junit-elements>
        </run-tests>

        <run-tests description="impl injected tests">
            <junit-elements>
                <!-- to pick up junit.jar               -->
                <jvmarg value="-Xbootclasspath/a:${hy.luni.bin.test}/impl.injected${path.separator}../../../../${junit.jar}${path.separator}../../../../build/tests"/>

                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.luni.src.test}/impl/java.injected">
                        <include name="**/*Test.java"/>

                        <exclude name="${hy.luni.x-list}" />

                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>

    <target name="touch-failures-file" if="test.failures">
        <echo file="${hy.tests.reports}/test.failures"
            append="true">luni${line.separator}</echo>
    </target>

    <target name="touch-errors-file" if="test.errors">
        <echo file="${hy.tests.reports}/test.errors"
            append="true">luni${line.separator}</echo>
    </target>

	<target name="copy.resources">
    	<mkdir dir="${hy.build}" />
        <copy todir="${hy.build}" includeemptydirs="false">
            <fileset dir="${hy.luni.src.main.java}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
	</target>
	
    <macrodef name="compile-tests">
        <attribute name="description" default="" />
        <attribute name="destdir"  />
        <element name="javac-elements" />
        <sequential>
            <echo message="Compiling LUNI @{description}" />

            <mkdir dir="@{destdir}" />

            <javac destdir="@{destdir}"
                   source="${hy.javac.source}"
                   target="${hy.javac.target}"
                   debug="${hy.javac.debug}">

                <javac-elements />

                <bootclasspath>
                    <fileset dir="${hy.jdk}/jre/lib/boot">
                        <include name="**/*.jar" />
            </fileset>
                </bootclasspath>
                <classpath location="../../build/tests" />
                <classpath location="${hy.hdk}/build/test/support.jar" />
            </javac>
        </sequential>
    </macrodef>

    <macrodef name="run-tests">
        <attribute name="description" default="" />
        <element name="junit-elements" />
        <sequential>
            <echo message="Running LUNI @{description}" />

            <mkdir dir="${hy.tests.reports}" />

            <property name="test.jre.home" value="${hy.jdk}/jre" />

            <junit fork="yes"
                   forkmode="once"
                   printsummary="withOutAndErr"
                   errorproperty="test.errors"
                   failureproperty="test.failures"
                   showoutput="on"
                   dir="${hy.luni.bin.test}"
                   jvm="${test.jre.home}/bin/java">

                <jvmarg value="-showversion" />

                <env key="JAVA_HOME" value="${test.jre.home}"/>
                <junit-elements />

                <formatter type="xml" />

                <test name="${test.case}" todir="${hy.tests.reports}" if="test.case" />
            </junit>
        </sequential>
    </macrodef>

</project>
