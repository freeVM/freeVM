<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2005, 2006 The Apache Software Foundation or its
    licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project name="LUNI Build" default="build" basedir=".">
    <description>Build for LUNI component</description>

    <!-- import common properties -->
    <import file="${basedir}/../../make/properties.xml" />

    <!-- set global properties for this build. -->
    <xmlproperty file="make/hyproperties.xml" semanticAttributes="true" />

    <fileset id="classes" dir="${hy.build}">
        <includesfile name="${hy.luni}/make/patternset.txt" />
        <excludesfile name="${hy.hdk}/build/patternsets/luni-kernel.txt" />
        <excludesfile name="${hy.hdk}/build/patternsets/security-kernel.txt" />
    </fileset>
                               
    <!-- Set build.compiler to "org.eclipse.jdt.core.JDTCompilerAdapter" to
         use the Eclipse Java compiler. -->
    <property name="build.compiler" value="modern" />
    
    <property file="../../make/depends.properties" />

    <target name="build" depends="compile.java, build.jar" />

    <target name="copy.native.includes">
    <copy todir="${hy.hdk}/include" overwrite="yes">
        <fileset dir="${hy.luni.src.main.native}/include/shared">
        <include name="vmi.h" />
        <include name="hyvmls.h" />
        <include name="hypool.h" />
        <include name="hyport.h" />
        <include name="hythread.h" />
        <include name="hycomp.h" />
        <include name="hysocket.h" />
        <include name="hyporterror.h" />
        <include name="gp.h" />
        <include name="iohelp.h" />
        <include name="libglob.h" />
        <include name="fdlibm.h" />
        <include name="hymagic.h" />
        </fileset>
    </copy>
    <copy todir="${hy.jdk}/include" overwrite="yes">
        <fileset dir="${hy.luni.src.main.native}/include/shared">
        <include name="jni.h" />
        <include name="jniport.h" />
        </fileset>
    </copy>

    <antcall target="copy.native.includes.windows" />
    <antcall target="copy.native.includes.linux" />
    </target>
    
    <target name="copy.native.includes.windows" if="is.windows">
    <copy todir="${hy.hdk}/include" overwrite="yes">
        <fileset dir="${hy.luni.src.main.native}/include/windows">
            <include name="hymutex.h" />
            <include name="jclprots.h" />
            <include name="hysock.h" />
            <include name="hyportpg.h" />
            </fileset>
    </copy>
    </target>
    
    <target name="copy.native.includes.linux" if="is.linux">
    <copy todir="${hy.hdk}/include" overwrite="yes">
        <fileset dir="${hy.luni.src.main.native}/include/linux">
            <include name="hymutex.h" />
            <include name="jclprots.h" />
            <include name="hysock.h" />
            <include name="hyportpg.h" />
            </fileset>
    </copy>
    </target>
    
    <!-- Build native code -->
    <target name="build.native" depends="build.native.core, build.native.secondary" />
    
    <target name="build.native.core" >
        <exec failonerror="true" 
              executable="${make.command}" 
              dir="${hy.luni.src.main.native}/vmi/${hy.os}">
            <env key="HY_HDK" value="${hy.hdk}" />
        </exec>
        
        <!-- On Linux we want to copy the libvmi.so into the deploy/lib
        directory so that the natives can link against it. This is only used at
        build time - at runtime the libvmi.so provided by the VM implementation
        is loaded -->
        <copy todir="${hy.hdk}/lib" overwrite="yes" failonerror="false">
            <fileset dir="${hy.luni.src.main.native}/vmi">
                <include name="libvmi.so"/>
            </fileset>
        </copy>
    </target>       
    
    <!-- Build secondary native code -->
    <target name="build.native.secondary" >
        <exec failonerror="true" 
              executable="${make.command}" 
              dir="${hy.luni.src.main.native}/luni/${hy.os}">
            <env key="HY_HDK" value="${hy.hdk}" />
        </exec>
        <copy todir="${hy.jdk}/jre/bin" overwrite="yes">
            <fileset dir="${hy.luni.src.main.native}/luni">
                <patternset includes="*${shlib.suffix}*" />
            </fileset>
        </copy>
        
        <exec failonerror="true" 
              executable="${make.command}" 
              dir="${hy.luni.src.main.native}/vmls/${hy.os}">
            <env key="HY_HDK" value="${hy.hdk}" />
        </exec>
        <copy todir="${hy.jdk}/jre/bin" overwrite="yes">
            <fileset dir="${hy.luni.src.main.native}/vmls">
                <patternset includes="*${shlib.suffix}*" />
            </fileset>
        </copy>
        
        <exec failonerror="true" 
              executable="${make.command}" 
              dir="${hy.luni.src.main.native}/launcher/${hy.os}">
            <env key="HY_HDK" value="${hy.hdk}" />
        </exec>
        <!-- Copy across the built executables -->
        <copy todir="${hy.jdk}/jre/bin" overwrite="yes">
            <fileset dir="${hy.luni.src.main.native}/launcher">
                <patternset includes="java${exe.suffix}" />
                <patternset includes="javaw${exe.suffix}" />
            </fileset>
        </copy>
    </target>
    
    <!-- Clean natives -->
    <target name="clean.native" if="is.windows">
        <exec failonerror="true" 
              executable="${make.command}" 
              dir="${hy.luni.src.main.native}/vmi/${hy.os}">
            <env key="HY_HDK" value="${hy.hdk}" />
            <arg line="clean" />
        </exec>
        <exec failonerror="true" 
              executable="${make.command}" 
              dir="${hy.luni.src.main.native}/luni/${hy.os}">
            <env key="HY_HDK" value="${hy.hdk}" />
            <arg line="clean" />
        </exec>
        <exec failonerror="true" 
              executable="${make.command}" 
              dir="${hy.luni.src.main.native}/launcher/${hy.os}">
            <env key="HY_HDK" value="${hy.hdk}" />
            <arg line="clean" />
        </exec>
        <exec failonerror="true" 
              executable="${make.command}" 
              dir="${hy.luni.src.main.native}/vmls/${hy.os}">
            <env key="HY_HDK" value="${hy.hdk}" />
            <arg line="clean" />
        </exec>
    </target>

    <target name="test" depends="build, compile.tests, run.tests" />

    <target name="clean">
        <delete failonerror="false">
            <fileset refid="classes" />
            <fileset dir="${hy.luni.bin.test}" />
        </delete>
        <antcall target="clean.native.includes" />
    </target>
    
    <target name="clean.native.includes">
    <delete failonerror="false">
        <fileset dir="${hy.hdk}/include">
        <include name="vmi.h" />
        <include name="hyvmls.h" />
        <include name="hypool.h" />
        <include name="hyport.h" />
        <include name="hythread.h" />
        <include name="hymutex.h" />
        <include name="jclprots.h" />
        <include name="hycomp.h" />
        <include name="hysocket.h" />
        <include name="hyporterror.h" />
        <include name="gp.h" />
        <include name="hysock.h" />
        <include name="hyportpg.h" />    
        <include name="iohelp.h" />
        <include name="libglob.h" />
        <include name="fdlibm.h" />
        <include name="hymagic.h" />
        </fileset>
    </delete>
    <delete failonerror="false">
        <fileset dir="${hy.jdk}/include">
        <include name="jni.h" />
        <include name="jniport.h" />
        </fileset>
    </delete>
    </target>

    <target name="compile.java">
        <echo message="Compiling LUNI classes" />

        <mkdir dir="${hy.build}" />

            <copy todir="${hy.build}" includeemptydirs="false">
                <fileset dir="${hy.luni.src.main.java}">
                    <exclude name="**/*.java" />
                </fileset>
            </copy>

        <javac sourcepath=""
               srcdir="${hy.luni.src.main.java}"
               destdir="${hy.build}"
               source="${hy.javac.source}"
               target="${hy.javac.target}"
               debug="${hy.javac.debug}">

            <bootclasspath>
                <fileset dir="${hy.jdk}/jre/lib/boot">
                    <include name="**/*.jar" />
                </fileset>
            </bootclasspath>
        </javac>
    </target>

    <target name="build.jar">
        <jar destfile="${hy.jdk}/jre/lib/boot/luni.jar"
             manifest="${hy.luni}/META-INF/MANIFEST.MF">
            <fileset refid="classes" />
        </jar>
    </target>

    <target name="compile.tests">

        <compile-tests description="api tests" destdir="${hy.luni.bin.test}/api">
            <javac-elements>
                <src>
                    <pathelement location="${hy.luni.src.test}/api/java"/>
                </src>

                <include name="**/*Test.java" />
            </javac-elements>
        </compile-tests>

        <compile-tests description="api injected tests" destdir="${hy.luni.bin.test}/api.injected">
            <javac-elements>
                <src path="${hy.luni.src.test}/api/java.injected"/>
                <include name="**/*Test.java" />
            </javac-elements>
        </compile-tests>

        <compile-tests description="impl injected tests" destdir="${hy.luni.bin.test}/impl.injected">
            <javac-elements>
                <src>
                    <pathelement location="${hy.luni.src.test}/impl/java.injected"/>
                </src>

                <include name="**/*Test.java" />
            </javac-elements>
        </compile-tests>

        <compile-tests description="impl tests" destdir="${hy.luni.bin.test}/impl">
            <javac-elements>
                <src>
                    <pathelement location="${hy.luni.src.test}/java"/>
                    <pathelement location="${hy.luni.src.test}/impl/java"/>
                </src>

                <include name="**/*Test.java" />
            </javac-elements>
        </compile-tests>
    </target>

    <target name="run.tests" depends="run.tests.api, run.tests.impl" />

    <target name="run.tests.api">

        <run-tests description="api tests">
            <junit-elements>
                <classpath>
                    <pathelement path="${hy.luni.bin.test}/api"/>
                    <pathelement path="${hy.luni.src.test.resources}"/>
                    <pathelement path="../../build/tests"/>
                    <pathelement path="${hy.hdk}/build/test/support.jar" />
                </classpath>
                <!-- Required for running the unit tests               -->
                <!-- Note: will be deleted after improving             -->
                <!-- support class: all resource                       -->
                <!-- files will be placed on the classpath             -->
                <jvmarg value="-DRESOURCE_DIR=${hy.luni.src.test}/resources"/>
                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.luni.src.test}/api/java">
                        <include name="**/*Test.java"/>

                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <run-tests description="api.injected tests">
            <junit-elements>
                <!-- Required for running the serialization unit tests -->
                <!-- Note: will be deleted after improving             -->
                <!-- SerializationTest support class: all resource     -->
                <!-- files will be placed on the classpath             -->
                <jvmarg value="-DRESOURCE_DIR=${hy.luni.src.test}/resources"/>

                <!-- to pick up junit.jar               -->
                <jvmarg value="-Xbootclasspath/a:${hy.luni.bin.test}/api.injected${path.separator}../../../../${junit.jar}${path.separator}../../../../build/tests${path.separator}${hy.hdk}/build/test/support.jar"/>

                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.luni.src.test}/api/java.injected">
                        <include name="**/*Test.java"/>
                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>

    <target name="run.tests.impl" unless="test.noimpl">
        <run-tests description="impl tests">
            <junit-elements>
                <classpath>
                    <pathelement path="${hy.luni.bin.test}/impl"/>
                    <pathelement path="${hy.luni.src.test.resources}"/>
                    <pathelement path="../../build/tests"/>
                    <pathelement path="${hy.hdk}/build/test/support.jar" />
                </classpath>
                <!-- Required for running the serialization unit tests -->
                <!-- Note: will be deleted after improving             -->
                <!-- SerializationTest support class: all resource     -->
                <!-- files will be placed on the classpath             -->
                <jvmarg value="-DRESOURCE_DIR=${hy.luni.src.test}/resources"/>
                
                <!-- Required by various tests that set security manager etc -->
                <jvmarg value="-Djava.security.policy=../../../../support/src/test/resources/config/testing.policy" />
    
                <!-- Required for running the java.net unit tests -->
                <jvmarg value="-Dtest.ini.file=../../../../support/src/test/resources/config/localhosttest.ini" />

                
                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.luni.src.test}/impl/java">
                        <include name="**/*Test.java"/>
                    </fileset>
                    <fileset dir="${hy.luni.src.test}/java">
                        <include name="**/*Test.java"/>
                    <exclude name="tests/api/java/lang/IllegalThreadStateExceptionTest.java" />
                    <exclude name="tests/api/java/lang/ThreadTest.java" />
                    <exclude name="tests/api/java/io/InputStreamReaderTest.java" />
                    <exclude name="tests/api/java/io/ObjectInputStreamTest.java" />
                    <exclude name="tests/api/java/io/ObjectOutputStreamTest.java" />
                    <exclude name="tests/api/java/io/OutputStreamWriterTest.java" />
                    <exclude name="tests/api/java/io/PipedInputStreamTest.java" />
                    <exclude name="tests/api/java/lang/AssertionErrorTest.java" />
                    <exclude name="tests/api/java/lang/ClassTest.java" />
                    <exclude name="tests/api/java/lang/ProcessTest.java" />
                    <exclude name="tests/api/java/net/DatagramSocketTest.java" />
                    <exclude name="tests/api/java/net/HttpURLConnectionTest.java" />
                    <exclude name="tests/api/java/net/JarURLConnectionTest.java" />
                    <exclude name="tests/api/java/net/MulticastSocketTest.java" />
                    <exclude name="tests/api/java/net/SocketImplTest.java" />
                    <exclude name="tests/api/java/net/SocketTest.java" />
                    <exclude name="tests/api/java/net/URLClassLoaderTest.java" />
                    <exclude name="tests/api/java/net/URLConnectionTest.java" />
                    <exclude name="tests/api/java/net/URLTest.java" />
                    <exclude name="tests/api/java/net/SocketPermissionTest.java" />
                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <run-tests description="impl injected tests">
            <junit-elements>
                <!-- Required for running the serialization unit tests -->
                <!-- Note: will be deleted after improving             -->
                <!-- SerializationTest support class: all resource     -->
                <!-- files will be placed on the classpath             -->
                <jvmarg value="-DRESOURCE_DIR=${hy.luni.src.test}/resources"/>

                <!-- to pick up junit.jar               -->
                <jvmarg value="-Xbootclasspath/a:${hy.luni.bin.test}/impl.injected${path.separator}../../../../${junit.jar}${path.separator}../../../../build/tests"/>

                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.luni.src.test}/impl/java.injected">
                        <include name="**/*Test.java"/>

                        <exclude name="${hy.luni.x-list}" />

                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>

    <target name="touch-failures-file" if="test.failures">
        <echo file="${hy.tests.reports}/test.failures"
            append="true" >luni
</echo>
    </target>

    <target name="touch-errors-file" if="test.errors">
        <echo file="${hy.tests.reports}/test.errors"
            append="true" >luni
</echo>
    </target>

    <macrodef name="compile-tests">
        <attribute name="description" default="" />
        <attribute name="destdir"  />
        <element name="javac-elements" />
        <sequential>
            <echo message="Compiling LUNI @{description}" />

            <mkdir dir="@{destdir}" />

            <javac destdir="@{destdir}"
                   source="${hy.javac.source}"
                   target="${hy.javac.target}"
                   debug="${hy.javac.debug}">

                <javac-elements />

                <bootclasspath>
                    <fileset dir="${hy.jdk}/jre/lib/boot">
                        <include name="**/*.jar" />
                    </fileset>
                </bootclasspath>
                <classpath location="../../build/tests" />
                <classpath location="${hy.hdk}/build/test/support.jar" />
            </javac>
        </sequential>
    </macrodef>

    <macrodef name="run-tests">
        <attribute name="description" default="" />
        <element name="junit-elements" />
        <sequential>
            <echo message="Running LUNI @{description}" />

            <mkdir dir="${hy.tests.reports}" />

            <property name="test.jre.home" value="${hy.jdk}/jre" />

            <junit fork="yes"
                   forkmode="once"
                   printsummary="withOutAndErr"
                   errorproperty="test.errors"
                   failureproperty="test.failures"
                   showoutput="on"
                   dir="${hy.luni.bin.test}"
                   jvm="${test.jre.home}/bin/java">

                <jvmarg value="-showversion" />

                <env key="JAVA_HOME" value="${test.jre.home}"/>
                <junit-elements />

                <formatter type="xml" />

                <test name="${test.case}" todir="${hy.tests.reports}" if="test.case" />
            </junit>
        </sequential>
    </macrodef>

</project>
