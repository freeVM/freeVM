<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2006 The Apache Software Foundation or its licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project name="Common_CRYPTO_Build">

    <property file="../../../../make/depends.properties" />

    <target name="compile.java" description="Compile CRYPTO java code">
        <echo message="Compiling CRYPTO classes from ${hy.crypto.src.main.java}" />

        <mkdir dir="${hy.build}" />

        <javac sourcepath=""
            srcdir="${hy.crypto.src.main.java}"
            destdir="${hy.build}"
            source="${hy.javac.source}"
            target="${hy.javac.target}"
            debug="${java.debug.option}">

            <bootclasspath>
                <fileset dir="${hy.target}/jre/lib/boot">
                    <include name="**/*.jar" />
                </fileset>
            </bootclasspath>
        </javac>
    </target>

    <target name="build.jar">
        <jar destfile="${hy.target}/jre/lib/boot/${hy.crypto.packaging.jarname}.jar"
             manifest="${hy.crypto}/META-INF/MANIFEST.MF">
            <fileset dir="${hy.build}"
                     includesfile="${hy.crypto}/make/patternset.txt" />
        </jar>
    </target>


    <target name="compile.tests">

        <compile-tests description="test support files" destdir="../../../../build/tests">
            <javac-elements>
                <src path="${hy.crypto.src.test}/support/common/java"/>
                <include name="**/*.java" />
            </javac-elements>
        </compile-tests>


        <compile-tests description="api tests" destdir="${hy.crypto.bin.test}/api">
            <javac-elements>
                <!-- FIXME: CRYPTO tests should not reach into security module code -->
                <src>
                    <pathelement location="${hy.crypto.src.test}/api/java"/>
                    <pathelement location="${hy.crypto}/../security/src/test/java/common"/>
                </src>

                <include name="javax/crypto/**/*Test.java" />
                <include name="org/apache/harmony/crypto/**/*Test.java" />
                <include name="org/apache/harmony/security/test/**/*" />
            </javac-elements>
        </compile-tests>

        <compile-tests description="api injected tests" destdir="${hy.crypto.bin.test}/api.injected">
            <javac-elements>
                <src path="${hy.crypto.src.test}/api/java.injected"/>
                <include name="**/*Test.java" />
            </javac-elements>
        </compile-tests>

        <compile-tests description="impl injected tests" destdir="${hy.crypto.bin.test}/impl.injected">
            <javac-elements>
                <!-- FIXME: CRYPTO tests should not reach into security module code -->
                <src>
                    <pathelement location="${hy.crypto.src.test}/impl/java.injected"/>
                    <pathelement location="${hy.crypto}/../security/src/test/java/common"/>
                </src>

                <include name="javax/crypto/**/*Test.java" />
                <include name="org/apache/harmony/crypto/**/*Test.java" />
                <include name="org/apache/harmony/security/**/*" />
            </javac-elements>
        </compile-tests>

        <compile-tests description="impl tests" destdir="${hy.crypto.bin.test}/impl">
            <javac-elements>
                <!-- FIXME: CRYPTO tests should not reach into security module code -->
                <src>
                	<pathelement location="${hy.crypto.src.test}/impl/java"/>
                    <pathelement location="${hy.crypto}/../security/src/test/java/common"/>
                </src>

                <include name="javax/crypto/**/*Test.java" />
                <include name="org/apache/harmony/crypto/**/*Test.java" />
                <include name="org/apache/harmony/security/**/*" />
            </javac-elements>
        </compile-tests>
    </target>




    <target name="run.tests" depends="run.tests.api, run.tests.impl" />

    <target name="run.tests.api">

        <run-tests description="api tests">
            <junit-elements>
                <!-- Required for running the serialization unit tests -->
                <!-- Note: will be deleted after improving             -->
                <!-- SerializationTest support class: all resource     -->
                <!-- files will be placed on the classpath             -->
                <jvmarg value="-DTEST_SRC_DIR=${hy.crypto.src.test}/api/java"/>

                <classpath>
                    <pathelement path="${hy.crypto.bin.test}/api"/>
                    <pathelement path="../../../../build/tests"/>
                </classpath>

                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.crypto.src.test}/api/java">
                        <include name="**/*Test.java"/>
                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <run-tests description="api.injected tests">
            <junit-elements>
                <!-- to pick up junit.jar               -->
                <jvmarg value="-Xbootclasspath/a:${hy.crypto.bin.test}/api.injected${path.separator}../../../../${junit.jar}${path.separator}../../../../build/tests"/>

                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.crypto.src.test}/api/java.injected">
                        <include name="**/*Test.java"/>
                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>


    <target name="run.tests.impl">
        <run-tests description="impl tests">
            <junit-elements>
                <classpath>
                    <pathelement path="${hy.crypto.bin.test}/impl"/>
                    <pathelement path="../../../../build/tests"/>
                </classpath>
            	
                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.crypto.src.test}/impl/java">
                        <include name="**/*Test.java"/>
                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <run-tests description="impl injected tests">
            <junit-elements>
                <!-- to pick up junit.jar               -->
                <jvmarg value="-Xbootclasspath/a:${hy.crypto.bin.test}/impl.injected${path.separator}../../../../${junit.jar}${path.separator}../../../../build/tests"/>

                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.crypto.src.test}/impl/java.injected">
                        <include name="**/*Test.java"/>
                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>


    <target name="touch-failures-file" if="test.failures">
        <echo file="${hy.tests.reports}/test.failures"
            append="true" >crypto
</echo>
    </target>
    <target name="touch-errors-file" if="test.errors">
        <echo file="${hy.tests.reports}/test.errors"
            append="true" >crypto
</echo>
    </target>

    <target name="copy.resources">
        <!-- Nothing for CRYPTO -->
    </target>

    <macrodef name="compile-tests">
        <attribute name="description" default="" />
        <attribute name="destdir"  />
        <element name="javac-elements" />
        <sequential>
            <echo message="Compiling CRYPTO @{description}" />

            <mkdir dir="@{destdir}" />

            <javac destdir="@{destdir}"
                source="${hy.javac.source}"
                target="${hy.javac.target}"
                debug="${java.debug.option}">

                <javac-elements />

                <bootclasspath>
                    <fileset dir="${hy.target}/jre/lib/boot">
                        <include name="**/*.jar" />
                    </fileset>
                </bootclasspath>
                <classpath location="../../../../build/tests" />
            </javac>
        </sequential>
    </macrodef>


    <macrodef name="run-tests">
        <attribute name="description" default="" />
        <element name="junit-elements" />
        <sequential>
            <echo message="Running CRYPTO @{description}" />

            <mkdir dir="${hy.tests.reports}" />

            <property name="test.jre.home" value="${hy.target}/jre" />

            <junit fork="yes"
                forkmode="once"
                printsummary="withOutAndErr"
                errorproperty="test.errors"
                failureproperty="test.failures"
                showoutput="on"
                dir="${hy.crypto.bin.test}"
                jvm="${test.jre.home}/bin/java">

                <jvmarg value="-showversion"/>

                <env key="JAVA_HOME" value="${test.jre.home}"/>
                <junit-elements />

                <classpath>
                    <pathelement path="${hy.crypto.src.test.resources}"/>
                </classpath>

                <formatter type="xml" />

                <test name="${test.case}" todir="${hy.tests.reports}" if="test.case" />
            </junit>
        </sequential>
    </macrodef>

</project>

