/*
 * RMI stub class
 * for class org.apache.harmony.jndi.provider.rmi.registry.RemoteReferenceWrapper
 * Compatible with stub protocol version 1.1/1.2
 *
 * Generated by DRL RMI Compiler (rmic).
 *
 * DO NOT EDIT!!!
 * Contents subject to change without notice!
 */
package org.apache.harmony.jndi.provider.rmi.registry;


public final class RemoteReferenceWrapper_Stub extends java.rmi.server.RemoteStub
        implements org.apache.harmony.jndi.provider.rmi.registry.RemoteReference, java.rmi.Remote {

    private static final long serialVersionUID = 2;

    private static final long interfaceHash = 2534274963554139942L;

    private static boolean useNewInvoke;

    private static final java.rmi.server.Operation[] operations = {
        new java.rmi.server.Operation("javax.naming.Reference getReference()")
    };

    private static java.lang.reflect.Method $method_getReference_0;

    static {
        try {
            java.rmi.server.RemoteRef.class.getMethod("invoke", new java.lang.Class[] {java.rmi.Remote.class, java.lang.reflect.Method.class, java.lang.Object[].class, long.class});

            $method_getReference_0 = org.apache.harmony.jndi.provider.rmi.registry.RemoteReference.class.getMethod("getReference", new java.lang.Class[] {});

            useNewInvoke = true;
        } catch (java.lang.NoSuchMethodException e) {
            useNewInvoke = false;
        }
    }

    public RemoteReferenceWrapper_Stub() {
        super();
    }

    public RemoteReferenceWrapper_Stub(java.rmi.server.RemoteRef ref) {
        super(ref);
    }

    // Implementation of getReference()
    public javax.naming.Reference getReference()
            throws javax.naming.NamingException, java.rmi.RemoteException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_getReference_0, null, 3529874867989176284L);
                return ((javax.naming.Reference) $result);
            } else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);

                ref.invoke(call);

                javax.naming.Reference $result;

                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (javax.naming.Reference) in.readObject();
                } catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("Error unmarshalling return value", e);
                } catch (java.lang.ClassNotFoundException e) {
                    throw new java.rmi.UnmarshalException("Error unmarshalling return value", e);
                } finally {
                    ref.done(call);
                }

                return $result;
            }
        } catch (java.lang.RuntimeException e) {
            throw e;
        } catch (java.rmi.RemoteException e) {
            throw e;
        } catch (javax.naming.NamingException e) {
            throw e;
        } catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("Undeclared checked exception", e);
        }
    }
}
