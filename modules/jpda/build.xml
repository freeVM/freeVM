<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project name="JPDA Build" default="build" basedir=".">
    <description>Build for JPDA component</description>

    <!-- import common properties -->
    <property name="hy.hdk" location="${basedir}/../../deploy" />
    <import file="../../make/properties.xml" />

    <!-- set global properties for this build. -->
    <xmlproperty file="make/hyproperties.xml" semanticAttributes="true" />
    
    <property file="../../make/depends.properties" />

    <target name="build"/>

    <!-- Build native code -->
    <target name="build-native">
        
        <!-- Build agent shared lib -->
        <make dir="${hy.jpda.src.main.native}/jdwp/${hy.os}/agent" />
        
        <!-- Build transport shared lib -->
        <make dir="${hy.jpda.src.main.native}/jdwp/${hy.os}/transport" />

        <!-- copy to our local jdk skeleton -->
        <copy todir="${hy.jdk}/jre/bin" overwrite="yes">
            <fileset dir="${hy.jpda.src.main.native}/jdwp/${hy.os}">
                <patternset includes="*${shlib.suffix}*" />
            </fileset>
        </copy>
    </target>


    <!-- Clean natives -->
    <target name="clean-native">
        <make dir="${hy.jpda.src.main.native}/jdwp/${hy.os}/agent" target="clean" />
        <make dir="${hy.jpda.src.main.native}/jdwp/${hy.os}/transport" target="clean" />
    </target>

    <target name="test" depends="-test-module">
        <fail message="Some tests failed">
            <condition>
                <or>
                    <isset property="test.failures" />
                    <isset property="test.errors" />
                </or>
            </condition>
        </fail>
    </target>

    <!-- internal target for local and global test run sequence -->
    <target name="-test-module" depends="build, compile-tests, run-tests" />

    <target name="clean">
        <delete file="${hy.jdk}/jre/lib/boot/luni.jar" />
        <delete file="${hy.jdk}/jre/lib/boot/luni-src.jar" />
        <delete failonerror="false">
            <fileset refid="classes" />
            <fileset dir="${hy.luni.bin.test}" />
        </delete>
        <antcall target="clean-native-includes" />
    </target>

    <target name="clean-native-includes">
        <delete failonerror="false">
            <fileset dir="${hy.hdk}/include">
                <include name="vmi.h" />
                <include name="hyvmls.h" />
                <include name="jclprots.h" />
                <include name="hysocket.h" />
                <include name="gp.h" />
                <include name="iohelp.h" />
                <include name="exceptions.h" />
                <include name="libglob.h" />
                <include name="fdlibm.h" />
                <include name="hymagic.h" />
                <include name="jsig.h" />
            </fileset>
        </delete>
        <delete failonerror="false">
            <fileset dir="${hy.jdk}/include">
                <include name="jni.h" />
                <include name="jniport.h" />
                <include name="jvmti.h" />
            </fileset>
        </delete>
    </target>

    <target name="compile-java">
        <echo message="Compiling LUNI classes" />

        <javac sourcepath=""
               srcdir="${hy.luni.src.main.java}"
               destdir="${hy.build}"
               compiler="${hy.javac.compiler}"
               memoryMaximumSize="${hy.javac.maxmem}"
               source="${hy.javac.source}" 
               target="${hy.javac.target}"
               debug="${hy.javac.debug}">

            <compilerarg line="${build.compilerarg}" />

            <bootclasspath>
                <fileset dir="${hy.jdk}/jre/lib/boot">
                    <include name="**/*.jar" />
                </fileset>
            </bootclasspath>
        </javac>
    </target>

    <target name="build-jar" depends="svn-info">
        <jar destfile="${hy.jdk}/jre/lib/boot/luni.jar"
             manifest="${hy.luni}/META-INF/MANIFEST.MF">
            <fileset refid="classes" />
            <manifest>
                <attribute name="Implementation-Version" value="${svn.info}"/>
            </manifest>
            
            <metainf file="${hy.hdk}/NOTICE"/>
            <metainf file="${hy.hdk}/LICENSE"/>            
        </jar>

        <jar destfile="${hy.jdk}/jre/lib/boot/luni-src.jar">
            <fileset dir="${hy.luni.src.main.java}" />
            <manifest>
                <attribute name="Implementation-Version" value="${svn.info}"/>
            </manifest>
            
            <metainf file="${hy.hdk}/NOTICE"/>
            <metainf file="${hy.hdk}/LICENSE"/>            
        </jar>
    </target>

    <target name="compile-tests" depends="copy-test-resources">
        <compile-tests description="JUnit Tests" destdir="${hy.luni.bin.test}">
            <javac-elements>
                <src>
                    <pathelement location="${hy.luni.src.test}/java"/>
                </src>
                <include name="**/*.java" />
            </javac-elements>
        </compile-tests>
    </target>

    <target name="run-tests">
        <run-tests description="JUnit Tests">
            <junit-elements>
                <classpath>
                    <pathelement path="${hy.luni.bin.test}"/>
                    <pathelement path="${hy.luni.src.test.resources}"/>
                    <pathelement path="../../build/tests"/>
                    <pathelement path="${hy.hdk}/build/test/support.jar" />
                </classpath>
                <!-- Required by various tests that set security manager etc -->
                <jvmarg value="-Djava.security.policy=../../support/src/test/resources/config/testing.policy" />

                <!-- Required for running the java.net unit tests -->
                <jvmarg value="-Dtest.ini.file=../../support/src/test/resources/config/localhosttest.ini" />


                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.luni.src.test}/java">
                        <include name="**/*Test.java"/>
                        <excludesfile name="${exclude.file}" />
                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>

    <target name="touch-failures-file" if="test.failures">
        <echo file="${hy.tests.reports}/test.failures"
            append="true">luni${line.separator}</echo>
    </target>

    <target name="touch-errors-file" if="test.errors">
        <echo file="${hy.tests.reports}/test.errors"
            append="true">luni${line.separator}</echo>
    </target>

    <target name="copy-resources">
        <mkdir dir="${hy.build}" />
        <copy todir="${hy.build}" includeemptydirs="false">
            <fileset dir="${hy.luni.src.main.java}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

    <target name="copy-test-resources">
        <mkdir dir="${hy.luni.bin.test}" />
        <copy todir="${hy.luni.bin.test}" includeemptydirs="false">
            <fileset dir="${hy.luni.src.test.resources}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

    <macrodef name="compile-tests">
        <attribute name="description" default="" />
        <attribute name="destdir"  />
        <element name="javac-elements" />
        <sequential>
            <echo message="Compiling LUNI @{description}" />

            <mkdir dir="@{destdir}" />

            <javac destdir="@{destdir}"
               compiler="${hy.javac.compiler}"
               memoryMaximumSize="${hy.javac.maxmem}"
               source="${hy.javac.source}" 
               target="${hy.javac.target}"
               debug="${hy.javac.debug}">

                <compilerarg line="${build.compilerarg}" />

                <javac-elements />

                <bootclasspath>
                    <fileset dir="${hy.jdk}/jre/lib/boot">
                        <include name="**/*.jar" />
                    </fileset>
                </bootclasspath>
                <classpath location="../../build/tests" />
                <classpath location="${hy.hdk}/build/test/support.jar" />
            </javac>
        </sequential>
    </macrodef>

    <macrodef name="run-tests">
        <attribute name="description" default="" />
        <element name="junit-elements" />
        <sequential>
            <echo message="Running LUNI @{description}" />

            <mkdir dir="${hy.tests.reports}" />

            <property name="test.jre.home" value="${hy.jdk}/jre" />

            <junit fork="yes"
                   forkmode="${hy.test.forkmode}"
                   timeout="${hy.test.timeout}"
                   printsummary="withOutAndErr"
                   errorproperty="test.errors"
                   failureproperty="test.failures"
                   showoutput="on"
                   dir="${basedir}"
                   jvm="${test.jre.home}/bin/java">

                <junit-elements />

                <formatter type="xml" />

                <test name="${test.case}" todir="${hy.tests.reports}" if="test.case" />
            </junit>
        </sequential>
    </macrodef>
</project>
