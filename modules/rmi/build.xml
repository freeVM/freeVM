<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2005, 2006 The Apache Software Foundation or its
    licensors, as applicable.
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project name="RMI Build" default="build" basedir=".">
    <description>Build for RMI component</description>

    <!-- import common properties -->
    <import file="${basedir}/../../make/properties.xml" />

    <!-- set global properties for this build. -->
    <xmlproperty file="make/hyproperties.xml" semanticAttributes="true" />

    <!-- Set build.compiler to "org.eclipse.jdt.core.JDTCompilerAdapter" to
	     use the Eclipse Java compiler. -->
    <property name="build.compiler" value="modern" />

    <property file="../../make/depends.properties" />

    <target name="build" depends="compile.java, build.jar" />

    <target name="test" depends="build, compile.tests, run.tests" />

    <target name="clean">
        <delete failonerror="false">
            <fileset dir="${hy.build}"
                     includesfile="${hy.rmi}/make/patternset.txt" />
            <fileset dir="${hy.rmi.bin.test}" />
        </delete>
    </target>

    <target name="compile.java">
        <echo message="Compiling RMI classes" />

        <mkdir dir="${hy.build}" />

        <javac sourcepath=""
               srcdir="${hy.rmi.src.main.java}"
               destdir="${hy.build}"
               source="${hy.javac.source}"
               target="${hy.javac.target}"
               debug="${hy.javac.debug}">

            <bootclasspath>
                <fileset dir="${hy.jdk}/jre/lib/boot">
                    <include name="**/*.jar" />
                </fileset>
            </bootclasspath>
        </javac>
    </target>

    <target name="build.jar">
        <jar destfile="${hy.jdk}/jre/lib/boot/${hy.rmi.packaging.jarname}.jar"
             manifest="${hy.rmi}/META-INF/MANIFEST.MF">
            <fileset dir="${hy.build}"
                     includesfile="${hy.rmi}/make/patternset.txt" />
        </jar>
    </target>

    <target name="compile.tests">

        <compile-tests description="api tests" destdir="${hy.rmi.bin.test}/api">
            <javac-elements>
                <src>
                    <pathelement location="${hy.rmi.src.test}/api/java"/>
                </src>

                <include name="**/*Test.java"/>
            </javac-elements>
        </compile-tests>

    </target>

    <target name="run.tests" depends="run.tests.api" />

    <target name="run.tests.api">

        <run-tests description="api tests">
            <junit-elements>

                <classpath>
                    <pathelement path="${hy.rmi.bin.test}/api"/>
                    <pathelement path="../../build/tests"/>
                </classpath>

                <batchtest todir="${hy.tests.reports}" haltonfailure="no" unless="test.case">
                    <fileset dir="${hy.rmi.src.test}/api/java">
                        <include name="**/*Test.java"/>
                        <exclude name="org/apache/harmony/rmi/ConnectionTest.java" />
                        <exclude name="org/apache/harmony/rmi/DGCTest.java" />
                        <exclude name="org/apache/harmony/rmi/activation/DefaultParamTest.java" />
                        <exclude name="org/apache/harmony/rmi/activation/StartupShutdownTest.java" />
                    </fileset>
                </batchtest>

            </junit-elements>
        </run-tests>

        <antcall target="touch-failures-file" />
        <antcall target="touch-errors-file" />
    </target>

    <target name="touch-failures-file" if="test.failures">
        <echo file="${hy.tests.reports}/test.failures"
            append="true" >rmi
</echo>
    </target>

    <target name="touch-errors-file" if="test.errors">
        <echo file="${hy.tests.reports}/test.errors"
            append="true" >rmi
</echo>
    </target>

    <macrodef name="compile-tests">
        <attribute name="description" default="" />
        <attribute name="destdir"  />
        <element name="javac-elements" />
        <sequential>
            <echo message="Compiling RMI @{description}" />

            <mkdir dir="@{destdir}" />

            <javac destdir="@{destdir}"
                   source="${hy.javac.source}"
                   target="${hy.javac.target}"
                   debug="${hy.javac.debug}">

                <javac-elements />

                <bootclasspath>
                    <fileset dir="${hy.jdk}/jre/lib/boot">
                        <include name="**/*.jar" />
                    </fileset>
                </bootclasspath>
                <classpath location="../../build/tests" />
            </javac>
        </sequential>
    </macrodef>


    <macrodef name="run-tests">
        <attribute name="description" default="" />
        <element name="junit-elements" />
        <sequential>
            <echo message="Running RMI @{description}" />

            <mkdir dir="${hy.tests.reports}" />

            <property name="test.jre.home" value="${hy.jdk}/jre" />

            <junit fork="yes"
                   forkmode="once"
                   printsummary="withOutAndErr"
                   errorproperty="test.errors"
                   failureproperty="test.failures"
                   showoutput="on"
                   dir="${hy.rmi.bin.test}"
                   jvm="${test.jre.home}/bin/java">

                <jvmarg value="-showversion"/>
                <jvmarg value="-Djava.security.policy=../../make/all.policy"/>

                <env key="JAVA_HOME" value="${test.jre.home}"/>
                <junit-elements />

                <classpath>
                    <pathelement path="${hy.rmi.src.test.resources}"/>
                </classpath>

                <formatter type="xml" />

                <test name="${test.case}" todir="${hy.tests.reports}" if="test.case" />
            </junit>
        </sequential>
    </macrodef>

</project>
