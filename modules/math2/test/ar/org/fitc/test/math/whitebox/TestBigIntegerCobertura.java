/*
 *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Hugo Beilis
 * @author Osvaldo Demo
 * @author Jorge Rafael
 * @version 1.0
 */

package ar.org.fitc.test.math.whitebox;

import java.math.BigInteger;

import ar.org.fitc.test.util.Messages;

import junit.framework.TestCase;

public class TestBigIntegerCobertura extends TestCase implements Messages {

	public TestBigIntegerCobertura() {
		super();
	}

	public TestBigIntegerCobertura(String name) {
		super(name);
	}

	public void testBigIntegerIntByteArray001() {
		byte[] b = new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0,
				(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0,
				(byte) 0, (byte) 0, (byte) 5 };
		assertEquals("-5", new BigInteger(-1, b).toString());
	}

	public void testBigIntegerIntByteArray002() {
		byte[] b = new byte[] { (byte) 0, (byte) 0, (byte) 0, (byte) 0,
				(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0,
				(byte) 0, (byte) 0 };
		assertEquals("0", new BigInteger(-1, b).toString());
	}

	public void testSetBitInt001() {
		assertEquals("2147483648", BigInteger.ZERO.setBit(31).toString());
	}

	public void testClearBitInt001() {
		assertEquals("-2147483649", (BigInteger.valueOf(-1l)).clearBit(31)
				.toString());
	}

	public void testShiftRightInt001() {
		assertEquals("0", BigInteger.valueOf(1l).shiftRight(2).toString());
	}

	public void testShiftRightInt002() {
		assertEquals("-1", BigInteger.valueOf(-2l).shiftRight(2).toString());
	}

	public void testDoubleValue001() {
		BigInteger bi = BigInteger.valueOf(Long.MAX_VALUE);
		assertEquals(1.8446744073709552E19, bi.add(bi).doubleValue());
	}

	public void testDoubleValue002() {
		assertEquals(Double.POSITIVE_INFINITY, BigInteger.ZERO.setBit(3000)
				.doubleValue());
	}

	public void testDoubleValue003() {
		assertEquals(Double.NEGATIVE_INFINITY, BigInteger.valueOf(-1).clearBit(
				3000).doubleValue());
	}

	public void testDoubleValue004() {
		assertEquals(Double.POSITIVE_INFINITY, BigInteger.ZERO.setBit(1024)
				.doubleValue());
	}

	public void testDoubleValue005() {
		assertEquals(8.98846567431158E307, BigInteger.ZERO.setBit(1023)
				.doubleValue());
	}

	public void testDoubleValue006() {
		assertEquals(Double.NEGATIVE_INFINITY, BigInteger.valueOf(-1).clearBit(
				1024).doubleValue());
	}

	public void testDoubleValue007() {
		assertEquals(-8.98846567431158E307, BigInteger.valueOf(-1).clearBit(
				1023).doubleValue());
	}

	public void testDoubleValue008() {
		BigInteger bi = BigInteger.valueOf(Long.MAX_VALUE);
		assertEquals(8.98846567431158E307, bi.add(bi).setBit(1023)
				.doubleValue());
	}

	public void testDoubleValue009() {
		BigInteger bi = BigInteger.valueOf(Long.MAX_VALUE);
		assertEquals(-8.98846567431158E307, bi.add(bi).setBit(1023).negate()
				.doubleValue());
	}

	public void testDoubleValue010() {
		BigInteger bi = new BigInteger(
				"179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368");
		assertEquals(Double.MAX_VALUE, bi.doubleValue());
	}

	public void testDoubleValue011() {

		assertEquals(
				0.0,
				new BigInteger(
						"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
						.doubleValue());
	}

	public void testDoubleValue013() {
		BigInteger bi = new BigInteger("9223372036854775808");
		assertEquals(9223372036854775808d, bi.doubleValue());
	}

	public void testDoubleValue012() {

		assertEquals(
				1.0,
				new BigInteger(
						"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")
						.doubleValue());
	}

	public void testMultiplyBigInteger001() {
		assertEquals(Long.MIN_VALUE, BigInteger.valueOf(Long.MIN_VALUE)
				.multiply(BigInteger.ONE.negate()).longValue());
	}

	public void testMultiplyBigInteger002() {
		assertEquals("0", BigInteger.valueOf(-1).multiply(BigInteger.ZERO)
				.toString());
	}

	public void testSubtractBigInteger001() {
		assertEquals("-9223372036854775809", BigInteger.valueOf(Long.MIN_VALUE)
				.subtract(BigInteger.ONE).toString());
	}

	public void testCompareToBigInteger001() {
		assertTrue(new BigInteger(1, new byte[] { (byte) 0, (byte) 0, (byte) 0,
				(byte) 1, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF })
				.compareTo(new BigInteger(1, new byte[] { (byte) 0, (byte) 0,
						(byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0xFF,
						(byte) 0xFF })) > 0);
	}

	public void testCompareToBigInteger002() {
		assertTrue(new BigInteger(1, new byte[] { (byte) 0, (byte) 0, (byte) 0,
				(byte) 1, (byte) 0, (byte) 0, (byte) 0xFF, (byte) 0xFF })
				.compareTo(new BigInteger(1, new byte[] { (byte) 0, (byte) 0,
						(byte) 0, (byte) 1, (byte) 0xFF, (byte) 0xFF,
						(byte) 0xFF, (byte) 0xFF })) < 0);
	}

	public final void testShiftLeft001() {
		try {

			assertEquals(
					"-208030440331757352957556871414406138851370432069231584150686578531148406658198425605124219134624908322647465843729997679853557607680512402857294949298720557643266539319328391517421784496961917021971445032069147208011527723233222442515113702291256440778195553318617907699622356071802886703159651442211142299318523888112789631500919852511802185580750414165202629477444743512921122182408890315655441934985204119595760134486765122816531211411246542160611007064721720843994551746647191294329090398606296994455358062971843747732847597410530254972293754774205391667030913761953281094464134404557495183586419908473161782624670822558195992566706660061249899768249036587821748548517492420545681998528671016756908995129186241706403598883360981982645471029889353804005644858593607030170811906650357446182786613997847537024220938549988093720920044795534947148602594159707899154774019485454400096269943995742380748633678545602872506322400697699810036426764909326129802688310152883668937300904484975308191979860373182712953704297598512791916373212955396106562526037744574879183037545460180625312150389434628448342082511200058728140129007735912225810540632182037585010518079163381040626774875571980865101272743254601589235069718266323328468535782066798907666203746085802813509554188782243729675159461913275316721010828099615019306781736854031879537531171900164021070874207681786910680832718141366016502749104517238476995290071881723703081321227178839701815041999055476675713327185991079332669237269036555627216065047419472065143411716084306032360611398618808690888491490103788367357047092989066900681830081351692544473272123834477196910367051423337663624387926608414165431497592869411510223489438245449876887456065163037411717379316170066763373776532980932292712796729574461308125269619584426391573429065273335525178370435653495547271371868311579498758348804874804259989724673188508505229822961370004560043519118352627967944062080663235815726811241040555559408909089853371446782491512942087778307582703873689880143407463906859772300111822881145224780998471307016856355062322972011105392550094115599074296632319114372843989289679156548452796417046987089051259550701548803473190304184949902448289425507899532080300311512997448004003411426618998722386581336230009539336603455880345365226321622667374586631002561313359323034141694342967948197690419998746212667948184541447792519247221367157787473790443602097262482546537644082885300304367670989810631543859515058608321268070456925276999603212362750332169751432842311121053750446589805443515603838603755572143710434153055193056883186280632346386459261736790108465308533355497066105631923472244123713737298492923015976160331930575654313789710161440895570493337087323338647151469371018119898583549333994882374156252657368131229944020499391493301984541952085014254620315595977861128249944160318343162957076708733789660236062681396830164526604302097936369054218568731076361464698372666643075599439618958929590087710403936237106361694607418295475230086805234390896052324663159089101926120083836047785549656303394335872593230881483126450806717652925291206160854867207723498583776304801918055908631680870106703798432663630667391664640004603905007033956134368415162164475176958294387829762651344544628781842963242870894323624188851736058770205121446582615177089361167504019839829718101527491479690610737416334126125039588087508017601646441480178960680848245795570416919769371893265851586741105275653409106110956572584912783860661594046157749926145522162615127988025287695823182617216098595830722467615695309915087142437187562905362152880903343711910690996702130649789090149694773460690317250122343923456802439540103664862034486121242534106430816346829178327028018371026284171404279517971829579730177596902041361198225616220043498091307893672568966579098243303389277601415911295556360657067026431478604593584855690944554616131904313531788394157481836066466030180352928718787167307400201824310085515944215880300014044291665526423031465141783297430342655947907980790576275601172759059143059967017007123409399544254725475925350926704966900986449401318948188229765470408003522221373599859149436787728757618476620785242437601373724703957619009829822108099333075248255551968064332639228423271198186901588634913365367367036766908839016991710086129425084460573688211973173851567255149855677498426969275210603358273632510932139586890138954018236888028711751399047155058929528597332134382980746165772240167570482963011201713452934401942483342078176555848152606751887449756887216046889248096319529605483012654933448779758463204265784503805357020779367802881053876562629090722573904345893950430753812000768678768170061243037424063628455316085363078285453358094544575186864651055485288003104716642105356951810953061574095095640456341566414511505455234954896140072451998655597404920052987704151725988858750621977584621316039497066134840614697721377724219636970934136977467714147163013597561072544654685348787513596919251776029410342412823870189029684013655097097448513670702125482269591276437460286972162058593624399475461295959761193543059937512417826486076503331058675009184992093945384517454955900037058154624242956146055751938132670595227895424183919733373571531874641840493269668517544636823988801999273692099870231879287355808370212360292253262104454272699579207159180100518999363618928878598082547253836264435335997008361184806912946114692539573638906257780231290010700337992002767423315145579126656855546407848486132678185434782358391432363510756748192043040062824036569163762535690914310813839403859405903685487679124579024300188661484917338405443257381266506833951730362088699235240184860364178651906225585678332933591523582047304575850040146064752124985446079023561194865512280538231103392021952006960304125717051096881120374316119794452715346470089279270212928904922689356971758280734690854350410737897838396688071743818000553332645788824333299613607641863827564404588219622981303391048644192958484463038791323856131961959352910661172450930183998256099498163612091404819899883664817697533252776150601560997853036909407094665908475411056688197720039722482076920344663862623033046532763859422223281630282126872157619489551617075418354587336458307546679016081286152492291901084093827256843773426261688333546789738539868047703681922966455110588536589795092550931166627005675683861348124937237258896454786620717895475446614947446402160244902287661273207630135007667738025025489388823908845652337879500855581183032295996323992941870081972170945183350784",
					new BigInteger("-1").shiftLeft(21474).toString());
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public final void testShiftLeft002() {
		try {

			assertEquals(
					"-208030440331757352957556871414406138851370432069231584150686578531148406658198425605124219134624908322647465843729997679853557607680512402857294949298720557643266539319328391517421784496961917021971445032069147208011527723233222442515113702291256440778195553318617907699622356071802886703159651442211142299318523888112789631500919852511802185580750414165202629477444743512921122182408890315655441934985204119595760134486765122816531211411246542160611007064721720843994551746647191294329090398606296994455358062971843747732847597410530254972293754774205391667030913761953281094464134404557495183586419908473161782624670822558195992566706660061249899768249036587821748548517492420545681998528671016756908995129186241706403598883360981982645471029889353804005644858593607030170811906650357446182786613997847537024220938549988093720920044795534947148602594159707899154774019485454400096269943995742380748633678545602872506322400697699810036426764909326129802688310152883668937300904484975308191979860373182712953704297598512791916373212955396106562526037744574879183037545460180625312150389434628448342082511200058728140129007735912225810540632182037585010518079163381040626774875571980865101272743254601589235069718266323328468535782066798907666203746085802813509554188782243729675159461913275316721010828099615019306781736854031879537531171900164021070874207681786910680832718141366016502749104517238476995290071881723703081321227178839701815041999055476675713327185991079332669237269036555627216065047419472065143411716084306032360611398618808690888491490103788367357047092989066900681830081351692544473272123834477196910367051423337663624387926608414165431497592869411510223489438245449876887456065163037411717379316170066763373776532980932292712796729574461308125269619584426391573429065273335525178370435653495547271371868311579498758348804874804259989724673188508505229822961370004560043519118352627967944062080663235815726811241040555559408909089853371446782491512942087778307582703873689880143407463906859772300111822881145224780998471307016856355062322972011105392550094115599074296632319114372843989289679156548452796417046987089051259550701548803473190304184949902448289425507899532080300311512997448004003411426618998722386581336230009539336603455880345365226321622667374586631002561313359323034141694342967948197690419998746212667948184541447792519247221367157787473790443602097262482546537644082885300304367670989810631543859515058608321268070456925276999603212362750332169751432842311121053750446589805443515603838603755572143710434153055193056883186280632346386459261736790108465308533355497066105631923472244123713737298492923015976160331930575654313789710161440895570493337087323338647151469371018119898583549333994882374156252657368131229944020499391493301984541952085014254620315595977861128249944160318343162957076708733789660236062681396830164526604302097936369054218568731076361464698372666643075599439618958929590087710403936237106361694607418295475230086805234390896052324663159089101926120083836047785549656303394335872593230881483126450806717652925291206160854867207723498583776304801918055908631680870106703798432663630667391664640004603905007033956134368415162164475176958294387829762651344544628781842963242870894323624188851736058770205121446582615177089361167504019839829718101527491479690610737416334126125039588087508017601646441480178960680848245795570416919769371893265851586741105275653409106110956572584912783860661594046157749926145522162615127988025287695823182617216098595830722467615695309915087142437187562905362152880903343711910690996702130649789090149694773460690317250122343923456802439540103664862034486121242534106430816346829178327028018371026284171404279517971829579730177596902041361198225616220043498091307893672568966579098243303389277601415911295556360657067026431478604593584855690944554616131904313531788394157481836066466030180352928718787167307400201824310085515944215880300014044291665526423031465141783297430342655947907980790576275601172759059143059967017007123409399544254725475925350926704966900986449401318948188229765470408003522221373599859149436787728757618476620785242437601373724703957619009829822108099333075248255551968064332639228423271198186901588634913365367367036766908839016991710086129425084460573688211973173851567255149855677498426969275210603358273632510932139586890138954018236888028711751399047155058929528597332134382980746165772240167570482963011201713452934401942483342078176555848152606751887449756887216046889248096319529605483012654933448779758463204265784503805357020779367802881053876562629090722573904345893950430753812000768678768170061243037424063628455316085363078285453358094544575186864651055485288003104716642105356951810953061574095095640456341566414511505455234954896140072451998655597404920052987704151725988858750621977584621316039497066134840614697721377724219636970934136977467714147163013597561072544654685348787513596919251776029410342412823870189029684013655097097448513670702125482269591276437460286972162058593624399475461295959761193543059937512417826486076503331058675009184992093945384517454955900037058154624242956146055751938132670595227895424183919733373571531874641840493269668517544636823988801999273692099870231879287355808370212360292253262104454272699579207159180100518999363618928878598082547253836264435335997008361184806912946114692539573638906257780231290010700337992002767423315145579126656855546407848486132678185434782358391432363510756748192043040062824036569163762535690914310813839403859405903685487679124579024300188661484917338405443257381266506833951730362088699235240184860364178651906225585678332933591523582047304575850040146064752124985446079023561194865512280538231103392021952006960304125717051096881120374316119794452715346470089279270212928904922689356971758280734690854350410737897838396688071743818000553332645788824333299613607641863827564404588219622981303391048644192958484463038791323856131961959352910661172450930183998256099498163612091404819899883664817697533252776150601560997853036909407094665908475411056688197720039722482076920344663862623033046532763859422223281630282126872157619489551617075418354587336458307546679016081286152492291901084093827256843773426261688333546789738539868047703681922966455110588536589795092550931166627005675683861348124937237258896454786620717895475446614947446402160244902287661273207630135007667738025025489388823908845652337879500855581183032295996323992941870081972170945183350784",
					new BigInteger("-1").shiftLeft(21474).toString());
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public final void testShiftRight001() {
		try {
			// System.out.println(new
			// BigInteger("-1").shiftRight(21474).toString());
			assertEquals("-1", new BigInteger("-1").shiftRight(21474)
					.toString());
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public final void testShiftRight002() {
		try {
			assertEquals(
					"-208030440331757352957556871414406138851370432069231584150686578531148406658198425605124219134624908322647465843729997679853557607680512402857294949298720557643266539319328391517421784496961917021971445032069147208011527723233222442515113702291256440778195553318617907699622356071802886703159651442211142299318523888112789631500919852511802185580750414165202629477444743512921122182408890315655441934985204119595760134486765122816531211411246542160611007064721720843994551746647191294329090398606296994455358062971843747732847597410530254972293754774205391667030913761953281094464134404557495183586419908473161782624670822558195992566706660061249899768249036587821748548517492420545681998528671016756908995129186241706403598883360981982645471029889353804005644858593607030170811906650357446182786613997847537024220938549988093720920044795534947148602594159707899154774019485454400096269943995742380748633678545602872506322400697699810036426764909326129802688310152883668937300904484975308191979860373182712953704297598512791916373212955396106562526037744574879183037545460180625312150389434628448342082511200058728140129007735912225810540632182037585010518079163381040626774875571980865101272743254601589235069718266323328468535782066798907666203746085802813509554188782243729675159461913275316721010828099615019306781736854031879537531171900164021070874207681786910680832718141366016502749104517238476995290071881723703081321227178839701815041999055476675713327185991079332669237269036555627216065047419472065143411716084306032360611398618808690888491490103788367357047092989066900681830081351692544473272123834477196910367051423337663624387926608414165431497592869411510223489438245449876887456065163037411717379316170066763373776532980932292712796729574461308125269619584426391573429065273335525178370435653495547271371868311579498758348804874804259989724673188508505229822961370004560043519118352627967944062080663235815726811241040555559408909089853371446782491512942087778307582703873689880143407463906859772300111822881145224780998471307016856355062322972011105392550094115599074296632319114372843989289679156548452796417046987089051259550701548803473190304184949902448289425507899532080300311512997448004003411426618998722386581336230009539336603455880345365226321622667374586631002561313359323034141694342967948197690419998746212667948184541447792519247221367157787473790443602097262482546537644082885300304367670989810631543859515058608321268070456925276999603212362750332169751432842311121053750446589805443515603838603755572143710434153055193056883186280632346386459261736790108465308533355497066105631923472244123713737298492923015976160331930575654313789710161440895570493337087323338647151469371018119898583549333994882374156252657368131229944020499391493301984541952085014254620315595977861128249944160318343162957076708733789660236062681396830164526604302097936369054218568731076361464698372666643075599439618958929590087710403936237106361694607418295475230086805234390896052324663159089101926120083836047785549656303394335872593230881483126450806717652925291206160854867207723498583776304801918055908631680870106703798432663630667391664640004603905007033956134368415162164475176958294387829762651344544628781842963242870894323624188851736058770205121446582615177089361167504019839829718101527491479690610737416334126125039588087508017601646441480178960680848245795570416919769371893265851586741105275653409106110956572584912783860661594046157749926145522162615127988025287695823182617216098595830722467615695309915087142437187562905362152880903343711910690996702130649789090149694773460690317250122343923456802439540103664862034486121242534106430816346829178327028018371026284171404279517971829579730177596902041361198225616220043498091307893672568966579098243303389277601415911295556360657067026431478604593584855690944554616131904313531788394157481836066466030180352928718787167307400201824310085515944215880300014044291665526423031465141783297430342655947907980790576275601172759059143059967017007123409399544254725475925350926704966900986449401318948188229765470408003522221373599859149436787728757618476620785242437601373724703957619009829822108099333075248255551968064332639228423271198186901588634913365367367036766908839016991710086129425084460573688211973173851567255149855677498426969275210603358273632510932139586890138954018236888028711751399047155058929528597332134382980746165772240167570482963011201713452934401942483342078176555848152606751887449756887216046889248096319529605483012654933448779758463204265784503805357020779367802881053876562629090722573904345893950430753812000768678768170061243037424063628455316085363078285453358094544575186864651055485288003104716642105356951810953061574095095640456341566414511505455234954896140072451998655597404920052987704151725988858750621977584621316039497066134840614697721377724219636970934136977467714147163013597561072544654685348787513596919251776029410342412823870189029684013655097097448513670702125482269591276437460286972162058593624399475461295959761193543059937512417826486076503331058675009184992093945384517454955900037058154624242956146055751938132670595227895424183919733373571531874641840493269668517544636823988801999273692099870231879287355808370212360292253262104454272699579207159180100518999363618928878598082547253836264435335997008361184806912946114692539573638906257780231290010700337992002767423315145579126656855546407848486132678185434782358391432363510756748192043040062824036569163762535690914310813839403859405903685487679124579024300188661484917338405443257381266506833951730362088699235240184860364178651906225585678332933591523582047304575850040146064752124985446079023561194865512280538231103392021952006960304125717051096881120374316119794452715346470089279270212928904922689356971758280734690854350410737897838396688071743818000553332645788824333299613607641863827564404588219622981303391048644192958484463038791323856131961959352910661172450930183998256099498163612091404819899883664817697533252776150601560997853036909407094665908475411056688197720039722482076920344663862623033046532763859422223281630282126872157619489551617075418354587336458307546679016081286152492291901084093827256843773426261688333546789738539868047703681922966455110588536589795092550931166627005675683861348124937237258896454786620717895475446614947446402160244902287661273207630135007667738025025489388823908845652337879500855581183032295996323992941870081972170945183350784",
					new BigInteger("-1").shiftRight(-21474).toString());
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime001() {
		try {
			int certainty = 100;
			BigInteger bi = new BigInteger("1");
			assertEquals(false, bi.isProbablePrime(certainty));
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testBigIntegerString001() {
		try {
			new BigInteger("");
			fail(msgRaise + "NumberFormatException");
		} catch (NumberFormatException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testBigIntegerString002() {
		try {
			new BigInteger("-000-0");
			fail(msgRaise + "NumberFormatException");
		} catch (NumberFormatException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

}
