/*
 *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http: www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Hugo Beilis
 * @author Osvaldo Demo
 * @author Jorge Rafael
 * @version 1.0
 */

package ar.org.fitc.test.math.biginteger.methods;

import ar.org.fitc.test.util.Messages;
import junit.framework.TestCase;
import java.math.BigInteger;
import java.util.Random;

/**
 * Test cases for probablePrime(int , Random ) nextProbablePrime()
 * isProbablePrime(int)
 * 
 */
public class TestProbablePrime extends TestCase implements Messages {

	private BigInteger bi = null;

	public TestProbablePrime(String name) {
		super(name);
	}

	protected void setUp() throws Exception {
		super.setUp();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}

	public static void main(String args[]) {
		junit.textui.TestRunner.run(TestProbablePrime.class);
	}

	/*
	 * Test method for 'java.math.BigInteger.probablePrime(int, Random)'
	 */
	public void testProbablePrime001() {
		try {
			assertNotNull(msgNotNull, BigInteger.probablePrime(2, new Random()));
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testProbablePrime002() {
		try {
			assertNotNull(msgNotNull, BigInteger.probablePrime(
					Integer.MAX_VALUE, new Random()));
			fail("Should raise OutOfMemoryError");
		} catch (OutOfMemoryError e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testProbablePrime003() {
		try {
			long seed = Long.MAX_VALUE;
			assertNotNull(msgNotNull, BigInteger.probablePrime(2, new Random(
					seed)));

		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testProbablePrime004() {
		try {
			long seed = Long.MAX_VALUE;
			assertNotNull(msgNotNull, BigInteger.probablePrime(
					Integer.MAX_VALUE, new Random(seed)));
			fail("Should raise OutOfMemoryError");
		} catch (OutOfMemoryError e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testProbablePrime005() {
		try {
			BigInteger.probablePrime(1, new Random());
			fail("Should raise ArithmeticException");
		} catch (ArithmeticException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testProbablePrime006() {
		try {
			long seed = Long.MAX_VALUE;
			BigInteger.probablePrime(1, new Random(seed));
			fail("Should raise ArithmeticException");
		} catch (ArithmeticException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testProbablePrime007() {
		try {
			BigInteger.probablePrime(0, new Random());
			fail("Should raise ArithmeticException");
		} catch (ArithmeticException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testProbablePrime008() {
		try {
			long seed = Long.MAX_VALUE;
			BigInteger.probablePrime(0, new Random(seed));
			fail("Should raise ArithmeticException");
		} catch (ArithmeticException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testProbablePrime009() {
		try {
			BigInteger.probablePrime(-2, new Random());
			fail("Should raise ArithmeticException");
		} catch (ArithmeticException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testProbablePrime010() {
		try {
			long seed = Long.MAX_VALUE;
			BigInteger.probablePrime(-2, new Random(seed));
			fail("Should raise ArithmeticException");
		} catch (ArithmeticException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b> and the parameters are
	 * bitLength=Integer.MAX_VALUE and a new Random(98765432) doesn't return
	 * null.
	 * 
	 */

	public void testProbablePrime011() {
		try {
			long seed = 98765432;
			assertNotNull(msgNotNull, BigInteger.probablePrime(
					Integer.MAX_VALUE, new Random(seed)));
			fail("Should raise OutOfMemoryError");
		} catch (OutOfMemoryError e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b> and the parameters are
	 * bitLength=2 and a new Random() is prime and the bitlength=2
	 * 
	 */
	public void testProbablePrime012() {
		try {
			bi = BigInteger.probablePrime(2, new Random());
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 2);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b> and the parameters are
	 * bitLength=Integer.MAX_VALUE and a new Random() is prime and the
	 * bitlength=Integer.MAX_VALUE
	 * 
	 */

	public void testProbablePrime013() {
		try {
			bi = BigInteger.probablePrime(Integer.MAX_VALUE, new Random());
			fail("Should raise OutOfMemoryError");
		} catch (OutOfMemoryError e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b> and the parameters are
	 * bitLength=2 and a new Random(Long.MAX_VALUE) is prime and the bitlength=2
	 * 
	 */
	public void testProbablePrime014() {
		try {
			long seed = Long.MAX_VALUE;
			bi = BigInteger.probablePrime(2, new Random(seed));
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 2);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b>> and the parameters are
	 * bitLength=Integer.MAX_VALUE and a new Random(Long.MAX_VALUE) is prime and
	 * the bitlength=Integer.MAX_VALUE
	 * 
	 */

	public void testProbablePrime015() {
		try {
			long seed = Long.MAX_VALUE;
			bi = BigInteger.probablePrime(Integer.MAX_VALUE, new Random(seed));
			fail("Should raise OutOfMemoryError");
		} catch (OutOfMemoryError e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b>> and the parameters are
	 * bitLength=Integer.MAX_VALUE and a new Random(98765432) is prime and the
	 * bitlength=Integer.MAX_VALUE
	 * 
	 */

	public void testProbablePrime016() {
		try {
			long seed = 98765432;
			bi = BigInteger.probablePrime(Integer.MAX_VALUE, new Random(seed));
			fail("Should raise OutOfMemoryError");
		} catch (OutOfMemoryError e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b>> and the parameters are
	 * bitLength=555 and a new Random() is prime and the bitlength=555
	 * 
	 */

	public void testProbablePrime017() {
		try {
			bi = BigInteger.probablePrime(555, new Random());
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 555);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b>> and the parameters are
	 * bitLength=555 and a new Random(Long.MAX_VALUE) is prime and the
	 * bitlength=555
	 * 
	 */

	public void testProbablePrime018() {
		try {
			long seed = Long.MAX_VALUE;
			bi = BigInteger.probablePrime(555, new Random(seed));
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 555);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b>> and the parameters are
	 * bitLength=555 and a new Random(Long.MIN_VALUE) is prime and the
	 * bitlength=555
	 * 
	 */
	public void testProbablePrime019() {
		try {
			long seed = Long.MIN_VALUE;
			bi = BigInteger.probablePrime(555, new Random(seed));
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 555);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b> and the parameters are
	 * bitLength=555 and a new Random(98765432) is prime and the bitlength=555
	 * 
	 */
	public void testProbablePrime020() {
		try {
			long seed = 98765432;
			bi = BigInteger.probablePrime(555, new Random(seed));
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 555);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b> and the parameters are
	 * bitLength=246 and a new Random() is prime and the bitlength=246
	 * 
	 */

	public void testProbablePrime021() {
		try {
			bi = BigInteger.probablePrime(246, new Random());
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 246);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b> and the parameters are
	 * bitLength=246 and a new Random(Long.MAX_VALUE) is prime and the
	 * bitlength=246
	 * 
	 */

	public void testProbablePrime022() {
		try {
			long seed = Long.MAX_VALUE;
			bi = BigInteger.probablePrime(246, new Random(seed));
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 246);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b> and the parameters are
	 * bitLength=246 and a new Random(Long.MIN_VALUE) is prime and the
	 * bitlength=246
	 * 
	 */
	public void testProbablePrime023() {
		try {
			long seed = Long.MIN_VALUE;
			bi = BigInteger.probablePrime(246, new Random(seed));
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 246);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that when a BigInteger is created with
	 * <b>probablePrime(int bitLength, Random rnd)</b> and the parameters are
	 * bitLength=246 and a new Random(98765432) is prime and the bitlength=246
	 */
	public void testProbablePrime024() {
		try {
			long seed = 98765432;
			bi = BigInteger.probablePrime(246, new Random(seed));
			assertTrue(bi.isProbablePrime(100));
			assertEquals(bi.bitLength(), 246);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/*
	 * Test method for 'java.math.BigInteger.nextProbablePrime()'
	 */
	public void testNextProbablePrime001() {
		try {
			bi = new BigInteger("0");
			assertEquals(new BigInteger("2"), bi.nextProbablePrime());
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that for a BigInteger whose value is 275604533 the
	 * returning value of <b>bi.nextProbablePrime()</b> should be 275604541
	 */
	public void testNextProbablePrime002() {
		try {
			bi = new BigInteger("275604533");
			assertEquals(new BigInteger("275604541"), bi.nextProbablePrime());
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testNextProbablePrime003() {
		try {
			bi = new BigInteger("-1");
			bi.nextProbablePrime();
			fail("Should raise ArithmeticException");
		} catch (ArithmeticException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testNextProbablePrime004() {
		try {
			bi = new BigInteger("-2147483650");
			bi.nextProbablePrime();
			fail("Should raise ArithmeticException");
		} catch (ArithmeticException e) {
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that for a BigInteger whose value is 214748407650143647
	 * the returning value of <b>bi.nextProbablePrime()</b> should be
	 * 214748407650143803
	 */
	public void testNextProbablePrime005() {
		try {
			bi = new BigInteger("214748407650143647");
			assertEquals(bi.nextProbablePrime(), new BigInteger(
					"214748407650143803"));

		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that for a BigInteger whose value is 99078 the returning
	 * value of <b>bi.nextProbablePrime()</b> should be 99079
	 */
	public void testNextProbablePrime006() {
		try {
			bi = new BigInteger("99078");
			assertEquals(bi.nextProbablePrime(), new BigInteger("99079"));
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that for a BigInteger whose value is
	 * 48940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125
	 * the returning value of <b>bi.nextProbablePrime()</b> should be
	 * 48940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890503
	 */
	public void testNextProbablePrime007() {
		try {
			bi = new BigInteger(
					"48940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125048940148013511780145601451704780480741890125");
			assertEquals(
					bi.nextProbablePrime(),
					new BigInteger(
							
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/**
	 * This method test that for a BigInteger whose value is
	 * 4894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894
	 * the returning value of <b>bi.nextProbablePrime()</b> should be
	 * 4894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890894489408940548094740516216305648908944894089405480947405162163056489089448940894054809474051621630564890973
	 */
	public void testNextProbablePrime008() {
		try {
			bi = new BigInteger(
					
			assertEquals(
					bi.nextProbablePrime(),
					new BigInteger(
							
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/*
	 * Test method for 'java.math.bigInteger.isProbablePrime(int)'
	 */
	public void testIsProbablePrime001() {
		try {
			int certainty = -99;
			bi = new BigInteger("0");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime002() {
		try {
			int certainty = -2;
			bi = new BigInteger("0");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime003() {
		try {
			int certainty = 0;
			bi = new BigInteger("0");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime004() {
		try {
			int certainty = 2;
			bi = new BigInteger("0");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime005() {
		try {
			int certainty = 100;
			bi = new BigInteger("0");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime006() {
		try {
			int certainty = 999;
			bi = new BigInteger("0");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime007() {
		try {
			int certainty = 10001;
			bi = new BigInteger("0");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime008() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime009() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime010() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime011() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime012() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime013() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime014() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime015() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime016() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime017() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime018() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime019() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime020() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime021() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-29092650705291265789815690774734153223219023177179089494389637937692633788785304244291352185988404733529556942274063810042055573641315156325213762061825769158192881751766499308746575726558470542931902648553435821609812613659590104109976131689735864879296240204545878431914612657925517963902858451902511986914450971082180882093586405484981691454400150369738621686081577770299799367743090004696432798554207753450773703815825859088282288467280569771089043");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime022() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime023() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime024() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime025() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime026() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime027() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime028() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime029() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime030() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime031() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime032() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime033() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime034() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime035() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-30738329962970652465207013860890680903700621115624438956444954207414993140824671248020917062036635014360855638967257967897051034266322303134227075930329558209553142246376356360318391060294859336832462764197978052816158965669610574056106742140714720371355480032829646711080589472114118014211628541488881360801922338536390722852882537029556649015150578557659606091707607540945746590355385632683225376480625589483268223390793963081874046953078827053593590467160622937595592272521372131");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime036() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime037() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime038() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime039() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime040() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime041() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime042() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime043() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime044() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime045() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime046() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime047() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime048() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime049() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-75074319333420802438243697934855788499168402461975455211375684355013914096254540824903279678587943632240670203873120441876648211933569562863082955770509291269110651762875226742444606740339480103199413198341898371862300434094267958847588989189418424394828348147750537747592134678343659905800135183261594559698333262364626113497033874214996423265247961360663946874867130237597419100793756344006422236357583459039843596710324328569896243743718560827947922627144277145249708918360507563658963531074305907256196877304027270051329558251371413907266133975303719520445919489917305462621213214457516912706404089");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime050() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime051() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime052() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime053() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime054() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime055() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime056() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime057() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime058() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime059() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime060() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime061() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime062() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime063() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-669929345377981281464482165312512343101862121477117074672330493513992047494979524559585896266712527980261763442081544279187208415695497516895603128256792531122822217427456024961939523641249639762464938149130864204675948180896615356981359275366272109082723042880987471628169572873448882197105276588606221206609441946404885240564318999234316343073731543147165321857550267180690303878126898146973933487229189866439064876098786765870108336771856491127328823156043830485969112673725251662032765069230292044473221081104964973135335640589699022463013924739366556046148220451144263168813802424817127054831740386147043978452453014721343105460488749501275762717757589388637646283273346624697597366927165841032856161683163721785364529109298632600070872053854020408332935181808451319346932769516396658705168040894019773238290339953241997177832873134188460397516247731724063596009492485497274060066494551855257068317");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime064() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime065() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime066() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime067() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime068() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime069() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime070() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime071() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime072() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime073() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime074() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime075() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime076() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime077() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-3717557311612804887134721452697025749661402791237924239169572223814593570754202714961937300335736421045639750960112811853545438101695690817803183756786863010972400392194421311463869042809669436351891149118785352288974053575771941752453496331191270513161638555490502854884255158733741131486981568284837676718437632193602373583508300093864626785046173503667176411886932299911586572626148461563911506074299683991827064579843270441530521460913514789748451409028866928984797858035044040664785704783232455281428573063730462906573198010031898760308829569446278303347077376321397688727089525996373447048092253529882167289200513480592779954316528045654179724150188391618302768332535753706393618807485535662847834526146168469949002707062702506540059592757765707318378234919822613488382101311275792725073611024366166631804980142418450647169261184674379333202586255699215491824737527612575324203353419912540381432409907563945751855039244979463563531368346977068459608192081020647281999179396184026343728960717404444107011731292122251077001453171816229678402229958871");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime078() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime079() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime080() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime081() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime082() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime083() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime084() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime085() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime086() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime087() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime088() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime089() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime090() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime091() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-68295868193405305849375980193787371176901307612214012741609641155558227336027720021226333653998129139985839838457043213860076775916151598223718867170793072045308431524941699643785014625725741754448720293191892321253251495973257253915395303989603972796419232693130991522432801527243434440811727274597691717121831040251557838992055594901894902781314368662090396938386841849175708627286324996776392452572904698248948312841518753753374546805008024463535186374454039558138347555147074656577501255718712059054755032141253645692581242897945478627298232404819846587139474690836318121256357185332284166324616687");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime092() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime093() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime094() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime095() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime096() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime097() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime098() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime099() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime100() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime101() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime102() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime103() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime104() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime105() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-45749688296962995661468411525799667046943398908565707943654339568012808008094891753797367193677538296047250463525797541303679338070686503953083379480718448689868103179068021727507850035478224507244342569511154816907728273801324355352267644013154770448962483727082131125050399322174001753602734218046366755900734605447575291880343922532333909907994589486761910677852853304342450656743929875298529864675738578474174482792441782645466198746033871457578737076837370574589546599733390693799586434389534925050610848189");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime106() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime107() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime108() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime109() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime110() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime111() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime112() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime113() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime114() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime115() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime116() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime117() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime118() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime119() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-8938028788489406533677318719229939053649244343887647047682787383896498141219532462929299846657871860234169160893909175923051529112467286357870774726838755190549284437629952250193055061885139967561014729852404031699724014620936300255139570921944850767495420079724438260429017061212675559074826780315531216708660655176174728872607882235211003783485900618830305275646788589542438595866302489884151402960113447196100838716843677075599826541734819137152526882996473695332830008134709229");
			assertEquals(bi.isProbablePrime(certainty), false);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime120() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime121() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime122() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime123() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime124() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime125() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime126() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime127() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime128() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime129() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime130() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime131() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime132() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime133() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-119737729019180879646944074874490368876597469546820297657883138418491591999841239872632620892568256071931392231924103143885975534406793854614069016380431840149504618294718599110285918539506777211952698626526451237127656208740615939943502053088303702659593436152167597474963646471302888836205386425829555721099964817302407993597283803510837865488257357804138195582129478603934516968181898203317702391582455723580561264755193808752253522660641463346815593121054785113433471969835015004417081394215754447140590562242800596788615816905859625659017560474752116277234014020019742573877517455694167384238063097319169071180195275130289522439");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime134() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime135() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime136() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime137() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime138() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime139() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime140() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime141() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime142() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime143() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime144() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime145() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime146() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime147() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-109088501526318794283012327040287936313360663923254972147023134844693759321681524769941561583602509567756171909145085717733361649185933290120096599828610263123183633705162133124755650354964047718557912479912266222151450544211269209075202894717341557640586473107867643898350495383940533604376746517597427442141853256120582482525489810224867745151604409510281644095956483727826596027706707894940727819849506937884614792949756554205675939563645034859663266828623515426668476981700493077096247850504142685434928627492145113934175337239125639821514671515529290269134884952770270561778608147251366423652650382947885573696423");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime148() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime149() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime150() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime151() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime152() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime153() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime154() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime155() {
		try {
			int certainty = -99;
			bi = new BigInteger(
					"-128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime156() {
		try {
			int certainty = -2;
			bi = new BigInteger(
					"-128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime157() {
		try {
			int certainty = 0;
			bi = new BigInteger(
					"-128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime158() {
		try {
			int certainty = 2;
			bi = new BigInteger(
					"-128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime159() {
		try {
			int certainty = 100;
			bi = new BigInteger(
					"-128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime160() {
		try {
			int certainty = 999;
			bi = new BigInteger(
					"-128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testIsProbablePrime161() {
		try {
			int certainty = 10001;
			bi = new BigInteger(
					"-128190102432528872902142223456253390180261359467464049411497177647791608444319413505390081454487116885312112679834366731965652064786929133473035344644740759183041304401625198276462640470821246678409411652410901273174468967345817349623638565476858407047091819940197618357888932271556696823118301401103193166149909502465670190900569015869132749038999014240886134457763463102538327142243325474605741289661212345259918817404161201974783958404651824277142922181263395101703751016832538177922634055186783257570880287608870042013741963807874330332071251268660385714548262452885087485842623483715210912839866598461540693497867");
			assertEquals(bi.isProbablePrime(certainty), true);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}
}
