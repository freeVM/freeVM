/*
 *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Hugo Beilis
 * @author Osvaldo Demo
 * @author Jorge Rafael
 * @version 1.0
 */

package ar.org.fitc.test.math.biginteger.methods;

import java.math.BigInteger;

import ar.org.fitc.test.util.Messages;

import junit.framework.TestCase;

/**
 * Test cases for toString(), toString(int), toByteArray()
 * 
 */
public class TestToStringToByteArray extends TestCase implements Messages {
	private BigInteger bi = null;

	/** Creates a new instance of TestToString */
	public TestToStringToByteArray(String name) {
		super(name);
	}

	public static void main(String args[]) {
		junit.textui.TestRunner.run(TestToStringToByteArray.class);
	}

	/*
	 * Test method for 'java.math.bigInteger.toString()'
	 */
	public void testToString001() {
		try {
			bi = new BigInteger("0");
			String str = new String("0");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString002() {
		try {
			bi = new BigInteger("5757952");
			String str = new String("5757952");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString003() {
		try {
			bi = new BigInteger("-5757952");
			String str = new String("-5757952");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString004() {
		try {
			bi = new BigInteger("1229782938247303441");
			String str = new String("1229782938247303441");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString005() {
		try {
			bi = new BigInteger("-1229782938247303441");
			String str = new String("-1229782938247303441");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString006() {
		try {
			bi = new BigInteger(
					"9223512774344179712158610000064510564105651056");
			String str = new String(
					"9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString007() {
		try {
			bi = new BigInteger(
					"-9223512774344179712158610000064510564105651056");
			String str = new String(
					"-9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString008() {
		try {
			bi = new BigInteger("999999999997777773151874");
			String str = new String("999999999997777773151874");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString009() {
		try {
			bi = new BigInteger("-999999999997777773151874");
			String str = new String("-999999999997777773151874");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString010() {
		try {
			bi = new BigInteger(
					"150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString011() {
		try {
			bi = new BigInteger(
					"-150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"-150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString012() {
		try {
			bi = new BigInteger(
					
			String str = new String(
					"8547758048961351894123178614000004876666047860321854064894088704489405489401489405480448047890454098478409489223372036854775804896135189412317861400000487666604786032185406489408870448940548940148940548044804789045409847840948922337203685477580489613518941231786140000048766660478603218540648940887044894054894014894054804480478904540984784094892233720368547758048961351894123178614000004876666047860321854064894088704489405489401489405480448047890454098478409489223372036854775804896135189412317861400000487666604786032185406489408870448940548940148940548044804789045409847840948922337203685477580489613518941231786140000048766660478603218540648940887044894054894014894054804480478904540984784094892233720368547758048961351894123178614000004876666047860321854064894088704489405489401489405480448047890454098478409489223372036854775804896135189412317861400000487666604786032185406489408870448940548940148940548044804789045409847840948922337203685477580489613518941231786140000048766660478603218540648940887044894054894014894054804480478904540984784094892");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString013() {
		try {
			bi = new BigInteger(
					
			String str = new String(
					
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString014() {
		try {
			bi = new BigInteger("100000000000001000000000000");
			String str = new String("100000000000001000000000000");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToString015() {
		try {
			bi = new BigInteger("-100000000000001000000000000");
			String str = new String("-100000000000001000000000000");
			assertEquals(bi.toString(), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/*
	 * Test method for 'java.math.bigInteger.toString(int)'
	 */
	public void testToStringInt001() {
		try {
			int radix = 10;
			bi = new BigInteger("0");
			String str = new String("0");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt002() {
		try {
			int radix = 10;
			bi = new BigInteger("5757952");
			String str = new String("5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt003() {
		try {
			int radix = 10;
			bi = new BigInteger("-5757952");
			String str = new String("-5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt004() {
		try {
			int radix = 10;
			bi = new BigInteger("1229782938247303441");
			String str = new String("1229782938247303441");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt005() {
		try {
			int radix = 10;
			bi = new BigInteger("-1229782938247303441");
			String str = new String("-1229782938247303441");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt006() {
		try {
			int radix = 10;
			bi = new BigInteger(
					"9223512774344179712158610000064510564105651056");
			String str = new String(
					"9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt007() {
		try {
			int radix = 10;
			bi = new BigInteger(
					"-9223512774344179712158610000064510564105651056");
			String str = new String(
					"-9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt008() {
		try {
			int radix = 10;
			bi = new BigInteger("999999999997777773151874");
			String str = new String("999999999997777773151874");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt009() {
		try {
			int radix = 10;
			bi = new BigInteger("-999999999997777773151874");
			String str = new String("-999999999997777773151874");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt010() {
		try {
			int radix = 10;
			bi = new BigInteger(
					"150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt011() {
		try {
			int radix = 10;
			bi = new BigInteger(
					"-150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"-150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt012() {
		try {
			int radix = 10;
			bi = new BigInteger(
					
			String str = new String(
					
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt013() {
		try {
			int radix = 10;
			bi = new BigInteger(
					
			String str = new String(
					
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt014() {
		try {
			int radix = 10;
			bi = new BigInteger("100000000000001000000000000");
			String str = new String("100000000000001000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt015() {
		try {
			int radix = 10;
			bi = new BigInteger("-100000000000001000000000000");
			String str = new String("-100000000000001000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt031() {
		try {
			int radix = 37;
			bi = new BigInteger("0");
			String str = new String("0");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt032() {
		try {
			int radix = 37;
			bi = new BigInteger("5757952");
			String str = new String("5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt033() {
		try {
			int radix = 37;
			bi = new BigInteger("-5757952");
			String str = new String("-5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt034() {
		try {
			int radix = 37;
			bi = new BigInteger("1229782938247303441");
			String str = new String("1229782938247303441");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt035() {
		try {
			int radix = 37;
			bi = new BigInteger("-1229782938247303441");
			String str = new String("-1229782938247303441");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt036() {
		try {
			int radix = 37;
			bi = new BigInteger(
					"9223512774344179712158610000064510564105651056");
			String str = new String(
					"9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt037() {
		try {
			int radix = 37;
			bi = new BigInteger(
					"-9223512774344179712158610000064510564105651056");
			String str = new String(
					"-9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt038() {
		try {
			int radix = 37;
			bi = new BigInteger("999999999997777773151874");
			String str = new String("999999999997777773151874");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt039() {
		try {
			int radix = 37;
			bi = new BigInteger("-999999999997777773151874");
			String str = new String("-999999999997777773151874");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt040() {
		try {
			int radix = 37;
			bi = new BigInteger(
					"150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt041() {
		try {
			int radix = 37;
			bi = new BigInteger(
					"-150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"-150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt042() {
		try {
			int radix = 37;
			bi = new BigInteger(
					
			String str = new String(
					
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt043() {
		try {
			int radix = 37;
			bi = new BigInteger(
					
			String str = new String(
					
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt044() {
		try {
			int radix = 37;
			bi = new BigInteger("100000000000001000000000000");
			String str = new String("100000000000001000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt045() {
		try {
			int radix = 37;
			bi = new BigInteger("-100000000000001000000000000");
			String str = new String("-100000000000001000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt061() {
		try {
			int radix = 1;
			bi = new BigInteger("0");
			String str = new String("0");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt062() {
		try {
			int radix = 1;
			bi = new BigInteger("5757952");
			String str = new String("5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt063() {
		try {
			int radix = 1;
			bi = new BigInteger("-5757952");
			String str = new String("-5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt064() {
		try {
			int radix = 1;
			bi = new BigInteger("1229782938247303441");
			String str = new String("1229782938247303441");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt065() {
		try {
			int radix = 1;
			bi = new BigInteger("-1229782938247303441");
			String str = new String("-1229782938247303441");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt066() {
		try {
			int radix = 1;
			bi = new BigInteger(
					"9223512774344179712158610000064510564105651056");
			String str = new String(
					"9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt067() {
		try {
			int radix = 1;
			bi = new BigInteger(
					"-9223512774344179712158610000064510564105651056");
			String str = new String(
					"-9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt068() {
		try {
			int radix = 1;
			bi = new BigInteger("999999999997777773151874");
			String str = new String("999999999997777773151874");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt069() {
		try {
			int radix = 1;
			bi = new BigInteger("-999999999997777773151874");
			String str = new String("-999999999997777773151874");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt070() {
		try {
			int radix = 1;
			bi = new BigInteger(
					"150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt071() {
		try {
			int radix = 1;
			bi = new BigInteger(
					"-150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"-150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt072() {
		try {
			int radix = 1;
			bi = new BigInteger(
					
			String str = new String(
					
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt073() {
		try {
			int radix = 1;
			bi = new BigInteger(
					
			String str = new String(
					
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt074() {
		try {
			int radix = 1;
			bi = new BigInteger("100000000000001000000000000");
			String str = new String("100000000000001000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt075() {
		try {
			int radix = 1;
			bi = new BigInteger("-100000000000001000000000000");
			String str = new String("-100000000000001000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt091() {
		try {
			int radix = 1;
			bi = new BigInteger("0");
			String str = new String("0");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt092() {
		try {
			int radix = 1;
			bi = new BigInteger("5757952");
			String str = new String("5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt093() {
		try {
			int radix = 1;
			bi = new BigInteger("-5757952");
			String str = new String("-5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt094() {
		try {
			int radix = 1;
			bi = new BigInteger("1229782938247303441");
			String str = new String("1229782938247303441");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt095() {
		try {
			int radix = 1;
			bi = new BigInteger("-1229782938247303441");
			String str = new String("-1229782938247303441");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt096() {
		try {
			int radix = 1;
			bi = new BigInteger(
					"9223512774344179712158610000064510564105651056");
			String str = new String(
					"9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt097() {
		try {
			int radix = 1;
			bi = new BigInteger(
					"-9223512774344179712158610000064510564105651056");
			String str = new String(
					"-9223512774344179712158610000064510564105651056");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt098() {
		try {
			int radix = 1;
			bi = new BigInteger("999999999997777773151874");
			String str = new String("999999999997777773151874");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt099() {
		try {
			int radix = 1;
			bi = new BigInteger("-999999999997777773151874");
			String str = new String("-999999999997777773151874");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt100() {
		try {
			int radix = 1;
			bi = new BigInteger(
					"150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt101() {
		try {
			int radix = 1;
			bi = new BigInteger(
					"-150448610311864301189460189400002623041896410056489748904168108");
			String str = new String(
					"-150448610311864301189460189400002623041896410056489748904168108");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt102() {
		try {
			int radix = 1;
			bi = new BigInteger(
					"8547758048961351894123178614000004876666047860321854064894088704489405489401489405480448047890454098478409489223372036854775804896135189412317861400000487666604786032185406489408870448940548940148940548044804789045409847840948922337203685477580489613518941231786140000048766660478603218540648940887044894054894014894054804480478904540984784094892233720368547758048961351894123178614000004876666047860321854064894088704489405489401489405480448047890454098478409489223372036854775804896135189412317861400000487666604786032185406489408870448940548940148940548044804789045409847840948922337203685477580489613518941231786140000048766660478603218540648940887044894054894014894054804480478904540984784094892233720368547758048961351894123178614000004876666047860321854064894088704489405489401489405480448047890454098478409489223372036854775804896135189412317861400000487666604786032185406489408870448940548940148940548044804789045409847840948922337203685477580489613518941231786140000048766660478603218540648940887044894054894014894054804480478904540984784094892");
			String str = new String(
					
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt103() {
		try {
			int radix = 1;
			bi = new BigInteger(
					
			String str = new String(
					
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt104() {
		try {
			int radix = 1;
			bi = new BigInteger("100000000000001000000000000");
			String str = new String("100000000000001000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt105() {
		try {
			int radix = 1;
			bi = new BigInteger("-100000000000001000000000000");
			String str = new String("-100000000000001000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt121() {
		try {
			int radix = 2;
			String str = new String("0");
			bi = new BigInteger("0");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt122() {
		try {
			int radix = 2;
			String str = new String("10101111101110000000000");
			bi = new BigInteger("5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt123() {
		try {
			int radix = 2;
			String str = new String("-10101111101110000000000");
			bi = new BigInteger("-5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt124() {
		try {
			int radix = 2;
			String str = new String(
					"111010101000111111111110101111101011100100111101110100010001");
			bi = new BigInteger("1056375501353114897");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt125() {
		try {
			int radix = 2;
			String str = new String(
					"-111010101000111111111110101111101011100100111101110100010001");
			bi = new BigInteger("-1056375501353114897");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt126() {
		try {
			int radix = 2;
			String str = new String(
					"101000000000000000000000000101000000000000000000001111100001001111101011110101011100011101000001110000001101110000");
			bi = new BigInteger("12980742243051152533209208049828720");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt127() {
		try {
			int radix = 2;
			String str = new String(
					"-101000000000000000000000000101000000000000000000001111100001001111101011110101011100011101000001110000001101110000");
			bi = new BigInteger("-12980742243051152533209208049828720");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt128() {
		try {
			int radix = 2;
			String str = new String(
					"10111010010000111011011100111111111111110001001011100111011001111110011010000010");
			bi = new BigInteger("879609302219781680129666");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt129() {
		try {
			int radix = 2;
			String str = new String(
					"-10111010010000111011011100111111111111110001001011100111011001111110011010000010");
			bi = new BigInteger("-879609302219781680129666");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt130() {
		try {
			int radix = 2;
			String str = new String(
					"1000000111100011011111001000010011000100110011011111000011011101100111000110110000000001010111010001110011011100001010011001000101100010010000010011000111000100100101010101100");
			bi = new BigInteger(
					"24298550909293943694283495885366032131153064666221228");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt131() {
		try {
			int radix = 2;
			String str = new String(
					"-1000000111100011011111001000010011000100110011011111000011011101100111000110110000000001010111010001110011011100001010011001000101100010010000010011000111000100100101010101100");
			bi = new BigInteger(
					"-24298550909293943694283495885366032131153064666221228");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt132() {
		try {
			int radix = 2;
			String str = new String(
					
			bi = new BigInteger(
					"11273405833824200841860629424484875818190687307639590753129777246720575689026918570420614402183884240276009636783573200754969834605463884285130903366557368572831370944941682237868510730322088645856993274780949962290281861894047321458402830570503233036671546843777160865838891858940372424994105091778638656069727580453084702337186170190234976557375683114655201483075180022382555711481148745941965777604310542903233415403385363694534783231005406347237313509786697539305094311390568506016936079857629526973338068448648817432230780273668879649639694241152312462033960612166301140926522130116071843048427337576230140246959420071190604078240430148391402913320105307456228005452062305966101904728266681523884001847139193696524474022951512491281910965767435988389173536320629317247254414276401338904751788651876415007655340058369761042614739053544461695783551693006674870116846957142368");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt133() {
		try {
			int radix = 2;
			String str = new String(
					
			bi = new BigInteger(
					"-11273405833824200841860629424484875818190687307639590753129777246720575689026918570420614402183884240276009636783573200754969834605463884285130903366557368572831370944941682237868510730322088645856993274780949962290281861894047321458402830570503233036671546843777160865838891858940372424994105091778638656069727580453084702337186170190234976557375683114655201483075180022382555711481148745941965777604310542903233415403385363694534783231005406347237313509786697539305094311390568506016936079857629526973338068448648817432230780273668879649639694241152312462033960612166301140926522130116071843048427337576230140246959420071190604078240430148391402913320105307456228005452062305966101904728266681523884001847139193696524474022951512491281910965767435988389173536320629317247254414276401338904751788651876415007655340058369761042614739053544461695783551693006674870116846957142368");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt134() {
		try {
			int radix = 2;
			String str = new String(
					"1001000110000100111001110010101000000000000010010001100001001110011100101010000000000000");
			bi = new BigInteger("175921860444170000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt135() {
		try {
			int radix = 2;
			String str = new String(
					"-1001000110000100111001110010101000000000000010010001100001001110011100101010000000000000");
			bi = new BigInteger("-175921860444170000000000000");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt151() {
		try {
			int radix = 16;
			String str = new String("0");
			bi = new BigInteger("0");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt152() {
		try {
			int radix = 16;
			String str = new String("57dc00");
			bi = new BigInteger("5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt153() {
		try {
			int radix = 16;
			String str = new String("-57dc00");
			bi = new BigInteger("-5757952");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt154() {
		try {
			int radix = 16;
			String str = new String("ea8ffebeb93dd11");
			bi = new BigInteger("1056375501353114897");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt155() {
		try {
			int radix = 16;
			String str = new String("-ea8ffebeb93dd11");
			bi = new BigInteger("-1056375501353114897");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt156() {
		try {
			int radix = 16;
			String str = new String("5000000a00001784faf571d070370");
			bi = new BigInteger("25961484486102296397077819704148848");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt157() {
		try {
			int radix = 16;
			String str = new String("-5000000a00001784faf571d070370");
			bi = new BigInteger("-25961484486102296397077819704148848");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt158() {
		try {
			int radix = 16;
			String str = new String("ba43b73fff12e767e682");
			bi = new BigInteger("879609302219781680129666");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt159() {
		try {
			int radix = 16;
			String str = new String("-ba43b73fff12e767e682");
			bi = new BigInteger("-879609302219781680129666");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt160() {
		try {
			int radix = 16;
			String str = new String(
					"81e37c84c4cdf37671b00574737014c8b12098e24aac");
			bi = new BigInteger(
					"48597101818587890840577647864640570656337632203786924");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt161() {
		try {
			int radix = 16;
			String str = new String(
					"-81e37c84c4cdf37671b00574737014c8b12098e24aac");
			bi = new BigInteger(
					"-48597101818587890840577647864640570656337632203786924");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt162() {
		try {
			int radix = 16;
			String str = new String(
					"81e37c84c4cdf37671b00574737014c8b12098e24aac81e37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC");
			str = str.toLowerCase();
			bi = new BigInteger(
					"3157931742456018719994516617690926189272000308913989507464245017264729096452414689046723626370616308642279157991631398359212017786698694598269773229038528316382406648772072509547784413310372545085779871199828556832477778789861681297479863887700613458951320639711559564441642596427320320153958190302788880419630430486730099580413403936999175883562317329346162032087299599442719352719318996660862187322944468202336241110528586698163882849626111371585200567515500992807465340503672686173132495040911290506728471628171603117006759780391508775743339074207874133618507639919483719229000364");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt163() {
		try {
			int radix = 16;
			String str = new String(
					"-81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC81E37C84C4CDF37671B00574737014C8B12098E24AAC");
			str = str.toLowerCase();
			bi = new BigInteger(
					"-3157931742456018719994516617690926189272000308913989507464245017264729096452414689046723626370616308642279157991631398359212017786698694598269773229038528316382406648772072509547784413310372545085779871199828556832477778789861681297479863887700613458951320639711559564441642596427320320153958190302788880419630430486730099580413403936999175883562317329346162032087299599442719352719318996660862187322944468202336241110528586698163882849626111371585200567515500992807465340503672686173132495040911290506728471628171603117006759780391508775743339074207874133618507639919483719229000364");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt164() {
		try {
			int radix = 16;
			String str = new String(
					"FEDFEADFEDFAEDFEADFEAEDFEAFDEADFFEAFDFEDAFEADFFEAEFDEFEAFEFDFAEFDFAEFDAEFDAEFD");
			bi = new BigInteger(
					"8307022205401920897846250976387011266751050935694314399532550210045411815712371051955461402365");
			str = str.toLowerCase();

			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt165() {
		try {
			int radix = 16;
			String str = new String(
					"-FEDFEADFEDFAEDFEADFEAEDFEAFDEADFFEAFDFEDAFEADFFEAEFDEFEAFEFDFAEFDFAEFDAEFDAEFD");
			bi = new BigInteger(
					"-8307022205401920897846250976387011266751050935694314399532550210045411815712371051955461402365");
			str = str.toLowerCase();
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt181() {
		try {
			int radix = 36;
			String str = new String("0");
			bi = new BigInteger("0");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt182() {
		try {
			int radix = 36;
			String str = new String("ergbda");
			bi = new BigInteger("892637326");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt183() {
		try {
			int radix = 36;
			String str = new String("-ergbda");
			bi = new BigInteger("-892637326");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt184() {
		try {
			int radix = 36;
			String str = new String("gfewahrbbtgaf");
			bi = new BigInteger("77842892710302113463");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt185() {
		try {
			int radix = 36;
			String str = new String("-gfewahrbbtgaf");
			bi = new BigInteger("-77842892710302113463");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt186() {
		try {
			int radix = 36;
			String str = new String("grearghtrt48615123145feww");
			bi = new BigInteger("376323035764472215661786964734404558400");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt187() {
		try {
			int radix = 36;
			String str = new String("-grearghtrt48615123145feww");
			bi = new BigInteger("-376323035764472215661786964734404558400");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt188() {
		try {
			int radix = 36;
			String str = new String(
					"ht495i64ku56ym1y56w1t56g4rar7t89a531a2g0a0gr1564");
			bi = new BigInteger(
					"249375120645832098597253010258583197824129888056957112440576400771374746476");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt189() {
		try {
			int radix = 36;
			String str = new String(
					"-ht495i64ku56ym1y56w1t56g4rar7t89a531a2g0a0gr1564");
			bi = new BigInteger(
					"-249375120645832098597253010258583197824129888056957112440576400771374746476");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt190() {
		try {
			int radix = 36;
			String str = new String(
					"greaggtnhrfstthjt6415th86t4eah6t84h1re6a4yhg9er8a4h61tr89ea64h156fdhjkuiwas");
			bi = new BigInteger(
					"245858751731136423280326824558241142449201496279470629311737217181244231865745261193280844265732451307405202069164548");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt191() {
		try {
			int radix = 36;
			String str = new String(
					"-greaggtnhrfstthjt6415th86t4eah6t84h1re6a4yhg9er8a4h61tr89ea64h156fdhjkuiwas");
			bi = new BigInteger(
					"-245858751731136423280326824558241142449201496279470629311737217181244231865745261193280844265732451307405202069164548");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt192() {
		try {
			int radix = 36;
			String str = new String(
					"kuyte48yj41s5r6h14t5r6a4htr15hg6re415y234g8r9ey4ht896j48y974j897o8i7o8p74o84y8r9wsh7t48rw948f4rewa8e41rf56wa41w2qq54tr9e7y891h00004h0t48t0r84htr5wy40t804u8y49iuu4kjh50m54li87r94g0eraq4q0eg4dg804ryh456ah414t89ra4uj564y89t");
			bi = new BigInteger(
					"1411126968273835952163315265061705591475622864005984691280044673714332589123062356520756835759657075881865869755956415993678050544426744680448500592680216153380581605601841456067427271455641526680151034445052770844204278393768766526133337997704981621936229683030813147595539514745877594682233956657514413422491601671940544681419143437982550625");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt193() {
		try {
			int radix = 36;
			String str = new String(
					"-kuyte48yj41s5r6h14t5r6a4htr15hg6re415y234g8r9ey4ht896j48y974j897o8i7o8p74o84y8r9wsh7t48rw948f4rewa8e41rf56wa41w2qq54tr9e7y891h00004h0t48t0r84htr5wy40t804u8y49iuu4kjh50m54li87r94g0eraq4q0eg4dg804ryh456ah414t89ra4uj564y89t");
			bi = new BigInteger(
					"-1411126968273835952163315265061705591475622864005984691280044673714332589123062356520756835759657075881865869755956415993678050544426744680448500592680216153380581605601841456067427271455641526680151034445052770844204278393768766526133337997704981621936229683030813147595539514745877594682233956657514413422491601671940544681419143437982550625");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt194() {
		try {
			int radix = 36;
			String str = new String(
					"FEDFEADFgvfdhEDFAEDFEADFEAEDFEAFDEADFFEAFDFEDAFEADhtrwjytkj4uyekuyweukkkkiulooouphtaqezdhhhtrFFEAEFDEFEAFEFDFAEFDFAEFDAEFDAEFD");
			str = str.toLowerCase();
			bi = new BigInteger(
					"5312661663957847808585736993126362127403479687743030880279194882858826889915663151537167661889116076664629286970412321001923973306836625865078186555558245458805884405248565686311023114551110307977");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToStringInt195() {
		try {
			int radix = 36;
			String str = new String(
					"-FEDFEADFgvfdhEDFAEDFEADFEAEDFEAFDEADFFEAFDFEDAFEADhtrwjytkj4uyekuyweukkkkiulooouphtaqezdhhhtrFFEAEFDEFEAFEFDFAEFDFAEFDAEFDAEFD");
			str = str.toLowerCase();
			bi = new BigInteger(
					"-5312661663957847808585736993126362127403479687743030880279194882858826889915663151537167661889116076664629286970412321001923973306836625865078186555558245458805884405248565686311023114551110307977");
			assertEquals(bi.toString(radix), str);
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray001() {
		try {
			byte[] val = new byte[5];
			byte[] val2 = new byte[5];
			bi = new BigInteger(val);
			val2 = (bi.toByteArray());
			for (int i = 0; i < 1; i++) {
				assertEquals(val[i], val2[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray002() {
		try {
			byte[] val = { (byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00 };
			bi = new BigInteger(val);
			byte[] val2 = bi.toByteArray();
			for (int i = 0; i < val.length; i++) {
				assertEquals(val[i], val2[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray003() {
		try {
			byte[] val = { (byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xef,
					(byte) 0x55, (byte) 0x97, (byte) 0xa9, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x5d,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0xc9, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x0a,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0x7f, (byte) 0x55,
					(byte) 0x97, (byte) 0x5a, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0xa7, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x30 };
			bi = new BigInteger(val);

			byte[] val2 = bi.toByteArray();
			for (int i = 0; i < val.length; i++) {
				assertEquals(val[i], val2[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray004() {
		try {
			byte[] val = { (byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xef, (byte) 0x55, (byte) 0x97, (byte) 0xa9,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x5d, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0xc9, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x0a, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0x7f,
					(byte) 0x55, (byte) 0x97, (byte) 0x5a, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0xa7, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x30 };
			bi = new BigInteger(val);

			byte[] val2 = bi.toByteArray();
			for (int i = 0; i < val.length; i++) {
				assertEquals(val[i], val2[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray005() {
		try {
			byte[] val = { (byte) 0x56, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xef,
					(byte) 0x55, (byte) 0x97, (byte) 0xa9, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x5d,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0xc9, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x0a,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0xff, (byte) 0x55,
					(byte) 0x97, (byte) 0x59, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0x97, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x00, (byte) 0x7f, (byte) 0x55,
					(byte) 0x97, (byte) 0x5a, (byte) 0x00, (byte) 0xff,
					(byte) 0x55, (byte) 0xa7, (byte) 0x59, (byte) 0x00,
					(byte) 0xff, (byte) 0x55, (byte) 0x97, (byte) 0x59,
					(byte) 0x00, (byte) 0xff, (byte) 0x55, (byte) 0x97,
					(byte) 0x59, (byte) 0x30 };
			bi = new BigInteger(val);
			byte[] val2 = bi.toByteArray();
			for (int i = 0; i < val.length; i++) {
				assertEquals(val[i], val2[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray006() {
		try {
			byte[] val = new byte[500];
			byte[] val2 = new byte[500];
			for (int i = 0; i < 500; i++) {
				val[i] = (byte) 0x7c;
			}

			bi = new BigInteger(val);

			val2 = bi.toByteArray();
			for (int i = 0; i < val.length; i++) {
				assertEquals(val[i], val2[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray007() {
		try {
			bi = new BigInteger("1561481891531000005641001115450345610456450");
			byte[] val = { 17, -20, -56, 105, 64, 117, -52, -123, 119, 31,
					-120, 4, -91, -123, 66, 82, -83, -126 };
			for (int i = 0; i < val.length; i++) {
				assertEquals(bi.toByteArray()[i], val[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray008() {
		try {
			bi = new BigInteger(
					"-150448610311864301189460189400002623041896410056489748904168108");
			byte[] val = { -94, 96, 39, 81, 124, 9, 74, -102, -25, 68, 8, 127,
					-71, -74, 77, 81, -81, 123, -102, -84, 44, 14, 63, -11,
					-75, 84 };
			for (int i = 0; i < val.length; i++) {
				assertEquals(bi.toByteArray()[i], val[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray009() {
		try {
			bi = new BigInteger(
					"1018941560489102123187480189704051894054864066108789260456087899");
			byte[] val = { 2, 122, 22, -63, 123, -87, -117, 98, 98, -94, 7,
					-27, 66, 125, -116, 69, 63, 4, 44, -109, -111, -16, 46,
					-14, -92, -47, 91 };
			for (int i = 0; i < val.length; i++) {
				assertEquals(bi.toByteArray()[i], val[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray010() {
		try {
			bi = new BigInteger("21474836455");
			byte[] val = { 4, -1, -1, -1, -25 };
			for (int i = 0; i < val.length; i++) {
				assertEquals(bi.toByteArray()[i], val[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray011() {
		try {
			bi = new BigInteger("-2147483646");
			byte[] val = { -128, 0, 0, 2 };
			for (int i = 0; i < val.length; i++) {
				assertEquals(bi.toByteArray()[i], val[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray012() {
		try {
			bi = new BigInteger("999999999997777773151874");
			byte[] val = { 0, -45, -62, 27, -50, -54, -24, 57, -11, 70, -126 };
			for (int i = 0; i < val.length; i++) {
				assertEquals(bi.toByteArray()[i], val[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray013() {
		try {
			bi = new BigInteger("-999999999997777773151874");
			byte[] val = { -1, 44, 61, -28, 49, 53, 23, -58, 10, -71, 126 };
			for (int i = 0; i < val.length; i++) {
				assertEquals(bi.toByteArray()[i], val[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray014() {
		try {
			bi = new BigInteger(
					
			byte[] val = { 37, -13, -117, 6, 30, 6, 99, 85, -80, 0, -39, 116,
					9, 53, -72, 109, -50, 9, -86, 100, 63, 92, 47, 122, 93,
					-36, 18, -113, 40, -7, -17, 15, -75, 73, -4, -38, 21, 48,
					-28, 63, -76, -99, -82, -61, -93, -27, -113, 45, 72, 88,
					-110, 105, 1, -124, 44, -97, 93, 54, 76, 1, -101, -64, -95,
					-108, -119, -85, 123, 15, 70, -62, -63, -104, -99, 66, 63,
					32, 41, -47, 33, 34, 106, 48, 69, 124, 102, 22, -11, 27,
					-56, 27, 53, 113, 37, 99, 23, -105, 99, -122, 27, 30, 86,
					-58, -52, -95, 88, 21, 30, 39, 29, 61, -29, -24, 68, -44,
					46, -109, 83, -65, 28, -35, 75, 45, 0, -8, 111, 47, -123,
					20, -112, 76, -112, 65, 62, 57, -26, 69, 78, -93, -46, -90,
					96, -85, -59, 119, -120, 67, 12, -109, 38, -125, 75, -41,
					-41, -95, -38, -126, 36, -27, 17, -22, -18, 103, 71, -19,
					-8, -40, 89, -113, 110, -77, 59, 30, 94, 62, 47, -35, 98,
					88, -77, -61, -43, -91, -73, -121, 122, 84, -34, -44, 8,
					53, -37, -46, -90, 108, 60, 90, 14, -99, -53, -94, 69, -75,
					68, -24, 97, -125, 121, -106, 112, 19, -18, 67, 28, -90,
					-23, -57, 21, -115, 110, -19, -24, 65, 3, -25, -23, 55,
					-39, -15, 107, -48, -5, 32, -94, 45, -85, 117, 98, -49,
					-68, 15, -127, -121, 45, 70, -23, 94, 60, 52, 24, -127, 4,
					-24, -83, 90, -91, 62, -36, -23, -128, 93, -53, 38, -85,
					58, 68, -7, -110, 66, -115, -11, -24, 13, -99, 118, -119,
					57, -97, -11, 36, 54, 71, 52, -25, 69, -77, -99, 9, 70,
					-63, -89, -76, 49, -112, 2 };
			for (int i = 0; i < val.length; i++) {
				assertEquals(bi.toByteArray()[i], val[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	public void testToByteArray015() {
		try {
			bi = new BigInteger(
					"-150441504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681081504486103118643011894601894000026230418964100564897489041681088610311864301189460189400002623041896410056489748904168108");
			byte[] val = { -26, -5, 77, -16, 4, -88, 113, -78, 47, -113, 118,
					26, 10, 7, 3, 18, -73, -91, 85, -88, -81, 112, 12, -32, 13,
					75, -16, 37, -119, 97, -31, -81, -23, 87, 113, 77, 124, 39,
					28, -36, 31, -102, 92, 58, 49, -24, 28, -63, 8, 72, 0, 88,
					18, 113, 68, -68, 57, 59, 28, 48, 68, -94, -126, 60, -89,
					-47, 3, -32, 11, 71, -86, -50, 126, 92, -118, -81, -99, 77,
					-64, -125, -108, -114, -72, 66, -53, 94, 96, 25, -77, -25,
					93, 75, 69, 37, -111, 68, -58, 118, 21, 4, -113, -76, 63,
					-64, 124, -95, -44, 71, -8, 86, 47, -78, 30, 23, -95, -6,
					62, -57, 85, 95, -85, -124, 27, 15, 100, 73, -88, -32, -16,
					73, -52, -85, 52, 3, -35, 75, -118, -80, -83, 8, -101, -52,
					-120, -39, 39, 118, -5, -109, 41, 10, 14, -5, 58, -64, 107,
					81, 12, 34, 73, -49, 52, 82, -71, -99, -70, -25, -31, -53,
					38, -94, -51, -50, 6, -80, -116, 7, 14, 103, -89, -11, -72,
					-126, -110, 75, 97, -22, -99, 49, -16, -76, 125, -78, 102,
					2, -19, 67, 11, -103, 22, 70, 66, 19, 120, 7, -93, -15, 51,
					65, -110, 122, 108, 59, 40, 121, -9, 93, -17, 70, 49, -41,
					104, -76, 81, -102, -112, 33, 108, -26, 114, -30, 97, 77,
					96, 117, 7, -126, 7, -84, -105, 42, -47, -85, -9, 52, -30,
					-42, 114, -14, 110, -55, -58, 38, -3, -7, -1, -116, -35,
					-9, -7, 3, 125, -12, -40, -126, 13, -1, 44, 101, 59, 88,
					-67, 56, -3, 0, -49, 84, 16, -28, -89, -111, 22, -84, -36,
					59, -126, 32, -108, -20, 125, -42, -49, 45, 121, 53, 61,
					70, 51, -2, 97, -46, -119, 12, -64, -93, -108, 80, -6, -84,
					44, 14, 63, -11, -75, 84 };
			for (int i = 1; i < val.length; i++) {
				assertEquals(bi.toByteArray()[i], val[i]);
			}
		} catch (Throwable e) {
			fail(msgNoException + e);
		}
	}

	/*
	 * Test method for 'java.math.bigInteger.toByteArray()'
	 */

}
