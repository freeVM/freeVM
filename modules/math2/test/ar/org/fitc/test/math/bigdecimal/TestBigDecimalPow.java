/*
 *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * @author Hugo Beilis
 * @author Osvaldo Demo
 * @author Jorge Rafael
 * @version 1.0
 */

package ar.org.fitc.test.math.bigdecimal;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

import ar.org.fitc.test.util.Messages;
import junit.framework.TestCase;
/**
 * Test cases for
 * pow(int ) 
 * pow(int, MathContext) 
 *
 */
public class TestBigDecimalPow extends TestCase implements Messages{
	   private boolean log = false;
	    private BigDecimal bigDec = null;

	    
	public TestBigDecimalPow(String name) {
		super(name);
	}

	protected void setUp() throws Exception {
		super.setUp();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}
	  /*
     * Test method for 'java.math.BigDecimal.pow(int)'
     */
    
    public final void testPowInt001() {
        String number = "9.40422246894996749E+175";
        if (log) { System.out.println("testPowInt001"); }
        bigDec = new BigDecimal(number);
        int n = 38;
        if (log) { 
            System.out.println("-> expected result: 9.6887998851037644565564133508644002456922839722965576233925354794932379142021396549890862389518507778929929476026447461738623306003931027027985853640027888232297496966246172134624130555938049129695781922203727111427000828269136718863506651315544594607683532506460927930242087576588345910302670961556469477463561396978151453821836624913940000218261393657407021785557507265822906572037608215033608164996169304791024126920591609355816798787596349160245491756781411021548168657612535671384396960494857047506486859973148749127762024872449616457998383363205252738686703918880649934219023386069352694655737238204250722783214364352564865834195410985094214673347663747598102665552729821811001E+6686");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"9.6887998851037644565564133508644002456922839722965576233925354794932379142021396549890862389518507778929929476026447461738623306003931027027985853640027888232297496966246172134624130555938049129695781922203727111427000828269136718863506651315544594607683532506460927930242087576588345910302670961556469477463561396978151453821836624913940000218261393657407021785557507265822906572037608215033608164996169304791024126920591609355816798787596349160245491756781411021548168657612535671384396960494857047506486859973148749127762024872449616457998383363205252738686703918880649934219023386069352694655737238204250722783214364352564865834195410985094214673347663747598102665552729821811001E+6686",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt002() {
        ArithmeticException exp = new ArithmeticException();
        String number = "9.40422246894996749E-44";
        if (log) { System.out.println("testPowInt002"); }
        bigDec = new BigDecimal(number);
        int n = -68;
        if (log) { 
            try {
                bigDec.pow(n).toString();
                fail(msgRaise+"ArithmeticException");
            } catch (ArithmeticException e) {
                System.out.println("-> expected exception: "+ exp);
                System.out.println("-> actual: "+ e);
                System.out.println("---Test PASSED---"); 
            }
        }
        if (log) { System.out.println("---Test FAILED---"); }
    }
    public final void testPowInt003() {
        ArithmeticException exp = new ArithmeticException();
        String number = "9.40422246894996749E+937";
        if (log) { System.out.println("testPowInt003"); }
        bigDec = new BigDecimal(number);
        int n = 40;
        if (log) { 
            try {
                bigDec.pow(n).toString();
                fail(msgRaise+"ArithmeticException");
            } catch (ArithmeticException e) {
                System.out.println("-> expected exception: "+ exp);
                System.out.println("-> actual: "+ e);
                System.out.println("---Test PASSED---"); 
            }
        }
        if (log) { System.out.println("---Test FAILED---"); }
    }
    public final void testPowInt004() {
        ArithmeticException exp = new ArithmeticException();
        String number = "9.40422246894996749E+991";
        if (log) { System.out.println("testPowInt004"); }
        bigDec = new BigDecimal(number);
        int n = 51;
        if (log) { 
            try {
                bigDec.pow(n).toString();
                fail(msgRaise+"ArithmeticException");
            } catch (ArithmeticException e) {
                System.out.println("-> expected exception: "+ exp);
                System.out.println("-> actual: "+ e);
                System.out.println("---Test PASSED---"); 
            }
        }
        if (log) { System.out.println("---Test FAILED---"); }
    }
    public final void testPowInt005() {
        ArithmeticException exp = new ArithmeticException();
        String number = "-2.314885530818453536E+91";
        if (log) { System.out.println("testPowInt005"); }
        bigDec = new BigDecimal(number);
        int n = -71;
        if (log) { 
            try {
                bigDec.pow(n).toString();
                fail(msgRaise+"ArithmeticException");
            } catch (ArithmeticException e) {
                System.out.println("-> expected exception: "+ exp);
                System.out.println("-> actual: "+ e);
                System.out.println("---Test PASSED---"); 
            }
        }
        if (log) { System.out.println("---Test FAILED---"); }
    }
    
    public final void testPowInt006() {
        String number = "0.000017651002172490693306";
        if (log) { System.out.println("testPowInt006"); }
        bigDec = new BigDecimal(number);
        int n = 71;
        if (log) { 
            System.out.println("-> expected result: 3.3160811992927518125854212850965051628490237572572846544941202919250101456515842445959420898580400550030072754975819984459005706447314128413641239106720012832908696427972030259020443864906825945201865897054823792909070681120430229530467914650467817411771482290883739527493370850371979314975799448186033133240099886433203079490726206777827332484592116470298443410982496775170423416257166079476501050236056086223198156928377460145074019401638639837216557182441405498036361384709531006539246685748060648423221479137788497772712874860029416063398744007189968419436453135067712030492854600771624692719189564931934913730439692283926837089050019451821636090098903856455100360516178393347408252223560743187310975783811796055887657116954323497219798089324629672127809790462402406427317513245712303181592182190594115304568183898425504238425291311205498372554140386426225520138417212551942803381326674484155666801277497294304703159400432927826353271652521527700148191855469979371317025078534208691180989716250078906297912903502552364967864536453151529098443764991824129812214245054559308571712961305861413710211390403979054437948258553611112650768050510261497123574182414261890136930778823048426500154210569717011327983778604216869341316534363795060345193149007570331708909713877300588193648898136200052188006370188233419694193704396218890227672352777562551041586617252268998656E-338");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"3.3160811992927518125854212850965051628490237572572846544941202919250101456515842445959420898580400550030072754975819984459005706447314128413641239106720012832908696427972030259020443864906825945201865897054823792909070681120430229530467914650467817411771482290883739527493370850371979314975799448186033133240099886433203079490726206777827332484592116470298443410982496775170423416257166079476501050236056086223198156928377460145074019401638639837216557182441405498036361384709531006539246685748060648423221479137788497772712874860029416063398744007189968419436453135067712030492854600771624692719189564931934913730439692283926837089050019451821636090098903856455100360516178393347408252223560743187310975783811796055887657116954323497219798089324629672127809790462402406427317513245712303181592182190594115304568183898425504238425291311205498372554140386426225520138417212551942803381326674484155666801277497294304703159400432927826353271652521527700148191855469979371317025078534208691180989716250078906297912903502552364967864536453151529098443764991824129812214245054559308571712961305861413710211390403979054437948258553611112650768050510261497123574182414261890136930778823048426500154210569717011327983778604216869341316534363795060345193149007570331708909713877300588193648898136200052188006370188233419694193704396218890227672352777562551041586617252268998656E-338",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt007() {
        String number = "-1.3455272147882261178E-531";
        if (log) { System.out.println("testPowInt007"); }
        bigDec = new BigDecimal(number);
        int n = 67;
        if (log) { 
            System.out.println("-> expected result: -4.323112931884513525228626581754076435216387273219658464584199341093925231825106284359306895986326130912833830439839185063729841295787992521364586363730414363868915351269907246876348785343830805520530529206035261746243108231426288525817647794014324831118927684190485502200667149789972479202854648821484717029108984864711355140671935799496440465580484859718693669515308359119513843254058698566541445136452996585473391942503166904270586559105598042847255672708634751065359618280393864814054083665266598786468373842987553071814808080554264905790356359677016650849695921288625364758357236674804189489508289099048302864333166809633750196996549841488006552954951224553671932928354200357923839244715228358258729216687913779865663821623913389273498001449730439102480626600079753692406046728068977336425315228608399932790076868687587014471582341009516894402601300999846226169864752944220519811521908435466829675875534474543884937697406525823337275721153729680968920840685921921131105906146645211783937535769078329195384786643964230127768934683822735644951602919693827129609022656809625427929613015807794642373394829336342934547180352343071857036401363839024563878570023894750535842483216037697199594893289916556136192518427677021434275431788631872117917637424504478473151565969729619977306112E-35569");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"-4.323112931884513525228626581754076435216387273219658464584199341093925231825106284359306895986326130912833830439839185063729841295787992521364586363730414363868915351269907246876348785343830805520530529206035261746243108231426288525817647794014324831118927684190485502200667149789972479202854648821484717029108984864711355140671935799496440465580484859718693669515308359119513843254058698566541445136452996585473391942503166904270586559105598042847255672708634751065359618280393864814054083665266598786468373842987553071814808080554264905790356359677016650849695921288625364758357236674804189489508289099048302864333166809633750196996549841488006552954951224553671932928354200357923839244715228358258729216687913779865663821623913389273498001449730439102480626600079753692406046728068977336425315228608399932790076868687587014471582341009516894402601300999846226169864752944220519811521908435466829675875534474543884937697406525823337275721153729680968920840685921921131105906146645211783937535769078329195384786643964230127768934683822735644951602919693827129609022656809625427929613015807794642373394829336342934547180352343071857036401363839024563878570023894750535842483216037697199594893289916556136192518427677021434275431788631872117917637424504478473151565969729619977306112E-35569",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt008() {
        String number = "-1.3455272147882261178E-418";
        if (log) { System.out.println("testPowInt008"); }
        bigDec = new BigDecimal(number);
        int n = 31;
        if (log) { 
            System.out.println("-> expected result: -9.9007267511617431759739209018787970232058982733000570611777163492864242411385750086809257572789447198836376917088894178274668106374024064623145556169257671791704969805989792266451430146826245261609398619499809373158654185712028127887155584064077768345599448449819453172795100131913066361327005409391171571592049206494433868683751851618665513870654442265572897714532964887250756342455853050975259627075063921589484363801835329737744255205959792304916569198812929689616686147875888562318392910020637987562252745064358793420394158841830258585946437131908328674407518503245310320452866244735926272E-12955");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"-9.9007267511617431759739209018787970232058982733000570611777163492864242411385750086809257572789447198836376917088894178274668106374024064623145556169257671791704969805989792266451430146826245261609398619499809373158654185712028127887155584064077768345599448449819453172795100131913066361327005409391171571592049206494433868683751851618665513870654442265572897714532964887250756342455853050975259627075063921589484363801835329737744255205959792304916569198812929689616686147875888562318392910020637987562252745064358793420394158841830258585946437131908328674407518503245310320452866244735926272E-12955",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt009() {
        String number = "1.3455272147882261178E+483";
        if (log) { System.out.println("testPowInt009"); }
        bigDec = new BigDecimal(number);
        int n = 11;
        if (log) { 
            System.out.println("-> expected result: 2.617082112296976269816673489841432403258412113879484121418461024058071821397848683223112672174937742305091085252469501003588897919355959335291272550200142057775671523767572320923568981395005279200952523419625472E+5314");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"2.617082112296976269816673489841432403258412113879484121418461024058071821397848683223112672174937742305091085252469501003588897919355959335291272550200142057775671523767572320923568981395005279200952523419625472E+5314",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt010() {
        String number = "1.3455272147882261178E-497";
        if (log) { System.out.println("testPowInt010"); }
        bigDec = new BigDecimal(number);
        int n = 8;
        if (log) { 
            System.out.println("-> expected result: 1.074335409888476030837447667782323370471975292357063704076462760383011001630048101111831744184185519195760701497031068230892252555770628320702468346388736E-3975");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"1.074335409888476030837447667782323370471975292357063704076462760383011001630048101111831744184185519195760701497031068230892252555770628320702468346388736E-3975",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt011() {
        String number = "1.3455272147882261178E+513";
        if (log) { System.out.println("testPowInt011"); }
        bigDec = new BigDecimal(number);
        int n = 52;
        if (log) { 
            System.out.println("-> expected result: 5.0397533997484052820831532582738528428682820104126528151560994231784967983982553225603558410820818961328770877055441326207763613048479921973841453291098976220314942366547003142378078658216499232759511184740007362699542696680635513609550870873503166587762648591571003328464023878817678011930371221699914918561705433807178820768470089854257872152788753435878307620561805054389055730464755083656126420517326127086790447414519980558840097953442209358640696593082179709220950308452080277699524614849346785991967371084282191464435502240555604608521437158734317834738939848437140189070202308425438340122675319669876466428566639458392648351959186626447748422531986364949021956596862396160286953027770537134697029698417868313843521080228019838727700063008852146497438942636448135763139389051672143529068508086304712751080147748469576205928762406182590450428855296959250554557946898684757532675915832410999240432750261778525327048477042670072968972763563139936337430052368578223933051172242708678433570816E+26682");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"5.0397533997484052820831532582738528428682820104126528151560994231784967983982553225603558410820818961328770877055441326207763613048479921973841453291098976220314942366547003142378078658216499232759511184740007362699542696680635513609550870873503166587762648591571003328464023878817678011930371221699914918561705433807178820768470089854257872152788753435878307620561805054389055730464755083656126420517326127086790447414519980558840097953442209358640696593082179709220950308452080277699524614849346785991967371084282191464435502240555604608521437158734317834738939848437140189070202308425438340122675319669876466428566639458392648351959186626447748422531986364949021956596862396160286953027770537134697029698417868313843521080228019838727700063008852146497438942636448135763139389051672143529068508086304712751080147748469576205928762406182590450428855296959250554557946898684757532675915832410999240432750261778525327048477042670072968972763563139936337430052368578223933051172242708678433570816E+26682",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt012() {
        String number = "1.3455272147882261178E-857";
        if (log) { System.out.println("testPowInt012"); }
        bigDec = new BigDecimal(number);
        int n = 78;
        if (log) { 
            System.out.println("-> expected result: 1.1313941523474696749205185028099486225478341355765388836591056074933310635540608004355705909644740513772582985929122011768920867813581243057072358425666206699801280020416870458248591185517751947169799379490876883916736693935993833017470901002237954372681343161335579708556351678907451199484758871876032282031810050381876359895081923976021503074647412262706666328257392036585718715121928407206853828021491164520887099033146758940513546946229481077827359143350149514513246098147843952542478293694804472630839504174680191820923945236331898102238885376400616651917778775370867496204849436329465619330148574569539482424699847659479449862674121637779057477026198516543825264202189569272036636814813295139888058486387044819776268647656335815209644660326072918033405694853859420900993241475839800657668664507646010334333276473201937880481718118593161264389251964490495139581505087393048184885475092819620637935440171996068475681596420236879161311375969422343139495256430078097746358228066688308660172791012891711169061765072578308105691258883352808143964775777450939097163542906899742657026065756259067897270825082976462449026522800099963878010185700123028745442366235922909406762493140055287780192805732468646071345247072585907169049542806125641043514880788172120525183034878487013562236682805138177067636199003449674771720624442434260385267813883450625327025726547530371665441063520159435505966890035610200123125577875417672117016573455349268672426580191266499194167039820398823043445078282536484864E-66836");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"1.1313941523474696749205185028099486225478341355765388836591056074933310635540608004355705909644740513772582985929122011768920867813581243057072358425666206699801280020416870458248591185517751947169799379490876883916736693935993833017470901002237954372681343161335579708556351678907451199484758871876032282031810050381876359895081923976021503074647412262706666328257392036585718715121928407206853828021491164520887099033146758940513546946229481077827359143350149514513246098147843952542478293694804472630839504174680191820923945236331898102238885376400616651917778775370867496204849436329465619330148574569539482424699847659479449862674121637779057477026198516543825264202189569272036636814813295139888058486387044819776268647656335815209644660326072918033405694853859420900993241475839800657668664507646010334333276473201937880481718118593161264389251964490495139581505087393048184885475092819620637935440171996068475681596420236879161311375969422343139495256430078097746358228066688308660172791012891711169061765072578308105691258883352808143964775777450939097163542906899742657026065756259067897270825082976462449026522800099963878010185700123028745442366235922909406762493140055287780192805732468646071345247072585907169049542806125641043514880788172120525183034878487013562236682805138177067636199003449674771720624442434260385267813883450625327025726547530371665441063520159435505966890035610200123125577875417672117016573455349268672426580191266499194167039820398823043445078282536484864E-66836",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt013() {
        String number = "1.3455272147882261178E+424";
        if (log) { System.out.println("testPowInt013"); }
        bigDec = new BigDecimal(number);
        int n = 78;
        if (log) { 
            System.out.println("-> expected result: 1.1313941523474696749205185028099486225478341355765388836591056074933310635540608004355705909644740513772582985929122011768920867813581243057072358425666206699801280020416870458248591185517751947169799379490876883916736693935993833017470901002237954372681343161335579708556351678907451199484758871876032282031810050381876359895081923976021503074647412262706666328257392036585718715121928407206853828021491164520887099033146758940513546946229481077827359143350149514513246098147843952542478293694804472630839504174680191820923945236331898102238885376400616651917778775370867496204849436329465619330148574569539482424699847659479449862674121637779057477026198516543825264202189569272036636814813295139888058486387044819776268647656335815209644660326072918033405694853859420900993241475839800657668664507646010334333276473201937880481718118593161264389251964490495139581505087393048184885475092819620637935440171996068475681596420236879161311375969422343139495256430078097746358228066688308660172791012891711169061765072578308105691258883352808143964775777450939097163542906899742657026065756259067897270825082976462449026522800099963878010185700123028745442366235922909406762493140055287780192805732468646071345247072585907169049542806125641043514880788172120525183034878487013562236682805138177067636199003449674771720624442434260385267813883450625327025726547530371665441063520159435505966890035610200123125577875417672117016573455349268672426580191266499194167039820398823043445078282536484864E+33082");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"1.1313941523474696749205185028099486225478341355765388836591056074933310635540608004355705909644740513772582985929122011768920867813581243057072358425666206699801280020416870458248591185517751947169799379490876883916736693935993833017470901002237954372681343161335579708556351678907451199484758871876032282031810050381876359895081923976021503074647412262706666328257392036585718715121928407206853828021491164520887099033146758940513546946229481077827359143350149514513246098147843952542478293694804472630839504174680191820923945236331898102238885376400616651917778775370867496204849436329465619330148574569539482424699847659479449862674121637779057477026198516543825264202189569272036636814813295139888058486387044819776268647656335815209644660326072918033405694853859420900993241475839800657668664507646010334333276473201937880481718118593161264389251964490495139581505087393048184885475092819620637935440171996068475681596420236879161311375969422343139495256430078097746358228066688308660172791012891711169061765072578308105691258883352808143964775777450939097163542906899742657026065756259067897270825082976462449026522800099963878010185700123028745442366235922909406762493140055287780192805732468646071345247072585907169049542806125641043514880788172120525183034878487013562236682805138177067636199003449674771720624442434260385267813883450625327025726547530371665441063520159435505966890035610200123125577875417672117016573455349268672426580191266499194167039820398823043445078282536484864E+33082",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt014() {
        String number = "-1.3455272147882261178E-172";
        if (log) { System.out.println("testPowInt014"); }
        bigDec = new BigDecimal(number);
        int n = 42;
        if (log) { 
            System.out.println("-> expected result: 2.59110148792055541836135835425845402593315247809920958082663540907723539118284058508396115352869911379345706108128809524613856408657271972491545942754457112516946588944261563918152786929814297825453487015564892353495646937855277046229864978461582453701986971581549664525581036902411163202930260165952041201546303714314253319551382245823016211933118655730461514024538098263722695102278586303598314625349346209111457915662079608491493229246495087710021067537928339539946075433096168967657705571658362666103029853831527624527940702268949308747985667430389105641738401576520982259017550073862382649596454175038694546663213110379164579484084852173490985093996577643860538393255552392981080280639923983324298284298387382326114457435543473692356788204625314131903370825828987559754519862514992800564833245200384E-7219");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"2.59110148792055541836135835425845402593315247809920958082663540907723539118284058508396115352869911379345706108128809524613856408657271972491545942754457112516946588944261563918152786929814297825453487015564892353495646937855277046229864978461582453701986971581549664525581036902411163202930260165952041201546303714314253319551382245823016211933118655730461514024538098263722695102278586303598314625349346209111457915662079608491493229246495087710021067537928339539946075433096168967657705571658362666103029853831527624527940702268949308747985667430389105641738401576520982259017550073862382649596454175038694546663213110379164579484084852173490985093996577643860538393255552392981080280639923983324298284298387382326114457435543473692356788204625314131903370825828987559754519862514992800564833245200384E-7219",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt015() {
        String number = "1.3455272147882261178E+450";
        if (log) { System.out.println("testPowInt015"); }
        bigDec = new BigDecimal(number);
        int n = 54;
        if (log) { 
            System.out.println("-> expected result: 9.124188712289155896403526168628081897720213048211932034769852903950210779527866189284978023211678127113934031834455283270097351198741531758202939411787639800957774590898285633689486102727075729187338058972507683813486574628502231211719203683945063041007204680408491276837931125553266755185739534223643314171101435130249903341368947659461844608751857257453122310667173013529751753960698755342320615236196018324917099431872044358286510409519612476148525661065222575857870582828004193046503046771206135068883970386367910546576732440492191389239852480297105172855417162924373613326605986161119489178123458423379702347894780496606415335848425276736654118079126258674668873946428343884200474745750451911735258051494600651666030881839547404506537519648074040008317439206221687544726640590308871740969639765271410306508631915739322406522890106316834040762432360329855037657992501909925216829882188599793467744088518365718671538502449745608503618552295051447954349945752878311277342038313525948328487989857695937309678865260867898945405190144E+24306");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"9.124188712289155896403526168628081897720213048211932034769852903950210779527866189284978023211678127113934031834455283270097351198741531758202939411787639800957774590898285633689486102727075729187338058972507683813486574628502231211719203683945063041007204680408491276837931125553266755185739534223643314171101435130249903341368947659461844608751857257453122310667173013529751753960698755342320615236196018324917099431872044358286510409519612476148525661065222575857870582828004193046503046771206135068883970386367910546576732440492191389239852480297105172855417162924373613326605986161119489178123458423379702347894780496606415335848425276736654118079126258674668873946428343884200474745750451911735258051494600651666030881839547404506537519648074040008317439206221687544726640590308871740969639765271410306508631915739322406522890106316834040762432360329855037657992501909925216829882188599793467744088518365718671538502449745608503618552295051447954349945752878311277342038313525948328487989857695937309678865260867898945405190144E+24306",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt016() {
        String number = "1.3455272147882261178E+42";
        if (log) { System.out.println("testPowInt016"); }
        bigDec = new BigDecimal(number);
        int n = 76;
        if (log) { 
            System.out.println("-> expected result: 6.2492652284457970711746970870754742009894071595394334006190370081474654453731172128845271211564547602300976184296302529004829801741288314913628079918138841404092261341153268750115937255001168674922705953381320724350943825371482898608571817887250065650589032419256224956164537637906716204098887197551028212051710176411263139818882922434208971258150635848348599662675825483555965695811357958892672475505214862188826645410986043237075833519510492464756534805788452270156814562750100249037990566949438883876272277835392352398595436288129225510427390214572254684104293717104380295028779069330979309733382513463939212190419698664756813678193732800697024083096107162486211967254360922880691337917581899743598775033505641695528719971793116207956876625386546615513165342764419980401552075624386565160725428018083241053693559108405578637834999984582496510923590391354620246519257161722324362008274951303043315277991920209848600485541113483634370620073096397119812185290444500369753309831003958214573590108979469859405538496204240905145751651159143210425032819186154957882776978039265801590834502179194629370333624009954753497173374785371326883398315333263852979444682706524784006965411805942250441691976874718723501827011536805007347670302235947917758591672655687296993829102025631560746865170730228679607976326602592105755763046078107712989934137552658951384935012439178483430180035251881304756053490270579325822483702691169200169243137661841192349554660025040896E+3201");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"6.2492652284457970711746970870754742009894071595394334006190370081474654453731172128845271211564547602300976184296302529004829801741288314913628079918138841404092261341153268750115937255001168674922705953381320724350943825371482898608571817887250065650589032419256224956164537637906716204098887197551028212051710176411263139818882922434208971258150635848348599662675825483555965695811357958892672475505214862188826645410986043237075833519510492464756534805788452270156814562750100249037990566949438883876272277835392352398595436288129225510427390214572254684104293717104380295028779069330979309733382513463939212190419698664756813678193732800697024083096107162486211967254360922880691337917581899743598775033505641695528719971793116207956876625386546615513165342764419980401552075624386565160725428018083241053693559108405578637834999984582496510923590391354620246519257161722324362008274951303043315277991920209848600485541113483634370620073096397119812185290444500369753309831003958214573590108979469859405538496204240905145751651159143210425032819186154957882776978039265801590834502179194629370333624009954753497173374785371326883398315333263852979444682706524784006965411805942250441691976874718723501827011536805007347670302235947917758591672655687296993829102025631560746865170730228679607976326602592105755763046078107712989934137552658951384935012439178483430180035251881304756053490270579325822483702691169200169243137661841192349554660025040896E+3201",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt017() {
        String number = "1.3455272147882261178E-141";
        if (log) { System.out.println("testPowInt017"); }
        bigDec = new BigDecimal(number);
        int n = 20;
        if (log) { 
            System.out.println("-> expected result: 3.7831165879896730284140074275896221705935783666990746286167882811775900820154004457391141544483940971456676733717468320352409112935418364031589573490216551343481237306689562220055916242016605782726185002040100016517595213745164841051870923180300501069561906322192101331733815696769337774826727126829404081337534205934415657065473305580591496735413224603310655254749653372310337355776E-2818");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"3.7831165879896730284140074275896221705935783666990746286167882811775900820154004457391141544483940971456676733717468320352409112935418364031589573490216551343481237306689562220055916242016605782726185002040100016517595213745164841051870923180300501069561906322192101331733815696769337774826727126829404081337534205934415657065473305580591496735413224603310655254749653372310337355776E-2818",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt018() {
        String number = "-1.3455272147882261178E+129";
        if (log) { System.out.println("testPowInt018"); }
        bigDec = new BigDecimal(number);
        int n = 68;
        if (log) { 
            System.out.println("-> expected result: 5.8168661024535317764564985715264583869816570377353800071947547060238571673537220846928385178203885159446148287707827936509287331064832859045136182052232165539681671736137813953562460728073992755497285567800368449556359550814795351827659540698812699575101166087973088016918653620950375791274310491266280731659966130432693613296032775443922209812172911491698048212801130980064786701267289177662087113544108386103115626922706819569172790981778503506087863384061155476277114394633396537239915871567689444791220578195336732081332663520909184083934285596273134881161573823038612642808737404418767648490628578178397155519373293465957204230741414334630747731615157691762319114013801542397336831345752237121948304294812366341262051890548531380849961923957132508853372138684172238182415984341179002290206974151279442108520379514639560045337229629367609814884315574155734808350900610366885909879079388352706837189284218983831922758263443278876156777615484082450564205627754313882704411836435304004807027552318052078470002023368261485330250146365490817234815888221657820889778556876759707910549827739871224437433282943765553620042310727912953180638110872703623262145569946798604782671560351835531296355714590973325410219208168127200159317245206111912170980088981079294177677560145934342766540067749132887639719936E+8780");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"5.8168661024535317764564985715264583869816570377353800071947547060238571673537220846928385178203885159446148287707827936509287331064832859045136182052232165539681671736137813953562460728073992755497285567800368449556359550814795351827659540698812699575101166087973088016918653620950375791274310491266280731659966130432693613296032775443922209812172911491698048212801130980064786701267289177662087113544108386103115626922706819569172790981778503506087863384061155476277114394633396537239915871567689444791220578195336732081332663520909184083934285596273134881161573823038612642808737404418767648490628578178397155519373293465957204230741414334630747731615157691762319114013801542397336831345752237121948304294812366341262051890548531380849961923957132508853372138684172238182415984341179002290206974151279442108520379514639560045337229629367609814884315574155734808350900610366885909879079388352706837189284218983831922758263443278876156777615484082450564205627754313882704411836435304004807027552318052078470002023368261485330250146365490817234815888221657820889778556876759707910549827739871224437433282943765553620042310727912953180638110872703623262145569946798604782671560351835531296355714590973325410219208168127200159317245206111912170980088981079294177677560145934342766540067749132887639719936E+8780",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt019() {
        String number = "-1.3455272147882261178E-728";
        if (log) { System.out.println("testPowInt019"); }
        bigDec = new BigDecimal(number);
        int n = 9;
        if (log) { 
            System.out.println("-> expected result: -1.4455475318156084338299542400473015811549716659733716573586517158243806419276004830645355557555488438677186972466376784669658084531735474095165011055336629046128830269291008E-6551");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"-1.4455475318156084338299542400473015811549716659733716573586517158243806419276004830645355557555488438677186972466376784669658084531735474095165011055336629046128830269291008E-6551",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt020() {
        String number = "-1.3455272147882261178E-377";
        if (log) { System.out.println("testPowInt020"); }
        bigDec = new BigDecimal(number);
        int n = 25;
        if (log) { 
            System.out.println("-> expected result: -1.6684460072437975151441741382268222003957976170677565525445261559212926620059731060565490231528660516928705305243473542986610257574162754033525670151240594189465463562063405964742308522936144856876485652504217281990116955167351056114067451773594387415147778503835636647793163690058670153814253953888649853626452621338762503462301135533926565203649304113955118793547202189248201617149329562335915224967397314671165931985419505137505398987674589858004719720223414299365853854957568E-9422");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"-1.6684460072437975151441741382268222003957976170677565525445261559212926620059731060565490231528660516928705305243473542986610257574162754033525670151240594189465463562063405964742308522936144856876485652504217281990116955167351056114067451773594387415147778503835636647793163690058670153814253953888649853626452621338762503462301135533926565203649304113955118793547202189248201617149329562335915224967397314671165931985419505137505398987674589858004719720223414299365853854957568E-9422",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt021() {
        String number = "-1.3455272147882261178E+720";
        if (log) { System.out.println("testPowInt021"); }
        bigDec = new BigDecimal(number);
        int n = 20;
        if (log) { 
            System.out.println("-> expected result: 3.7831165879896730284140074275896221705935783666990746286167882811775900820154004457391141544483940971456676733717468320352409112935418364031589573490216551343481237306689562220055916242016605782726185002040100016517595213745164841051870923180300501069561906322192101331733815696769337774826727126829404081337534205934415657065473305580591496735413224603310655254749653372310337355776E+14402");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"3.7831165879896730284140074275896221705935783666990746286167882811775900820154004457391141544483940971456676733717468320352409112935418364031589573490216551343481237306689562220055916242016605782726185002040100016517595213745164841051870923180300501069561906322192101331733815696769337774826727126829404081337534205934415657065473305580591496735413224603310655254749653372310337355776E+14402",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt022() {
        String number = "-1.3455272147882261178E-850";
        if (log) { System.out.println("testPowInt022"); }
        bigDec = new BigDecimal(number);
        int n = 38;
        if (log) { 
            System.out.println("-> expected result: 7.905229426427671410353073036511853629727494715926558493661208616786703855474132033398310646147337242545005049987821097090642625884713021278551262905505441309742117193570248844347324847660298157726631626453972977675931460138168800018707416936917444786447558735870201014846393256007542487993420529272994216289297877707460229769171179358036786676230715407789513145195160870583784128609950308503627669321092017482184974265644251030820334259556414058563630297798313539912316746588515132386446686603044485446737647407861438661582230835455029076256054864898624568223819211720073176009195190007943609945779707543813051716900436647606873939518859568474685577104581906612318016630921901211651100314856344875955091563132655590605443825664E-32296");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"7.905229426427671410353073036511853629727494715926558493661208616786703855474132033398310646147337242545005049987821097090642625884713021278551262905505441309742117193570248844347324847660298157726631626453972977675931460138168800018707416936917444786447558735870201014846393256007542487993420529272994216289297877707460229769171179358036786676230715407789513145195160870583784128609950308503627669321092017482184974265644251030820334259556414058563630297798313539912316746588515132386446686603044485446737647407861438661582230835455029076256054864898624568223819211720073176009195190007943609945779707543813051716900436647606873939518859568474685577104581906612318016630921901211651100314856344875955091563132655590605443825664E-32296",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt023() {
        String number = "-1.3455293120527584717E+115";
        if (log) { System.out.println("testPowInt023"); }
        bigDec = new BigDecimal(number);
        int n = 20;
        if (log) { 
            System.out.println("-> expected result: 3.7832345241212050764662934470445523983608943002349069621084221349700996586502054046085523662825091063247992151159663731586478389983442774696141883795295180949625645400801680703589564490014988677741093797539482019581400581855455565972259888911026691648721447536325186028386721540072346973917796102962724348253290083401138907227971084544151184675325986870608000591610933577213983483601E+2302");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"3.7832345241212050764662934470445523983608943002349069621084221349700996586502054046085523662825091063247992151159663731586478389983442774696141883795295180949625645400801680703589564490014988677741093797539482019581400581855455565972259888911026691648721447536325186028386721540072346973917796102962724348253290083401138907227971084544151184675325986870608000591610933577213983483601E+2302",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt024() {
        String number = "-1.4829735431805717965E-675";
        if (log) { System.out.println("testPowInt024"); }
        bigDec = new BigDecimal(number);
        int n = 62;
        if (log) { 
            System.out.println("-> expected result: 4.076345562989535342960040916126891632810622936667375057820294485190483385128034806431016959290889969883570828949633643648285990399071966768614160154250604889548682169757611404404548405486885982457047031140474529986017415442851056111936211709405488169528743775259922033513618499948402010450476427100581989488374272648866775045403535957525601985010494079430649847168749430616304786720344582538916153170876230646792826637389848665638310905631306509506706273325241478016645536182466900768546097581806621279759401127372987411246806798446212274545423745282482766237752212134864443985722353675659515804638666451470479198347106571022345640889605286846348341400415472063141107395629357324967394183647444940190210352656088766585875805121777676426042635780479710434707406126708805585404423443546723149400872277339033358848598986906074464488992044257554649034049707482194770180039854893941461864310112011053107098662219728225362962931960969288872943644850747353780409393956852571486274281144343947736600444787634379096146400546920609205254377440233454153202392779594347764342571737778009302935579112229490965744044295164523312204656726650804820694534227923052673026038661419079289771616458892822265625E-41840");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"4.076345562989535342960040916126891632810622936667375057820294485190483385128034806431016959290889969883570828949633643648285990399071966768614160154250604889548682169757611404404548405486885982457047031140474529986017415442851056111936211709405488169528743775259922033513618499948402010450476427100581989488374272648866775045403535957525601985010494079430649847168749430616304786720344582538916153170876230646792826637389848665638310905631306509506706273325241478016645536182466900768546097581806621279759401127372987411246806798446212274545423745282482766237752212134864443985722353675659515804638666451470479198347106571022345640889605286846348341400415472063141107395629357324967394183647444940190210352656088766585875805121777676426042635780479710434707406126708805585404423443546723149400872277339033358848598986906074464488992044257554649034049707482194770180039854893941461864310112011053107098662219728225362962931960969288872943644850747353780409393956852571486274281144343947736600444787634379096146400546920609205254377440233454153202392779594347764342571737778009302935579112229490965744044295164523312204656726650804820694534227923052673026038661419079289771616458892822265625E-41840",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt025() {
        String number = "-1.4829735431805717965E-227";
        if (log) { System.out.println("testPowInt025"); }
        bigDec = new BigDecimal(number);
        int n = 30;
        if (log) { 
            System.out.println("-> expected result: 1.36145124526729658681501834916014955327510745973265832977710343227408554741420462200299416752278180881990838370374488266268235006971601277106104589527937185404865565426195189027703924428267233918349802635235325313089571746382467699689478022172991865484486821190151379728726201169406669321226305019281093864503626381976335574182880467388886770670532701347385173191099702118857809431075225401312445034121159891146046674758679776668051883630413793523993851580981199791535676233147383772395368406393012695225128910933890325067636765929450359415680955335970268584787845611572265625E-6805");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"1.36145124526729658681501834916014955327510745973265832977710343227408554741420462200299416752278180881990838370374488266268235006971601277106104589527937185404865565426195189027703924428267233918349802635235325313089571746382467699689478022172991865484486821190151379728726201169406669321226305019281093864503626381976335574182880467388886770670532701347385173191099702118857809431075225401312445034121159891146046674758679776668051883630413793523993851580981199791535676233147383772395368406393012695225128910933890325067636765929450359415680955335970268584787845611572265625E-6805",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt026() {
        String number = "-1.4829735431805717965E+641";
        if (log) { System.out.println("testPowInt026"); }
        bigDec = new BigDecimal(number);
        int n = 7;
        if (log) { 
            System.out.println("-> expected result: -1.57737089018998834976274554745831635367917728331234838142925230842226511311770825319505988412333511605482482092629657959990143066953125E+4488");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"-1.57737089018998834976274554745831635367917728331234838142925230842226511311770825319505988412333511605482482092629657959990143066953125E+4488",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt027() {
        String number = "1.4829735431805717965E-246";
        if (log) { System.out.println("testPowInt027"); }
        bigDec = new BigDecimal(number);
        int n = 23;
        if (log) { 
            System.out.println("-> expected result: 8.63114219828993383117998523382863604847410907443061860880567211899994665356909759146831024573125184518674800295507246015163455563784182980927620904153902733585365971259129564891809932307852226078196308363383123986260095719760648483364342841695827727932993101548481047452283330162866051344718384770621586556678193045344956583084832823975533368226435883705946121457256498762788529668550938920681335583699746644926850173832903587818145751953125E-5655");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"8.63114219828993383117998523382863604847410907443061860880567211899994665356909759146831024573125184518674800295507246015163455563784182980927620904153902733585365971259129564891809932307852226078196308363383123986260095719760648483364342841695827727932993101548481047452283330162866051344718384770621586556678193045344956583084832823975533368226435883705946121457256498762788529668550938920681335583699746644926850173832903587818145751953125E-5655",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt028() {
        String number = "1.4829735431805717965E+679";
        if (log) { System.out.println("testPowInt028"); }
        bigDec = new BigDecimal(number);
        int n = 6;
        if (log) { 
            System.out.println("-> expected result: 1.0636541005357115922427622788960067811921114644971831454020417265579617449622803820505826048979992229144868850765625E+4075");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"1.0636541005357115922427622788960067811921114644971831454020417265579617449622803820505826048979992229144868850765625E+4075",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt029() {
        String number = "1.4829735431805717965E+684";
        if (log) { System.out.println("testPowInt029"); }
        bigDec = new BigDecimal(number);
        int n = 61;
        if (log) { 
            System.out.println("-> expected result: 2.74876485945048713126839407952514388869363924840091943610192289881046934509292229752166894901407874279374903627050408626121889457220930521750125850836543170863718226673105983779710542565415413702143115774426701746698675427626315950436839026664661025666541599965584940110824242253985888219918298022218569540416287283227364462798028539572443854753369581317516448093449338840360776197538195856922111262395151491556789874584378028338918423409017109058942094458197997275987173223237725622039555223565373915234967485639817609762719052174912003456113769546031344369345469783208110403006617454351110878411287889079777466957063918485279507082038380833201884594268257999489757444492436334311252887143575271471781000656040822108960989526315347768425978726972491974842018291281022882009681110131967247436890753610068923617507107922944859387645641629419414051532758801858721482633469080089904964415116797647821892367791081627984661859171658777550853405304293595124577361229833270011430665929959064611239657840916935900612326522026932526603030379423533773295141753002337483624592098107591797784733513622970309286055453993024247428750106729861309162732396771389176137745380401611328125E+41734");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"2.74876485945048713126839407952514388869363924840091943610192289881046934509292229752166894901407874279374903627050408626121889457220930521750125850836543170863718226673105983779710542565415413702143115774426701746698675427626315950436839026664661025666541599965584940110824242253985888219918298022218569540416287283227364462798028539572443854753369581317516448093449338840360776197538195856922111262395151491556789874584378028338918423409017109058942094458197997275987173223237725622039555223565373915234967485639817609762719052174912003456113769546031344369345469783208110403006617454351110878411287889079777466957063918485279507082038380833201884594268257999489757444492436334311252887143575271471781000656040822108960989526315347768425978726972491974842018291281022882009681110131967247436890753610068923617507107922944859387645641629419414051532758801858721482633469080089904964415116797647821892367791081627984661859171658777550853405304293595124577361229833270011430665929959064611239657840916935900612326522026932526603030379423533773295141753002337483624592098107591797784733513622970309286055453993024247428750106729861309162732396771389176137745380401611328125E+41734",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    public final void testPowInt030() {
        String number = "1.4829735431805717965E+94";
        if (log) { System.out.println("testPowInt030"); }
        bigDec = new BigDecimal(number);
        int n = 78;
        if (log) { 
            System.out.println("-> expected result: 2.2305165146855977860659788141259894742024707674256039875507869703006527108842733212266628128079181079391098154927646771785028424987743003578124347958335130976412589876485226249632297819507606501498297481189984806789054605068359222908405159091325259745993293194294131086979126828884248661627065778489132220872110033322991294294340318686104142420597226618940702426296979648448186550373715657919857432667861750034956825222465369287993820541993951225121280265211496560793015489013053355612044204632043056062579651322394011277608599141846270984275386528647835042252742550494069061711079529551131383508405534348435773293454070647208162123248808267582628062621328853128797253372193414021482206656356300949809982187905897653952274144591236467625708775211812892033532007828851327659212360860724845901574740447487123946212407216556893769202130135390304496615131807261858449877186174214618891595755828331489490220073208332621134962718809700743052829234556903170208821054088371880931198599766636056766204896636991166685890262416476015198331759708773982249377286060119649513241027022350354636284227582458910551269528061146234041105451736347704557517902651965970559009774128346577679104067589960109644760587798311090183308717064751693739529015658190131116049776989503410035367431631109635282029391400833882457969971893293128749123087267936330688916410027959731620043668072769985734096439365283203407116531855980814967583967272412351604137958220221378617153264040988088802441868807591163204051554203033447265625E+7345");
            System.out.println("-> actual result: "+ bigDec.pow(n).toString()); 
        }
        assertEquals(msgNotSame,"2.2305165146855977860659788141259894742024707674256039875507869703006527108842733212266628128079181079391098154927646771785028424987743003578124347958335130976412589876485226249632297819507606501498297481189984806789054605068359222908405159091325259745993293194294131086979126828884248661627065778489132220872110033322991294294340318686104142420597226618940702426296979648448186550373715657919857432667861750034956825222465369287993820541993951225121280265211496560793015489013053355612044204632043056062579651322394011277608599141846270984275386528647835042252742550494069061711079529551131383508405534348435773293454070647208162123248808267582628062621328853128797253372193414021482206656356300949809982187905897653952274144591236467625708775211812892033532007828851327659212360860724845901574740447487123946212407216556893769202130135390304496615131807261858449877186174214618891595755828331489490220073208332621134962718809700743052829234556903170208821054088371880931198599766636056766204896636991166685890262416476015198331759708773982249377286060119649513241027022350354636284227582458910551269528061146234041105451736347704557517902651965970559009774128346577679104067589960109644760587798311090183308717064751693739529015658190131116049776989503410035367431631109635282029391400833882457969971893293128749123087267936330688916410027959731620043668072769985734096439365283203407116531855980814967583967272412351604137958220221378617153264040988088802441868807591163204051554203033447265625E+7345",bigDec.pow(n).toString());
        if (log) { System.out.println("---Test PASSED---"); }
    }
    
    /*
     * Test method for 'java.math.BigDecimal.pow(int, MathContext)'
     */
	/** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext001() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext002() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext003() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext004() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext005() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext006() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext007() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext008() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(9,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext009() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(9,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext010() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(9,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext011() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(9,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext012() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(9,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext013() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(9,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext014() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(9,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (614786,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext015() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(614786,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (614786,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext016() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(614786,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (614786,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext017() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(614786,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (614786,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext018() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(614786,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (614786,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext019() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(614786,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (614786,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext020() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(614786,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (614786,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext021() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(614786,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (910,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext022() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(910,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (910,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext023() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(910,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (910,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext024() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(910,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (910,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext025() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(910,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (910,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext026() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(910,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (910,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext027() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(910,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4567,Mathcontext (910,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext028() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4567,new MathContext(910,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (0,UP)</b> should be 0
     */
   public void testPowIntMathContext029() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(0,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (0,DOWN)</b> should be 0
     */
   public void testPowIntMathContext030() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(0,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (0,CEILING)</b> should be 0
     */
   public void testPowIntMathContext031() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(0,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (0,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext032() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(0,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (0,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext033() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(0,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (0,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext034() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(0,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (0,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext035() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(0,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (9,UP)</b> should be 0
     */
   public void testPowIntMathContext036() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(9,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (9,DOWN)</b> should be 0
     */
   public void testPowIntMathContext037() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(9,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (9,CEILING)</b> should be 0
     */
   public void testPowIntMathContext038() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(9,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (9,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext039() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(9,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (9,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext040() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(9,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (9,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext041() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(9,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (9,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext042() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(9,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (614786,UP)</b> should be 0
     */
   public void testPowIntMathContext043() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(614786,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (614786,DOWN)</b> should be 0
     */
   public void testPowIntMathContext044() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(614786,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (614786,CEILING)</b> should be 0
     */
   public void testPowIntMathContext045() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(614786,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (614786,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext046() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(614786,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (614786,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext047() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(614786,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (614786,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext048() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(614786,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (614786,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext049() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(614786,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (910,UP)</b> should be 0
     */
   public void testPowIntMathContext050() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(910,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (910,DOWN)</b> should be 0
     */
   public void testPowIntMathContext051() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(910,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (910,CEILING)</b> should be 0
     */
   public void testPowIntMathContext052() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(910,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (910,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext053() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(910,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (910,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext054() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(910,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (910,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext055() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(910,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 999999999,Mathcontext (910,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext056() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(999999999,new MathContext(910,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (0,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext057() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(0,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (0,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext058() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(0,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (0,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext059() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(0,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (0,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext060() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(0,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (0,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext061() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(0,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (0,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext062() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(0,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (0,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext063() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(0,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (9,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext064() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(9,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (9,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext065() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(9,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (9,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext066() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(9,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (9,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext067() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(9,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (9,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext068() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(9,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (9,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext069() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(9,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (9,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext070() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(9,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (614786,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext071() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(614786,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (614786,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext072() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(614786,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (614786,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext073() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(614786,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (614786,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext074() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(614786,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (614786,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext075() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(614786,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (614786,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext076() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(614786,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (614786,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext077() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(614786,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (910,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext078() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(910,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (910,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext079() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(910,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (910,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext080() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(910,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (910,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext081() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(910,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (910,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext082() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(910,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (910,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext083() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(910,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -999999999,Mathcontext (910,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext084() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-999999999,new MathContext(910,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (0,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext085() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(0,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (0,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext086() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(0,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (0,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext087() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(0,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (0,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext088() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(0,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (0,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext089() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(0,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (0,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext090() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(0,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (0,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext091() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(0,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (9,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext092() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(9,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (9,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext093() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(9,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (9,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext094() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(9,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (9,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext095() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(9,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (9,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext096() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(9,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (9,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext097() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(9,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (9,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext098() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(9,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (614786,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext099() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(614786,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (614786,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext100() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(614786,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (614786,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext101() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(614786,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (614786,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext102() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(614786,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (614786,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext103() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(614786,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (614786,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext104() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(614786,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (614786,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext105() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(614786,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (910,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext106() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(910,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (910,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext107() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(910,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (910,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext108() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(910,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (910,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext109() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(910,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (910,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext110() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(910,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (910,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext111() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(910,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -4890156,Mathcontext (910,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext112() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-4890156,new MathContext(910,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (0,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext113() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(0,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (0,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext114() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(0,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (0,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext115() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(0,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (0,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext116() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(0,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (0,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext117() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(0,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (0,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext118() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(0,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (0,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext119() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(0,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (9,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext120() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(9,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (9,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext121() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(9,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (9,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext122() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(9,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (9,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext123() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(9,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (9,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext124() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(9,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (9,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext125() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(9,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (9,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext126() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(9,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (614786,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext127() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(614786,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (614786,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext128() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(614786,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (614786,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext129() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(614786,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (614786,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext130() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(614786,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (614786,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext131() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(614786,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (614786,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext132() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(614786,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (614786,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext133() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(614786,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (910,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext134() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(910,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (910,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext135() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(910,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (910,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext136() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(910,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (910,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext137() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(910,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (910,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext138() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(910,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (910,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext139() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(910,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -84890156,Mathcontext (910,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext140() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-84890156,new MathContext(910,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (0,UP)</b> should be 0
     */
   public void testPowIntMathContext141() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(0,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (0,DOWN)</b> should be 0
     */
   public void testPowIntMathContext142() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(0,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (0,CEILING)</b> should be 0
     */
   public void testPowIntMathContext143() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(0,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (0,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext144() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(0,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (0,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext145() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(0,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (0,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext146() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(0,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (0,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext147() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(0,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (9,UP)</b> should be 0
     */
   public void testPowIntMathContext148() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(9,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (9,DOWN)</b> should be 0
     */
   public void testPowIntMathContext149() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(9,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (9,CEILING)</b> should be 0
     */
   public void testPowIntMathContext150() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(9,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (9,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext151() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(9,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (9,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext152() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(9,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (9,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext153() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(9,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (9,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext154() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(9,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (614786,UP)</b> should be 0
     */
   public void testPowIntMathContext155() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(614786,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (614786,DOWN)</b> should be 0
     */
   public void testPowIntMathContext156() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(614786,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (614786,CEILING)</b> should be 0
     */
   public void testPowIntMathContext157() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(614786,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (614786,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext158() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(614786,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (614786,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext159() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(614786,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (614786,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext160() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(614786,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (614786,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext161() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(614786,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (910,UP)</b> should be 0
     */
   public void testPowIntMathContext162() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(910,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (910,DOWN)</b> should be 0
     */
   public void testPowIntMathContext163() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(910,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (910,CEILING)</b> should be 0
     */
   public void testPowIntMathContext164() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(910,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (910,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext165() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(910,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (910,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext166() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(910,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (910,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext167() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(910,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 11618791,Mathcontext (910,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext168() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(11618791,new MathContext(910,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (0,UP)</b> should be 0
     */
   public void testPowIntMathContext169() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(0,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (0,DOWN)</b> should be 0
     */
   public void testPowIntMathContext170() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(0,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (0,CEILING)</b> should be 0
     */
   public void testPowIntMathContext171() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(0,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (0,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext172() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(0,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (0,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext173() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(0,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (0,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext174() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(0,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (0,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext175() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(0,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (9,UP)</b> should be 0
     */
   public void testPowIntMathContext176() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(9,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (9,DOWN)</b> should be 0
     */
   public void testPowIntMathContext177() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(9,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (9,CEILING)</b> should be 0
     */
   public void testPowIntMathContext178() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(9,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (9,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext179() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(9,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (9,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext180() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(9,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (9,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext181() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(9,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (9,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext182() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(9,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (614786,UP)</b> should be 0
     */
   public void testPowIntMathContext183() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(614786,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (614786,DOWN)</b> should be 0
     */
   public void testPowIntMathContext184() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(614786,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (614786,CEILING)</b> should be 0
     */
   public void testPowIntMathContext185() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(614786,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (614786,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext186() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(614786,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (614786,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext187() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(614786,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (614786,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext188() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(614786,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (614786,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext189() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(614786,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (910,UP)</b> should be 0
     */
   public void testPowIntMathContext190() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(910,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (910,DOWN)</b> should be 0
     */
   public void testPowIntMathContext191() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(910,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (910,CEILING)</b> should be 0
     */
   public void testPowIntMathContext192() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(910,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (910,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext193() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(910,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (910,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext194() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(910,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (910,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext195() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(910,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 108999504,Mathcontext (910,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext196() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(108999504,new MathContext(910,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (0,UP)</b> should be 0
     */
   public void testPowIntMathContext197() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(0,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (0,DOWN)</b> should be 0
     */
   public void testPowIntMathContext198() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(0,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (0,CEILING)</b> should be 0
     */
   public void testPowIntMathContext199() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(0,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (0,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext200() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(0,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (0,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext201() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(0,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (0,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext202() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(0,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (0,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext203() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(0,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (9,UP)</b> should be 0
     */
   public void testPowIntMathContext204() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(9,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (9,DOWN)</b> should be 0
     */
   public void testPowIntMathContext205() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(9,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (9,CEILING)</b> should be 0
     */
   public void testPowIntMathContext206() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(9,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (9,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext207() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(9,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (9,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext208() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(9,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (9,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext209() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(9,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (9,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext210() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(9,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (614786,UP)</b> should be 0
     */
   public void testPowIntMathContext211() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(614786,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (614786,DOWN)</b> should be 0
     */
   public void testPowIntMathContext212() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(614786,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (614786,CEILING)</b> should be 0
     */
   public void testPowIntMathContext213() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(614786,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (614786,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext214() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(614786,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (614786,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext215() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(614786,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (614786,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext216() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(614786,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (614786,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext217() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(614786,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (910,UP)</b> should be 0
     */
   public void testPowIntMathContext218() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(910,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (910,DOWN)</b> should be 0
     */
   public void testPowIntMathContext219() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(910,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (910,CEILING)</b> should be 0
     */
   public void testPowIntMathContext220() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(910,RoundingMode.CEILING)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (910,FLOOR)</b> should be 0
     */
   public void testPowIntMathContext221() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(910,RoundingMode.FLOOR)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (910,HALF_UP)</b> should be 0
     */
   public void testPowIntMathContext222() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(910,RoundingMode.HALF_UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (910,HALF_DOWN)</b> should be 0
     */
   public void testPowIntMathContext223() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(910,RoundingMode.HALF_DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int 100000000,Mathcontext (910,HALF_EVEN)</b> should be 0
     */
   public void testPowIntMathContext224() {
    bigDec= new BigDecimal("0");  
 assertEquals(msgNotSame,new BigDecimal("0"),bigDec.pow(100000000,new MathContext(910,RoundingMode.HALF_EVEN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (0,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext225() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(0,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (0,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext226() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(0,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (0,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext227() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(0,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (0,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext228() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(0,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (0,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext229() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(0,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (0,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext230() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(0,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (0,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext231() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(0,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (9,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext232() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(9,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (9,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext233() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(9,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (9,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext234() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(9,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (9,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext235() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(9,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (9,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext236() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(9,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (9,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext237() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(9,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (9,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext238() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(9,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (614786,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext239() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(614786,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (614786,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext240() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(614786,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (614786,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext241() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(614786,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (614786,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext242() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(614786,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (614786,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext243() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(614786,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (614786,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext244() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(614786,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (614786,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext245() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(614786,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (910,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext246() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(910,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (910,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext247() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(910,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (910,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext248() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(910,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (910,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext249() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(910,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (910,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext250() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(910,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (910,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext251() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(910,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 0 the returning value of 
     * <b>pow(int -100000000,Mathcontext (910,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext252() {
	try {
    bigDec= new BigDecimal("0");  
 bigDec.pow(-100000000,new MathContext(910,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext253() {
	try {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext254() {
	try {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,CEILING)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext255() {
	try {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.CEILING));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,FLOOR)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext256() {
	try {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.FLOOR));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,HALF_UP)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext257() {
	try {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.HALF_UP));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,HALF_DOWN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext258() {
	try {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.HALF_DOWN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (0,HALF_EVEN)</b> should throw an <i>ArithmeticException</i>
     */
   public void testPowIntMathContext259() {
	try {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 bigDec.pow(-4567,new MathContext(0,RoundingMode.HALF_EVEN));
  fail(msgRaise+"ArithmeticException");
} catch (ArithmeticException e) {
}
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,UP)</b> should be 4.92008576E-4921821
     */
   public void testPowIntMathContext260() {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 assertEquals(msgNotSame,new BigDecimal("4.92008576E-4921821"),bigDec.pow(-4567,new MathContext(9,RoundingMode.UP)));
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,DOWN)</b> should be 4.92008576E-4921821
     */
   public void testPowIntMathContext261() {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 assertEquals(msgNotSame,new BigDecimal("4.92008576E-4921821"),bigDec.pow(-4567,new MathContext(9,RoundingMode.DOWN)));
}
    /** This method test that for a BigDecimal whose value is 
     * 4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444 the returning value of 
     * <b>pow(int -4567,Mathcontext (9,CEILING)</b> should be 4.92008576E-4921821
     */
   public void testPowIntMathContext262() {
    bigDec= new BigDecimal("4922737819063287039337829750097650914482121282822067689650556977265706315473788791932632591553919870542252253492144376980329796302151940690123897876653882603370947496623795380544429399213141691292233380125775288108131174286702022298862033889834440224641180407163154248046883616827478450937566141178752674729077231727501149787413940402520453728070900364429606560368693422400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115648644444449227378190632870393378297500976509144821212828220676896505569772657063154737887919326325915539198705422522534921443769803297963021519406901238978766538826033709474966237953805444293992131416912922333801257752881081311742867020222988620338898344402246411804071631542480468836168274784509375661411787526747290772317275011497874139404025204537280709003644296065603686934224000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001156486444444");  
 assertEquals(msgNotSame,new BigDecimal("4.92008576E-4921821"),bigDec.pow(-4567,new MathContext(9,RoundingMode.CEILING)));
}
   
   
}
