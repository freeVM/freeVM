<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>index</name>
    <title>DRLVM Interfaces</title>
    <filename>index</filename>
  </compound>
  <compound kind="file">
    <name>bytecodes.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>bytecodes_8h</filename>
    <member kind="enumeration">
      <name>JavaByteCodes</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_NOP</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b564fb3078b8b0311741d9392b9d204ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ACONST_NULL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b51f838d52120c7237ed08aed46792eefc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ICONST_M1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b52ce5258ed64c8b64c66db3c3767c74ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ICONST_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b599784a3299ffd9fa625fc87f4173094c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ICONST_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b54fd20e092581492bf6c5b10d5c17e929</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ICONST_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b59b54f62cc56cd2fd009b7002cc5bc95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ICONST_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d300f06316ccdd1e098ba5554ab8cdfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ICONST_4</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5afc5db03a38f3ad6dba7afb03bf0c5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ICONST_5</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b519d43556662440e4ae589338096bfe91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LCONST_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b559e33088985daa84a2e320bdfd0176ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LCONST_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b54daa6fd53e0337ee19915c495d69c46b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FCONST_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5113f852ea2c7ce75527cfd37bca8e168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FCONST_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b548dab2659aa9941b536c0402f380beeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FCONST_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b580d0282a02ab22863f9b407ecdef3151</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DCONST_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5733f42ca5c93baca42059b52af11e4a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DCONST_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d26b7baa8bce53f276441aadd9d8ad72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_BIPUSH</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5852cc31592b95af2fc5e5c9ca748f1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_SIPUSH</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b534eb968e0fe976015a5924bcae75c5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LDC</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b55897fe9527c6341deab15d4d095e0ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LDC_W</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5794171811bf713130060e1cf70a28ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LDC2_W</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d12ed7863275d8b546bbea0213719ac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ILOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b58eb41176c88a79f463b6a1da9b4574e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LLOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b53baf3fbfca98a51ff51b0ef7b3b338d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FLOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b50b9733d8fa5c7d7c40dd96d56a342add</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DLOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b55f264436a5084cb733c63de362186301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ALOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5e30d5dab0af03b51233d7aff1d2770ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ILOAD_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b574430c991324bb67f2c50adff3004d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ILOAD_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b546fb692239c1afb9df9ce1a7d8fe68d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ILOAD_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5fa3eaaf640bad911ce8cd53934d616b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ILOAD_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5752e56f4b29578c5c5ed7c13fc4c8fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LLOAD_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b596f17aded900975db1d74a2ab9002fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LLOAD_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5bda6dcda032379db6d2cf639df992eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LLOAD_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a5f3eb43e16adb3a81b8085479d5592d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LLOAD_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b565121de7b42d6000c5b83ea73c86b1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FLOAD_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b542a5d8c603b4470f23b570b28c46905c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FLOAD_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b59a08db41fed630bed8d7acbe3c999d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FLOAD_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56d5c3f1d12f84b910f316ae3e5063b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FLOAD_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b57f92ba2e046a1e68d4aa297d7d9908bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DLOAD_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56f6e95d6cdf59718eeaa1ece13a57b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DLOAD_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5e2bc1da6dc4e08748fa2f166cbd50226</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DLOAD_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b52ef5de69a33015fd96d754e99a68909d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DLOAD_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56d537da2b6ea7fa33cefe887066b4562</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ALOAD_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5da22cd13eafbe61aea3c95890208094d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ALOAD_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56267f48a55f8281ec1374aaadeb57c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ALOAD_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5f17ba85e715b790d4bddd906a49fe756</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ALOAD_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b53f756c4a714bc8670ddbfc227d66f7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IALOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b533481ab545bbac24965ba1a93b0d705e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LALOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56b994a5373214b5c9d64822085642b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FALOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b516380512a90ecec6808b8b65f21f05ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DALOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5626c909747f74471a122dd514a13deb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_AALOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b503d606b6b8b2ffc4dc163357d6b15c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_BALOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d2c9c920eb0746d32890454103974e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_CALOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a25ecd11f6f651264569d4685d3b565e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_SALOAD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b58f64e7bca45a6c75a7edafefb6d8a132</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ISTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56f859981849d2e907565ee33bbd21cc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LSTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5671cc393248032960783729fed0ac294</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FSTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b52e7c33c480625316df536a0e28f07c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DSTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5f9de9cb3f861e84ebc56ab36caf74662</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ASTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5034acb30fe5b9031038512317e620aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ISTORE_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b550ecd51cc16e106851c8e132b7889de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ISTORE_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b50a1b745bd2d2b824747b6e2114946134</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ISTORE_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b569e21e27635a2b980603cc2ffdf68f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ISTORE_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b54b901551476066651c014b6bc7dbb8e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LSTORE_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a0fc5fb54e861b746cc31993e116c57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LSTORE_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b586661db14d37f3bbc3c6332dbdab7bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LSTORE_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b530c50915ffa768fc356489cda094de47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LSTORE_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5acf06839d3b901f5a5e963003b8ef5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FSTORE_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5b02145c3b34a12bcc69913d0a3510105</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FSTORE_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b540f0759d67d31e94a07c5f4def6d4181</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FSTORE_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d860e3c7b736f6485e3bb47d0abf7ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FSTORE_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5b3825a54cf8999564c7472e6aad2b5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DSTORE_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a97ffc3c6a0523a60c616fc963bc93b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DSTORE_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5fe5739ce71e0f7f205e3efc2e9742fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DSTORE_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5ff0a1490c5fb69ffe6b6e18fa708411c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DSTORE_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5eb5f2d82a94c9893715f01460cdc9521</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ASTORE_0</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56ebbb839f3dc285706e85a96b34e807d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ASTORE_1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5011cfa9314bf1ba25e1c651f59287aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ASTORE_2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5c964042df500a06ab12f965d53338f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ASTORE_3</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b59f5bb79093ca48e85f692161acb7bfa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IASTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b507fb509316c7296f4d9b554cb4f7e730</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LASTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56dc14c03cf9e05d1d4dc44a340c724cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FASTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5da487b8c7855cbd9a0601d151b809dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DASTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5479cf218ec3004720b4dc6ca9e71a2ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_AASTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b579fad50c8f4e7323c29b74b407c5d4a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_BASTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a91e409d29791e82ce11ed17a9e763ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_CASTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b54ddc8423c9a2209c5d57cb8d95351c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_SASTORE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b53fbe75f511fa15b287c5ea797230de82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_POP</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5c9f23ce1723ea25399f24fd5c3cda67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_POP2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b59b9e09ea0c9cef177dc0b45ed78e182c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DUP</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d98210f4d09c81dbbcf2d4d815650908</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DUP_X1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5613af070dfc6262dedcf1e0aa1f0f334</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DUP_X2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a30dbf90642583e53ef2d23870c062ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DUP2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5647a102d5798e5a5b4a475284c1434d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DUP2_X1</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5c31964d183eceb927e5da313cdfcc4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DUP2_X2</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5e7b8012f305ed705a78f0ab8c58c8462</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_SWAP</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b575539c9821a2bb65d2c8b52393667738</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IADD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b578b96efe777bcff6d2151465ded906ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LADD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5de291513b70feb54f8ca33e036cc1409</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FADD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b522d36bcf54598dd6b77325e1b96c3d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DADD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b57dc35a359304a7730cf1eef81730284f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ISUB</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b57ec3bcd4125ba97c0943cd6692c2f953</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LSUB</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5c7ba93e26ced51c448f7ebdbe667ec87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FSUB</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b526b16ba5749518a83bc632e769307765</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DSUB</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b52993673f7e566c64ce77f0b89d7d273b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IMUL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b59604384dff8f72348a31cd2af7053629</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LMUL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b541c9d2237c45d74f60aaa2edebf043ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FMUL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5c3db5edd3084e87062f08715d4fd81c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DMUL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5e26197d82d62ee868445493555884d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IDIV</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5e07fb255e4cc0fb3cab30eb268b4bd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LDIV</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b59cbda0dab002518da170314e8cd159aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FDIV</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5430157833dffb466b9982d6c1a88dbbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DDIV</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5792b2b1356de5f46915650082eaca1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IREM</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b566fada0ad6858fafc37daaa3d17bc1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LREM</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5ed947d80a31da0ba80d6eabef5ae38e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FREM</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d69c96ae951a014f5f83b0d3698b810a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DREM</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b58c5860a219727e72c33435ddbda473bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_INEG</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a3e3434109ee259475e812962c9f5977</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LNEG</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b562c17713f7c35ebdb259e22b6ff6e4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FNEG</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b59ef8f6e2d10bfafc65029392d464f2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DNEG</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b54f9974c10983d1bb9439ac9909500391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ISHL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a531eab6cd7291daebca0362711dbac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LSHL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56f5d2ccc1b5680e9e7bdb01792971ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ISHR</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5fb2870863ffdb589a124303601ac2a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LSHR</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b58db8b04f004ed106f9ba9221009f5790</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IUSHR</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b57bf905fa39c7aa29b676145bdcb990e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LUSHR</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d67ef58a039a42ab46a9c82669458ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IAND</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5ef805c2066acf4b76d7578d8c46b9dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LAND</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5f8a115dbe7ce074b9a0a020d6f6f34ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IOR</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b59b99be379c332f963d991bc4365154bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LOR</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b50c9fe855344baa19812832683c6064b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IXOR</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5eb70ba3aa715c79e86c6ff9cc7d08054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LXOR</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5c0aed485159aff872ad4fe08c0498948</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IINC</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5984cbd5cb1c5a798aa2424062583ff8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_I2L</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56d3f0bdffeb6267858fc4e30354e57d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_I2F</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b58932d9225844d773e30f5be9e5b7c5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_I2D</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5305410800b6b25077ae2bf2a5ab12c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_L2I</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5ba8f8cb303285bb1935a73201eb5e8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_L2F</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5631c00e20217b776ce91a8da4fdcffcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_L2D</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5464f13d1d119c548a6f6aae562e8f0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_F2I</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b550b14a440dad931a8ed6b634cb25c608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_F2L</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b587090aed9e9ffcb0616fc39c4b8e602d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_F2D</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5684678d95bacb6219901337bb03e112f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_D2I</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5930f8e45bf6ba5c65993c2d4de86afe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_D2L</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b50b9fdeab9b7a1764265b99aa1919fa1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_D2F</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b51f3b9c5e511895392f35863c36614034</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_I2B</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5adf42cae364a7cad777114f6a2491454</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_I2C</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5ed6aea29b64e12d41fcb01fd699fb3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_I2S</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5345da7f834e912e10e976ba7de14c8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LCMP</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5c6e6587c148c03c4fe55bd4eeae7dbab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FCMPL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5e80e9a7ee7f4cbbbc21a816e7b562618</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FCMPG</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5be3e17a6e5ecc411de6c0635b1092ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DCMPL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b57f30c0bf2816bed469395687d5fa84b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DCMPG</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b58f00fe60128e46adb84bbc04fe5a34cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IFEQ</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b56847ecd103adc920b885e5b5dac72549</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IFNE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5f0a2320c16c2f2ede09664a8fe1e0bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IFLT</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5614afad25d15de59fb9565db3a107a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IFGE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5be341d812d2aa9a3e1c5a37e1a35e33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IFGT</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b50292bda37c700b760483c5b32d913af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IFLE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5bc4b175a69c2bd0c5ff9c2ead80bec5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IF_ICMPEQ</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a128ba4fa27e935f89ebb9453cabbd27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IF_ICMPNE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a305252674d32f425b961d1856689e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IF_ICMPLT</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5dca7bedb22f4a1cd1e4327d4731f7600</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IF_ICMPGE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b55f9b5e89a88a05e9263e87014789dc43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IF_ICMPGT</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b54d19dfd49a620bc6f4683408be4f61da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IF_ICMPLE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b55dd080a2667d1d8cc550438488ecf96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IF_ACMPEQ</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b58325993a298ba85af85bff9307a334e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IF_ACMPNE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5328fb5c7dac0659fa7517dcd37479ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_GOTO</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d11d9bd08a98d787b5077714ff0997a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_JSR</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5bc7382a97f00cd6a150a964dfcde10ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_RET</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5eb0589080c68b850d5e716a030914817</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_TABLESWITCH</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b569f7e2ed5a03020be60907b9d3b8ba2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LOOKUPSWITCH</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b524fd20b834fb1862a2ad1aff09a03786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IRETURN</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b52a706abcda84ff27596977201050aca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_LRETURN</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5add34ad2f65444251ae5b12bd8220d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_FRETURN</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b504cfedc85360603f64dcd4dcb893704a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_DRETURN</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b507759c14b3dab2d0d66bc3577809d82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ARETURN</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b55c0a189afd139ad42aee5e93ba038c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_RETURN</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b522da98e3218d44ab931b585956fcfbaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_GETSTATIC</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b57cc2e495309ed836d67ed24e315b1bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_PUTSTATIC</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5d6651e4f277d9d66fe71ea033c0693ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_GETFIELD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b54ee4983bdd70e70466373422019d47fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_PUTFIELD</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b503e0fd7bffe610b2c4d06f6a58146a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_INVOKEVIRTUAL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5962f734716d3eb1f19838945db867abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_INVOKESPECIAL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5e3b6d11f7d03b747359c4d17d98fdd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_INVOKESTATIC</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5492c42608fade36f9b85f495dc0feebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_INVOKEINTERFACE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b52341284e17d51015e4cbcc5fcfe88051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>_OPCODE_UNDEFINED</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5f21785efb181933600fa61f74cf11e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_NEW</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5b07bdfed76cf6e99616b7cb03495196c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_NEWARRAY</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b563c59723240b3909db0f957ce0be7e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ANEWARRAY</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5ec7e9d24c0896a51a6cfa98cd2b97da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ARRAYLENGTH</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b52b623d1886f1f62e45ade82cab05ee18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_ATHROW</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b596a81ae31b5756916941cded9d5ab025</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_CHECKCAST</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5996f1a1342043f50b53278e7579247c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_INSTANCEOF</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5a9e3545461a7c069dcfcb024ebf638a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_MONITORENTER</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5b76fb63c362814ed093754c450113f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_MONITOREXIT</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5f5461dbdf24a4b56562d49b9f7f802e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_WIDE</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b59191898a000cff6cb9f4b164eb6c362d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_MULTIANEWARRAY</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5578df1bbf97e7476ff9850538e6c0c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IFNULL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b537643497ae2c4a2f1ba56fe426ccfa00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_IFNONNULL</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5174b3be5e1d8e169a7b859915572fb75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_GOTO_W</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5918ada5935871e48e2a112eb06d2cdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_JSR_W</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b57c5720e6920354cc3cc1f14a1740a56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_COUNT</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b5534f3d0f4f889003ed9bebd582128782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPCODE_BREAKPOINT</name>
      <anchor>b5a672ab81d5d74bd5f4e14486f296b536a06481182891ba00926aff62a04b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Class.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>_class_8h</filename>
    <class kind="union">ConstPoolEntry</class>
    <class kind="struct">ConstantPool</class>
    <class kind="struct">Class</class>
    <class kind="struct">Class::Class_Super</class>
    <class kind="struct">Class::InnerClass</class>
    <member kind="define">
      <type>#define</type>
      <name>CLASSFILE_MAGIC</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>0170c3772182ff15f3e2e7ed16a7feae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLASSFILE_MAJOR_MIN</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>99d6d547c2f958034a2df4dcaf523562</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLASSFILE_MAJOR_MAX</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>e09681f44fd780b3f0104c27253ad1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLASSFILE_MINOR_MAX</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>9f46b5a8ad7f3619302deeebf11ef69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ConstPoolTags</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Tags</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b5acd5f8dd36d2bdb00db294bec015f66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Utf8</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b54100a823f09e364338e42951035432ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Integer</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b5211cf9d5f5f1416862052d4671ad440f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Float</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b5aef0ceec2622d1d49b45fbe54e406f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Long</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b51d98ddfe1f9abb18cf43bc2c1b74bdd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Double</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b5728b77a24433c54f6c8a0f613e50a2c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Class</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b50c47012a59af298b394855447822a7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_String</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b52c4493d41b4f7ff5cf9f2846e1bb92e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Fieldref</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b56f435c620d73f5e9366149665dc8ec6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Methodref</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b574af7140e84140c938fbf89e0c33eea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_InterfaceMethodref</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b549962b9b17bc2ab27647a398b8083828</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_NameAndType</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b580805f21212baf2079b2ab767e2ab061</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_Last</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b569660ba266353c858adfd3eceffc7c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT_UnusedEntry</name>
      <anchor>cc7672152faf80f857d624ebe8f9d2b560022105e4ef59379175f2a2da10ccb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Class_State</name>
      <anchor>af0413f7b26247238e396e1de7d09ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_Start</name>
      <anchor>af0413f7b26247238e396e1de7d09ad56269e3034c1d7fa1ddf9943224fe03a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_LoadingAncestors</name>
      <anchor>af0413f7b26247238e396e1de7d09ad5a8fe710630f5bd24b13e6f0706356e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_Loaded</name>
      <anchor>af0413f7b26247238e396e1de7d09ad5cdd808d06569eb7d3ed33ff9782221c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_BytecodesVerified</name>
      <anchor>af0413f7b26247238e396e1de7d09ad52756506b2ee082ca5fbb7e12cd88d6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_InstanceSizeComputed</name>
      <anchor>af0413f7b26247238e396e1de7d09ad5e13d8080df29287de1c36e24447b4418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_Prepared</name>
      <anchor>af0413f7b26247238e396e1de7d09ad5315fd21a0a5daa2b5d87e87872c750bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_ConstraintsVerified</name>
      <anchor>af0413f7b26247238e396e1de7d09ad5805af46608f76a6e80b179220049270e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_Initializing</name>
      <anchor>af0413f7b26247238e396e1de7d09ad57a220091ae7aea0098e3d111d496618b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_Initialized</name>
      <anchor>af0413f7b26247238e396e1de7d09ad540b129ea69eaf14b3c7b676e102f18fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ST_Error</name>
      <anchor>af0413f7b26247238e396e1de7d09ad5b3616ded5c76a77d26f03a8a43ecf66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>AccessAndPropertiesFlags</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_PUBLIC</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292d6addf2497a04181c180bee6a0fc98d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_PRIVATE</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292731a95fbfab2cc573d34f824c68103da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_PROTECTED</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292d1378b6f4a9d71ae89f08ff9c41e2643</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_STATIC</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292881208cf77b17d32dfc923ff4541c1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_FINAL</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292b78a5bd0833ef7c394ee026acdfb166f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_SUPER</name>
      <anchor>e0944e8ff86596fafa0baba29eb6929259ef122665d2a44976860b18e074e8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_SYNCHRONIZED</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292d1b97438d7d91ae90cbe69668b25e0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_BRIDGE</name>
      <anchor>e0944e8ff86596fafa0baba29eb6929269ae3efc84a507f0dab732f391a29243</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_VOLATILE</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292062990ad544d7fe6f1910880dcce455e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_VARARGS</name>
      <anchor>e0944e8ff86596fafa0baba29eb692924103e9877019a62fd8ad9576db36d889</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_TRANSIENT</name>
      <anchor>e0944e8ff86596fafa0baba29eb6929263a2d0424d59c2fed955a1633974f50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_NATIVE</name>
      <anchor>e0944e8ff86596fafa0baba29eb6929294900e08f1643779887f4eb0e1e16f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_INTERFACE</name>
      <anchor>e0944e8ff86596fafa0baba29eb692926d061156e0c1a7d2fd2612cdfc22cc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_ABSTRACT</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292c326b159ac221f52e4eb29b48d0da481</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_STRICT</name>
      <anchor>e0944e8ff86596fafa0baba29eb6929276a7711c5903238a058555ac603ac435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_SYNTHETIC</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292980b3db8759afd4fd626103668481058</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_ANNOTATION</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292bedbd225ab565bd9c53fb8fb8c9d7d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACC_ENUM</name>
      <anchor>e0944e8ff86596fafa0baba29eb69292f7ec80e4cc96c1779ff701cad295637a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT String *</type>
      <name>class_name_get_java_name</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>5172b838f11ca16e0d5ca9d39b819f1f</anchor>
      <arglist>(const String *class_name)</arglist>
    </member>
    <member kind="function">
      <type>ManagedObject *</type>
      <name>struct_Class_to_java_lang_Class</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>cf525061deaf9d4e5eb20aac23314c02</anchor>
      <arglist>(Class *clss)</arglist>
    </member>
    <member kind="function">
      <type>jclass</type>
      <name>struct_Class_to_jclass</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>2ff0487910bd5a882f2e25f0ccd699be</anchor>
      <arglist>(Class *clss)</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>jclass_to_struct_Class</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>2c36c6b295c6ff242d8fc3ffac6df727</anchor>
      <arglist>(jclass jc)</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>jobject_to_struct_Class</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>be1b47a1ed5af4bab64fe3ca1801c0c5</anchor>
      <arglist>(jobject jobj)</arglist>
    </member>
    <member kind="function">
      <type>jobject</type>
      <name>struct_Class_to_java_lang_Class_Handle</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>b9a02ee41057e3ee48906f325c901085</anchor>
      <arglist>(Class *clss)</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>java_lang_Class_to_struct_Class</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>33a8c50553c46b455e061c8be53d71d7</anchor>
      <arglist>(ManagedObject *jlc)</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>class_lookup_field_recursive</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>f622c91a11dc74e38d5e0d511db16bb5</anchor>
      <arglist>(Class *clss, const char *name, const char *desc)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method *</type>
      <name>class_lookup_method_recursive</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>af2907eb47451e8afc10134411cfcf31</anchor>
      <arglist>(Class *clss, const String *name, const String *desc)</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>class_lookup_method_recursive</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>c624149a2d31a2c87d5e5f1775689eb0</anchor>
      <arglist>(Class *clss, const char *name, const char *desc)</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>class_lookup_method</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>d25be10469d2dae1a8aa207d0846383c</anchor>
      <arglist>(Class *clss, const char *name, const char *desc)</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>class_get_method_from_vt_offset</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>a47ad0999edc6ce367c003f82ae4dc64</anchor>
      <arglist>(VTable *vt, unsigned offset)</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>class_resolve_nonstatic_field</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>b7341e9e7ec39fdd17231ca2a1051800</anchor>
      <arglist>(Class *clss, unsigned cp_index)</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>class_load_verify_prepare_by_loader_jni</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>1d6dff6b1f14c3a17ba453c61a3c7118</anchor>
      <arglist>(Global_Env *env, const String *classname, ClassLoader *cl)</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>class_load_verify_prepare_from_jni</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>26c339df10c782063a7c8b127d1912aa</anchor>
      <arglist>(Global_Env *env, const String *classname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>class_initialize_from_jni</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>938aa6f17c8c94b5253d32835890a9b4</anchor>
      <arglist>(Class *clss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>class_initialize_ex</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>cabac09823e22fdce760aa19d91d1160</anchor>
      <arglist>(Class *clss)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>class_initialize</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>4f52178b00891fc7574bb4beb37b71a7</anchor>
      <arglist>(Class *clss)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>class_register_methods</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>eea6e0b483efd21906d8c293a4d578e2</anchor>
      <arglist>(Class_Handle klass, const JNINativeMethod *methods, int num_methods)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>class_unregister_methods</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>281e3cc5aa68807bbe3ed42ac736b1c8</anchor>
      <arglist>(Class_Handle klass)</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>resolve_class_new_env</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>f7925e7ba56ca81c26efdfdb262316cc</anchor>
      <arglist>(Global_Env *env, Class *clss, unsigned cp_index, bool raise_exn)</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>resolve_special_method_env</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>ce7a43665f5c76167e9aab8968add0b8</anchor>
      <arglist>(Global_Env *env, Class_Handle curr_clss, unsigned index, bool raise_exn)</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>resolve_static_method_env</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>4d1a9773126257761fbe017c15b5d906</anchor>
      <arglist>(Global_Env *env, Class *clss, unsigned cp_index, bool raise_exn)</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>resolve_virtual_method_env</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>bcd0d9b12ae59523e025030b887162bc</anchor>
      <arglist>(Global_Env *env, Class *clss, unsigned cp_index, bool raise_exn)</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>resolve_interface_method_env</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>3fe511132047b3697f691b035bad6120</anchor>
      <arglist>(Global_Env *env, Class *clss, unsigned cp_index, bool raise_exn)</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>resolve_static_field_env</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>451c1c2f9dee836fabebc20aa1229c3b</anchor>
      <arglist>(Global_Env *env, Class *clss, unsigned cp_index, bool putfield, bool is_runtume)</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>resolve_nonstatic_field_env</name>
      <anchorfile>_class_8h.html</anchorfile>
      <anchor>6c2503f5ca61db41ebb1be4b85ae7180</anchor>
      <arglist>(Global_Env *env, Class *clss, unsigned cp_index, unsigned putfield, bool raise_exn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>clog.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>clog_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>LOGGER_EXIT</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>c0d9a97d44cab26bdcc215f6a37e4f99</anchor>
      <arglist>(code)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIE2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>fe08ec2aba851e528717d10b0fedfafa</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WARN2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>ef489482f031c1435ab1f7b2a40fcfc7</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INFO2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>238f7517569377ac94a5304e0ba631e8</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>b5d9fbc90a267623afbd4dfc70299610</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRACE2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>0a8186ea202123f971720c034b5d20c6</anchor>
      <arglist>(category, message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>common.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>common_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>UNUSED</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>ddf5ec070e9499d36b7f2009ce736076</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNREF</name>
      <anchorfile>common_8h.html</anchorfile>
      <anchor>831a777e18b1283ebf4f5947dc85a073</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compile.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>compile_8h</filename>
    <class kind="struct">Compilation_Handle</class>
    <class kind="struct">Stub_Override_Entry</class>
    <class kind="struct">DynamicCode</class>
    <member kind="typedef">
      <type>char *</type>
      <name>Emitter_Handle</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>cc25949ff2b8aa5e51341a771e6368b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(</type>
      <name>Override_Generator</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>61321d53824416a9d7f4719336ff188e</anchor>
      <arglist>)(Emitter_Handle, Method *)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned(</type>
      <name>Override_Size</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>c9441179552073b48a7eed69ebaa1389</anchor>
      <arglist>)(Method *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*)</type>
      <name>MethodInstrumentationProc</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>ce9c6e867d89c2fb7cb9213915a9b2f4</anchor>
      <arglist>(CodeChunkInfo *callee)</arglist>
    </member>
    <member kind="enumeration">
      <name>VM_Code_Type</name>
      <anchor>ba7f13a642ea6b81f3652ac33201f2cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_TYPE_JAVA</name>
      <anchor>ba7f13a642ea6b81f3652ac33201f2cb0408776912f6e2fcfad3d6eadc40c867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_TYPE_UNKNOWN</name>
      <anchor>ba7f13a642ea6b81f3652ac33201f2cbbab1aee4cdb52ad6c1ab6c3020291250</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_add_jit</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>0a39c1ed840a0935160a0167b744e4cb</anchor>
      <arglist>(JIT *jit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_delete_all_jits</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>31255888acca2759949deb6cce933055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compile_protect_arguments</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>5b7ce7ac9b8bc045b892166975098f06</anchor>
      <arglist>(Method_Handle method, GcFrame *gc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compile_flush_generated_code_block</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>1b7330939e90ec05c9f46c0b3b58a117</anchor>
      <arglist>(Byte *, size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compile_flush_generated_code</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>28a27071be98e262f08327b12ad225d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JIT_Result</type>
      <name>compile_do_compilation_jit</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>edcfeafd141c6102ba66bb6657e227bd</anchor>
      <arglist>(Method *method, JIT *jit)</arglist>
    </member>
    <member kind="function">
      <type>NativeCodePtr</type>
      <name>compile_gen_compile_me</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>51a8ef8e678aa3215cbad67e5d3d7ebc</anchor>
      <arglist>(Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>NativeCodePtr</type>
      <name>compile_me</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>287f0caf9e661f8e9b544a448b9de5a7</anchor>
      <arglist>(Method *method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>patch_code_with_threads_suspended</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>059d26947bca81697a091667d3d4cc48</anchor>
      <arglist>(Byte *code_block, Byte *new_code, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>Global_Env *</type>
      <name>compile_handle_to_environment</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>095968384101886fdeb5b9f14ca99dfb</anchor>
      <arglist>(Compile_Handle)</arglist>
    </member>
    <member kind="function">
      <type>NativeCodePtr</type>
      <name>compile_create_lil_jni_stub</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>f0ffb425ba35ef02746b390fcb6bf544</anchor>
      <arglist>(Method_Handle method, void *func, NativeStubOverride nso)</arglist>
    </member>
    <member kind="function">
      <type>NativeCodePtr</type>
      <name>interpreter_compile_create_lil_jni_stub</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>9e7c90f151dc74d86453ba81253c3b4d</anchor>
      <arglist>(Method_Handle method, void *func, NativeStubOverride nso)</arglist>
    </member>
    <member kind="function">
      <type>NativeCodePtr</type>
      <name>compile_create_lil_pinvoke_stub</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>f191ae2c25a64ba6ef1463b781bbaa9d</anchor>
      <arglist>(Method_Handle method, void *func, NativeStubOverride nso)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needs_override</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>670fbf5225f445f3c514f56a8e7de22e</anchor>
      <arglist>(Method *)</arglist>
    </member>
    <member kind="function">
      <type>NativeCodePtr</type>
      <name>compile_do_instrumentation</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>424bceeeefa8a31c17909069ffe7b593</anchor>
      <arglist>(CodeChunkInfo *callee, MethodInstrumentationProc instr_proc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>count_method_calls</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>4ba1847e3e28e5084909323b49fd6bfb</anchor>
      <arglist>(CodeChunkInfo *callee)</arglist>
    </member>
    <member kind="function">
      <type>DynamicCode *</type>
      <name>compile_get_dynamic_code_list</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>0f23f09a08a94cf87b066e789fe18c05</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compile_add_dynamic_generated_code_chunk</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>d122383b17a92bf21dee429bb91c7041</anchor>
      <arglist>(const char *name, bool free_name, const void *address, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compile_clear_dynamic_code_list</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>653608d054e3a7616a063246580f4ac1</anchor>
      <arglist>(DynamicCode *list)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VM_Code_Type</type>
      <name>vm_identify_eip</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>cb1c997b0fadd2a48466bafb6f88c3fe</anchor>
      <arglist>(void *addr)</arglist>
    </member>
    <member kind="variable">
      <type>JIT *</type>
      <name>jit_compilers</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>06b9318e59b81275740f2eb89213c0ab</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>Stub_Override_Entry *</type>
      <name>stub_override_entries</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>3156b78516a16b037be8279a1f3fb227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sizeof_stub_override_entries</name>
      <anchorfile>compile_8h.html</anchorfile>
      <anchor>45da54027b7aeafed73d84cb02aee9ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compmgr.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>compmgr_8h</filename>
    <class kind="struct">_OpenInterface</class>
    <class kind="struct">_OpenComponent</class>
    <class kind="struct">_OpenInstance</class>
    <class kind="struct">_OpenInstanceAllocator</class>
    <class kind="struct">_OpenComponentManager</class>
    <member kind="typedef">
      <type>_OpenInterface *</type>
      <name>OpenInterfaceHandle</name>
      <anchorfile>compmgr_8h.html</anchorfile>
      <anchor>6a25de83da37ac4265973fe8302bae55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_OpenComponent *</type>
      <name>OpenComponentHandle</name>
      <anchorfile>compmgr_8h.html</anchorfile>
      <anchor>3c9a787ad0d21cf7bfa47f57091579f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_OpenInstance *</type>
      <name>OpenInstanceHandle</name>
      <anchorfile>compmgr_8h.html</anchorfile>
      <anchor>94b206d9e6b549a79c9da4b5115707a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_OpenInstanceAllocator *</type>
      <name>OpenInstanceAllocatorHandle</name>
      <anchorfile>compmgr_8h.html</anchorfile>
      <anchor>9d2b985638b324d1839d0ebf50516049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_OpenComponentManager *</type>
      <name>OpenComponentManagerHandle</name>
      <anchorfile>compmgr_8h.html</anchorfile>
      <anchor>c9e17c1a4c915ec8866a761397e99bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*)</type>
      <name>OpenComponentInitializer</name>
      <anchorfile>compmgr_8h.html</anchorfile>
      <anchor>129e4538c308f7eee6457bb11e390c38</anchor>
      <arglist>(OpenComponentHandle *p_component, OpenInstanceAllocatorHandle *p_allocator, apr_pool_t *pool)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>component_manager.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>component__manager_8h</filename>
    <member kind="function">
      <type>int</type>
      <name>CmAcquire</name>
      <anchorfile>component__manager_8h.html</anchorfile>
      <anchor>a9225c0967d371c25c2ddb9443c97bd4</anchor>
      <arglist>(OpenComponentManagerHandle *p_cm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CmRelease</name>
      <anchorfile>component__manager_8h.html</anchorfile>
      <anchor>6af39f343a7e5ce61c996e66cb0ad2c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CmAddComponent</name>
      <anchorfile>component__manager_8h.html</anchorfile>
      <anchor>213c01fe463d0fc106b9485671a630ac</anchor>
      <arglist>(OpenComponentInitializer init_func)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CmLoadComponent</name>
      <anchorfile>component__manager_8h.html</anchorfile>
      <anchor>35175451d4d0d7ab1e1f6165e1221ab2</anchor>
      <arglist>(const char *path, const char *initializer_function_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>CmFreeComponent</name>
      <anchorfile>component__manager_8h.html</anchorfile>
      <anchor>50a70dac56093b11fb1fbae5946698f6</anchor>
      <arglist>(const char *component_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cxxlog.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>cxxlog_8h</filename>
    <namespace>util</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LOGGER_EXIT</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>c0d9a97d44cab26bdcc215f6a37e4f99</anchor>
      <arglist>(code)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ECHO</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>52cf405f792a326cdaae3bb7c654f0f2</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LECHO</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>be7d81fb6b230b73dea2ca83074deb99</anchor>
      <arglist>(message_number, messagedef_and_params)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIE2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>fe08ec2aba851e528717d10b0fedfafa</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDIE2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>d2588dc4fc6e1f15493afd638d502f87</anchor>
      <arglist>(category, message_number, messagedef_and_params)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WARN2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>ef489482f031c1435ab1f7b2a40fcfc7</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LWARN2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>be6b58c7ee9f167fc039cbe965c22548</anchor>
      <arglist>(category, message_number, messagedef_and_params)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INFO2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>238f7517569377ac94a5304e0ba631e8</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>b5d9fbc90a267623afbd4dfc70299610</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRACE2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>0a8186ea202123f971720c034b5d20c6</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>CLASS_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>d76a668b3c804f36e01349d86e65e2e6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>GC_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae7e8ab2b56e9f16b187a4bfad5921a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>JNI_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>fc46375ca69ad212c36d5991f42a785f</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ee_em_intf.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>ee__em__intf_8h</filename>
    <member kind="typedef">
      <type>void *(*)</type>
      <name>vm_adaptor_t</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>e68ed1e5342985b10306f62150b3bb86</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_init</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>cd204968de20c266df6815075562ca23</anchor>
      <arglist>(JIT_Handle jit, const char *name, vm_adaptor_t adaptor)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_deinit</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>c48f664f41319e284af5296a89105cdd</anchor>
      <arglist>(JIT_Handle jit)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_set_profile_access_interface</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>bef11b57bbb3c2acd025911ada2f8b56</anchor>
      <arglist>(JIT_Handle jit, EM_Handle em, struct EM_ProfileAccessInterface *pc_interface)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT bool</type>
      <name>JIT_enable_profiling</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>e58bd4753edd99e1129ad6465fd27a5a</anchor>
      <arglist>(JIT_Handle jit, PC_Handle pc, EM_JIT_PC_Role role)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_profile_notification_callback</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>b1e8106277ec5186343340ec12e2063f</anchor>
      <arglist>(JIT_Handle jit, PC_Handle pc, Method_Handle mh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>em.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>em_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>OPEN_EM</name>
      <anchorfile>em_8h.html</anchorfile>
      <anchor>611e3aa2b2243e893cdd9fdd846873e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OPEN_EM_VERSION</name>
      <anchorfile>em_8h.html</anchorfile>
      <anchor>a464216f50c3487d84bac5319a5b3cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>EM_Handle</name>
      <anchorfile>em_8h.html</anchorfile>
      <anchor>01d9ea5bd73583448706e6660e47cc34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>JIT_Handle</name>
      <anchorfile>em_8h.html</anchorfile>
      <anchor>8e9c9fdbc225616cb7bf7f5b73ed63c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>PC_Handle</name>
      <anchorfile>em_8h.html</anchorfile>
      <anchor>8335add99f801e8a42896bd91ad95ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>Method_Profile_Handle</name>
      <anchorfile>em_8h.html</anchorfile>
      <anchor>a251b01e58425a99107b56f0b131a1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>JIT_Result</name>
      <anchor>15a76398d8f446341b33954c9adbb9e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JIT_SUCCESS</name>
      <anchor>15a76398d8f446341b33954c9adbb9e9b5713c2df48c24bf56d7ad2a132723af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JIT_FAILURE</name>
      <anchor>15a76398d8f446341b33954c9adbb9e9197ecbc367ebfcbcba28727f71f3f866</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>EM_JIT_PC_Role</name>
      <anchor>55fba0f11f26aef9e1f883ceaf463a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_JIT_PROFILE_ROLE_GEN</name>
      <anchor>55fba0f11f26aef9e1f883ceaf463a5bbadc285b2214c7a52911a3a4be849618</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_JIT_PROFILE_ROLE_USE</name>
      <anchor>55fba0f11f26aef9e1f883ceaf463a5ba439fe5ae8e905ef4d80045ad0912654</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>em_intf.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>em__intf_8h</filename>
    <member kind="function">
      <type>VMEXPORT JIT_Handle</type>
      <name>vm_load_jit</name>
      <anchorfile>em__intf_8h.html</anchorfile>
      <anchor>5b6f1503ce7b27c0607460838dfdc735</anchor>
      <arglist>(const char *file_name, apr_dso_handle_t **handle)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>em_profile_access.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>em__profile__access_8h</filename>
    <class kind="struct">EM_ProfileAccessInterface</class>
    <member kind="enumeration">
      <name>EM_PCTYPE</name>
      <anchor>bbd26d71893067b7b1eaeda5153f33d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_PCTYPE_ENTRY_BACKEDGE</name>
      <anchor>bbd26d71893067b7b1eaeda5153f33d283a43800b1c3b97f6e0a6c3efe248729</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_PCTYPE_EDGE</name>
      <anchor>bbd26d71893067b7b1eaeda5153f33d294667331a7970886904e1219291c2a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EM_PCTYPE_VALUE</name>
      <anchor>bbd26d71893067b7b1eaeda5153f33d26f8b50eee390c96bbfc78045a4247f27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>em_vm.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>em__vm_8h</filename>
    <class kind="struct">_OpenEmVm</class>
    <member kind="define">
      <type>#define</type>
      <name>OPEN_INTF_EM_VM</name>
      <anchorfile>em__vm_8h.html</anchorfile>
      <anchor>0b7fdced85b5552a95dc7e7a6bbe8f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OPEN_EM_VM_PROFILER_NEEDS_THREAD_SUPPORT</name>
      <anchorfile>em__vm_8h.html</anchorfile>
      <anchor>6d6df422518248b038a41577e71f13f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OPEN_EM_VM_PROFILER_THREAD_TIMEOUT</name>
      <anchorfile>em__vm_8h.html</anchorfile>
      <anchor>4e15451681ec14eac7f858ffb11ed093</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_OpenEmVm *</type>
      <name>OpenEmVmHandle</name>
      <anchorfile>em__vm_8h.html</anchorfile>
      <anchor>cee764a538026fdeac32d8698d0c375c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>environment.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>environment_8h</filename>
    <class kind="struct">Global_Env</class>
    <member kind="typedef">
      <type>NSOTableItem</type>
      <name>NSOTableItem</name>
      <anchorfile>environment_8h.html</anchorfile>
      <anchor>e5a2e066978c7f30238d7d2f6c79898d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DynamicCode</type>
      <name>DynamicCode</name>
      <anchorfile>environment_8h.html</anchorfile>
      <anchor>d40c204027ba1e63042ab00df9825cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Assertion_Registry</type>
      <name>Assertion_Registry</name>
      <anchorfile>environment_8h.html</anchorfile>
      <anchor>613e92c89157e0887e0a0bea0d32095b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>parse_size</name>
      <anchorfile>environment_8h.html</anchorfile>
      <anchor>09afc3148cb447fe79bb1588db788fc5</anchor>
      <arglist>(const char *value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exceptions.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>exceptions_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>exn_try</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>6eab065835e8bcffb537fceef8208239</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>exn_catch</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>e35e3bfd6f31213a2f3eca0f44f623d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_THROW_AREA</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>01460b8b674a6ad1f3cb3c66c1ae7e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_RAISE_AREA</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>cca5490e72c057e737459e3ca076f450</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BEGIN_RAISE_AREA</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>01f389715e8564e864320315bc8fee66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_RAISE_AREA</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>5302d013d877b7dc7a4adb1e403009c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthrowable</type>
      <name>exn_get</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>5de3d180034acc7134fa16a682387806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class *</type>
      <name>exn_get_class</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>9e136bbe9e3e25239cf5a08240a46cbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>exn_get_name</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>9622fdf8ca55776c6478bf4d861c3dc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT bool</type>
      <name>exn_raised</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>adaf458631d8c4bcfe84b2e7f55b21b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_clear</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>d85b835375c6d0278622740143763480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>jthrowable</type>
      <name>exn_create</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>93df1ba9c9208996721d2f1dd27c9134</anchor>
      <arglist>(Exception *exception)</arglist>
    </member>
    <member kind="function">
      <type>jthrowable</type>
      <name>exn_create</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>96e2e95540c048280a384c45a0cbef78</anchor>
      <arglist>(Class *exc_class)</arglist>
    </member>
    <member kind="function">
      <type>jthrowable</type>
      <name>exn_create</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>0de6fceeca5ba813fef7ebc949b419b5</anchor>
      <arglist>(Class *exc_class, jthrowable cause)</arglist>
    </member>
    <member kind="function">
      <type>jthrowable</type>
      <name>exn_create</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>14c977e338ad5aeff7cdf6e952b084f6</anchor>
      <arglist>(Class *exc_class, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>jthrowable</type>
      <name>exn_create</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>4a967014e7e97246cf7145ec87551bc1</anchor>
      <arglist>(Class *exc_class, const char *message, jthrowable cause)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthrowable</type>
      <name>exn_create</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>8dca1961962622b48b10f9b8d3dcd83e</anchor>
      <arglist>(const char *exc_name)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthrowable</type>
      <name>exn_create</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>6b8a9b925a652ea2d4bf606480cabe27</anchor>
      <arglist>(const char *exc_name, jthrowable cause)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthrowable</type>
      <name>exn_create</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>a202fca40a1306bdfa574c8923d46348</anchor>
      <arglist>(const char *exc_name, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthrowable</type>
      <name>exn_create</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>3d90c558dab44696919b563fa6bbefe5</anchor>
      <arglist>(const char *exc_name, const char *message, jthrowable cause)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT bool</type>
      <name>is_unwindable</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>1d10e1bf6dc8b0b3c53a587c04aeb8a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_unwindable</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>87fb28b89425e61010b32735f11e9991</anchor>
      <arglist>(bool unwindable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_throw_object</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>74a75ccaf3dfc10dee93d3beebb173d4</anchor>
      <arglist>(jthrowable exc_object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_throw_by_class</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>89d5169eab0069259618a37a93a4bba5</anchor>
      <arglist>(Class *exc_class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_throw_by_class</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>fb77f008ca7fa50f1e438a56f849eff2</anchor>
      <arglist>(Class *exc_class, jthrowable exc_cause)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_throw_by_class</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>08006115428c9ed7cde7b9ed597ea805</anchor>
      <arglist>(Class *exc_class, const char *exc_message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_throw_by_class</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>4e11864a7cc6837178392b93d264ae1d</anchor>
      <arglist>(Class *exc_class, const char *exc_message, jthrowable exc_cause)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_throw_by_name</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>3d22be2216d5b771ece8c887f8f906be</anchor>
      <arglist>(const char *exception_name)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_throw_by_name</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>6b765423aa8ee387e4b41d7a2c176537</anchor>
      <arglist>(const char *exception_name, jthrowable cause)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_throw_by_name</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>f79bb91811d55dd51d50a3dba1621bb5</anchor>
      <arglist>(const char *exception_name, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_throw_by_name</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>d9aa0c8059311f9f746a37a5f28b7b19</anchor>
      <arglist>(const char *exception_name, const char *message, jthrowable cause)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_raise_object</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>8610359a904ad707548e88b1f5bc1586</anchor>
      <arglist>(jthrowable exc_object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_raise_by_class</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>f70646d99a81774c365e846c27efb1ab</anchor>
      <arglist>(Class *exc_class)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_raise_by_class</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>a46a57484b83fca8d9f6bade844fc246</anchor>
      <arglist>(Class *exc_class, jthrowable exc_cause)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_raise_by_class</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>8582646cd2506fced582234eddb08b33</anchor>
      <arglist>(Class *exc_class, const char *exc_message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_raise_by_class</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>00eb28f2300ee40237869c467b1b255e</anchor>
      <arglist>(Class *exc_class, const char *exc_message, jthrowable exc_cause)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_raise_by_name</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>6d1b85c987960d59ae03c0e483cff916</anchor>
      <arglist>(const char *exception_name)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_raise_by_name</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>605a4daa366b7317a9b8648150007165</anchor>
      <arglist>(const char *exception_name, jthrowable exc_cause)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_raise_by_name</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>a947d3f41cc8a688ff27a15a492ddc37</anchor>
      <arglist>(const char *exception_name, const char *message)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>exn_raise_by_name</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>5cb374a3a9f453f6e7dc9f845cb630ef</anchor>
      <arglist>(const char *exception_name, const char *message, jthrowable exc_cause)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exn_function_try</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>957eba49d3ac311f8d159bb863c82819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>jthrowable</type>
      <name>exn_function_catch</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>b9a883c57be00f2685ccdc2b0f1fca13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_print_stack_trace</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>7afe1210490a85d85067effa5d751af8</anchor>
      <arglist>(FILE *f, jthrowable exc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_uncaught_exception_message</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>8bf8bd76d5bf54f73cfb5c33f5cdb1ce</anchor>
      <arglist>(FILE *f, char *context_message, jthrowable exc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_rethrow</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>b576650eada841ce72c56be46428fa27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exn_rethrow_if_pending</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>a1b7da2e1a88cf21537383bc69349197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_guard_stack</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>328a3a348f1e00dc85b2c951f3d3f61f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_guard_stack</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>1657dcb2a4b7af369b2e10d149f656a0</anchor>
      <arglist>(vm_thread_t vm_thread)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_stack_info</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>192267dffa1f68e88c0d33f35069451d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_exception_catch_stack_addr</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>daa3a6394c94577be0c4bf71f6178c37</anchor>
      <arglist>(void *curr_ip)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT size_t</type>
      <name>get_available_stack_size</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>4907ac6b245999cd67c1c029da233c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT bool</type>
      <name>check_available_stack_size</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>8e592103ee12c47de93ce54e1ce8d3e8</anchor>
      <arglist>(size_t required_size)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT size_t</type>
      <name>get_default_stack_size</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>5e0c7bc5af9950f1502435a7c919518c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT size_t</type>
      <name>get_restore_stack_size</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>b6defc2dc392298721c8d2808637e6b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check_stack_size_enough_for_exception_catch</name>
      <anchorfile>exceptions_8h.html</anchorfile>
      <anchor>28b104a1ccfe878ed27ea6949ff2fdee</anchor>
      <arglist>(void *sp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exceptions_int.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>exceptions__int_8h</filename>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>clear_current_thread_exception</name>
      <anchorfile>exceptions__int_8h.html</anchorfile>
      <anchor>fa5aa4b93258a2af5ee65935e75a9f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT bool</type>
      <name>check_current_thread_exception</name>
      <anchorfile>exceptions__int_8h.html</anchorfile>
      <anchor>0e1e859a9dcc07bfbdf90eb227633a65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT ManagedObject *</type>
      <name>get_current_thread_exception</name>
      <anchorfile>exceptions__int_8h.html</anchorfile>
      <anchor>4e16663ce98ba1b43c4d9284f53e7855</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_current_thread_exception</name>
      <anchorfile>exceptions__int_8h.html</anchorfile>
      <anchor>ca864d30419ee316133fb2aa34bc7d72</anchor>
      <arglist>(ManagedObject *obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gc.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>gc_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>GC_OBJECT_ALIGNMENT</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>2829c549c88f82d3d2eb0423e86d414c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_force_gc</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>39127f4fd57eef7e8898a1ddefa07098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>gc_total_memory</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>7bcb1b938d1ab523ca0638db25526bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>gc_max_memory</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>f6fdd3e193b8314444e6707f17043015</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>gc_free_memory</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>012dae57769b691038a0ce341675101d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>gc_is_object_pinned</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>99d618103fc0cfc461905c5a01b36a7f</anchor>
      <arglist>(Managed_Object_Handle obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_class_prepared</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>76617bcedc9e24a83e47731bae2f1c30</anchor>
      <arglist>(Class_Handle ch, VTable_Handle vth)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>gc_get_collection_count</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>cdd1ae174432577e9446b89c23d9acca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>gc_get_collection_time</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>fbbe2d49b86baa0778c09eefc420f926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>Thread_Handle</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>4527ed2193d8094d3b5a108abef2ba32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_thread_init</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>2a40bfac9c162aa2a5c3e20f159fc36b</anchor>
      <arglist>(void *gc_information)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_thread_kill</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>d45e22b73f5a30732556861371759f8c</anchor>
      <arglist>(void *gc_information)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_iterate_threads</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>c0c3197301e8aa22c395e71bc002b95e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_iterate_thread</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>102b8aa8e3719e76f39aebc111296ef4</anchor>
      <arglist>(Thread_Handle thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_suspend_thread</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>8ae27ead06e40ffe09ba4ca0939c466e</anchor>
      <arglist>(Thread_Handle thread)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_thread_suspended</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>78522721ab44728df9d8449c14e8ba10</anchor>
      <arglist>(Thread_Handle thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_enumerate_thread_root_set</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>a50c9904148f0f1786bcee6caf5c6aca</anchor>
      <arglist>(Thread_Handle thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_enumerate_global_root_set</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>dc32d8ca99b9c801d2fd3eebbef8b3d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCExport</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>81fcc009f47408a44372a8392507077d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_BYTE</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>369ecd38b3ab077fc235f892354bb46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEXT_TO_HIGH_BIT_SET_MASK</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>793871c3e34e62c041444eec143e3842</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEXT_TO_HIGH_BIT_CLEAR_MASK</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>711865edab513e1984fc6f5010e581db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>gc_time_since_last_gc</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>0e53a703c7a36ea4dedd2f6cfe6159ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>gc_heap_base_address</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>b0860bb3e4ef0696ef42f686ed2f2ac9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>gc_heap_ceiling_address</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>744cc230ff757e6f218ba2e622a7f2c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gc_init</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>2219b56191a9f64d39946d12e4fcba1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_test_safepoint</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>c19b42050dff047f1d0f0f7a149d755c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>gc_supports_frontier_allocation</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>1315d477e0a6ef29636c415025fd22da</anchor>
      <arglist>(unsigned *offset_of_current, unsigned *offset_of_limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_vm_initialized</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>7c79e8effeb09d4850a4f9713836b564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_wrapup</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>5ff092626dee2bae894be76fac81f830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_add_root_set_entry</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>bbf60a495af4409510234b350e45bd63</anchor>
      <arglist>(Managed_Object_Handle *ref, Boolean is_pinned)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_add_compressed_root_set_entry</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>d70a51a28e456dbe215451b2336a40da</anchor>
      <arglist>(uint32 *ref, Boolean is_pinned)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_add_weak_root_set_entry</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>5f0dc3bc779ca12d08de0180aeb1b0b2</anchor>
      <arglist>(Managed_Object_Handle *slot, Boolean is_pinned, Boolean is_short_weak)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_add_root_set_entry_managed_pointer</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>8dc020cd9f69ca688cbc2fc8c214b1c4</anchor>
      <arglist>(void **slot, Boolean is_pinned)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_add_root_set_entry_interior_pointer</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>5d668f3e91361c77c2e5fb5f2d8b0931</anchor>
      <arglist>(void **slot, int offset, Boolean is_pinned)</arglist>
    </member>
    <member kind="function">
      <type>Managed_Object_Handle</type>
      <name>gc_alloc_fast</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>4b4fe81dbdc77121fad2708f83ad3caf</anchor>
      <arglist>(unsigned size, Allocation_Handle type, void *thread_pointer)</arglist>
    </member>
    <member kind="function">
      <type>Managed_Object_Handle</type>
      <name>gc_alloc</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>35a75c768f276016f4fc5ac0279c5765</anchor>
      <arglist>(unsigned size, Allocation_Handle type, void *thread_pointer)</arglist>
    </member>
    <member kind="function">
      <type>Managed_Object_Handle</type>
      <name>gc_pinned_malloc_noclass</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>b70b661fc322c740f6d80ec692ef5210</anchor>
      <arglist>(unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>Managed_Object_Handle</type>
      <name>gc_alloc_pinned</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>d6f110a15dd4ed4cf7b81d0100c1cefa</anchor>
      <arglist>(unsigned size, Allocation_Handle type, void *thread_pointer)</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>gc_requires_barriers</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>cd925b0759a881359bc139b9403a22de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>gc_supports_compressed_references</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>926b00265b084669bae8725c69f9243d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_write_barrier</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>587b758904e50f4cddb3cac9b055fcc9</anchor>
      <arglist>(Managed_Object_Handle p_base_of_obj_with_slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_heap_wrote_object</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>af790401ccb8e6885578892182c958e5</anchor>
      <arglist>(Managed_Object_Handle p_base_of_object_just_written)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_heap_write_global_slot</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>7d1c590191db4b3ed837a152e721665c</anchor>
      <arglist>(Managed_Object_Handle *p_slot, Managed_Object_Handle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_heap_write_global_slot_compressed</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>49d8de1920a3f990e8daa819a6c259eb</anchor>
      <arglist>(uint32 *p_slot, Managed_Object_Handle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_heap_write_ref</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>e8422d2c3b6d4ed781a7c0141bb2d183</anchor>
      <arglist>(Managed_Object_Handle p_base_of_object_with_slot, unsigned offset, Managed_Object_Handle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_heap_slot_write_ref</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>7ec5b262059f83483fd994ae98c8fdf0</anchor>
      <arglist>(Managed_Object_Handle p_base_of_object_with_slot, Managed_Object_Handle *p_slot, Managed_Object_Handle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_heap_slot_write_ref_compressed</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>8f13b25d23f673c350f4ec2dd572763a</anchor>
      <arglist>(Managed_Object_Handle p_base_of_object_with_slot, uint32 *p_slot, Managed_Object_Handle value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_pin_object</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>2ef343f531ca2cacb28c328b15cf2b35</anchor>
      <arglist>(Managed_Object_Handle *p_object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_unpin_object</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>283cd2a6e4aec7a0318ef2a3de3df1a5</anchor>
      <arglist>(Managed_Object_Handle *p_object)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>gc_get_hashcode</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>cd4f3b3443c91702a8eb799fbd1da0c5</anchor>
      <arglist>(Managed_Object_Handle object)</arglist>
    </member>
    <member kind="function">
      <type>Managed_Object_Handle</type>
      <name>gc_get_next_live_object</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>c46a0690d24ad5220a48bad40c0a0b45</anchor>
      <arglist>(void *iterator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_iterate_heap</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>39769b015d1fdf9f4c5fd3794fff2ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_finalize_on_exit</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>45feebf234662e53fb1e603a4150e98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gc_set_mutator_block_flag</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>705f0fd77ba651caf40fc6e760b67cbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>gc_clear_mutator_block_flag</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>c340c4b34816da375f5908caeaf43999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>gc_supports_class_unloading</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>131d20043682252d19b81ed0b820b918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void JNICALL</type>
      <name>Java_java_lang_ref_Reference_enqueue_reference</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>109e746eef78fb57ad759e83f3f33c10</anchor>
      <arglist>(JNIEnv *the_env, jobject p_obj)</arglist>
    </member>
    <member kind="function">
      <type>jobject JNICALL</type>
      <name>Java_java_lang_ref_Reference_get</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>73a3194f747ba5146fb79dad163e765d</anchor>
      <arglist>(JNIEnv *the_env, jobject p_obj)</arglist>
    </member>
    <member kind="function">
      <type>void JNICALL</type>
      <name>Java_java_lang_ref_Reference_register_phantom_ref</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>c70a9e906754c45cf5869995ecb48b0f</anchor>
      <arglist>(JNIEnv *the_env, jobject p_obj, jobject referent)</arglist>
    </member>
    <member kind="function">
      <type>void JNICALL</type>
      <name>Java_java_lang_ref_Reference_register_soft_ref</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>b4ca8f0ecdeb5fca563fc8decfd81903</anchor>
      <arglist>(JNIEnv *the_env, jobject p_obj, jobject referent)</arglist>
    </member>
    <member kind="function">
      <type>void JNICALL</type>
      <name>Java_java_lang_ref_Reference_register_weak_ref</name>
      <anchorfile>gc_8h.html</anchorfile>
      <anchor>e85e9c734ee30f551bf6b78958d1c25f</anchor>
      <arglist>(JNIEnv *the_env, jobject p_obj, jobject referent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hycomp.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>hycomp_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>hycomp_h</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>8db20a7485b88321a4e0f9ec419521b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_PLATFORM_DOUBLE_ORDER</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>096187c9da2e8e6b868b5ece37b2ee77</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NO_LVALUE_CASTING</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>d620485dcc14d98bc0bee4752754a57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VMAPICALL</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>5cc0f8e06c254a13189b94cc290739a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VMCALL</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>79424431d656038ff7c9036f65e523b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXE_EXTENSION_CHAR</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>689a3e87f7c78c7ca580825529ec3417</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIR_SEPARATOR</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>0920890c442b665b0c6609fa796e9047</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIR_SEPARATOR_STR</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>23e72ca2d8456a971c13441bdfc4586f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_PRIORITY_MAP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>5bfa75ca2c5a48a0a594b2b69f5dc3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLOBAL_DATA</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>81910c686faba3f29c44c84011b823dd</anchor>
      <arglist>(symbol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLOBAL_TABLE</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>b60e4ef0f6e5fbedf1c16b78b5494c4a</anchor>
      <arglist>(symbol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PVMCALL</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>dd35c42ccf72e199b77bbf76be5220e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYCONST64</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>08ae5c2fa16893a9223780d5ce552d39</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_DEFAULT_SCHED</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>417080935b430ccd69141b819754e46b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FALSE</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>a93f0eb578d23995850d61f7d61c55c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRUE</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>a8cecfc5c5c054d2875c03e77b7be15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_PROTOTYPES</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>da440ec54eb75c757b0a71134f1cf891</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROTOTYPE</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>5f0c9bf21ca3ae29010d461ecd7d4bd9</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VARARGS</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>5a3872cc14d02a851fcb9ca4ee08a81b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PLATFORM_LINE_DELIMITER</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>65fe01b8766e8c825690f29c87fcd89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_IMAGE_PATH_LENGTH</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>80792e32a9abfee07306bef039a015c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLEAR_U64</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>fa489e08f16b4ad1e18abbc8fe2cdfed</anchor>
      <arglist>(u64)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOW_LONG</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>c11e5a8abf1c97dfaa53882b708cda5a</anchor>
      <arglist>(l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HIGH_LONG</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>562cea1c6980614225c2b2b5d43569db</anchor>
      <arglist>(l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>I8</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>b169fe9e0c078009e70cee377d9a13b1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>I8P</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>405b5b440ca33b31e52e573b26f85884</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>9ffc30ad81cb2c45cf19a8e9fc319ff5</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>I16</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>2206a183ccfe90c0029845da7154be64</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>I16P</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>e3c49569c1e92862fb1d8887eb8dc890</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U32</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>cb18ff4abb30f45c190e8b4178ada437</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>I32</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>f93b2852161677292e8e91264ed23ec5</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>I32P</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>b6d0284a883a19bf1a9bd6c1e0ae9afb</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U16P</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>11356fea59ebb596f16ea769aa470db0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>U32P</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>d7e94b4cc155d05c90a5be31c68276e8</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBJP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>69755fd73b9728693a33cac5f7b2c096</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBJPP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>0b956b600eda8530a6508b56a299d83e</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OBJPPP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>e6a467fc2b81cd8b88633120b5f33de2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLASSP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>bcc3984debcab2649ddb5c4658997d2d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLASSPP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>fd6ddef75f23a485842e57f8ca312129</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BYTEP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>0b3dc6a2b96a4a9cc485e4e28719be91</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ESCHAR</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>dd2b19d754bd223e3c8304d9d284885b</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FLT</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>7dd6e58c3f0255963921d1821312730c</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FLTP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>a639acc392f721eaaa780d44e70c6190</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LI8</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>5bc42c67b893ed0eecd6b4434aa5919d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LI8P</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>bd7b650bc06468090b3b4d43c1da1c10</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LU16</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>902360a59a3b2bbbb38a8d85bf6940aa</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LI16</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>a699fb685eb5486c692c2f227eabd6bd</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LU32</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>2b42661d461ff8c6b4b46e807bf1da29</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LI32</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>461975b9f3036d21b2669ea17a293935</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LI32P</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>1e39bae121a44fc47d6f272b57f97170</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LU16P</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>bb0f901fe7f74ca6177bd2848017aec6</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LU32P</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>f5243abcb9a1ee3b4fb179f776e50db2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOBJP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>f3dd1a66f1d5e814db3fb3911af05701</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOBJPP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>5d55404d0c1b2e0f6ad104f88952dd67</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOBJPPP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>1f0e9c0712543ed0dd72bb9282edec7d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LCLASSP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>33d73cba837dfa7035ddc338c103d4cb</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LBYTEP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>72d96b6b6382a0974a5a2f847e8191f6</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LCHAR</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>31ea4fbe06aa4b26bda2f2687475e284</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LFLT</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>c3ab0c12cc308beb416c7717970487ba</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LFLTP</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>78e8055b77dc9a49317624e59f8a1cfd</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HIGH_WORD</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>1eff9341413b5e3ae151ff796245c587</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOW_WORD</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>52f169fcd35e3960bbfeb2caaab5355e</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOW_BIT</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>42fd9c6b27a9aa6a8a8fdd68a8b27bf7</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOW_2_BITS</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>c9675da7ad82d3adaf009bf6d6374838</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOW_3_BITS</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>6a8c8f08da44be3ce81504b5e990cce6</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOW_4_BITS</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>335eae2c0eb88a5351e9b80975151157</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_32</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>582277486bb7acd4bc4ad1a523ecae4e</anchor>
      <arglist>(h, l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAKE_64</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>c9170dbd1b005cf6f3143d5dab3618df</anchor>
      <arglist>(h, l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_CFUNC</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>383bd2b7781d056c7fca3a7049151bb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_CDATA</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>d98ca836d0b9dbc87c4bb9596c839206</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>READSVMTHREAD</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>dc48e27ae9c614f0fb9004e876d13419</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WRITESVMTHREAD</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>fc54a2235d0d72d8ae07ec54934b31e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQUIRESSTACKFRAME</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>a433265b100789db1075b6b9c0e5f0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NORETURN</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>a1728270d73c5d1598de1fd691762eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PTR_LONG_STORE</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>9c1a81e19f075afa7bf32b7d863593bd</anchor>
      <arglist>(dstPtr, aLongPtr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PTR_LONG_VALUE</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>e01bfd153aae4311fa5c343d370295cf</anchor>
      <arglist>(dstPtr, aLongPtr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYCONST_TABLE</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>202fda7ca11c91a6ef19962aa0c8a8d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_SORT</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>fd6221236ddc2e3f18b3ce13f674d294</anchor>
      <arglist>(base, nmemb, size, compare)</arglist>
    </member>
    <member kind="typedef">
      <type>__int64</type>
      <name>I_64</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>a834dc6a37f270a73f4888c55ba7db47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned __int64</type>
      <name>U_64</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>e3afd246d1e3ead3659b5f91d0e3be6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>SYS_FLOAT</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>ef25ee1df36ed82bb1d3dcf5fd84ff16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>UDATA</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>dc9b7bee0fe6b8b2320bc46be74b4e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>U_32</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>4ac20826c44c5a16fafffedce114da80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>U_16</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>5308f244769c9d39cbe39fa27607dd45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>U_8</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>cdaf881f2be7a4afbd021d8ea7f9d909</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>IDATA</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>1a623c7167664c4f31120d213cb6f0f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>I_32</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>0994ed41cc6e93e729bfbaf91c765f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>I_16</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>1a9dd3b7e98eddd11b4b4e818a44cebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>I_8</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>91bdd7c6a6874b226c51d8a8b37cec72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ESDOUBLE</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>13ce33f16b091f1717694fe067222156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>ESSINGLE</name>
      <anchorfile>hycomp_8h.html</anchorfile>
      <anchor>df53af0aa4280178403d830f297ad604</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hythread.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>hythread_8h</filename>
    <class kind="struct">HyThreadMonitorTracing</class>
    <class kind="struct">HyThread_public</class>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_H</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>513ef82f9d1bb4994c36ba6bf4b95123</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hy_inline</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>a75092d8ec69547d2e15c125132bebb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_PROC</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>3fc9863ec29d0ed7a95601e17ee6deca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_PRIORITY_MIN</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>183e9b0b86ba49fa7d4f3b86fc55e95a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_PRIORITY_USER_MIN</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>8659fac78cb93aabca009e104c7b7d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_PRIORITY_NORMAL</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>ee7f18674d612a830391ce935182a95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_PRIORITY_USER_MAX</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>0145d6ad21431fa7f1652c9e2ce2eb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_PRIORITY_MAX</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>5d1476b9a547c01f19f1c78b45c5c322</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_LOCKING_DEFAULT</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>445b1112091453b66b796799e85f6fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_LOCKING_NO_DATA</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>c7fbb897f3bd3c228173b2da40c0e6ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_BLOCKED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>7e45750a7bcb4e42acf0abccaa382c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_ALREADY_INITIALIZED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>2fafbc5e70a2a1363dfdeb1ac2c248b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_TIMED_OUT</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>a4f1824a2d88e7b725b40942e45ed707</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_STARTED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>6655b11f68b7f3a664d4b986ef0d6576</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_JLM_HAS_BEEN_ENABLED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>f3bdc4cc3c1e03e1be8e5b4866a5dea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_ILLEGAL_MONITOR_STATE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>3f597d2e9cd1b05dafae149e7b13f289</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_PRIORITY_INTERRUPTED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>9f535473b5570741705915596666a93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_JLMHST_ENABLED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>48a7f32ec6e2831460989fd3e8ce2d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_JLM_ENABLED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>e99427266a9a1d67bb930cf17b3644b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_INTERRUPTED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>2d708f55a8f33cb02a81df4f9dd1a6be</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_INVALID_ARGUMENT</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>1b73dae99c9b3e5f3046750a9bc83d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_DETACHED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>99135e991a0aed5c6f207ea296499f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_PRIORITY_INTERRUPTED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>3894e16a041449fac65194229064b98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_CANCELED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>2dcc5774940c22fd5c6749cb822c04cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_NOTIFIED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>75fbe635a1d4347ea12e605186204779</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_ATTACHED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>6d5ce712db75fbf708a12aba8d95a98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_WOULD_BLOCK</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>72cd9d721227d119021561747d8edf17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_DEAD</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>085a917f6ef8184ef4a77f6473c9f272</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_WAITING</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>cf8a9a4400be8b97bd692bc5dfe5bded</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_PARKED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>46f88f9663dcd802bb43e931de10a1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_UNPARKED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>eec11cae1d3ebc6c7b4e13fd05a431c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_INTERRUPTABLE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>c404178d84f7e2c8aaa8baa6bb1c9f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_TIMER_SET</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>18f7b04bfe4c93ade36c9c656d5e609a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_JLM_ENABLED_ALL</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>4a7b6e52f72e06760e8b97cd41212938</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_JLMTS_ENABLED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>7b0fc5b4bd04a0914674e4e636baae6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_INTERRUPTED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>be76b10e0552e5e83fa41c2d8c552161</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_BLOCKED_AFTER_WAIT</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>51a42b8d5118638d429034eae97b662d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_ALREADY_ATTACHED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>7877c7d762dbbb8333430fc734d0b876</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_SUSPENDED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>1d58362c82f1378ba3edc2ae3fe6e0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FLAG_SLEEPING</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>e3dd53b91714645e7d17d20111f11900</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_INFLATED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>83ad7da1438b486b0c57a3a82fba0ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_INTERRUPTABLE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>436cb878b2c576eb6b08a480b08c7d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_PRIORITY_INTERRUPTABLE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>6c69c90037cea90e353d7f504d7838aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_SYSTEM</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>93e4c8d6bbe3f67659bca51255736a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_OBJECT</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>ac6536f01ce41a68fc93c920fc0c0dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_MUTEX_UNINITIALIZED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>75c4b17a2ca5a739705e4f7ffa5e6892</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_SUPPRESS_CONTENDED_EXIT</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>90a7ff46d951d1c010f4626db6a03ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_MUTEX_IN_USE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>7bbf9aa9c1cff7184782e3abd468c801</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_SPINLOCK_UNOWNED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>f182373455044b1f5976a22725f4395d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_SPINLOCK_OWNED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>1baa835aae3476d789c1ce228137fa47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_MONITOR_SPINLOCK_EXCEEDED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>2867ff3a5c80d207b183839388a05db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_LIB_FLAG_JLMHST_ENABLED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>0189e5d7745e11e4d3ad316d7e76101e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_LIB_FLAG_JLM_ENABLED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>196c8ac1502da175e6eeeedd0317ebfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_LIB_FLAG_JLM_ENABLED_ALL</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>7ca11249cd861250ba10adc23d79bf0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_LIB_FLAG_JLM_HAS_BEEN_ENABLED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>e030ab19e0d839489bf9377fd88ab5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_LIB_FLAG_JLMTS_ENABLED</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>ae639e47126f40425dbea7fffc0242ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYSIZEOF_HyThreadMonitorTracing</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>e00904864b2329943d34b6d19dbc481e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_HYVMTHREADHELPERS_</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>aef9ba01bdc5b5bff9e518dbb0be70fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_HYVMTHREADSPINLOCKS_</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>4a90ce80e881186462d17265a97a951e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hythread_global_monitor</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>f362c96a15a41e4b52e438ca8691b5c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hythread_monitor_init</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>0eceb054f20ffe59e30b0897839ac197</anchor>
      <arglist>(pMon, flags)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hythread_monitor_set_name</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>905c9db4853b847a3a4b5597cb726393</anchor>
      <arglist>(pMon, pName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASM_MONITOR_HELPER</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>a1d1769fa5bae8d6787012140835c0fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_FAST_TLS_ATTRIBUTE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>9833bc567c2f89a00460ac61f2205d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UDATA</type>
      <name>hythread_tls_key_t</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>f63543edc3469ad6389bfee68857e0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IDATA(VMCALL *)</type>
      <name>hythread_entrypoint_t</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>07f4479a1ddeea976469b2c1c5c0fc6f</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(VMCALL *)</type>
      <name>hythread_tls_finalizer_t</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>91da42218b4b65b0d05b417febae17a0</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>HyThread *</type>
      <name>hythread_t</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>2f10664b7fedd35e83217d31124f8775</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyThreadGroup *</type>
      <name>hythread_group_t</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>77152471c2c13d01c1f51f642d9ca75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyThreadMonitor *</type>
      <name>hythread_monitor_t</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>cdff111d50e5b0ad9a903094cc251aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HySemaphore *</type>
      <name>hysem_t</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>e8117824dca31546dfbfccf75e76b07d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RWMutex *</type>
      <name>hythread_rwmutex_t</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>05e9a9901d7d824f351cde69f23270c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC void VMCALL hythread_detach</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>095bafa2b4727e7068d944ffd3708bd0</anchor>
      <arglist>((hythread_t thread))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC UDATA VMCALL hythread_lib_set_flags</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>f5158cb6ec8265d5c6bebd46074be2b2</anchor>
      <arglist>((UDATA flags))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_tls_alloc</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>3cf1b40ad60f0b9fe863fe4641ef7364</anchor>
      <arglist>((hythread_tls_key_t *handle))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_sleep_interruptable</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>e56f1218fe31ba52882a6675a327eb09</anchor>
      <arglist>((I_64 millis, IDATA nanos))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_monitor_enter_using_threadId</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>76649d365333f438d3ebdbff00f70a78</anchor>
      <arglist>((hythread_monitor_t monitor, hythread_t threadId))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC UDATA VMCALL hythread_clear_interrupted</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>9488fd26876c3fed37157273a868cf15</anchor>
      <arglist>((void))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC void VMCALL hythread_lib_unlock</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>0857b6773e844460cad181c841b7f135</anchor>
      <arglist>((hythread_t self))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_monitor_enter</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>a42981f60cfee808c77b9c30c79155dc</anchor>
      <arglist>((hythread_monitor_t monitor))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_attach</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>dc7c76901e85a9ab3a84c24d85e461ca</anchor>
      <arglist>((hythread_t *handle))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC HyThreadMonitorTracing *VMCALL hythread_jlm_get_gc_lock_tracing</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>49b50d1a5e434b1443bf3125214c24b2</anchor>
      <arglist>(())</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hysem_post</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>0d210956172212278872cf0ba516260e</anchor>
      <arglist>((hysem_t s))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC void VMCALL hythread_monitor_lock</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>0e599a0c882f001d128083dccac42961</anchor>
      <arglist>((hythread_t self, hythread_monitor_t monitor))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_monitor_init_with_name</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>e6faff9e413af64ba9db96c9aca995c8</anchor>
      <arglist>((hythread_monitor_t *handle, UDATA flags, char *name))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_tls_free</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>05a657da60a8c8477db78c221bbdbbe9</anchor>
      <arglist>((hythread_tls_key_t key))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_tls_set</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>1e3332cec5c2e368fc37c1c577c1670d</anchor>
      <arglist>((hythread_t thread, hythread_tls_key_t key, void *value))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_create</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>bdf58af296da6aee56edcecc8298bf37</anchor>
      <arglist>((hythread_t *handle, UDATA stacksize, UDATA priority, UDATA suspend, hythread_entrypoint_t entrypoint, void *entryarg))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hysem_init</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>c28589c69c93af56c8fdbc01333b4f12</anchor>
      <arglist>((hysem_t *sp, I_32 initValue))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_monitor_init_policy</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>780e47b6b1a73ecdd9b0281e5e4e33a7</anchor>
      <arglist>((hythread_monitor_t *handle, UDATA flags, IDATA policy, IDATA policyData))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_monitor_wait_interruptable</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>04093a10e94ccb17bfb7d602d33244f0</anchor>
      <arglist>((hythread_monitor_t monitor, I_64 millis, IDATA nanos))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_set_priority</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>df677c81797d0b8a557cafe6856b490d</anchor>
      <arglist>((hythread_t thread, UDATA priority))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_monitor_init</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>adb37ec571ce6e8cb8732394afdeaf75</anchor>
      <arglist>((hythread_monitor_t *handle, UDATA flags))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_sleep</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>e14a70b44bede883b16f9cdcadc84ee8</anchor>
      <arglist>((I_64 millis))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC UDATA *VMCALL hythread_global</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>cfce0239c8811c5bc254da1b33b48ec5</anchor>
      <arglist>((char *name))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_tls_alloc_with_finalizer</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>36d16adc63dada7cde26b29719301233</anchor>
      <arglist>((hythread_tls_key_t *handle, hythread_tls_finalizer_t finalizer))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC void VMCALL hythread_enable_stack_usage</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>a261e8ad4a22430ca8e54c56ebe10f54</anchor>
      <arglist>((UDATA enable))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_get_os_priority</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>2fbef8653dd55842536d83eb676fe671</anchor>
      <arglist>((hythread_t thread, IDATA *policy, IDATA *priority))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC UDATA VMCALL hythread_get_flags</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>ff3e24d5435990140bf79031b461394e</anchor>
      <arglist>((hythread_t thread, hythread_monitor_t *blocker))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_rwmutex_enter_read</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>e5bcfbfca9d4e5f6b1ea5bd8c1426198</anchor>
      <arglist>((hythread_rwmutex_t mutex))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL hythread_rwmutex_init</type>
      <name>PROTOTYPE</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>7651e0141a42b0d4994993b2ed51bfb9</anchor>
      <arglist>((hythread_rwmutex_t *handle, UDATA flags, const char *name))</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC UDATA VMCALL</type>
      <name>current_stack_depth</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>260d0c9e42d9a58b9450b4135fca6ae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC void VMCALL</type>
      <name>hythread_monitor_unpin</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>936f9b668fc67199c210c1142370ed91</anchor>
      <arglist>(hythread_monitor_t monitor, hythread_t osThread)</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC void VMCALL</type>
      <name>hythread_monitor_pin</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>d63330d291d2f95023e2cb0bff933137</anchor>
      <arglist>(hythread_monitor_t monitor, hythread_t osThread)</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC IDATA VMCALL</type>
      <name>hythread_spinlock_acquire</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>5fe43e5749b806745e2de1fbf38f4b7f</anchor>
      <arglist>(hythread_t self, hythread_monitor_t monitor)</arglist>
    </member>
    <member kind="function">
      <type>HY_CFUNC UDATA VMCALL</type>
      <name>hythread_spinlock_swapState</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>37dad8048426fde7fb50ea6a796e879e</anchor>
      <arglist>(hythread_monitor_t monitor, UDATA newState)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__declspec</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>f1480b7b14ccabcbe66d90ed00791f13</anchor>
      <arglist>(thread) hythread_t tm_self_tls</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __forceinline hythread_t VMCALL</type>
      <name>hythread_self</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>c7c35bc8d481a3d5215ab43b8b5890e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __forceinline void *VMCALL</type>
      <name>hythread_tls_get</name>
      <anchorfile>hythread_8h.html</anchorfile>
      <anchor>d4331aef21db9a4bba3bd32b4c094af6</anchor>
      <arglist>(hythread_t thread, hythread_tls_key_t key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hythread_ext.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>hythread__ext_8h</filename>
    <class kind="struct">HyThread</class>
    <class kind="struct">hythread_start_proc_data</class>
    <class kind="struct">tm_props</class>
    <member kind="define">
      <type>#define</type>
      <name>LOCK_RESERVATION</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>536b0b8f5a406cfdaaee214989aff288</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyLatch *</type>
      <name>hylatch_t</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>02de2ab1f1c6aff1d4ab1ce5b6b22f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyThread *</type>
      <name>hythread_iterator_t</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>132439cbf67fd368fd8c378ec530ef82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyThreadLibrary *</type>
      <name>hythread_library_t</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>e1ee92926d99d4c986438bc7d01c992b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>U_32</type>
      <name>hythread_thin_monitor_t</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>869f395591f6566be7466f95dc432427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*)</type>
      <name>hythread_event_callback_proc</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>97601d186cb8efe4b58c37a24a84b8b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="typedef">
      <type>int(HYTHREAD_PROC *)</type>
      <name>hythread_wrapper_t</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>519dba3c0dc27b1d5862c1902dc35895</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>hythread_start_proc_data *</type>
      <name>hythread_start_proc_data_t</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>650e705027a755838fa45960431ac9a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VMIMPORT tm_props *</type>
      <name>tm_properties</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>19f0926f2b7aab326894df614032cba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_QUANTITY_OF_PREDEFINED_TLS_KEYS</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>e1f42ef145a389c405742a2e87a3c52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_alive</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>f2d2f01b658335f3962bdfe8960cdac8</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_terminated</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>bf2e5033a1f3e7d18ba4856aaa67d238</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_runnable</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>9a355f3d8b1b01ef9843d3afb8a2fbf7</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_blocked_on_monitor_enter</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ce437e900a148a6261b6617c8fd7b728</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_waiting</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>3a7c274f24057c0b2a89cd3d5854d7f1</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_waiting_indefinitely</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>b254065aebf806f20580183be72dccc0</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_waiting_with_timeout</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ea04807803d9eae735e2682d0e1f00c5</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_sleeping</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>52824fdcbeba58a8d3b044ee36c49056</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_in_monitor_wait</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>4c3e9855787bff10aee6e64d9651ad6b</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_parked</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>d7cc6e095de2b2a5b3af205cdc4cd89f</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_suspended</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ac9e3cda74256d4dea4aa7cceb1f4a55</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_interrupted</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>2b4224de36cd536fa4ca74ac48c6de09</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_in_native</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>8025e9ca1ccbba8c5479134c81782ef7</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_daemon</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>84d018592f54b47c9fd76100bf8a4163</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HYTHREAD_EXT_H</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>a3161c8c40fe911bd4060576330c07c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_NEW</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>9681a0776312e08b7a5d7e98f4ac2b84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_ALIVE</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>a377e8326891471d2a1f3f8447208958</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_TERMINATED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ec35ffa77cae5a829fc5e1c77883bcd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_WAITING</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>0ed12f1fa0b6f086738e2d6483aeb158</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_WAITING_INDEFINITELY</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>6daec25f64419f97ef05bdca614260fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_WAITING_WITH_TIMEOUT</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>880dc5ab27ddc4687eb0cced24b9f31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_RUNNABLE</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>419e2fc13e20cadbd0f3700ab4fc4d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_SLEEPING</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>93dc6049a5ec21a10cf56b52faafc2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_IN_MONITOR_WAIT</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>681c30045384c3282c51a90b71796579</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_PARKED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ea5b9a1acba961e966506afc320048c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>af8d15238e7ee24395d76c1a879dd099</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_UNPARKED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>25fb9f4be49e6c0e0eed3ba6d6b26933</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_SUSPENDED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>add6ce32a679cb5fe595f553048fb302</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_INTERRUPTED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>00e07aaf821ce8f97221476446e1aa25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_THREAD_STATE_IN_NATIVE</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>6b74c4b3258ead566d7536122984466e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_MUTEX_DEFAULT</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>3f0f05ad6878a796d9708379e374ce8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_MUTEX_NESTED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>31628169701d1364657407d209f46e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_MUTEX_UNNESTED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>8e01bfbbb51f53a7c6644b4aac969348</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WAIT_INTERRUPTABLE</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>21a44d77d755e0a1014bf5fd0ed683b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WAIT_NONINTERRUPTABLE</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>61ab4d0f2c2d00ab5ee5af29587b6bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_NONE</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>23194ae896e95f322a55b33fed01790f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_INVALID_MONITOR</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>e618dd62b906bd67dcd358072a42963f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_NOT_MONITOR_OWNER</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>49ddc8bb0fa450128fa90fc71b59053f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_INTERRUPT</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>e09c40563e6440063327e94ad0c4baa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_NULL_POINTER</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>f6e5eb31d719a21b45c880af96d16cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_OUT_OF_MEMORY</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>fe66184844349331aada118b7dc81cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_ACCESS_DENIED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>d678dc2afcfbbeb16a19790672c12ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_WRONG_PHASE</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>d373736c2394bfebbb44b8e68cb97ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_INTERNAL</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>c96aee0fc0dcc91dcf6ff9226f875e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_UNATTACHED_THREAD</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>943e3c4c5cc60ad54d61ee895ef29255</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_INVALID_ENVIRONMENT</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>11848a8ab8687278d1963f0c8c3f6938</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_MAX_THREADS</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>8a6b30a818aa4b357a37b9b75d1df48c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_ILLEGAL_STATE</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>cce532fa70a1cff5b54787e8274ff751</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_RUNNING_THREADS</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>0bb446be066a56657e0ed690685868bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_EBUSY</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>46dc89e5133d0ba8c2125151d03eaa90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_TIMEOUT</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>2215c8edbe282b877129b6f0a77b2a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_ERROR_START</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>f1bee0c05984a3f48975c89287548053</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_OS_ERROR</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>da944b77ee9c1c6c4c8aee6a9c02ad85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_DEFAULT_STACKSIZE</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>938223f6cdc8d2faaed006671bc3a197</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_STATUS_WITHOUT_JAVA</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>97801b7f852e5bc5ec1d5900cc0e1f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_STATUS_ALLOCATED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>cd84a865eedc1d9622380e78d7d35ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_STATUS_INITIALIZED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>6877e60e064b8a471eb29a96edae6763</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_LIBRARY_STATUS_NOT_INITIALIZED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>7a315a1b8f112914bfc833cfb514792e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_LIBRARY_STATUS_INITIALIZED</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>9641dcce70ac1b7fe672804cf8194a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_LIBRARY_STATUS_SHUTDOWN</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>335d33c4bcb3e6d1d675c547286aaffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_global_lock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>721209395d618731ddf16c02bc71c8d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_global_unlock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>6a3c9c6408bbe41d03eb1c3f4ffdc14a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_init</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>4c35b06eccb30a21507533284c3e0cbe</anchor>
      <arglist>(hythread_library_t lib)</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_shutdown</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>b33b84785d6ab8ace3c5eccb827ae3fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_shutdowning</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>f701e8d24620c9ab0e251dad76ab625c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_lib_state</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>6e7ae1741f4e959582e80d581c7f2ff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_lib_create</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>5606e96a060bcfb45168f5c208f9e120</anchor>
      <arglist>(hythread_library_t *lib)</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_lib_destroy</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>b7c8655b2e0ac83188a256b6248b5280</anchor>
      <arglist>(hythread_library_t lib)</arglist>
    </member>
    <member kind="function">
      <type>hythread_group_t VMCALL</type>
      <name>get_java_thread_group</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>3f5d6819df3a805a016e25ced84e8291</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_create_ex</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>baec821ff56384d0145c440b64f920fd</anchor>
      <arglist>(hythread_t new_thread, hythread_group_t group, UDATA stacksize, UDATA priority, hythread_wrapper_t wrapper, hythread_entrypoint_t func, void *data)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_attach_ex</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>daca60f58bd1cb51883aa476242314e1</anchor>
      <arglist>(hythread_t new_handle, hythread_library_t lib, hythread_group_t group)</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_detach_ex</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>f9f840536f3b3cc1a885fb773a5b032d</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_set_to_group</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>f02f12612366aa7536dae7f1346059b3</anchor>
      <arglist>(hythread_t thread, hythread_group_t group)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_remove_from_group</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>9423cea352169881e2bd44193020eb50</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_set_self</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ab9e038a0b32e0df20fabbf681974d02</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>UDATA VMCALL</type>
      <name>hythread_clear_interrupted_other</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>38e7a60acc22f878c92846a4e4ca5943</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_yield_other</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>db21d5475183af6cd8777ebf34af4875</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_get_self_id</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>00b218b2232d0ef53420441351924e80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_get_id</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>5bb57c3d695d7e279d4f0e8e6a17d030</anchor>
      <arglist>(hythread_t t)</arglist>
    </member>
    <member kind="function">
      <type>hythread_t VMCALL</type>
      <name>hythread_get_thread</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>892e0d6672062e9adcd985c1f2ad02bb</anchor>
      <arglist>(IDATA id)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_struct_init</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>015dc1018caa70b16098a8ece2fe413c</anchor>
      <arglist>(hythread_t new_thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_struct_release</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>31066b17c1ff890dd400b21b90a4a9f9</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_cancel_all</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>98c5a4a4a565ff09aa0bf9b9fc76e94b</anchor>
      <arglist>(hythread_group_t group)</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>hythread_group_create</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>5e132e9de926cd09827cf0c828333675</anchor>
      <arglist>(hythread_group_t *group)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_group_release</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>9468034517dd87714ef82c5261e63fb5</anchor>
      <arglist>(hythread_group_t group)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_group_get_list</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>9d8ee61276638c5a81e098b0c67558c9</anchor>
      <arglist>(hythread_group_t **list, int *size)</arglist>
    </member>
    <member kind="function">
      <type>UDATA VMCALL</type>
      <name>hythread_tls_get_offset</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>51285a191e1604fc1bc1f2dfd6c9dbec</anchor>
      <arglist>(hythread_tls_key_t key)</arglist>
    </member>
    <member kind="function">
      <type>UDATA VMCALL</type>
      <name>hythread_tls_get_request_offset</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>65865e9326f2307ff7fbee1076968903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UDATA VMCALL</type>
      <name>hythread_get_thread_times</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>d3ec693ac1bd4d52b53411b8f02f4f10</anchor>
      <arglist>(hythread_t thread, int64 *pkernel, int64 *puser)</arglist>
    </member>
    <member kind="function">
      <type>UDATA</type>
      <name>hythread_get_thread_stacksize</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>91b1389bd9e719098c9527eb40e0e832</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>UDATA VMCALL</type>
      <name>hythread_uses_fast_tls</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>4e2a2c3de0a3a1463f29f870f2f59b51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_get_hythread_offset_in_tls</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>1cf814b49caa6db9db6d796ffc08c730</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_get_struct_size</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>968f4ef4a718a43845ba1341be498686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thread_lock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>383c450b8447dee7df349a41db3412b4</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thread_unlock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>6e32e8aa24a483f4ddcb1e97fdc8973b</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_get_state</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>13ae925da602a32517ac775fdc0ec9f1</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_set_state</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>76c1cf76d6bbc1643681d30943fbc9ba</anchor>
      <arglist>(hythread_t thread, IDATA state)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_reset_suspend_disable</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>81a803501116745d9c5cfdb7e539fe73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_set_suspend_disable</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>24f94d3e40e944a28a8104e3c3aa1b2c</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function">
      <type>int VMCALL</type>
      <name>hythread_is_fat_lock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>447f45d65b3d1c2f686698478097fcfa</anchor>
      <arglist>(hythread_thin_monitor_t lockword)</arglist>
    </member>
    <member kind="function">
      <type>hythread_monitor_t VMCALL</type>
      <name>hythread_inflate_lock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>24e0d5207c6802a7a3f555bd4854dd3e</anchor>
      <arglist>(hythread_thin_monitor_t *lockword_ptr)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_owns_thin_lock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>c24e98968f6a7ecf358f0e784a5cabdd</anchor>
      <arglist>(hythread_t thread, hythread_thin_monitor_t lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_unreserve_lock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>f46418dea648fab7c6f3e03b71c1080b</anchor>
      <arglist>(hythread_thin_monitor_t *lockword_ptr)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_get_thread_id_offset</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>0615fc0f2ccade67a2dc7369ce7dfe6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_set_thread_stop_callback</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>576f48728c3d6e214d5a5c24e78c9e84</anchor>
      <arglist>(hythread_t thread, hythread_event_callback_proc stop_callback)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_wait_for_nondaemon_threads</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>91a415606516eb26038005c00aeedc43</anchor>
      <arglist>(hythread_t thread, IDATA threads_to_keep)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_increase_nondaemon_threads_count</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>e782184b27930e4b02ebb90bf9c19bc6</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_decrease_nondaemon_threads_count</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ccebcf0ee18660ba031bc199e79879e7</anchor>
      <arglist>(hythread_t thread, IDATA threads_to_keep)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hycond_create</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>d65b5e8e647034b35b441bbb5ec4dde6</anchor>
      <arglist>(hycond_t *cond)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hycond_wait</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>197f8ba038a0d9024dd1ccbccceca5f0</anchor>
      <arglist>(hycond_t *cond, hymutex_t *mutex)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hycond_wait_timed</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>7efa9dc8a2d3d4b8704c4bf388badb1f</anchor>
      <arglist>(hycond_t *cond, hymutex_t *mutex, I_64 millis, IDATA nanos)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hycond_wait_timed_raw</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>337a7899ac66cded39307ac441362c19</anchor>
      <arglist>(hycond_t *cond, hymutex_t *mutex, I_64 ms, IDATA nano)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hycond_wait_interruptable</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>90b4fc418e1fb5d34c4150738d5a7bcf</anchor>
      <arglist>(hycond_t *cond, hymutex_t *mutex, I_64 millis, IDATA nanos)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hycond_notify</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>87a271a9c6b3020a4da88a44698ca118</anchor>
      <arglist>(hycond_t *cond)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hycond_notify_all</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>37de2734d0f3d8d7d32f86ed1a5d8600</anchor>
      <arglist>(hycond_t *cond)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hycond_destroy</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>b73a0d9804bae4390468c88539d285ba</anchor>
      <arglist>(hycond_t *cond)</arglist>
    </member>
    <member kind="function">
      <type>hy_inline IDATA VMCALL</type>
      <name>hythread_is_suspend_enabled</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>852d756107bf410ff4294dbac60613c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>hy_inline void VMCALL</type>
      <name>hythread_suspend_enable</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>532c9a912f0c3b5ad6bbd7520f9213f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>hy_inline void VMCALL</type>
      <name>hythread_suspend_disable</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>e62d119e79749eaf88ce215d4047a27d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hythread_safe_point</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>b26bb1349185097c8d711140f4382f6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hythread_safe_point_other</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>6a45e6cbd3004c0b68676189616c5df4</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_exception_safe_point</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>02f401f867c739a72c7e3942f3b9732f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_send_suspend_request</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>d2b9e06ffba68ad6b92bbe47b7ed89cf</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_suspend_other</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>1ac1d2437ee8ced181f8364017af7a54</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_set_safepoint_callback</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>8ac6c6a8e1939f3c75bbaeb9bab156fd</anchor>
      <arglist>(hythread_t thread, hythread_event_callback_proc callback)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_suspend_all</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>f76771ee3cb67d3733718322b95d6f5b</anchor>
      <arglist>(hythread_iterator_t *t, hythread_group_t group)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_resume_all</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>be3dc81a29d179972f6a74d44d16b199</anchor>
      <arglist>(hythread_group_t group)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hylatch_create</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>0ac611c0440dac81552a6d2cbbd8f91b</anchor>
      <arglist>(hylatch_t *latch, IDATA count)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hylatch_wait</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>a036fa2300822bb40ca6c8d763082695</anchor>
      <arglist>(hylatch_t latch)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hylatch_wait_timed</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>5343091e7c4ccca209d284bc78b933b3</anchor>
      <arglist>(hylatch_t latch, I_64 ms, IDATA nano)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hylatch_wait_interruptable</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>89ba9bbaababc58af0b512a746a76ef6</anchor>
      <arglist>(hylatch_t latch, I_64 ms, IDATA nano)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hylatch_set</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ec3dd817726846fb9007d0f645bf43a0</anchor>
      <arglist>(hylatch_t latch, IDATA count)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hylatch_count_down</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>bd08c498a02b6f8346dc387962282237</anchor>
      <arglist>(hylatch_t latch)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hylatch_get_count</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>9f1f95231db79c98b27f4543a2f2d5bd</anchor>
      <arglist>(IDATA *count, hylatch_t latch)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hylatch_destroy</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>7ed6ee05a7a2dabb3b38e0b2d919355c</anchor>
      <arglist>(hylatch_t latch)</arglist>
    </member>
    <member kind="function">
      <type>hythread_iterator_t VMCALL</type>
      <name>hythread_iterator_create</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>adae6848767e0afa70e8f132fd65780c</anchor>
      <arglist>(hythread_group_t group)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_iterator_release</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ed237c603560c25da1fdebbb17d18f74</anchor>
      <arglist>(hythread_iterator_t *it)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_iterator_reset</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>525f313add4a31382dc4e79a490ef062</anchor>
      <arglist>(hythread_iterator_t *it)</arglist>
    </member>
    <member kind="function">
      <type>hythread_t VMCALL</type>
      <name>hythread_iterator_next</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>57abdfe5f3046d9f8fdfcdf143e1db66</anchor>
      <arglist>(hythread_iterator_t *it)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_iterator_has_next</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>cde0b3fcaa73780cfeb94e9bd3956274</anchor>
      <arglist>(hythread_iterator_t it)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_iterator_size</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>aa45416a76ca8de2be7e22602e563f71</anchor>
      <arglist>(hythread_iterator_t iterator)</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>hysem_create</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>8cfe52698c3d4c2b8026e97f25bab2e4</anchor>
      <arglist>(hysem_t *sem, UDATA initial_count, UDATA max_count)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hysem_wait_timed</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>ede71fe0fa53f1768383ba2879430895</anchor>
      <arglist>(hysem_t sem, I_64 ms, IDATA nano)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hysem_wait_interruptable</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>fe2ec7d86e297e90d9e361a9c68645b3</anchor>
      <arglist>(hysem_t sem, I_64 ms, IDATA nano)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hysem_getvalue</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>97b4510d3a19131743a470a13a0396c2</anchor>
      <arglist>(IDATA *count, hysem_t sem)</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>hysem_set</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>2b2c5ee54032122c7f1b173eac18ad14</anchor>
      <arglist>(hysem_t sem, IDATA count)</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>hymutex_create</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>706e1bb07a7fe3da5e18e35f1a577701</anchor>
      <arglist>(hymutex_t *mutex, UDATA flags)</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>hymutex_lock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>e361aa7e27b5ba4618e2cdc2248b29ab</anchor>
      <arglist>(hymutex_t *mutex)</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>hymutex_trylock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>09e1ea58026b9d48bcd7b4f75a6c5472</anchor>
      <arglist>(hymutex_t *mutex)</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>hymutex_unlock</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>baa4a6187380d0abeefb3fe913065567</anchor>
      <arglist>(hymutex_t *mutex)</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>hymutex_destroy</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>1de649db0fb5f6817f43d8dcd1f802ee</anchor>
      <arglist>(hymutex_t *mutex)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_create</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>662c219176de72749df545bbd5f0958b</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_enter</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>850b2a70cfdf36280b2dc82f631be66c</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_try_enter</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>efdcda37901f432288a9e351b4404261</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_exit</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>e4f276e5840b59dafbea0aa7f23cee9e</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_release</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>8c17b6331ac49838550fb3f6ff1c5ca6</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_wait</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>dc258e56d6b46e6c985fb18048d893cf</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_wait_timed</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>306706e9dc493cea8d744eeaa4ade4fa</anchor>
      <arglist>(hythread_thin_monitor_t *lockword_ptr, I_64 ms, IDATA nano)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_wait_interruptable</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>de6f99ac7e7b9daec273bf86104cdf7a</anchor>
      <arglist>(hythread_thin_monitor_t *lockword_ptr, I_64 ms, IDATA nano)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_notify</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>36a60e0531b7dd15ac38162543e5fd42</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_notify_all</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>5ab692f6e0ab36515884c787efc57b71</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_destroy</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>399a57f108c1d9a064eaeff897e55c5a</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>hythread_t VMCALL</type>
      <name>hythread_thin_monitor_get_owner</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>85607e1038e758980fb9b266b9e629ec</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>IDATA VMCALL</type>
      <name>hythread_thin_monitor_get_recursion</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>3eb6c09953ffdaf17e1fa2a97b289d2e</anchor>
      <arglist>(hythread_thin_monitor_t *lockword)</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_native_resource_is_live</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>5e33326333b41eddc13b9701e848d572</anchor>
      <arglist>(U_32)</arglist>
    </member>
    <member kind="function">
      <type>void VMCALL</type>
      <name>hythread_reclaim_resources</name>
      <anchorfile>hythread__ext_8h.html</anchorfile>
      <anchor>220186827601396e791cb5bd20dfc9ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hyvmls.h</name>
    <path>C:/cvn_rep/source/trunk/working_classlib/modules/luni/src/main/native/include/shared/</path>
    <filename>hyvmls_8h</filename>
    <class kind="struct">HyVMLSFunctionTable</class>
    <member kind="define">
      <type>#define</type>
      <name>HY_VMLS_H</name>
      <anchorfile>hyvmls_8h.html</anchorfile>
      <anchor>c547c63fa35565308d1c7b94df47e649</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_VMLS_MAX_KEYS</name>
      <anchorfile>hyvmls_8h.html</anchorfile>
      <anchor>9ac43e514d0a2dcac769db268025ec19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_VMLS_FNTBL</name>
      <anchorfile>hyvmls_8h.html</anchorfile>
      <anchor>440113f65b0153599b26893933f742a6</anchor>
      <arglist>(env)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_VMLS_GET</name>
      <anchorfile>hyvmls_8h.html</anchorfile>
      <anchor>f1d7ebb82b83787b7925e2cf35b19beb</anchor>
      <arglist>(env, key)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HY_VMLS_SET</name>
      <anchorfile>hyvmls_8h.html</anchorfile>
      <anchor>2f88ba3699639f210bfc3ad5ef312ad6</anchor>
      <arglist>(env, key, value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ini.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>ini_8h</filename>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>JIT_execute_method_default</name>
      <anchorfile>ini_8h.html</anchorfile>
      <anchor>b5796771c51a1cd01fe17cc4a32202c7</anchor>
      <arglist>(JIT_Handle jit, jmethodID meth, jvalue *return_value, jvalue *args)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_execute_java_method_array</name>
      <anchorfile>ini_8h.html</anchorfile>
      <anchor>13a926ec0d44958b638d2d877f954006</anchor>
      <arglist>(jmethodID method, jvalue *result, jvalue *args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>internal_jit_intf.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>internal__jit__intf_8h</filename>
    <member kind="function">
      <type>VMEXPORT char *</type>
      <name>gen_setup_j2n_frame</name>
      <anchorfile>internal__jit__intf_8h.html</anchorfile>
      <anchor>644a405b9c94dff7044ee5772b4dcbe4</anchor>
      <arglist>(char *s)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT char *</type>
      <name>gen_pop_j2n_frame</name>
      <anchorfile>internal__jit__intf_8h.html</anchorfile>
      <anchor>c708a349d98fe1b5984d5a403bf4d904</anchor>
      <arglist>(char *s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interpreter_exports.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>interpreter__exports_8h</filename>
    <class kind="struct">Interpreter</class>
    <member kind="typedef">
      <type>FrameHandle</type>
      <name>FrameHandle</name>
      <anchorfile>interpreter__exports_8h.html</anchorfile>
      <anchor>0f9d86fdd01ce64781098b7e1639e013</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Interpreter *</type>
      <name>interpreter_table</name>
      <anchorfile>interpreter__exports_8h.html</anchorfile>
      <anchor>550b1265cb59bfd7a1004a3b91439bcf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interpreter_imports.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>interpreter__imports_8h</filename>
    <member kind="typedef">
      <type>ManagedObject</type>
      <name>ManagedObject</name>
      <anchorfile>interpreter__imports_8h.html</anchorfile>
      <anchor>f192f3ea210786a9d719dc8fbaa4318b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_monitor_enter_wrapper</name>
      <anchorfile>interpreter__imports_8h.html</anchorfile>
      <anchor>be71966598c3780c30ff077886594c6e</anchor>
      <arglist>(ManagedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_monitor_exit_wrapper</name>
      <anchorfile>interpreter__imports_8h.html</anchorfile>
      <anchor>e094f28cc688ebe1ddfaed37983168f7</anchor>
      <arglist>(ManagedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>class_throw_linking_error_for_interpreter</name>
      <anchorfile>interpreter__imports_8h.html</anchorfile>
      <anchor>921281328a49e674ba9525f9ff9106ca</anchor>
      <arglist>(Class_Handle ch, unsigned cp_index, unsigned opcode)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT JNIEnv *</type>
      <name>get_jni_native_intf</name>
      <anchorfile>interpreter__imports_8h.html</anchorfile>
      <anchor>9368c00895327383a72e1195eecac6d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jbyte</type>
      <name>jvmti_process_interpreter_breakpoint_event</name>
      <anchorfile>interpreter__imports_8h.html</anchorfile>
      <anchor>2e68f4cd423ba5d5af67346f0fc865e1</anchor>
      <arglist>(jmethodID method, jlocation loc)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>jvmti_process_single_step_event</name>
      <anchorfile>interpreter__imports_8h.html</anchorfile>
      <anchor>9ee7de569541fec0f323b7b19e03bcec</anchor>
      <arglist>(jmethodID method, jlocation location)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>jvmti_process_frame_pop_event</name>
      <anchorfile>interpreter__imports_8h.html</anchorfile>
      <anchor>d7fe1b895ba4959e2c7bed8154f26442</anchor>
      <arglist>(jvmtiEnv *env, jmethodID method, jboolean was_popped_by_exception)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT GenericFunctionPointer</type>
      <name>classloader_find_native</name>
      <anchorfile>interpreter__imports_8h.html</anchorfile>
      <anchor>fd13947101c9c5cb904897e440b1abd3</anchor>
      <arglist>(const Method_Handle method)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_export.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>jit__export_8h</filename>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_next_command_line_argument</name>
      <anchorfile>jit__export_8h.html</anchorfile>
      <anchor>66ec41211e0ec8c07f299946bf366a1d</anchor>
      <arglist>(JIT_Handle jit, const char *name, const char *arg)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT JIT_Result</type>
      <name>JIT_compile_method_with_params</name>
      <anchorfile>jit__export_8h.html</anchorfile>
      <anchor>2b90ff37e7a428d2d6ed5b2d8c70e833</anchor>
      <arglist>(JIT_Handle jit, Compile_Handle compile_handle, Method_Handle method_handle, OpenMethodExecutionParams compilation_params)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenMethodExecutionParams</type>
      <name>JIT_get_exe_capabilities</name>
      <anchorfile>jit__export_8h.html</anchorfile>
      <anchor>4abdcd9e96bc3cfce5ea6ce3342ad8b8</anchor>
      <arglist>(JIT_Handle jit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_export_jpda.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>jit__export__jpda_8h</filename>
    <member kind="enumeration">
      <name>OpenExeJpdaError</name>
      <anchor>4f097ac15bf97731434190a2b060e122</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_NONE</name>
      <anchor>4f097ac15bf97731434190a2b060e122cf658e0896cab259b06e17913e15fa08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_INVALID_METHODID</name>
      <anchor>4f097ac15bf97731434190a2b060e1229a2b5f831656a99f96b9d7340da4ca78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_INVALID_LOCATION</name>
      <anchor>4f097ac15bf97731434190a2b060e122de2e651e9d3177f2f99c893d42c9cc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_TYPE_MISMATCH</name>
      <anchor>4f097ac15bf97731434190a2b060e1223ec7a55a2f2f345c8c6538fc96f58ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_INVALID_SLOT</name>
      <anchor>4f097ac15bf97731434190a2b060e1222f0d70c03db9274b092588a0faf09014</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_UNSUPPORTED</name>
      <anchor>4f097ac15bf97731434190a2b060e12228a7084a5e5ff743461f3cb529a8ce1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenExeJpdaError</type>
      <name>get_native_location_for_bc</name>
      <anchorfile>jit__export__jpda_8h.html</anchorfile>
      <anchor>0ed9e3b5c277bd81ef9b44c9ff4cd4c6</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, uint16 bc_pc, NativeCodePtr *native_pc)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenExeJpdaError</type>
      <name>get_bc_location_for_native</name>
      <anchorfile>jit__export__jpda_8h.html</anchorfile>
      <anchor>549b28837a66ffca63b57a7c69ed0168</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, NativeCodePtr native_pc, uint16 *bc_pc)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenExeJpdaError</type>
      <name>get_local_var</name>
      <anchorfile>jit__export__jpda_8h.html</anchorfile>
      <anchor>1a3181f1db066b8296a954b279c93a6c</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context, uint16 var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenExeJpdaError</type>
      <name>set_local_var</name>
      <anchorfile>jit__export__jpda_8h.html</anchorfile>
      <anchor>60de8fb6b56e4bf67f30cc2c8f1de765</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context, uint16 var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_export_rt.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>jit__export__rt_8h</filename>
    <member kind="function">
      <type>JITEXPORT Boolean</type>
      <name>JIT_extended_class_callback</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>473d6b4f9ca6d3723e1df30dde6210e3</anchor>
      <arglist>(JIT_Handle jit, Class_Handle extended_class, Class_Handle new_class, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT Boolean</type>
      <name>JIT_overridden_method_callback</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>0f1a53059de1876d9a44a96976a780f2</anchor>
      <arglist>(JIT_Handle jit, Method_Handle overridden_method, Method_Handle new_method, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT Boolean</type>
      <name>JIT_recompiled_method_callback</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>a7a3442a1bf268f99de05d704d72415e</anchor>
      <arglist>(JIT_Handle jit, Method_Handle recompiled_method, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_unwind_stack_frame</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>b487fe18db2e736bec6aa9cf7930e9f4</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_get_root_set_from_stack_frame</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>9dd85410b1d61c7ab5f3ee6d48d00816</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, GC_Enumeration_Handle enum_handle, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_get_root_set_for_thread_dump</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>87f3e8b555c9bff6461b4b79ef512445</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, GC_Enumeration_Handle enum_handle, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT uint32</type>
      <name>JIT_get_inline_depth</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>c433e15a767be42df3419994690ae0ff</anchor>
      <arglist>(JIT_Handle jit, InlineInfoPtr ptr, uint32 offset)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT Method_Handle</type>
      <name>JIT_get_inlined_method</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>66c168fda2a7f1e3103d65b7aa1e0aab</anchor>
      <arglist>(JIT_Handle jit, InlineInfoPtr ptr, uint32 offset, uint32 inline_depth)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT uint16</type>
      <name>JIT_get_inlined_bc</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>01e8b6b298ea9e6552b682b813016856</anchor>
      <arglist>(JIT_Handle jit, InlineInfoPtr ptr, uint32 offset, uint32 inline_depth)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_fix_handler_context</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>90a935551eefc0cfd441ba7f69c14868</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void *</type>
      <name>JIT_get_address_of_this</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>dc70b067511b45acf65b3bd522bb19a9</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT Boolean</type>
      <name>JIT_supports_compressed_references</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>35d09d1ebcc29f8686d5447c80e5b53a</anchor>
      <arglist>(JIT_Handle jit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_import.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>jit__import_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CODE_BLOCK_HEAT_COLD</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>a77fd4fd328329985b8071e31acc535f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CODE_BLOCK_HEAT_DEFAULT</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>6ea5607f3bb3fb9274bf0274789fd29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CODE_BLOCK_HEAT_MAX</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>80586882d34f45bd3fa2a477ad91f195</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>METHOD_JIT_ITER_END</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>3729e2c296cb57388588f2baf3f1faf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const Byte *</type>
      <name>method_get_byte_code_addr</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>20a59f30c70f240c7c324b160d37e582</anchor>
      <arglist>(Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT size_t</type>
      <name>method_get_byte_code_size</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>752ca88782264996dffe60a9b263b379</anchor>
      <arglist>(Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_get_max_stack</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>aa7d7c0c7d3a364d4002aa0d64590d14</anchor>
      <arglist>(Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>method_get_indirect_address</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>e72a9461c286ebc8a194e1a14091d15a</anchor>
      <arglist>(Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_get_offset</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>20db11284ce1dd20285ee53949e19f49</anchor>
      <arglist>(Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Byte *</type>
      <name>method_allocate_data_block</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>f1769aabf8bda6e55b9bcf394f0fd538</anchor>
      <arglist>(Method_Handle method, JIT_Handle j, size_t size, size_t alignment)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Byte *</type>
      <name>method_allocate_jit_data_block</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>00c4f07b958ad8a3f473df2bb42a0a44</anchor>
      <arglist>(Method_Handle method, JIT_Handle j, size_t size, size_t alignment)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Byte *</type>
      <name>method_allocate_code_block</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>53a0a624f74e9596c940e9feb26c4562</anchor>
      <arglist>(Method_Handle m, JIT_Handle j, size_t size, size_t alignment, CodeBlockHeat heat, int id, Code_Allocation_Action action)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_set_relocatable</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>6f3b0851ecf3c9d5b259a29f12cf7aae</anchor>
      <arglist>(Method_Handle m, JIT_Handle j, NativeCodePtr code_address, Boolean is_relocatable)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Byte *</type>
      <name>method_allocate_info_block</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>9dbebe9d9e18eb32cc37b67be04300cc</anchor>
      <arglist>(Method_Handle method, JIT_Handle j, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Byte *</type>
      <name>method_get_code_block_addr_jit</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>eed63d9e877a754daa97beb6d14b4ad9</anchor>
      <arglist>(Method_Handle method, JIT_Handle j)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_get_code_block_size_jit</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>8607a50da71133d793f2aba0573b8596</anchor>
      <arglist>(Method_Handle method, JIT_Handle j)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Byte *</type>
      <name>method_get_code_block_addr_jit_new</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>774c7fc9e3a148552806eecad74fb438</anchor>
      <arglist>(Method_Handle method, JIT_Handle j, int id)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_get_code_block_size_jit_new</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>600e8aa138898644a3204e9d07968da6</anchor>
      <arglist>(Method_Handle method, JIT_Handle j, int id)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Byte *</type>
      <name>method_get_info_block_jit</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>4479e4c12d82ec466b5aa8685b861991</anchor>
      <arglist>(Method_Handle method, JIT_Handle j)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_get_info_block_size_jit</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>6d32da39260daddcadcb490d1699a6f2</anchor>
      <arglist>(Method_Handle method, JIT_Handle j)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Iterator</type>
      <name>method_get_first_method_jit</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>725923c31380cc0c02f107991037cb74</anchor>
      <arglist>(JIT_Handle j)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Iterator</type>
      <name>method_get_next_method_jit</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>0782c4da19fd6eb1712ea1fafa2e1304</anchor>
      <arglist>(Method_Iterator mi)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>method_get_method_jit</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>c42f7f05e237bacd66571481ad4369b1</anchor>
      <arglist>(Method_Iterator mi)</arglist>
    </member>
    <member kind="enumeration">
      <name>CallingConvention</name>
      <anchor>6734adc5b6fb3a4ce29155c62cab4239</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CC_Vm</name>
      <anchor>6734adc5b6fb3a4ce29155c62cab42399a000c5904635df097708507c788adf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CC_Jrockit</name>
      <anchor>6734adc5b6fb3a4ce29155c62cab42396ab9893cbc07b501979b38d26f06906b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CC_Rotor</name>
      <anchor>6734adc5b6fb3a4ce29155c62cab4239d90b5b8053f7d2863e787add66457ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CC_Stdcall</name>
      <anchor>6734adc5b6fb3a4ce29155c62cab42390e9d472f07e812a26032ba0dcd1cd4dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CC_Cdecl</name>
      <anchor>6734adc5b6fb3a4ce29155c62cab4239d45765c8f9eee8362f48c10efb8b1074</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>jit_may_inline_object_synchronization</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>3838b9a36cc0176280e9069dd3cc0f64</anchor>
      <arglist>(unsigned *thread_id_register, unsigned *sync_header_offset, unsigned *sync_header_width, unsigned *lock_owner_offset, unsigned *lock_owner_width, Boolean *jit_clears_ccv)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT CallingConvention</type>
      <name>vm_managed_calling_convention</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>c3efb6e88f2b9e398c7136bb8b55f254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>Method_Iterator</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>dc8eb362645670871f2628cafab93dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_register_jit_extended_class_callback</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>9fa39e20a5f8e2166cadc2c7cfa1881e</anchor>
      <arglist>(JIT_Handle jit, Class_Handle clss, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_register_jit_overridden_method_callback</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>2250942e26c1c5e2cc97e4abc1f5d924</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_register_jit_recompiled_method_callback</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>2fae6e65e8ccebd3234259646fc08fcb</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_patch_code_block</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>18fe543e82826312a8eefb8e5e3c9b5f</anchor>
      <arglist>(Byte *code_block, Byte *new_code, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_recompile_method</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>dbc874e527427aed60d6c77b76051bad</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT JIT_Result</type>
      <name>vm_compile_method</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>0a56b7a7b40f7e9fc7d67cb19f29974f</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_get_num_handlers</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>38afea4c1f21d7097b4c1afe4ecb031f</anchor>
      <arglist>(Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_get_handler_info_full</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>e6753f73d2887788c716fdfced93fe67</anchor>
      <arglist>(Method_Handle method, unsigned handler_id, unsigned *begin_offset, unsigned *end_offset, unsigned *handler_offset, unsigned *handler_len, unsigned *filter_offset, unsigned *handler_class_index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_get_handler_info</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>921859bd2654b1cd36e49ec1725f5ff2</anchor>
      <arglist>(Method_Handle method, unsigned handler_id, unsigned *begin_offset, unsigned *end_offset, unsigned *handler_offset, unsigned *handler_class_index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_handler_has_finally</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>781ab197ca9d0c220adc706d33a8e3dd</anchor>
      <arglist>(Method_Handle method, unsigned handler_id)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_handler_has_filter</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>4d7deb8b39f1de662a68b696eeb33e7a</anchor>
      <arglist>(Method_Handle method, unsigned handler_id)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_handler_has_fault</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>fc6149a644b042f7cce80727a7cc1ca9</anchor>
      <arglist>(Method_Handle method, unsigned handler_id)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_set_num_target_handlers</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>804f5a02315492191c6b333da084b90a</anchor>
      <arglist>(Method_Handle method, JIT_Handle j, unsigned num_handlers)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_set_target_handler_info</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>7893f0babd69fb35613368918cf54a6e</anchor>
      <arglist>(Method_Handle method, JIT_Handle j, unsigned eh_number, void *start_ip, void *end_ip, void *handler_ip, Class_Handle catch_cl, Boolean exc_obj_is_dead)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>vm_resolve_class</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>6dd3608689fd9ecc61ce859d0067b13d</anchor>
      <arglist>(Compile_Handle h, Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>vm_resolve_class_new</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>0fe513f848bf94d4e83000ad4449ae78</anchor>
      <arglist>(Compile_Handle h, Class_Handle c, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Field_Handle</type>
      <name>resolve_nonstatic_field</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>ce1c9fbb82c7f43f2573638b55330b56</anchor>
      <arglist>(Compile_Handle h, Class_Handle ch, unsigned idx, unsigned putfield)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Field_Handle</type>
      <name>resolve_static_field</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>736dad3de9362f4dc08475151a21112c</anchor>
      <arglist>(Compile_Handle h, Class_Handle ch, unsigned idx, unsigned putfield)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>resolve_method</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>26d4901c2bc23ce3476a273ca11c738f</anchor>
      <arglist>(Compile_Handle h, Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>resolve_virtual_method</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>4703da3fd552d5a565e4aab3e921f4a3</anchor>
      <arglist>(Compile_Handle h, Class_Handle c, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>resolve_static_method</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>4894905345a05cd733a8c78ccc5f0547</anchor>
      <arglist>(Compile_Handle h, Class_Handle c, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>resolve_interface_method</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>2abe0f59944e9532cb7838d6465bbc2d</anchor>
      <arglist>(Compile_Handle h, Class_Handle c, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>class_get_const_string</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>4e52e79b695a29ce3671d20e9cf062da</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>class_get_const_string_intern_addr</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>b94a93d4861167bf67724a4f34b97dce</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT VM_Data_Type</type>
      <name>class_get_const_type</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>b512a8eaad7baa234fd931449c61ee7c</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>class_get_cp_entry_signature</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>b1cdba2dac18b0c89a6d1e25b20adba6</anchor>
      <arglist>(Class_Handle src_class, unsigned short cp_index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT VM_Data_Type</type>
      <name>class_get_cp_field_type</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>0fdbcbf34b368142354cbb5736218b0f</anchor>
      <arglist>(Class_Handle src_class, unsigned short cp_index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const void *</type>
      <name>class_get_const_addr</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>52a266cfc13ee2ffca6856d9116edcf8</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>method_get_native_func_addr</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>25ad03471a96553a0979300f0edf0881</anchor>
      <arglist>(Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT JIT_Handle</type>
      <name>method_get_JIT_id</name>
      <anchorfile>jit__import_8h.html</anchorfile>
      <anchor>07f25e7e353ea19b2c0a7a2730414abf</anchor>
      <arglist>(Compile_Handle h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_import_rt.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>jit__import__rt_8h</filename>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_enumerate_root_reference</name>
      <anchorfile>jit__import__rt_8h.html</anchorfile>
      <anchor>f9d46c7520689c44c66c6e7a67719366</anchor>
      <arglist>(Managed_Object_Handle *ref, Boolean is_pinned)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_enumerate_weak_root_reference</name>
      <anchorfile>jit__import__rt_8h.html</anchorfile>
      <anchor>e7d6ce9bf8f6d60346d84e8543d30428</anchor>
      <arglist>(Managed_Object_Handle *ref, Boolean is_pinned)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_enumerate_compressed_root_reference</name>
      <anchorfile>jit__import__rt_8h.html</anchorfile>
      <anchor>63f73c9f196d777888d75d816ae7fed0</anchor>
      <arglist>(uint32 *ref, Boolean is_pinned)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_enumerate_root_interior_pointer</name>
      <anchorfile>jit__import__rt_8h.html</anchorfile>
      <anchor>454313b0dabab3cab6244474faae2263</anchor>
      <arglist>(void **slot, int offset, Boolean is_pinned)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_enumerate_root_pointer</name>
      <anchorfile>jit__import__rt_8h.html</anchorfile>
      <anchor>cfcb152f5f483d9aabe369a3703685ba</anchor>
      <arglist>(void **ptr, Boolean is_pinned)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_check_if_monitor</name>
      <anchorfile>jit__import__rt_8h.html</anchorfile>
      <anchor>869a96c0d09c612cf389e302d97f6ba9</anchor>
      <arglist>(void **reference, void **base_reference, uint32 *compressed_reference, int slotOffset, Boolean pinned, int type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_intf.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>jit__intf_8h</filename>
    <member kind="typedef">
      <type>const void *</type>
      <name>Arg_List_Iterator</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>559048016c68aba1fd19ef861e9d637f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const void *</type>
      <name>Arg_List_Iter</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>75bbfd41120113c050b2ea8175f74da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Field_Handle</type>
      <name>resolve_field</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>135c38600bb4f13e48b43aba7fa00bf5</anchor>
      <arglist>(Compile_Handle h, Class_Handle c, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>resolve_nonstatic_method</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>253e0f2540d505f7faef1b9e5b4ff923</anchor>
      <arglist>(Compile_Handle h, Class_Handle c, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>resolve_special_method</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>a1e6f17b5bd3e2ab4c78fd163e72f7ac</anchor>
      <arglist>(Compile_Handle h, Class_Handle c, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>vm_instanceof_class</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>b7a6816bc1c19f0b18dd4f2d69d37910</anchor>
      <arglist>(Class *s, Class *t)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>resolve_class_new</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>135d698a6ac2ca4f6faff5d3ca8a9234</anchor>
      <arglist>(Compile_Handle h, Class_Handle c, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>resolve_class</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>3f6f47afde3c83a228dbcd76dd340495</anchor>
      <arglist>(Compile_Handle h, Class_Handle c, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_public</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>213b8887b753c599803b0fa200919940</anchor>
      <arglist>(Field_Handle f)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>field_get_flags</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>a4f7bcfb23aae4064701fd6c27e3b566</anchor>
      <arglist>(Field_Handle f)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Java_Type</type>
      <name>field_get_type</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>6d78ea5805f7d8eba65f760e393424c5</anchor>
      <arglist>(Field_Handle f)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_injected</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>28ad5dcdf404c4f43b99d2c629c41ad4</anchor>
      <arglist>(Field_Handle f)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_public</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>4c5b3ae9fbe768d5442744a3ee5589c7</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_get_max_locals</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>37f60fbd9f4fcce33d31760e446f2d03</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_get_flags</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>09c0cc47ec840c6e44afe6af85f42e64</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_uses_fastcall</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>f8dbfbc9dd6c70596f28bb9f2fc9a6e8</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_fake</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>3ea379271fb1cb1e155901113b07c275</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_number_throws</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>be71ed1d9c95d4645b3781bdcc79496a</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>method_get_throws</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>04bc292bc9ffa9d95611530e948af5f8</anchor>
      <arglist>(Method_Handle m, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Side_Effects</type>
      <name>method_get_side_effects</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>3a25bfa34c5d919dd8a35cd470fbc66a</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_set_side_effects</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>f3740b8fcde149de7273924af2007c85</anchor>
      <arglist>(Method_Handle m, Method_Side_Effects mse)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Java_Type</type>
      <name>method_get_return_type</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>fd7e7e88f8cb7b18204dcc1645081b50</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>method_get_return_type_class</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>2f8fc5d4815239292952609bfa7fca5b</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Arg_List_Iterator</type>
      <name>initialize_arg_list_iterator</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>2e0026f536cf9cfea8b96a6aaf740584</anchor>
      <arglist>(const char *descr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Arg_List_Iterator</type>
      <name>method_get_argument_list</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>3c42f16fbc3e8297d10f5f293591c5da</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Java_Type</type>
      <name>curr_arg</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>7103f7d4f7247c9488c5b36bc362eace</anchor>
      <arglist>(Arg_List_Iterator iter)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>get_curr_arg_class</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>a4a0ff967e7952125230395aeb94b930</anchor>
      <arglist>(Arg_List_Iterator iter, Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Arg_List_Iterator</type>
      <name>advance_arg_iterator</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>7cfa2e2ba926f968bb65c63857eb7530</anchor>
      <arglist>(Arg_List_Iterator iter)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_set_inline_assumption</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>23701505d31e457571ba301d96b1e9aa</anchor>
      <arglist>(Compile_Handle h, Method_Handle caller, Method_Handle callee)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_has_annotation</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>8ddb31f15254372f11e1d1a39f4fc519</anchor>
      <arglist>(Method_Handle target, Class_Handle antn_type)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_get_flags</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>fefde67be9b6ad56da3bf9ad7c3c6005</anchor>
      <arglist>(Class_Handle cl)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_number_fields</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>f8613ec1e6a99845a2d15c7d99ff1d2a</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Field_Handle</type>
      <name>class_get_field</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>5d73a5127c1b360f90f20c94b3594373</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>class_get_super_offset</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>9cdbeefbebc417b8b47ecff277008bc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Field_Handle</type>
      <name>class_get_field_by_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>6f96f3c81191d4777936eab59d2904fe</anchor>
      <arglist>(Class_Handle ch, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>class_get_method_by_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>a02fea46184646bf334a19c84c3e0dca</anchor>
      <arglist>(Class_Handle ch, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>class_get_depth</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>7ad6431da56c5dbb20b8604f2ef97c67</anchor>
      <arglist>(Class_Handle cl)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_has_non_default_finalizer</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>ad7614385a4053e6ade8dce630c744e1</anchor>
      <arglist>(Class_Handle cl)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_number_implements</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>c96f722365b05eab32944c4ef37cca94</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_get_implements</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>d721fe0034d2f9aa5e32b6e2c8a55d8e</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>class_get_source_file_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>c4958fbf1bd9edf1a973720ba700104c</anchor>
      <arglist>(Class_Handle cl)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_property_is_interface</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>8b1666de8a0873ed58b7c1c18ba40cd5</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT uint32</type>
      <name>class_get_num_array_dimensions</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>af697969172d16551bd4bd2abe97bccc</anchor>
      <arglist>(Class_Handle cl, unsigned short cpIndex)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT ClassLoaderHandle</type>
      <name>class_get_class_loader</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>445692f68f270c413b7aefede6e96c00</anchor>
      <arglist>(Class_Handle c)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>class_throw_linking_error_for_jit</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>d95a378c73c86d879653ba0c6283f84a</anchor>
      <arglist>(Class_Handle ch, unsigned cp_index, unsigned opcode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>class_throw_linking_error</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>7763a5c28a10dd9f60366d62ada04b50</anchor>
      <arglist>(Class_Handle ch, unsigned cp_index, unsigned opcode)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_load_class_by_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>af54fe2617f619360de739a66fd50a8a</anchor>
      <arglist>(const char *name, Class_Handle c)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_load_class_by_descriptor</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>ac851c61a96ec75cda7bbfe176841cbc</anchor>
      <arglist>(const char *descr, Class_Handle c)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>class_lookup_method_recursively</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>7601c1c1dcb2e8cdc3929b6ab86d726e</anchor>
      <arglist>(Class_Handle clss, const char *name, const char *descr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_cp_entry_resolved</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>471bf2e11c66990977600f1a344e542a</anchor>
      <arglist>(Compile_Handle ch, Class_Handle clazz, unsigned cp_index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_find_loaded</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>82fa50b6abf368ea1be136548c92a754</anchor>
      <arglist>(ClassLoaderHandle, const char *)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_find_class_from_loader</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>e6369ee8c9bbf1a9a3dff2756cc1488c</anchor>
      <arglist>(ClassLoaderHandle, const char *, Boolean init)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_field_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>838aa9dff99b3972e276199a32756ef2</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_field_class_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>111db47e28a66060d7c9dad5fc37d5aa</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_field_descriptor</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>455bd185f3f6ba931db9220014a17d00</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_method_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>0c8fec809608077ca164ff9ad5a860dc</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_method_class_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>4bce00560541c532d38f4ab608e10573</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_method_descriptor</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>646e9f7eaf514d8c1f2d11ffadcdb666</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_class_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>a3207254a4074b7c7c4a9f3032e7bf15</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_interface_method_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>eb779ca5eed394f2f0a69223b31addd2</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_interface_method_class_name</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>f7958895f7c1f5d250777348f35344b8</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>const_pool_get_interface_method_descriptor</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>3743248f94b58864c022a255dca6994b</anchor>
      <arglist>(Class_Handle cl, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Compile_Handle</type>
      <name>jit_get_comp_handle</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>1906dcf1ef8280ebe14ebe72b578b6df</anchor>
      <arglist>(JIT_Handle j)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>core_free</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>620ceda2839b587c5742f33f594f4e1c</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>compiled_method_load</name>
      <anchorfile>jit__intf_8h.html</anchorfile>
      <anchor>83c198da727846870ce6c952f6dfeac3</anchor>
      <arglist>(Method_Handle method, uint32 codeSize, void *codeAddr, uint32 mapLength, AddrLocation *addrLocationMap, void *compileInfo, Method_Handle outer_method)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_runtime_support.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>jit__runtime__support_8h</filename>
    <member kind="typedef">
      <type>LilCodeStub</type>
      <name>LilCodeStub</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>ba8097d59f1ba5aa8656a474d8650d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>NativeCodePtr</type>
      <name>rth_get_lil_helper</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>404beffde5cc6e69100a315085f6c15b</anchor>
      <arglist>(VM_RT_SUPPORT f)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>vm_get_rt_support_addr</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>54eafde66c08ebf6c8bb0388384b29c7</anchor>
      <arglist>(VM_RT_SUPPORT f)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>vm_get_rt_support_addr_optimized</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>44fb4f2b173c66a20e6f5967825f8ca5</anchor>
      <arglist>(VM_RT_SUPPORT f, Class_Handle c)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT LilCodeStub *</type>
      <name>vm_get_rt_support_stub</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>42905ae0072bddfadf39acbf5cbdfbab</anchor>
      <arglist>(VM_RT_SUPPORT f, Class_Handle c)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT HELPER_INTERRUPTIBILITY_KIND</type>
      <name>vm_helper_get_interruptibility_kind</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>a3159d24d6501277761909c8db983ac4</anchor>
      <arglist>(VM_RT_SUPPORT f)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT HELPER_CALLING_CONVENTION</type>
      <name>vm_helper_get_calling_convention</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>64aa41645341cd09a8ca152867942388</anchor>
      <arglist>(VM_RT_SUPPORT f)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>vm_helper_get_name</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>d3ac36d6528a67c08ecb9c42eb550514</anchor>
      <arglist>(VM_RT_SUPPORT id)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>vm_helper_get_numargs</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>36d58198ae35777750cb7b57861f1484</anchor>
      <arglist>(VM_RT_SUPPORT id)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT VM_RT_SUPPORT</type>
      <name>vm_helper_get_by_name</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>e1f8c35c12daf7058144a3e6f28fc410</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>jint</type>
      <name>helper_magic_init</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>9071ee714be8de31ac1a2fd2216e7492</anchor>
      <arglist>(Global_Env *vm_env)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jint</type>
      <name>vm_helper_register_magic_helper</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>b2055c9c3ed06bbb9f1098cf88d61377</anchor>
      <arglist>(VM_RT_SUPPORT id, const char *class_name, const char *method_name)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>vm_helper_get_magic_helper</name>
      <anchorfile>jit__runtime__support_8h.html</anchorfile>
      <anchor>2618955cca480db1be449af50d34191c</anchor>
      <arglist>(VM_RT_SUPPORT id)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_runtime_support_common.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>jit__runtime__support__common_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>STACK_ALIGN4</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>2756bcac19d28a043e7fc604c3920fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STACK_ALIGN_HALF16</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>36977cda45a9d52e16617d67617ee015</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STACK_ALIGN16</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>b5a8c1d8e401ebd0fcb8415692fd15e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MANAGED_STACK_ALIGNMENT</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>e6ee0cfd0510e98bdb260b78cefb372b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int __stdcall</type>
      <name>vm_instanceof</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>0570924543fa6ee8165980182fff039a</anchor>
      <arglist>(ManagedObject *obj, Class *c)</arglist>
    </member>
    <member kind="function">
      <type>void *__stdcall</type>
      <name>vm_rt_aastore</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>993ae9ae0b042b1850e7cf54bc559b85</anchor>
      <arglist>(Vector_Handle array, int idx, ManagedObject *elem)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>vm_aastore_test</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>70f178a0c17deb1c894b110fcdc3c761</anchor>
      <arglist>(ManagedObject *elem, Vector_Handle array)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>vm_get_interface_vtable</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>014cb47225d75331175be23d0d5b1d85</anchor>
      <arglist>(ManagedObject *obj, Class *iid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_instanceof_update_stats</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>9ade7a79b0ed5060c6fa749c24a9b7fe</anchor>
      <arglist>(ManagedObject *obj, Class *super)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_checkcast_update_stats</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>be18af1ffb841e22c4113436e5438f30</anchor>
      <arglist>(ManagedObject *obj, Class *super)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_aastore_test_update_stats</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>b1ca4d2972082930d1f62255cdc5b857</anchor>
      <arglist>(ManagedObject *elem, Vector_Handle array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_rt_class_initialize</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>02dd62e5fdce4862b90e8d197d5bd646</anchor>
      <arglist>(Class *clss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_rt_class_throw_linking_error</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>1f01772ad648dc46d97ac17d9ea3afc1</anchor>
      <arglist>(Class_Handle ch, unsigned index, unsigned opcode)</arglist>
    </member>
    <member kind="function">
      <type>ManagedObject *</type>
      <name>vm_rt_class_alloc_new_object</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>9a972e3e67dc86b57a5fe331488ea46e</anchor>
      <arglist>(Class *c)</arglist>
    </member>
    <member kind="function">
      <type>Vector_Handle</type>
      <name>vm_rt_new_vector</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>5d56111a980de1472ddee90e42b79e1a</anchor>
      <arglist>(Class *vector_class, int length)</arglist>
    </member>
    <member kind="function">
      <type>Vector_Handle</type>
      <name>vm_rt_new_vector_using_vtable_and_thread_pointer</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>8a2dedd1532bb1497c4c6b81dad57b54</anchor>
      <arglist>(int length, Allocation_Handle vector_handle, void *tp)</arglist>
    </member>
    <member kind="function">
      <type>LilCodeStub *</type>
      <name>gen_lil_typecheck_stub</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>b1d0c85e817679b46274f16b9bec89e6</anchor>
      <arglist>(bool is_checkcast)</arglist>
    </member>
    <member kind="function">
      <type>LilCodeStub *</type>
      <name>gen_lil_typecheck_stub_specialized</name>
      <anchorfile>jit__runtime__support__common_8h.html</anchorfile>
      <anchor>7cdef76d417175e0ad182df64ff4e114</anchor>
      <arglist>(bool is_checkcast, bool will_inline, Class *superclass)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jni.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>jni_8h</filename>
    <class kind="struct">JNINativeInterface_</class>
    <class kind="struct">JNIEnv_External</class>
    <class kind="struct">JavaVMOption</class>
    <class kind="struct">JavaVMInitArgs</class>
    <class kind="struct">JavaVMAttachArgs</class>
    <class kind="struct">JNIInvokeInterface_</class>
    <class kind="struct">JavaVM_External</class>
    <member kind="define">
      <type>#define</type>
      <name>JNI_VERSION_1_1</name>
      <anchorfile>jni_8h.html</anchorfile>
      <anchor>6d21e6c4854a55e7c23e4248f1ecc767</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_VERSION_1_2</name>
      <anchorfile>jni_8h.html</anchorfile>
      <anchor>a08d1ca2173568670520ccb93e9d08b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_VERSION_1_4</name>
      <anchorfile>jni_8h.html</anchorfile>
      <anchor>be07f84830613322c10a403b52896965</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_JNI_EXPORT_</name>
      <anchorfile>jni_8h.html</anchorfile>
      <anchor>2a591a82df9de64d0c981fc1019517f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>JNIIMPORT jint JNICALL</type>
      <name>JNI_GetDefaultJavaVMInitArgs</name>
      <anchorfile>jni_8h.html</anchorfile>
      <anchor>49ee30d8e5615a1ab1c7355d22523bd1</anchor>
      <arglist>(void *vm_args)</arglist>
    </member>
    <member kind="function">
      <type>JNIIMPORT jint JNICALL</type>
      <name>JNI_GetCreatedJavaVMs</name>
      <anchorfile>jni_8h.html</anchorfile>
      <anchor>b56e436c9901d31363066c5309ca524f</anchor>
      <arglist>(JavaVM **vmBuf, jsize bufLen, jsize *nVMs)</arglist>
    </member>
    <member kind="function">
      <type>JNIIMPORT jint JNICALL</type>
      <name>JNI_CreateJavaVM</name>
      <anchorfile>jni_8h.html</anchorfile>
      <anchor>ed11cce8fbad5f0184e4a50671e5019f</anchor>
      <arglist>(JavaVM **p_vm, JNIEnv **p_env, void *vm_args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jni_types.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>jni__types_8h</filename>
    <class kind="union">jvalue</class>
    <class kind="struct">JNINativeMethod</class>
    <member kind="define">
      <type>#define</type>
      <name>JNIEXPORT</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>5ef9c7c852d5e0abf2ae84d4e9c5a7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNIIMPORT</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>50975ea4a54595c67faee6bed2fb1898</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNICALL</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>75ae116b9b28eeeb6a479622e476c1ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_FALSE</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>5fd57fea84fa4636af3929a914f5731e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_TRUE</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>64617dee10abb250af2d09ff99ebe625</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_OK</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>e51e2d91aef86f0b097f07b0f7186740</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_ERR</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>69dc4907f1b6367cd4a7e640569d20c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_EDETACHED</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>30499e80605d7c600bb8f80f603b8da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_EVERSION</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>9d49707d0375d668fdbd1aa3b66a8b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_ENOMEM</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>4120050380b050d25752277f48b0de30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_EEXIST</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>811578c71a336c6166725af6cd8d40bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_EINVAL</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>0089ee092e3f0285f5d90c0859aff6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_COMMIT</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>b2697b544d5fa5fca47096d596f754bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JNI_ABORT</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>1dc6542d58a1718957bc599ff884d664</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed long long</type>
      <name>jlong</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>19ec6f776a928f383884e675cab6c957</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>jboolean</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>3e597066bbafe45e3d729fc1f4f9829f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>jbyte</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>cb5e31bb111c99042a7459568cab51bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>jchar</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>e1d44de84f1089a96983c1ffe4982405</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed short</type>
      <name>jshort</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>c6f2a2ca2d94bbbefeaaf3e45864a2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed int</type>
      <name>jint</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>f2f27436a33bc74998fbedac96fecf4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>jfloat</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>5d393cee6f500e76ac60e7e29279bf17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>jdouble</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>4dbf307878725eebfb852c2800a951fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jint</type>
      <name>jsize</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>e76ffede4acd03ec31101899cce740ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_jobject *</type>
      <name>jobject</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>0a43fa69ff4f987a8f30dfb8b61d818a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jobject</type>
      <name>jclass</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>5b236a554a9caf14a835f4e83b4c16b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jobject</type>
      <name>jstring</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>6b61b4d7ccdc1edb60f2c735f9b401c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jobject</type>
      <name>jarray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>78544f163134d629b0907abc1e63138f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jarray</type>
      <name>jobjectArray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>563317be23add0c2922e34b6983fec7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jarray</type>
      <name>jbooleanArray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>4009296a2297910b95c3457a227328e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jarray</type>
      <name>jbyteArray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>cb34823f6a2f4a76dc58fd9cf6b52ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jarray</type>
      <name>jcharArray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>511d51e9d38d61dce8c2ffbe5ecfb22d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jarray</type>
      <name>jshortArray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>324cb95947c7dd8d9670de754abba052</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jarray</type>
      <name>jintArray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>2bf7845ae665f91517ba1ea33f659701</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jarray</type>
      <name>jlongArray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>1090d6a7969eb2030190f0fde9606545</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jarray</type>
      <name>jfloatArray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>adf58d5e9c7189db4638d7e50bed3841</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jarray</type>
      <name>jdoubleArray</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>7970b87de8d49c1fe5facc1ecda5d560</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jobject</type>
      <name>jthrowable</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>890ad8298bcbec657011f49aa6a37e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jobject</type>
      <name>jweak</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>26669d38099b76c494391cc887a030f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_jfieldID *</type>
      <name>jfieldID</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>72513bd82c955054b04665c731aa662a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_jmethodID *</type>
      <name>jmethodID</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>91d8a65fefade9d27c9f749e69f37c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNINativeInterface_ *</type>
      <name>JNIEnv</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>9a1a96f890329dff47c2bd7ac239b2fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIInvokeInterface_ *</type>
      <name>JavaVM</name>
      <anchorfile>jni__types_8h.html</anchorfile>
      <anchor>03a7415c0e304495b269aea1213d84e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jthread.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>jthread_8h</filename>
    <member kind="typedef">
      <type>JVMTIThread *</type>
      <name>jvmti_thread_t</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>89812cca69532e6c15118f030a459825</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jthread_start_proc_data *</type>
      <name>jthread_start_proc_data_t</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>6ad330e462cb285d1c01f63b622dbad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VM_thread *</type>
      <name>vm_thread_t</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>1281755e1dfc14aeb55c96457c69e028</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jlong</type>
      <name>jthread_thread_init</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>89c79ef40cced3b3dd47edc91843821c</anchor>
      <arglist>(JNIEnv *jni_env, jthread java_thread, jobject weak_ref, hythread_t dead_thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_create</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>140ce27951234f6516833a9e730ec7dd</anchor>
      <arglist>(JNIEnv *jni_env, jthread thread, jthread_start_proc_data_t attrs)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_create_with_function</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>84a9d0dddc9d4e7f34ce936875f1accd</anchor>
      <arglist>(JNIEnv *jni_env, jthread thread, jthread_start_proc_data_t attrs)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_attach</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>7d734124abb689b50c73d1418da78a94</anchor>
      <arglist>(JNIEnv *jni_env, jthread thread, jboolean daemon)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_detach</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>3c3cc61433271d58739fb50df6a8507e</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_java_detach</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>4531403b052ef21cc1ca39824e641d0a</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_vm_detach</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>4e163e360d54350e993f1664afaa09e7</anchor>
      <arglist>(vm_thread_t vm_thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_yield</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>4b44e38cc4c0dcd4598d450cbf4b4034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_stop</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>ec3f2a234a70b44910bfe66c88271b07</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_exception_stop</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>78083a1d4995eb3066f26bacae3a6809</anchor>
      <arglist>(jthread thread, jobject throwable)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_sleep</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>ca0911f92561975767f4fba2b6bc0cf6</anchor>
      <arglist>(jlong millis, jint nanos)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT JNIEnv *</type>
      <name>jthread_get_JNI_env</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>d5164a5e685260a81606c65d7ff49a80</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_wait_for_all_nondaemon_threads</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>0088bb5d8d76140f239af2d747d4bf20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthread</type>
      <name>jthread_self</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>ab9bb9d284cb027cb0319369cd07ed5a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jlong</type>
      <name>jthread_get_id</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>36b754b2ebbe6fbe18ff18ae9bf8ea20</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthread</type>
      <name>jthread_get_thread</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>210a5eb75b53fb175d3ab1aea7df02a3</anchor>
      <arglist>(jlong thread_id)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthread</type>
      <name>jthread_get_java_thread</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>590a36947cb3a378b69d212b1c107516</anchor>
      <arglist>(hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_set_priority</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>32e6ec7bf839f72a0d41279ec6bef70d</anchor>
      <arglist>(jthread thread, jint priority)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jint</type>
      <name>jthread_get_priority</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>ed9e92fa8cd8d5af0d0c3fc383bd4c8e</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_set_name</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>b925b33c445f3a8cf49ae30537aad210</anchor>
      <arglist>(jthread thread, jstring name)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jstring</type>
      <name>jthread_get_name</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>dae86d1023969d4f86c1a114fbe29649</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_interrupt</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>63acf5560d239f721a4a03790ae2f2d3</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jboolean</type>
      <name>jthread_is_interrupted</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>11868f5b4a27d1c85effca6e144e2f38</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_clear_interrupted</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>c179a17aeea1c8462b29015050185235</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_monitor_init</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>24c15433a76e972fa970f06522fb0aa9</anchor>
      <arglist>(jobject mon)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_monitor_enter</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>f98bcbe11fb69721cd90d8c11f0ffcd1</anchor>
      <arglist>(jobject mon)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_monitor_try_enter</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>c0906ccce768e3128d821ae3382b9fc9</anchor>
      <arglist>(jobject mon)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_monitor_exit</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>e71f08d6050fb08d2024d8ff3ea77307</anchor>
      <arglist>(jobject mon)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_monitor_release</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>1c70a4f93826de1ba564c2025709fb2d</anchor>
      <arglist>(jobject mon)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_monitor_notify</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>87f0142df4c152a26862dae7abff0681</anchor>
      <arglist>(jobject mon)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_monitor_notify_all</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>5090db8ac06aa0d5097f08167f4be6fa</anchor>
      <arglist>(jobject mon)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_monitor_wait</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>bcdb28f5f77bba12dd33fb0be6adf620</anchor>
      <arglist>(jobject mon)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_monitor_timed_wait</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>96f0416ccd30acdd8fad35ad1bad3bb1</anchor>
      <arglist>(jobject mon, jlong millis, jint nanos)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_park</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>9d165a2e593f71809b64faf23c002694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_timed_park</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>cac3dbede16df27746d26566006d1496</anchor>
      <arglist>(jlong millis, jint nanos)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_unpark</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>aeb23ccc00de779d97d5206a070c4392</anchor>
      <arglist>(jthread thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_park_until</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>055bd1801691cacf74f27a04abbb6edf</anchor>
      <arglist>(jlong milis)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_suspend</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>d7078cb386aec2b1fb626b64a31c4656</anchor>
      <arglist>(jobject thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_suspend_all</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>6f340ff1875ecb8feb2fc3b3e85a591f</anchor>
      <arglist>(jvmtiError *results, jint count, const jobject *thread_list)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_resume</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>1e39c1108fd3d17de52eeb4aed400396</anchor>
      <arglist>(jobject thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_resume_all</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>c2bfbd9db23972ca3f72e1e1fb369ec5</anchor>
      <arglist>(jvmtiError *results, jint count, const jobject *thread_list)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_cancel_all</name>
      <anchorfile>jthread_8h.html</anchorfile>
      <anchor>73b891a7af6c0e4e3a830a25d0f559e2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jvmti.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>jvmti_8h</filename>
    <class kind="struct">ti_interface</class>
    <class kind="struct">jvmtiEnv_struct</class>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_INTERFACE_JNI</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>fa32fc30366f6cb637815c3ecfd7b9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_INTERFACE_JVMTI</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>707212120e8654f9ea547c4b192cd007</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_MASK_INTERFACE_TYPE</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>153a2ca12459dec153d82697983d2d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_MASK_MAJOR</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>4df2b8739acdb94671fa270f45a8ec01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_MASK_MINOR</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>0e2814bbf3fe38f555656c22cab66d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_MASK_MICRO</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>8d34d7dfb7d712bc4d5a535d50c02291</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_SHIFT_MAJOR</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>e7a8de081459680800299e15dde53b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_SHIFT_MINOR</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>a2a0a16cfadae3f205ff9defe7afbb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_SHIFT_MICRO</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>ffff7b9d651aabd618e674acdc101cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_MAJOR</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>00e5a8a8be47d3ca70b8365400b819b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_MINOR</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>6be6042446181482d01043b69e59e21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_MICRO</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>5e9669015584999d85405be54e148f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION_1_0</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>c389ad6fb9fd2cbb70e06d5f325f9198</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JVMTI_VERSION</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>d83d9330f917ed13e13e7c3075202573</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>jint JNICALL</type>
      <name>Agent_OnLoad</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>4243d3b6e441cad6625c133c58c74c16</anchor>
      <arglist>(JavaVM *vm, char *options, void *reserved)</arglist>
    </member>
    <member kind="function">
      <type>void JNICALL</type>
      <name>Agent_OnUnload</name>
      <anchorfile>jvmti_8h.html</anchorfile>
      <anchor>b1833cf9f3510c75b8ca21cec0d15fa1</anchor>
      <arglist>(JavaVM *vm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jvmti_support.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>jvmti__support_8h</filename>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_ti_enumerate_stack_root</name>
      <anchorfile>jvmti__support_8h.html</anchorfile>
      <anchor>22b9081e51b24550121dcf94f078cdf9</anchor>
      <arglist>(jvmtiEnv *env, void *root, Managed_Object_Handle obj, jvmtiHeapRootKind root_kind, int depth, jmethodID method, int slot)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_ti_enumerate_heap_root</name>
      <anchorfile>jvmti__support_8h.html</anchorfile>
      <anchor>ea6f382287bfb18bbf30a8daa438a0a7</anchor>
      <arglist>(jvmtiEnv *env, void *root, Managed_Object_Handle obj, jvmtiHeapRootKind root_kind)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpreter_ti_enumerate_thread</name>
      <anchorfile>jvmti__support_8h.html</anchorfile>
      <anchor>d431dc60f6c8730ba111e63181ccca4e</anchor>
      <arglist>(jvmtiEnv *env, struct VM_thread *thread)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jitted_ti_enumerate_thread</name>
      <anchorfile>jvmti__support_8h.html</anchorfile>
      <anchor>fc906dda55f8af678be9fca2e69952bf</anchor>
      <arglist>(jvmtiEnv *env, struct VM_thread *thread)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jvmti_types.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>jvmti__types_8h</filename>
    <class kind="struct">jvmtiThreadInfo</class>
    <class kind="struct">jvmtiThreadGroupInfo</class>
    <class kind="struct">jvmtiFrameInfo</class>
    <class kind="struct">jvmtiStackInfo</class>
    <class kind="struct">jvmtiMonitorUsage</class>
    <class kind="struct">jvmtiLineNumberEntry</class>
    <class kind="struct">jvmtiLocalVariableEntry</class>
    <class kind="struct">jvmtiAddrLocationMap</class>
    <class kind="struct">jvmtiEventCallbacks</class>
    <class kind="struct">jvmtiParamInfo</class>
    <class kind="struct">jvmtiExtensionFunctionInfo</class>
    <class kind="struct">jvmtiExtensionEventInfo</class>
    <class kind="struct">jvmtiCapabilities</class>
    <class kind="struct">jvmtiTimerInfo</class>
    <class kind="struct">jvmtiClassDefinition</class>
    <member kind="define">
      <type>#define</type>
      <name>TOTAL_EVENT_TYPE_NUM</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>b932153fb4f9e54aab9898a63ddb6561</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ti_interface *</type>
      <name>jvmtiEnv</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d63592016caf8ed24159cb26a3f5eab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jobject</type>
      <name>jthread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d595cedbe47f8edf5414c903a85ff443</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong</type>
      <name>jlocation</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d3f27dc8f7b05ed79a83d9feb52f0d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jobject</type>
      <name>jthreadGroup</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>c07980fc0ad6244eee9ccfeb77364d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>jrawMonitorID</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>3c7f413c031b2376272831d3b964f4f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNINativeInterface_</type>
      <name>jniNativeInterface</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>db0e696996a967a6c4b70e0b76ba6498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv void *</type>
      <name>arg</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>679bc3b2b28d8d408e759326962fd0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation</type>
      <name>location</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>eee8adf1c662aed7a16584ce441ec4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation</type>
      <name>location</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>eee8adf1c662aed7a16584ce441ec4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation</type>
      <name>location</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>eee8adf1c662aed7a16584ce441ec4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jclass</type>
      <name>field_clazz</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>5fac7e3b81bc95752eb84eabf200ba30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jclass jobject</type>
      <name>object</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>b6d45c646d07c095ac7ae2f49e87df0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jclass jobject jfieldID</type>
      <name>field</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7844707fe085633366345dc47af60e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation</type>
      <name>location</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>eee8adf1c662aed7a16584ce441ec4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jclass</type>
      <name>field_clazz</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>5fac7e3b81bc95752eb84eabf200ba30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jclass jobject</type>
      <name>object</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>b6d45c646d07c095ac7ae2f49e87df0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jclass jobject jfieldID</type>
      <name>field</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7844707fe085633366345dc47af60e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jclass jobject jfieldID char</type>
      <name>signature_type</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>605507afca85f9288f145c1f7e174b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jclass jobject jfieldID char jvalue</type>
      <name>new_value</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>fdfb76f6d6cd4f43c3b20c284d2e5da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jboolean</type>
      <name>was_popped_by_exception</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>3e6480c4b86541f9647dfe46ea7fa12e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jboolean</type>
      <name>was_popped_by_exception</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>3e6480c4b86541f9647dfe46ea7fa12e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jboolean jvalue</type>
      <name>return_value</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>06acd51c84d74bb71d4ea693dafcfe7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID void *</type>
      <name>address</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>e4fa5e625f5e5cc42dacdab6ab6cca02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID void void **</type>
      <name>new_address_ptr</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>6d747bdedd6c373cc83d1d53d3a48687</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation</type>
      <name>location</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>eee8adf1c662aed7a16584ce441ec4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jobject</type>
      <name>exception</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>092513a189d154030ea65ceb4104cdec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jobject jmethodID</type>
      <name>catch_method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>fb975adba6c85951333a486bf5ab49f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jobject jmethodID jlocation</type>
      <name>catch_location</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>ca8c1619de81ae187ab63077f00e0f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7e8963974ee55455a6c2f580a7ca0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation</type>
      <name>location</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>eee8adf1c662aed7a16584ce441ec4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jmethodID jlocation jobject</type>
      <name>exception</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>092513a189d154030ea65ceb4104cdec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jclass</type>
      <name>clazz</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>8e640b09e9ab3e5cadc670e55494599b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jclass</type>
      <name>clazz</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>8e640b09e9ab3e5cadc670e55494599b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jclass</type>
      <name>class_being_redefined</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d4cb200c60de6e0229035fd56edad877</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jclass jobject</type>
      <name>loader</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>2ba5ec5b00823558f947d7bcd3f046da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jclass jobject const char *</type>
      <name>name</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>112904babcec8052926a74c872f57c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jclass jobject const char jobject</type>
      <name>protection_domain</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>a4f70e8b9798b69160fb53a628184e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jclass jobject const char jobject jint</type>
      <name>class_data_len</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>07174ce170f79d6878c8039d526d4912</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jclass jobject const char jobject jint const unsigned char *</type>
      <name>class_data</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>5dcb049a0ba65f5153f234f7efb13a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jclass jobject const char jobject jint const unsigned char jint *</type>
      <name>new_class_data_len</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>42dbe96d302ebe58feb70ea28478f0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jclass jobject const char jobject jint const unsigned char jint unsigned char **</type>
      <name>new_class_data</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>c1a2f7e2e98081f0573222582c150c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>47006251b43c6c8cff30a59421b2c069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jmethodID jint</type>
      <name>code_size</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>45476ca2ab2c078c6d0a0402c7372a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jmethodID jint const void *</type>
      <name>code_addr</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>c4ffdf3f89c7b0c1be28ab9451d6b832</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jmethodID jint const void jint</type>
      <name>map_length</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>5bad6e8b7368147ee30b15f14be753cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jmethodID jint const void jint const jvmtiAddrLocationMap *</type>
      <name>almap</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>050d090fe5472466d6c252b6c2ff7456</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jmethodID jint const void jint const jvmtiAddrLocationMap const void *</type>
      <name>compile_info</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>03082e88eb31d2114b3094aeaea5b376</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>47006251b43c6c8cff30a59421b2c069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jmethodID const void *</type>
      <name>code_addr</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>88f11c6dce4ee2b39ae21c02b24c89b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f35794c5a3717fe860d6a053f96e29f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const char const void *</type>
      <name>address</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>fab31af2c2005ed57cefa0380aa83d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const char const void jint</type>
      <name>length</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>1ee8a4cdc2176352791e9feef77e1fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jobject</type>
      <name>object</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>bad43b055673fbd196eedca04b8237d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jobject</type>
      <name>object</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>bad43b055673fbd196eedca04b8237d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jobject</type>
      <name>object</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>bad43b055673fbd196eedca04b8237d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jobject jlong</type>
      <name>timeout</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>b0ff8fe41cbb07500fb773496c59c18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jobject</type>
      <name>object</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>bad43b055673fbd196eedca04b8237d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jobject jboolean</type>
      <name>timed_out</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>3601933fe6c063b94d21f811e2e057e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d0eb88ff0d9e405991d9c5c8400adf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread</type>
      <name>thread</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f4792ab343238a594fcb4f8250056e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jobject</type>
      <name>object</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>bad43b055673fbd196eedca04b8237d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jobject jclass</type>
      <name>object_clazz</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>266135952e16ff2966008d998a1dcfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JNIEnv jthread jobject jclass jlong</type>
      <name>size</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f9072f4faca7e91ba3b2c916e44e5c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong</type>
      <name>tag</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>8c6ddd2e476eed1989dabd98f5902bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>jvmtiEventReserved</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f5b460b31fc718840e2349280289686d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong</type>
      <name>size</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>3c2496a8286b7ed2986feb0e3944f73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong *</type>
      <name>tag_ptr</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>c08bafd9984de0e9732860d07f19c1ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong void *</type>
      <name>user_data</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>2e04a89b46c60ec87ecc091955a8911a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong</type>
      <name>class_tag</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>2a8db4f38c55b5ad00a54c89e775e4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong</type>
      <name>size</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>3d3621eb57d320cce49279c6c1d59656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong *</type>
      <name>tag_ptr</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>ffafda09a501c28d998b28658409c726</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong void *</type>
      <name>user_data</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>95438906c748d8dd564ae126a06625ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong</type>
      <name>class_tag</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>2a8db4f38c55b5ad00a54c89e775e4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong</type>
      <name>size</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>3d3621eb57d320cce49279c6c1d59656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong *</type>
      <name>tag_ptr</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>ffafda09a501c28d998b28658409c726</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong jlong</type>
      <name>thread_tag</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>befb2e7988db041a0bcc235a08366753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong jlong jint</type>
      <name>depth</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>9f024458ae4036343ea096b6bf516365</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong jlong jint jmethodID</type>
      <name>method</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>03510b7e66271c729c629f2342b44c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong jlong jint jmethodID jint</type>
      <name>slot</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>5b134fd22048f4faa269cb566e2ea447</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong jlong jint jmethodID jint void *</type>
      <name>user_data</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>2e588d06c8aceaf58a6b66e6108ef180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong</type>
      <name>class_tag</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>2a8db4f38c55b5ad00a54c89e775e4a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong</type>
      <name>size</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>3d3621eb57d320cce49279c6c1d59656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong *</type>
      <name>tag_ptr</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>ffafda09a501c28d998b28658409c726</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong jlong</type>
      <name>referrer_tag</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>7c67e86716c50b4b01cfc0ff1f0fd4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong jlong jint</type>
      <name>referrer_index</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>73b651742ebe851e23b4f66929612daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>jlong jlong jlong jlong jint void *</type>
      <name>user_data</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>f5aea359c9ef0f888bc61b174caa108b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiError</name>
      <anchor>07555e9941d09b4404723e38e5defe39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_NONE</name>
      <anchor>07555e9941d09b4404723e38e5defe39cf00583fa08cfd4312c576c486869278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_NULL_POINTER</name>
      <anchor>07555e9941d09b4404723e38e5defe39efc0127bcf240f03a2dd20cc72608705</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_OUT_OF_MEMORY</name>
      <anchor>07555e9941d09b4404723e38e5defe39144fbf3874fe197abf1458c8f22d8743</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_ACCESS_DENIED</name>
      <anchor>07555e9941d09b4404723e38e5defe39fae4b90b8f5c3c3544704bbac59ee961</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_UNATTACHED_THREAD</name>
      <anchor>07555e9941d09b4404723e38e5defe398de3000b982f3e9b129f26ce82e087b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_ENVIRONMENT</name>
      <anchor>07555e9941d09b4404723e38e5defe39d7f7893e2fac0f51992f550a4ababa91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_WRONG_PHASE</name>
      <anchor>07555e9941d09b4404723e38e5defe397fb7b57b96bf5c26dc3f9c529ffa7178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INTERNAL</name>
      <anchor>07555e9941d09b4404723e38e5defe39d1ccfa5f814f0daa949eb3dbf5eb0a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_PRIORITY</name>
      <anchor>07555e9941d09b4404723e38e5defe39fb956dd88a8d0e0c6775a5d0c4ce190c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_THREAD_NOT_SUSPENDED</name>
      <anchor>07555e9941d09b4404723e38e5defe3923438bb0cde32508131fc6f3de9a642e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_THREAD_SUSPENDED</name>
      <anchor>07555e9941d09b4404723e38e5defe3970f552ce920f74c985c7a9b80e62f947</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_THREAD_NOT_ALIVE</name>
      <anchor>07555e9941d09b4404723e38e5defe39cff92ccb7f2dd8d4377f31fd22e485aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_CLASS_NOT_PREPARED</name>
      <anchor>07555e9941d09b4404723e38e5defe39bfac22953206b31a5e690a0d620a644a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_NO_MORE_FRAMES</name>
      <anchor>07555e9941d09b4404723e38e5defe39e9ce522c3ffd490ac10a1e6cabcaf97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_OPAQUE_FRAME</name>
      <anchor>07555e9941d09b4404723e38e5defe39ca99bacc79bc57c4016b1b542b4b6fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_DUPLICATE</name>
      <anchor>07555e9941d09b4404723e38e5defe392a003aaf6d8b3d8f0c07f4325e56eb64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_NOT_FOUND</name>
      <anchor>07555e9941d09b4404723e38e5defe3907eda8f01e8caefe217b742d58a7de06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_NOT_MONITOR_OWNER</name>
      <anchor>07555e9941d09b4404723e38e5defe395ecb257a8dc0b42a0ded42e6cb12c6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INTERRUPT</name>
      <anchor>07555e9941d09b4404723e38e5defe393229827698befaa2f811f0fc8564880e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_UNMODIFIABLE_CLASS</name>
      <anchor>07555e9941d09b4404723e38e5defe39ee51d761407c612f7f87349e170da710</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_NOT_AVAILABLE</name>
      <anchor>07555e9941d09b4404723e38e5defe39584583bba64b8b8790c1570d850097de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_ABSENT_INFORMATION</name>
      <anchor>07555e9941d09b4404723e38e5defe399f1cd6cc3fa5eb310146a95531c11936</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_EVENT_TYPE</name>
      <anchor>07555e9941d09b4404723e38e5defe392975d112d4700884f9f189abba024ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_NATIVE_METHOD</name>
      <anchor>07555e9941d09b4404723e38e5defe3927c6dcefbb6d3492bc374fe308aa216a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_THREAD</name>
      <anchor>07555e9941d09b4404723e38e5defe39ce2d5b67415c5514fda6f2b8cb1d0529</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_FIELDID</name>
      <anchor>07555e9941d09b4404723e38e5defe3989aab20c085dcf7663caf5ba6e5b9f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_METHODID</name>
      <anchor>07555e9941d09b4404723e38e5defe3978ede7c4106404e1b1951f2b9deec812</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_LOCATION</name>
      <anchor>07555e9941d09b4404723e38e5defe392321e8ab2b53d8c314d3fa85d95d02fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_OBJECT</name>
      <anchor>07555e9941d09b4404723e38e5defe39ba6ee8ad3d96a5536e85f46e21933640</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_CLASS</name>
      <anchor>07555e9941d09b4404723e38e5defe39c2d0287475805e68d38d0bf67230a6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_TYPE_MISMATCH</name>
      <anchor>07555e9941d09b4404723e38e5defe39c42dfac39bc778abc9109f9d68ca0817</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_SLOT</name>
      <anchor>07555e9941d09b4404723e38e5defe3903feea7ec97c61dfef3bdeea293a288f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_MUST_POSSESS_CAPABILITY</name>
      <anchor>07555e9941d09b4404723e38e5defe39a860cf301fcb34d0bb2785e49d014d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_THREAD_GROUP</name>
      <anchor>07555e9941d09b4404723e38e5defe394b1e0b44e389fa6af8cef0c3a9b134f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_MONITOR</name>
      <anchor>07555e9941d09b4404723e38e5defe39a5bd9f39d585a279e84e157ce3dbba20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_ILLEGAL_ARGUMENT</name>
      <anchor>07555e9941d09b4404723e38e5defe3982bc65ca3cad21b02bb8f99160b25bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_TYPESTATE</name>
      <anchor>07555e9941d09b4404723e38e5defe39c185133325f7a9c26c2d8711bd354413</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_UNSUPPORTED_VERSION</name>
      <anchor>07555e9941d09b4404723e38e5defe39b741067b900f81c241f531e9f2a79f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_INVALID_CLASS_FORMAT</name>
      <anchor>07555e9941d09b4404723e38e5defe3950d4ef5e3e407a2c1615cb4c83e6a554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION</name>
      <anchor>07555e9941d09b4404723e38e5defe39b344d9b3ac32ca63b3648140bef2338a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED</name>
      <anchor>07555e9941d09b4404723e38e5defe3954dfb3abfecf8fe32223f5b906fdd6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED</name>
      <anchor>07555e9941d09b4404723e38e5defe3937fde977ee51d1ab647d31b62449647f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_FAILS_VERIFICATION</name>
      <anchor>07555e9941d09b4404723e38e5defe39bf37e1128de5932ca38e0405c1e13684</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED</name>
      <anchor>07555e9941d09b4404723e38e5defe393ab39df8e471f2451332d2ae6cebd9c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED</name>
      <anchor>07555e9941d09b4404723e38e5defe39f90f85f08b2774df5b5f93639f6d3170</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_NAMES_DONT_MATCH</name>
      <anchor>07555e9941d09b4404723e38e5defe397bce83c87c4012d557dfbe4b17d2bef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED</name>
      <anchor>07555e9941d09b4404723e38e5defe39209ce3b571f6b62c70587d4c1c9ee8a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED</name>
      <anchor>07555e9941d09b4404723e38e5defe39beccf4d487241b0821d9327d5a17bcf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_NYI</name>
      <anchor>07555e9941d09b4404723e38e5defe39b2d70182a820a9a76f5baae9235846f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_CLASS_STATUS_VERIFIED</name>
      <anchor>af105ae5beaca1dee30ae54530691fced9c475343f81544819657514c3bc8476</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_CLASS_STATUS_PREPARED</name>
      <anchor>af105ae5beaca1dee30ae54530691fcea0da1cff47a09a7a092d5fed5f2967f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_CLASS_STATUS_INITIALIZED</name>
      <anchor>af105ae5beaca1dee30ae54530691fce59680c7659a0553da4dca52a06d87e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_CLASS_STATUS_ERROR</name>
      <anchor>af105ae5beaca1dee30ae54530691fce6626793b42348e08a3b145602893917c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_CLASS_STATUS_ARRAY</name>
      <anchor>af105ae5beaca1dee30ae54530691fce1b2dd7b7b4f29763978bf910a05bc2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_CLASS_STATUS_PRIMITIVE</name>
      <anchor>af105ae5beaca1dee30ae54530691fcec3030021f1069ce1e30809a670ffdbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_ALIVE</name>
      <anchor>80155586fa275b28773c9b203f52cabac5e85b4fb2e75591fac492ff22d959c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_TERMINATED</name>
      <anchor>80155586fa275b28773c9b203f52cabaaf997b840b286a367525d6addd45678b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_RUNNABLE</name>
      <anchor>80155586fa275b28773c9b203f52caba3450990aa6eca189d7f518994ad40593</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER</name>
      <anchor>80155586fa275b28773c9b203f52cabad06e1ade6ca8dfc6ffd9ceb4d3712e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_WAITING</name>
      <anchor>80155586fa275b28773c9b203f52caba81ad2af8a62c82546320726fda775ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_WAITING_INDEFINITELY</name>
      <anchor>80155586fa275b28773c9b203f52cabaaf62504583fa9654952c230df3a20b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT</name>
      <anchor>80155586fa275b28773c9b203f52caba030ce32e89673fe431ab3f11a0e57b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_SLEEPING</name>
      <anchor>80155586fa275b28773c9b203f52cabad13778af203e5271b256dca54a16d656</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_IN_OBJECT_WAIT</name>
      <anchor>80155586fa275b28773c9b203f52caba5ae4d3cb5dcc697153d7ea927e009e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_PARKED</name>
      <anchor>80155586fa275b28773c9b203f52caba1e138786e65d2beb658d16008616cf86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_SUSPENDED</name>
      <anchor>80155586fa275b28773c9b203f52cabad0ef58703d21ad23c0fc0e3f8485249a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_INTERRUPTED</name>
      <anchor>80155586fa275b28773c9b203f52cabaa639d56347b41d52a2aa4c0a61c6f768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_IN_NATIVE</name>
      <anchor>80155586fa275b28773c9b203f52caba4ba6a4b7cc3f30a40b2abc30bd0bfe6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_VENDOR_1</name>
      <anchor>80155586fa275b28773c9b203f52caba005e9ba3c7d14e6200607b836831fbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_VENDOR_2</name>
      <anchor>80155586fa275b28773c9b203f52cabad74928d89e8eb131853f089a67cf82b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_STATE_VENDOR_3</name>
      <anchor>80155586fa275b28773c9b203f52caba3beeaa557d64edbb6d91859a81bec35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JAVA_LANG_THREAD_STATE_MASK</name>
      <anchor>6b7b47dd702d9e331586d485013fd1eaf1bb66377ec146708b4af305abefc735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JAVA_LANG_THREAD_STATE_NEW</name>
      <anchor>6b7b47dd702d9e331586d485013fd1ea6f930d8ecbf1c3370dbeae29f9a66ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED</name>
      <anchor>6b7b47dd702d9e331586d485013fd1eac0c94bbeea40bc7ea2a7e4ed7170b3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE</name>
      <anchor>6b7b47dd702d9e331586d485013fd1ea859039c35ac0c45aba2c6eb019b51364</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED</name>
      <anchor>6b7b47dd702d9e331586d485013fd1ea363e52751ebaba42ae3e436128d8dbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JAVA_LANG_THREAD_STATE_WAITING</name>
      <anchor>6b7b47dd702d9e331586d485013fd1ea1de86f32e9f25bc8bf7924db50064944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING</name>
      <anchor>6b7b47dd702d9e331586d485013fd1ea978f656a4aff34b2bb014d5110760038</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_MIN_PRIORITY</name>
      <anchor>f9bdc3014f3d54c426b6d2df10de4960c5e9238bb6196372098026899257979a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_NORM_PRIORITY</name>
      <anchor>f9bdc3014f3d54c426b6d2df10de4960cea7d04f7b122d918cab7c3c5c53d3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_THREAD_MAX_PRIORITY</name>
      <anchor>f9bdc3014f3d54c426b6d2df10de496040b884570d8c5ad9d0d67985aeacc64e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiEvent</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_MIN_EVENT_TYPE_VAL</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e6809295296f20183512b2bd6aa8d6ac9bcf7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_VM_INIT</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092bf02c74f7aa4e821356e360f1be9d1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_VM_DEATH</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e6809270b3de749c461af46b17198bfdf22f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_THREAD_START</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092ba76f64a59affbc3a113071b3a3da7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_THREAD_END</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680920484f6d73a60c68dd741eae912ded7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_CLASS_FILE_LOAD_HOOK</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680928661c32eeec4b66488825d436d1b138e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_CLASS_LOAD</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e6809235c3da84f1ad538666b9dc1fd29a2636</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_CLASS_PREPARE</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680927d17bd973abb4725a6ba6b22e5d409c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_VM_START</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092bcc8dbf8136105c7fa9da351c005b819</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_EXCEPTION</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680926e88788c351bb88738587494d232332a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_EXCEPTION_CATCH</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092d12235c6db1f28c9eaf8b0ab482daba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_SINGLE_STEP</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680927157ca18f4d4f07c0ff7307797328adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_FRAME_POP</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092aba73f6d70a07c7926afc25f82c8f871</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_BREAKPOINT</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680926b871118cf1344abbe7e225d83c2c7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_FIELD_ACCESS</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680921860351956162c0ccc504a80d69cb755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_FIELD_MODIFICATION</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e6809241934961846f33e9bf032662c85dac14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_METHOD_ENTRY</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680923c1a6d99c08b622dd617474b78d08f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_METHOD_EXIT</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092fa034d2fbcb9a72d6c87d01b69a9602a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_NATIVE_METHOD_BIND</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e6809288f1cd270a49afd38f4743cf51d64f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_COMPILED_METHOD_LOAD</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e6809203882cd431960e8cc1cbc52c98929c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_COMPILED_METHOD_UNLOAD</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092a255c88183a4bb86c7024d0b1dceca76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_DYNAMIC_CODE_GENERATED</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680924d59dae515638cd809740ebe89887e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_DATA_DUMP_REQUEST</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680928d4ec6aa1975833c5269b9e972eb94e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_DATA_RESET_REQUEST</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092f84cf94018833c137dac995520c7e110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_MONITOR_WAIT</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092e5b1d63b20e9fd17216413dacd1b8b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_MONITOR_WAITED</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092d520bcc0b7a8d6def68adb8b215b8f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_MONITOR_CONTENDED_ENTER</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680927c83de93699f59f44e149e9e5ca1698b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_MONITOR_CONTENDED_ENTERED</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680922168e77325fd5c72cffe29d590beb8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_GARBAGE_COLLECTION_START</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092baa9615f67c83c999aea04f1f16b0142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_GARBAGE_COLLECTION_FINISH</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680924ef02204fda4862e7b611792d48379d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_OBJECT_FREE</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092af027f172f9878fa70e987e6387bc1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_EVENT_VM_OBJECT_ALLOC</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e680928e14165823e55bf852c6d5237079009e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_MAX_EVENT_TYPE_VAL</name>
      <anchor>b6f7da25e4a8376f9ca7ae8f71e68092cdb4c230a83eaa549aab149a16540b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiHeapRootKind</name>
      <anchor>7b22c037fad36c6169126e5eb0f0429b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_ROOT_JNI_GLOBAL</name>
      <anchor>7b22c037fad36c6169126e5eb0f0429b2dcdd63f10d82f54f39086adfb3634f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_ROOT_SYSTEM_CLASS</name>
      <anchor>7b22c037fad36c6169126e5eb0f0429b346864e62fab07690cd580b9c6c5c516</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_ROOT_MONITOR</name>
      <anchor>7b22c037fad36c6169126e5eb0f0429b8623ac7c6b71cd90c64b897d97f46f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_ROOT_STACK_LOCAL</name>
      <anchor>7b22c037fad36c6169126e5eb0f0429bc3cbe2ff15de7f3a9165812164436db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_ROOT_JNI_LOCAL</name>
      <anchor>7b22c037fad36c6169126e5eb0f0429b1e9a9ec1da5eaf2a97b9c74b18f50ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_ROOT_THREAD</name>
      <anchor>7b22c037fad36c6169126e5eb0f0429b6237ec0b2e40d5608eaf601ec46055e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_ROOT_OTHER</name>
      <anchor>7b22c037fad36c6169126e5eb0f0429b06a19bc5f551efb79dfd31e0c02725c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiIterationControl</name>
      <anchor>452612a3fdb1ef80a51220fca72856e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ITERATION_CONTINUE</name>
      <anchor>452612a3fdb1ef80a51220fca72856e2db4f329fdb29352ca138b691af55fc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ITERATION_IGNORE</name>
      <anchor>452612a3fdb1ef80a51220fca72856e2b7bf4470708c4f8758e6e10f7355d3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ITERATION_ABORT</name>
      <anchor>452612a3fdb1ef80a51220fca72856e22da2c97893342aa3a484bbd4864467d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiObjectReferenceKind</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_REFERENCE_CLASS</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed418cf24f2d7f2b6570246da77deeb85d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_REFERENCE_FIELD</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed41f3c0626387eae0b606b62b51f697e752</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_REFERENCE_ARRAY_ELEMENT</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed41bb839c829d48ab0d08c1bd45809523ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_REFERENCE_CLASS_LOADER</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed4189c8e0a29b3ca9279afbb49aa38148e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_REFERENCE_SIGNERS</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed4138251f13fe9a33e9106a0280327dbeaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_REFERENCE_PROTECTION_DOMAIN</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed41c58fcd32c06451faead4c46545042987</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_REFERENCE_INTERFACE</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed41db668b57ff29b76604320323e0079234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_REFERENCE_STATIC_FIELD</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed41faf67679849073bd62969deb36756dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_REFERENCE_CONSTANT_POOL</name>
      <anchor>c6206eb950e5f61aef444a59ea1bed4120c9c7b9389e88ce7ecdbf2550fda687</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiHeapObjectFilter</name>
      <anchor>74cad4b069197d8ad58425ff2120ec7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_OBJECT_TAGGED</name>
      <anchor>74cad4b069197d8ad58425ff2120ec7ee3172d274571485a98427f2853f391e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_OBJECT_UNTAGGED</name>
      <anchor>74cad4b069197d8ad58425ff2120ec7ef433f2592972e4420b18d8c3ffd5b366</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_HEAP_OBJECT_EITHER</name>
      <anchor>74cad4b069197d8ad58425ff2120ec7e750cc1f724ad1f1b69bf62541c252075</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiParamKind</name>
      <anchor>73f6fd021d4bf092e9ced04d7fe9d6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_KIND_IN</name>
      <anchor>73f6fd021d4bf092e9ced04d7fe9d6f9808ea64b9b39a698a0ec4a2f4c339035</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_KIND_IN_PTR</name>
      <anchor>73f6fd021d4bf092e9ced04d7fe9d6f9c23c8e760abb840693829b15d0aa6c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_KIND_IN_BUF</name>
      <anchor>73f6fd021d4bf092e9ced04d7fe9d6f9e23f0791a941ab5b08e3735c763d4d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_KIND_ALLOC_BUF</name>
      <anchor>73f6fd021d4bf092e9ced04d7fe9d6f96f2be32ef22ca28910375dcdb06ed7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_KIND_ALLOC_ALLOC_BUF</name>
      <anchor>73f6fd021d4bf092e9ced04d7fe9d6f9d41e01227b20da8e822e71374151beaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_KIND_OUT</name>
      <anchor>73f6fd021d4bf092e9ced04d7fe9d6f9044cff55351aeefd16d15ef05362f128</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_KIND_OUT_BUF</name>
      <anchor>73f6fd021d4bf092e9ced04d7fe9d6f9e9791060e05de35186646d007c6ba710</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiParamTypes</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JBYTE</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5b7ab5b3f62b0c219336d694647da74e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JCHAR</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5be0982e6435c28b2628ddbed2fcc30bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JSHORT</name>
      <anchor>eccdd77a2bd179b6882766239a1800e56e4d0e232bab74cec553841f20068b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JINT</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5b8975cacf43c1ab3571c372840348439</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JLONG</name>
      <anchor>eccdd77a2bd179b6882766239a1800e566d0e5a79b665cbddf4b5477cfd590af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JFLOAT</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5012cf1d86aaa1b100e96f4c4a1d3f30b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JDOUBLE</name>
      <anchor>eccdd77a2bd179b6882766239a1800e56d7381690b4a57a41b2391808825adf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JBOOLEAN</name>
      <anchor>eccdd77a2bd179b6882766239a1800e55d648aaebb56756543c66edfe962eaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JOBJECT</name>
      <anchor>eccdd77a2bd179b6882766239a1800e559070c009aa9836457e3fc2396bbea21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JTHREAD</name>
      <anchor>eccdd77a2bd179b6882766239a1800e53b5e0c8cf1b19578ea0f9a98f17c394a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JCLASS</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5842905d23116a4eebe2955b5fda594ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JVALUE</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5c87297cd63d1a0cad0659385d8756fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JFIELDID</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5a6771f6740d8d9d452a3fb374abab7e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JMETHODID</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5c9c52ab4edd50b0a1897701fe949e2ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_CCHAR</name>
      <anchor>eccdd77a2bd179b6882766239a1800e569baca6bafc62ce9fc75ed50af9a19e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_CVOID</name>
      <anchor>eccdd77a2bd179b6882766239a1800e50d3fee21efe623672f7ebde6b21d7611</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TYPE_JNIENV</name>
      <anchor>eccdd77a2bd179b6882766239a1800e5da780df088e48e169abf58e6d6159f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiEventMode</name>
      <anchor>93cb84332d88b6959c9e8287add486e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_ENABLE</name>
      <anchor>93cb84332d88b6959c9e8287add486e1f46584eb548bfff6f9dcbc0579f4811d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_DISABLE</name>
      <anchor>93cb84332d88b6959c9e8287add486e152205c852c06a0d4f2418ae527b73bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiTimerKind</name>
      <anchor>f6037e69551c4a5465eb115954805449</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TIMER_USER_CPU</name>
      <anchor>f6037e69551c4a5465eb115954805449118e93f682e5c3d5fcfcbd0e51c04cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TIMER_TOTAL_CPU</name>
      <anchor>f6037e69551c4a5465eb115954805449620f959ada3ed146b452ad04ea8d5c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_TIMER_ELAPSED</name>
      <anchor>f6037e69551c4a5465eb1159548054499c00ef83a9af99a2729db269b1266019</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiPhase</name>
      <anchor>3f16edff9ced63de8e490798df9b3ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_PHASE_ONLOAD</name>
      <anchor>3f16edff9ced63de8e490798df9b3eccfbd48a6e7b2a52621ce01ceb35d4c549</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_PHASE_PRIMORDIAL</name>
      <anchor>3f16edff9ced63de8e490798df9b3eccabede932212cf0fbee997f1891cd9f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_PHASE_START</name>
      <anchor>3f16edff9ced63de8e490798df9b3eccfbbcb9d3a830bd4b3a98d4606c1fe503</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_PHASE_LIVE</name>
      <anchor>3f16edff9ced63de8e490798df9b3eccaee65c17b49e9ac9a2c7e3cbe8fbe4e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_PHASE_DEAD</name>
      <anchor>3f16edff9ced63de8e490798df9b3eccceebd5e06ce9d823b87f71f3c4053934</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiVerboseFlag</name>
      <anchor>d94d152b8d58b26a2cde2a697db820b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_VERBOSE_OTHER</name>
      <anchor>d94d152b8d58b26a2cde2a697db820b4140bd69b8b5a0128a5f10b56141a54b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_VERBOSE_GC</name>
      <anchor>d94d152b8d58b26a2cde2a697db820b4871405170d5a58cc5e01eb3253de2239</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_VERBOSE_CLASS</name>
      <anchor>d94d152b8d58b26a2cde2a697db820b4696b4bc84e1f2dcd6919e3328974fbbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_VERBOSE_JNI</name>
      <anchor>d94d152b8d58b26a2cde2a697db820b4a017468eeef4d7a12dda4f05a23df241</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>jvmtiJlocationFormat</name>
      <anchor>f3a097c07463c68b3ebbed007c646316</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JLOCATION_JVMBCI</name>
      <anchor>f3a097c07463c68b3ebbed007c646316df518ddbb30da3cb29e61345a0f6667a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JLOCATION_MACHINEPC</name>
      <anchor>f3a097c07463c68b3ebbed007c646316fd7e8667a80a094c59644c4654951809</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JVMTI_JLOCATION_OTHER</name>
      <anchor>f3a097c07463c68b3ebbed007c6463163a27c3f16d45b4fe788657cb0977660f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>void</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>4f23b7aa55db12a8c80d5b2d7a98acf4</anchor>
      <arglist>(JNICALL *jvmtiStartFunction)(jvmtiEnv *jvmti_env</arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>jvmtiError</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>d51dede1c71b080ebc2054e8c61167d7</anchor>
      <arglist>(JNICALL *jvmtiExtensionFunction)(jvmtiEnv *jvmti_env</arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>jvmtiIterationControl</name>
      <anchorfile>jvmti__types_8h.html</anchorfile>
      <anchor>cda743286d2eaa1354ccc0c5664c6554</anchor>
      <arglist>(JNICALL *jvmtiHeapObjectCallback)(jlong class_tag</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>log_macro.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>log__macro_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>EXPAND_</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>67344d1b810047432365bec27359d53d</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXPAND</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>163034f672135660e04386e0812f57cc</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_FILELINE</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>d40ca6dda0828b7062265a1d848a4948</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_HEAD</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>7761771a1fffd10f76064614895bde5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ABORT</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>588bb345837ba0129362a3da364c87a3</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_DEBUG_F</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>038bd146daaed8a66ebb4a1fdc424500</anchor>
      <arglist>(printf_args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_ASSERT</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>8fff10840307bbf63aa41ecc24d39593</anchor>
      <arglist>(assertion, message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>logger.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>logger_8h</filename>
    <class kind="struct">LogSite</class>
    <member kind="define">
      <type>#define</type>
      <name>LOG4CXX</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>43415589f2870777c32a87018dc0f32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG4CXX_STATIC</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>e3d644819245771e533158ef23be73a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_EMPTY</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>8e121a05e7befdaa1f298f3394a64f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_TIMESTAMP</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>7a78251c10dd2222872004ffee1fc812</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_FILELINE</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>573da7ddc0b908cbc5b165ee29f50628</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_CATEGORY</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>564adc43a9557425e548e04f9ab2ef8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_THREAD_ID</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>4a348e6c5444602b0a48ac75161fdf89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_LEVEL</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>5e52206741fbb2d68b445429b6b8de5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_FUNCTION</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>5bb388e06b103449d8597daa7944b25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__LOG4CXX_FUNC__</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>f2ed1fdb28766adf9a6f7647f2431439</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned</type>
      <name>HeaderFormat</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>a613094fd4649af7f1e142a671327b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogSite</type>
      <name>LogSite</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>0faaea3d31eb38cff745a31546100309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LoggingLevel</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIE</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd20658a044abed2bacbb5defa6969c269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WARN</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd74dac7ac23d5b810db6d4067f14e8676</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFO</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd748005382152808a72b1a9177d9dc806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efdcd7ffe737ad5fb21fbd7499886934910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRACE</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd7fa27e82c6c4f69434225ed81e5d151e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>CachedState</name>
      <anchor>8b859fdd95c18d7779af2d8e1836b568</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISABLED</name>
      <anchor>8b859fdd95c18d7779af2d8e1836b56840f39385238042f6ec0cbac821a19fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENABLED</name>
      <anchor>8b859fdd95c18d7779af2d8e1836b56899788d1f27bac42d0c7bac63026c5959</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchor>8b859fdd95c18d7779af2d8e1836b5686ce26a62afab55d7606ad4e92428b30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>init_log_system</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>2c966660091afce723707ae423f8f2ff</anchor>
      <arglist>(void *portLib)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>shutdown_log_system</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>1b7f65cdfbaabd1fc6f64ebae9ccc6c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_logging_level_from_file</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>177515091413ce2ecdf3a31d4ded3ed9</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>log4cxx_from_c</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>0b091db1425d51a375e3da03e669441c</anchor>
      <arglist>(const char *category, LoggingLevel level, const char *message, const char *file, const char *func, int line)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_threshold</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>85d6fd989b3b48677a6fa1e9cf06453d</anchor>
      <arglist>(const char *category, LoggingLevel level)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>4b7f9fefcef28983d13c647f2d85b1a9</anchor>
      <arglist>(const char *category, LoggingLevel level)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_warn_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>27a98fcf49833d62cce06e5f9ce9c760</anchor>
      <arglist>(const char *category)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_info_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>89ef731b5ab76d9a511af63ff076239a</anchor>
      <arglist>(const char *category)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_log_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>9b2cd5938df70a2b2bfe860f2c4df8a7</anchor>
      <arglist>(const char *category, LogSite *site)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_trace_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>4006d9d0658d7f8c6e69cbf2ecf6cae4</anchor>
      <arglist>(const char *category, LogSite *site)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_out</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>020f46cbfc0f1f27ce7049ab923a6ab7</anchor>
      <arglist>(const char *category, const char *file)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_header_format</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>fecf133b432ad070ecae5990a99be2e4</anchor>
      <arglist>(const char *category, HeaderFormat format)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_thread_specific_out</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>40a47f7adf2974ffc3be9798f0f8450c</anchor>
      <arglist>(const char *category, const char *pattern)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>log_printf</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>b43c0e0aacfca0d20ca41f68bed4c568</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loggerstring.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>loggerstring_8h</filename>
    <class kind="class">LoggerString</class>
  </compound>
  <compound kind="file">
    <name>mainpage.html</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>mainpage_8html</filename>
  </compound>
  <compound kind="file">
    <name>mon_enter_exit.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>mon__enter__exit_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>P_HASH_CONTENTION_BYTE</name>
      <anchorfile>mon__enter__exit_8h.html</anchorfile>
      <anchor>b07646c72cdea76d2ae6eb770b5ce967</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>P_HASH_CONTENTION</name>
      <anchorfile>mon__enter__exit_8h.html</anchorfile>
      <anchor>008bdecf36305c68fd8326cc3e46267f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HASH_MASK</name>
      <anchorfile>mon__enter__exit_8h.html</anchorfile>
      <anchor>8ba578169aad59095035a05d2f7323a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_monitor_init</name>
      <anchorfile>mon__enter__exit_8h.html</anchorfile>
      <anchor>6a4e89bc9ae80df3c4e028c097191ea1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_monitor_exit_synchronized_method</name>
      <anchorfile>mon__enter__exit_8h.html</anchorfile>
      <anchor>48f374c2f6b1e5de6ecef1c75623536d</anchor>
      <arglist>(StackIterator *si)</arglist>
    </member>
    <member kind="variable">
      <type>void(*)</type>
      <name>vm_monitor_exit</name>
      <anchorfile>mon__enter__exit_8h.html</anchorfile>
      <anchor>c397d23129cafde90d2a4f665fcf5204</anchor>
      <arglist>(ManagedObject *p_obj)</arglist>
    </member>
    <member kind="variable">
      <type>void(*)</type>
      <name>vm_monitor_enter</name>
      <anchorfile>mon__enter__exit_8h.html</anchorfile>
      <anchor>4acf803f82151e1174293f544d4965bd</anchor>
      <arglist>(ManagedObject *p_obj)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*)</type>
      <name>vm_monitor_try_enter</name>
      <anchorfile>mon__enter__exit_8h.html</anchorfile>
      <anchor>fed01764060ddd8455107a9ceacd8aae</anchor>
      <arglist>(ManagedObject *p_obj)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*)</type>
      <name>vm_monitor_try_exit</name>
      <anchorfile>mon__enter__exit_8h.html</anchorfile>
      <anchor>a0d98fa0edc827c39374dee2c0e172aa</anchor>
      <arglist>(ManagedObject *p_obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>platform_core_natives.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>platform__core__natives_8h</filename>
    <member kind="function">
      <type>jlong</type>
      <name>get_current_time</name>
      <anchorfile>platform__core__natives_8h.html</anchorfile>
      <anchor>12656eaf1b6b63bd96ce569214589322</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>win/include/platform_lowlevel.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/src/util/win/include/</path>
    <filename>win_2include_2platform__lowlevel_8h</filename>
    <class kind="struct">timespec</class>
    <member kind="function">
      <type>void</type>
      <name>disable_assert_dialogs</name>
      <anchorfile>win_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>9a6cc5fc9e7505d5e96d902880754bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug_break</name>
      <anchorfile>win_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>736a83614247147ed4c43459013b3a81</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>linux/include/platform_lowlevel.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/src/util/linux/include/</path>
    <filename>linux_2include_2platform__lowlevel_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>__fastcall</name>
      <anchorfile>linux_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>1d606e5c51fb29814027e012057397bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__stdcall</name>
      <anchorfile>linux_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>d16f14718feefaa629b3b7601ac9fdeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__cdecl</name>
      <anchorfile>linux_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>238347d7669f8f1e9c83bfe63a2730c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>dllexport</name>
      <anchorfile>linux_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>f241d00f78195ece6ef34d97bb5c48f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__declspec</name>
      <anchorfile>linux_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>c19f29be3c4e16fe150a401f61e6f2bd</anchor>
      <arglist>(junk)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MAX_PATH</name>
      <anchorfile>linux_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>865dced746336a2d6ae9141287c4ebf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable_assert_dialogs</name>
      <anchorfile>linux_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>9a6cc5fc9e7505d5e96d902880754bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>debug_break</name>
      <anchorfile>linux_2include_2platform__lowlevel_8h.html</anchorfile>
      <anchor>736a83614247147ed4c43459013b3a81</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_atomic.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__atomic_8h</filename>
    <member kind="function">
      <type>uint8</type>
      <name>port_atomic_cas8</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g941cfffcd1e971148662961796a1f839</anchor>
      <arglist>(volatile uint8 *data, uint8 value, uint8 comp)</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>port_atomic_cas16</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g9e8b90f60b8ae1b6aad2ff3962ec39e1</anchor>
      <arglist>(volatile uint16 *data, uint16 value, uint16 comp)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>port_atomic_cas64</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g50b6ef72dface8d7859e962a1c74367d</anchor>
      <arglist>(volatile uint64 *data, uint64 value, uint64 comp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_disasm.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__disasm_8h</filename>
    <class kind="struct">port_disasm_info_t</class>
    <member kind="typedef">
      <type>port_disassembler_t</type>
      <name>port_disassembler_t</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g5b81a44efbd5922849476295a8d4e746</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_initialize</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g06617e0dd0b21ae55d22cb97f9ac2f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disassembler_create</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>geafeb39d349c5d33d1131c107c37b625</anchor>
      <arglist>(port_disassembler_t **disassembler, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_set_info</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>gdd6038b8f95203f37914da956e78a8c5</anchor>
      <arglist>(port_disassembler_t *disassembler, const port_disasm_info_t new_info, port_disasm_info_t *old_info)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g49acc41688c10bff0f32c202dfc882b9</anchor>
      <arglist>(port_disassembler_t *disassembler, const char *code, unsigned int len, char **disasm_code)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_to_file</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g4b6cb4e97770e794788ae9fa1e40ab08</anchor>
      <arglist>(port_disassembler_t *disassembler, const char *code, unsigned int len, apr_file_t *thefile)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_dso.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__dso_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_NAME</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g494994af9d0767203152c4979822eefe</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_NAME</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g494994af9d0767203152c4979822eefe</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_DEFAULT</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>ge52e7091a760ed4e19a7ca60ea0e62b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_BIND_NOW</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>gcf9f2abb9a0f908a0abb59a643edc09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_BIND_DEFER</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>g38638cb6f349ff76fedc6be47ac8b0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_dso_load_ex</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>gb53904c60696ae1e8e52c3ffb7883158</anchor>
      <arglist>(apr_dso_handle_t **handle, const char *path, uint32 mode, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_dso_search_path</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g2868fb11259c86b6382de79e24a0dcff</anchor>
      <arglist>(char **path, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_dso_name_decorate</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g7be6591f776daa83a35c79b95ad479f4</anchor>
      <arglist>(const char *dl_name, apr_pool_t *pool)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_filepath.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__filepath_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_FILE_SEPARATOR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>gdeb85c9fa182d8b39774ec7714f5117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_PATH_SEPARATOR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>g0c373112a3b035709ffa56e8ef1d98a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_FILE_SEPARATOR_STR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>gac356bd16f39e4e78b78a78bcdfd9f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_PATH_SEPARATOR_STR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>g4cde5dee0cfce3caaedc697508cbb48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_filepath_merge</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>g3fdf0466e120b4b0183f47106ec51800</anchor>
      <arglist>(const char *root, const char *trail, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_filepath_canonical</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>gb8f8589a36220daa16b1fbbc50ee7c2f</anchor>
      <arglist>(const char *original, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>port_filepath_basename</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>g71c48a50c516f9ca3bfd1a7166784239</anchor>
      <arglist>(const char *filepath)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_general.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__general_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>port__general_8h.html</anchorfile>
      <anchor>070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_INLINE</name>
      <anchorfile>port__general_8h.html</anchorfile>
      <anchor>82c1124472d86de3ec4e20b6c126f49e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_malloc.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__malloc_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>STD_FREE</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>34a8e99843523537b92d06e5528b92a1</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STD_MALLOC</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>72d2db4a27f1ec4afcc72a172132492e</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STD_CALLOC</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>59d0ce5f181dfedb338d6f23fa8e1d84</anchor>
      <arglist>(n, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STD_REALLOC</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>31f73c514abecf7169791b15c7db7384</anchor>
      <arglist>(p, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STD_ALLOCA</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>18084a477b532fcb5a75bdbcefebc937</anchor>
      <arglist>(s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_sysinfo.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__sysinfo_8h</filename>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_executable_name</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>gbf29baa2b14b792c793a8418906bf2be</anchor>
      <arglist>(char **self_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>port_CPUs_number</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>ge845f74bed93bc4378ab6223abc6bf5d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>port_CPU_architecture</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g8cdc34507ae264aa806fa46cb814945c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_OS_name_version</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g13f1fe88293cfbf66ebcb6e134896402</anchor>
      <arglist>(char **os_name, char **os_ver, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_name</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g3b3dce0566b898b6fd22da65cc3da66c</anchor>
      <arglist>(char **account, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_home</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g789402dcd90a60fbbe7856c7fca4ace2</anchor>
      <arglist>(char **path, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_timezone</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>gf75a5e588d51125f01bc3c2695b1a11f</anchor>
      <arglist>(char **tzname, apr_pool_t *pool)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_timer.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__timer_8h</filename>
    <member kind="typedef">
      <type>apr_int64_t</type>
      <name>apr_nanotimer_t</name>
      <anchorfile>group__port__timer.html</anchorfile>
      <anchor>g5a03080da8c2935da765c8cdd20e4ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_nanotimer_t</type>
      <name>port_nanotimer</name>
      <anchorfile>group__port__timer.html</anchorfile>
      <anchor>gc78f2e7570c33a0df57273acfb609b37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_vmem.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__vmem_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_READ</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>ga89c82eee1fbb767125433776697636a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_WRITE</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>g3bf9ff35a7792f612d723ac29251a78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_EXECUTE</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>g9e6b636380ddb2a72de12373b69290ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_PAGESIZE_DEFAULT</name>
      <anchorfile>group__vmem__size.html</anchorfile>
      <anchor>gae1cf2fd6b48f1f399f164c23463fd32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_PAGESIZE_LARGE</name>
      <anchorfile>group__vmem__size.html</anchorfile>
      <anchor>g8d58b9abcfb54f89e9be3ddacb6cc8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>port_vmem_t</type>
      <name>port_vmem_t</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g406a1016dba358a477cd8add47b3ea56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_reserve</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ga44a5e01f82bbdf4142e56ee353b34cf</anchor>
      <arglist>(port_vmem_t **block, void **address, size_t amount, unsigned int protectionMode, size_t pageSize, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_commit</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gc8ff5428b03833e20bbe6e0d0f79c091</anchor>
      <arglist>(void **address, size_t amount, port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_decommit</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>geec5499227a84b13446adac939b775b1</anchor>
      <arglist>(void *address, size_t amount, port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_release</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ge97828bd44c4308570dadbdaba3133d2</anchor>
      <arglist>(port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>size_t *</type>
      <name>port_vmem_page_sizes</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g2845c66eac23bc855bddbde7db21eeab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_used_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g127c64f43ede7ec28663ac8d412ae28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_committed_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ge41b337073785600e419c99f4da4639a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_reserved_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gbc9cc5f9f74c35c76495790a49b15ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_max_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g74cacc02a730f5cbd6b01100cb08e0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_allocate</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gbccc9dfca3122a8ca84427a8e90a4d5e</anchor>
      <arglist>(void **addr, size_t size, unsigned int mode)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_free</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g09acf5460bd4f9082385f445ddb99b8c</anchor>
      <arglist>(void *addr, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>slot.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>slot_8h</filename>
    <class kind="class">Slot</class>
  </compound>
  <compound kind="file">
    <name>stack_trace.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>stack__trace_8h</filename>
    <class kind="struct">StackTraceFrame</class>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>st_get_depth</name>
      <anchorfile>stack__trace_8h.html</anchorfile>
      <anchor>d1d3f801cfee1c2e4a171a616da6a549</anchor>
      <arglist>(VM_thread *p_vmthread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT bool</type>
      <name>st_get_frame</name>
      <anchorfile>stack__trace_8h.html</anchorfile>
      <anchor>d2ea5b0b498fac477086e99209ab56f5</anchor>
      <arglist>(unsigned depth, StackTraceFrame *stf)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT StackTraceFrame *</type>
      <name>st_alloc_frames</name>
      <anchorfile>stack__trace_8h.html</anchorfile>
      <anchor>4fb352de4d4d6030b467a523772552c3</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>st_get_trace</name>
      <anchorfile>stack__trace_8h.html</anchorfile>
      <anchor>1dc46ea8ffe2eb02c702065a8193f379</anchor>
      <arglist>(VM_thread *p_vmthread, unsigned *depth, StackTraceFrame **stfs)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>get_file_and_line</name>
      <anchorfile>stack__trace_8h.html</anchorfile>
      <anchor>631873bd6a86df56581b1f5739140a99</anchor>
      <arglist>(Method_Handle method, void *ip, bool is_ip_past, int depth, const char **file, int *line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>st_print_frame</name>
      <anchorfile>stack__trace_8h.html</anchorfile>
      <anchor>545ab98c0e8f4cff420c7b93eadee8b6</anchor>
      <arglist>(ExpandableMemBlock *buf, StackTraceFrame *stf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>st_print_all</name>
      <anchorfile>stack__trace_8h.html</anchorfile>
      <anchor>29de491273abd10f6925df4ac443733a</anchor>
      <arglist>(FILE *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>st_print</name>
      <anchorfile>stack__trace_8h.html</anchorfile>
      <anchor>94a50fbe53693f1071fa6fefa48e1db0</anchor>
      <arglist>(FILE *f, hythread_t thread)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>st_print</name>
      <anchorfile>stack__trace_8h.html</anchorfile>
      <anchor>aebdde719f2ae74c6001d091ac9920ab</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>thread_generic.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>thread__generic_8h</filename>
    <member kind="function">
      <type>VMEXPORT vm_thread_t</type>
      <name>jthread_get_vm_thread_ptr_safe</name>
      <anchorfile>thread__generic_8h.html</anchorfile>
      <anchor>ca9266b1f1d3956312b16e72aa7892e3</anchor>
      <arglist>(jobject thread_obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>thread_helpers.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>thread__helpers_8h</filename>
    <member kind="typedef">
      <type>void *</type>
      <name>fast_tls_func</name>
      <anchorfile>thread__helpers_8h.html</anchorfile>
      <anchor>7567959a1143a5acbb1de6ea9eb28025</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fast_tls_func *</type>
      <name>get_tls_helper</name>
      <anchorfile>thread__helpers_8h.html</anchorfile>
      <anchor>c1da4ea4570f459d9fa8ce515feb3185</anchor>
      <arglist>(hythread_tls_key_t key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>thread_manager.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>thread__manager_8h</filename>
    <class kind="struct">JVMTIThread</class>
    <class kind="struct">VM_thread</class>
    <class kind="struct">jthread_start_proc_data</class>
    <member kind="define">
      <type>#define</type>
      <name>GC_BYTES_IN_THREAD_LOCAL</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>26d65de563bcdcfd4a7f0dc8b9cda73d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CONVERT_ERROR</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>bc59b3c0a479d0686ec18cb8d344e6ea</anchor>
      <arglist>(stat)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_JVMTI_MAX_BUFFER_SIZE</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>66cfb95ed6110761da6dcc26414a20b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TM_INITIAL_OWNED_MONITOR_SIZE</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>6744bfa68b14d93373e325bb2645016f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jint</type>
      <name>vm_attach</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>69e9ab9b4d0647fc39e57473e04b64e6</anchor>
      <arglist>(JavaVM *java_vm, JNIEnv **p_jni_env)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jint</type>
      <name>vm_detach</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>e6c3081d97e2035ab7a450446d85ee9c</anchor>
      <arglist>(jobject java_thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>jthread_set_tm_data</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>0ee41b485ff077f35910a77f38d5c9ca</anchor>
      <arglist>(jobject thread, void *data_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>jthread_get_tm_data</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>ac8eee322b2f7f1f08f87b8fdb618bc4</anchor>
      <arglist>(jobject thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>vm_objects_are_equal</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>b02f3fa849f19d3d60e7a317c00282de</anchor>
      <arglist>(jobject obj1, jobject obj2)</arglist>
    </member>
    <member kind="function">
      <type>hy_inline vm_thread_t</type>
      <name>jthread_self_vm_thread</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>af5a8ec77ae36ce3be56abf1f52cc4ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>hy_inline vm_thread_t</type>
      <name>jthread_get_vm_thread</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>3c546272b7c4fa432ed0f35e9337d7bb</anchor>
      <arglist>(hythread_t native)</arglist>
    </member>
    <member kind="function">
      <type>hy_inline vm_thread_t</type>
      <name>jthread_self_vm_thread_unsafe</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>e6e336facd3a35f6703e1c6330dd1ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>hy_inline vm_thread_t</type>
      <name>jthread_get_vm_thread_unsafe</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>c113f6bad5ef013b4d156b02086da719</anchor>
      <arglist>(hythread_t native)</arglist>
    </member>
    <member kind="function">
      <type>hy_inline hythread_t</type>
      <name>jthread_get_native_thread</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>5b28b4f1bf1a7585634860ac62e17bfc</anchor>
      <arglist>(jobject java_thread)</arglist>
    </member>
    <member kind="function">
      <type>hy_inline vm_thread_t</type>
      <name>jthread_get_vm_thread_from_java</name>
      <anchorfile>thread__manager_8h.html</anchorfile>
      <anchor>aff9cd2d8bb97059ad684b016fe3fbac</anchor>
      <arglist>(jobject java_thread)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ti_thread.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>ti__thread_8h</filename>
    <class kind="struct">JVMTILocalStorage</class>
    <member kind="typedef">
      <type>HyThread *</type>
      <name>jthread_iterator_t</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>c3254b777f2acde6a013980829b21d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT JVMTILocalStorage *</type>
      <name>jthread_get_jvmti_local_storage</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>1ee80d5b6efb57a7228e406524b9926f</anchor>
      <arglist>(jthread java_thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_jvmti_state</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>53c9305179c6293df4ee9b691ded23e1</anchor>
      <arglist>(jthread thread, jint *thread_state)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_all_threads</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>764673972d4d08e5aeea30f5d07af64d</anchor>
      <arglist>(jthread **threads, jint *count)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_deadlocked_threads</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>52653b610056a8a317909702f4a9fc89</anchor>
      <arglist>(jthread *thread_list, jint thread_count, jthread **dead_list, jint *dead_count)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_thread_count</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>0fb7376dbf95679027f499929d5552e8</anchor>
      <arglist>(jint *count)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_blocked_count</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>d625579dcd3092f9931f00215eaa60f4</anchor>
      <arglist>(jint *count)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_waited_count</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>d80a0abba7b82fe203e609c4cd9c4ddc</anchor>
      <arglist>(jint *count)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_total_started_thread_count</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>04ff263fb1fa5851ed12a6cab2e312f2</anchor>
      <arglist>(jint *count)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_contended_monitor</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>bf5deab405db67f3fe904af97da8bd38</anchor>
      <arglist>(jthread thread, jobject *monitor)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_wait_monitor</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>4fb71c208849c9e4ef14d03e5f324e54</anchor>
      <arglist>(jthread thread, jobject *monitor)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jboolean</type>
      <name>jthread_holds_lock</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>5724d290a19ef213f49cda2ca11d99dc</anchor>
      <arglist>(jthread thread, jobject monitor)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_lock_owner</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>dcede5d3cc408abd9d4cf66c89f930f0</anchor>
      <arglist>(jobject monitor, jthread *lock_owner)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_lock_recursion</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>153f7cc4a18957f7c536412b02e4d06f</anchor>
      <arglist>(jobject monitor, jthread lock_owner)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_owned_monitors</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>402ed9c263a114621ce397a1155f9e5b</anchor>
      <arglist>(jthread thread, jint *mon_count_ptr, jobject **monitors)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jboolean</type>
      <name>jthread_is_thread_contention_monitoring_enabled</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>a78b858a12cb8c9665c124eae8f96015</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jboolean</type>
      <name>jthread_is_thread_contention_monitoring_supported</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>a43fe965f744e365a06d342434e62178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>jthread_set_thread_contention_monitoring_enabled</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>b688d2e941e97f546683c9d1197aadb7</anchor>
      <arglist>(jboolean flag)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_thread_cpu_time</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>4887e352a1d8a1d8ec08c60c8123b0c4</anchor>
      <arglist>(jthread thread, jlong *nanos_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_thread_user_cpu_time</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>46d1f7bc5b1350f67630e8c473648c80</anchor>
      <arglist>(jthread thread, jlong *nanos_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_thread_blocked_time</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>59fe0f2cb86ae0e93174b8c9c63bfd11</anchor>
      <arglist>(jthread thread, jlong *nanos_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_thread_waited_time</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>7b0eeb6296dd7d6d51bbeb8617128976</anchor>
      <arglist>(jthread thread, jlong *nanos_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_thread_cpu_timer_info</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>9127d915cc70fffe81968ffcbc75f862</anchor>
      <arglist>(jvmtiTimerInfo *info_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jlong</type>
      <name>jthread_get_thread_blocked_times_count</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>bd8c0bb432d0cca6a6a65eb039c8e227</anchor>
      <arglist>(jthread java_thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jlong</type>
      <name>jthread_get_thread_waited_times_count</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>5a4e190bce0084a9450bd1b090868616</anchor>
      <arglist>(jthread java_thread)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jboolean</type>
      <name>jthread_is_current_thread_cpu_time_supported</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>ac2979da6fbc4a6843ea5f4abc2c18eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jboolean</type>
      <name>jthread_is_thread_cpu_time_enabled</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>6bfb1ff19dfc4494fbcd15e9d8f4f1d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jboolean</type>
      <name>jthread_is_thread_cpu_time_supported</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>7f4d37b7864a233339c580f15b1135af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>jthread_set_thread_cpu_time_enabled</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>9c433ee60ce37f230877bab39b91de23</anchor>
      <arglist>(jboolean flag)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_reset_peak_thread_count</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>b7bc0ff2c09aa89746beff93a67e72a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_get_peak_thread_count</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>a8000fcb0bdf3e01e1795f0efaa926a9</anchor>
      <arglist>(jint *threads_count_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_raw_monitor_create</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>f0372795b2968a98b504f54f3cd93a14</anchor>
      <arglist>(jrawMonitorID *mon_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_raw_monitor_destroy</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>90838fac4d53a5d3a27f5a7b05132700</anchor>
      <arglist>(jrawMonitorID mon_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_raw_monitor_enter</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>58620c86b8c853119499fab6735664ae</anchor>
      <arglist>(jrawMonitorID mon_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_raw_monitor_try_enter</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>001c7efd91cf9324e1e2812766a24fcf</anchor>
      <arglist>(jrawMonitorID mon_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_raw_monitor_exit</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>3acde0eafd8f56f94573a080b4379602</anchor>
      <arglist>(jrawMonitorID mon_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_raw_monitor_notify</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>428990d6e61ba0eaaf9544cd0d220936</anchor>
      <arglist>(jrawMonitorID mon_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_raw_monitor_notify_all</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>f4a1efd2519d8f1dd0997971e48f762c</anchor>
      <arglist>(jrawMonitorID mon_ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_raw_monitor_wait</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>be2bcc4a16b526aa1b7da69c0f5b6176</anchor>
      <arglist>(jrawMonitorID mon_ptr, I_64 millis)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthread_iterator_t</type>
      <name>jthread_iterator_create</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>06813ab954bb9b5d3ec3ca2531da4541</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT jthread</type>
      <name>jthread_iterator_next</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>30a4bdc7522b0946e2c2dcc33821eeee</anchor>
      <arglist>(jthread_iterator_t *it)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_iterator_reset</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>37bc88fe3b0b5d066db4c36a5602c4aa</anchor>
      <arglist>(jthread_iterator_t *it)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_iterator_size</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>dc4de4546035c8709ab887932ab37519</anchor>
      <arglist>(jthread_iterator_t iterator)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT IDATA</type>
      <name>jthread_iterator_release</name>
      <anchorfile>ti__thread_8h.html</anchorfile>
      <anchor>3fe949140c26270b4a065328fc1031f4</anchor>
      <arglist>(jthread_iterator_t *it)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>types_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>Java_Type</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>cc175bcce0c0a81350453a2f7c540b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_BYTE</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>b7fe0d6cddb875c4ed259a1c957c570d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_CHAR</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>4d9872ba6eaf9c160559c1ec5473a493</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_DOUBLE</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>c73f56a281278e73d1d6eff457ebbac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_FLOAT</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>4e5f5eb73e409dd0c9c673d30002cb9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_INT</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>45a8047f5f9b8b012f9d1d6d3f983967</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_LONG</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>40fba8eabd0e3d6cbee7c4e0ff14f44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_SHORT</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>5ee5e3c890a508aa97d3354b6f3419a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_BOOLEAN</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>ef62f0418ab533c0cb18d80f159bad3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_CLASS</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>78070fa9bb17b27c420e709180cdedf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_ARRAY</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>279b1a95667dbfc635e2420ed269d72e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_VOID</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>4ac0366969ab067c31fd8b0791f7a00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_STRING</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>ea2249aec10e2c2932c0408c257af05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_INVALID</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>7f6842cc1690572a1546de9476efcc0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JAVA_TYPE_END</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>ab8ded45451a18b30865aacd0774b5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Class *</type>
      <name>Class_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>83cc260118f8b8dddd5c842d11f93502</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTable *</type>
      <name>VTable_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>49b27fab734c0e43e16d46bffa082e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field *</type>
      <name>Field_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>1fed5dd42581ac1f6b9f4a54a2edfaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Method *</type>
      <name>Method_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>66381b1c7f38273ba98e3c43f2ddf041</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Method_Signature *</type>
      <name>Method_Signature_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>c6a360e926936ba5fef78c41003e1c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeDesc *</type>
      <name>Type_Info_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>05bee28301aadad7fb03d80cf1ed07a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POINTER_SIZE_INT</type>
      <name>Allocation_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>d2df958921a4a27ea5068be5d7a3b7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POINTER_SIZE_INT</type>
      <name>Runtime_Type_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>db60ffd1ad7fb03d678e58950cc5b431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>NativeCodePtr</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>395a502ef63a7cc777536224e110adcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClassLoader *</type>
      <name>ClassLoaderHandle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>d6f8b174af012b88ef9b7434977fe1d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ManagedObject *</type>
      <name>ManagedPointer</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>e8e846ee1f4d78ad2d041227913e1eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ManagedObject</type>
      <name>Java_java_lang_Throwable</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>273b7a6e1d764ec5a2552b397f82a156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ManagedObject</type>
      <name>Java_java_lang_Thread</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>acfb6c80d3dfcb215272947f3faa6b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ManagedObject</type>
      <name>Java_java_io_FileInputStream</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>2d09a2da8f12d234a4d66cdb333ca489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ManagedObject</type>
      <name>Java_java_lang_String</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>8fc838a91a55184022e165bea641e8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>Vector_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>123be76de7a06413a3a19da47e67033a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>Managed_Object_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>ce9f204c38a2c82a917b9badec5a137e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>GC_Enumeration_Handle</name>
      <anchorfile>types_8h.html</anchorfile>
      <anchor>5d0315f9c316217c503812e26fdc71c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>VM_Data_Type</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_INT8</name>
      <anchor>1365e2757cbbe0e35471ce583e41021fc0391958e49dfc6ffe890a7e9501ec26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_UINT8</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f598ae2d479ce2e253d4873480fe2b0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_INT16</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f5557ab4a7da67ef3dcc268a4a0a4b8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_UINT16</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f0215067539841b5e59c24dc6250b0de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_INT32</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f59c0ee4206da1c1454a2886606ab1733</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_UINT32</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f343af50042cda6f666c8c2fb895e2308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_INT64</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f1b8246a2d3bfc387cdca73ba1d1ed2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_UINT64</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f37a4bce755c136aa37e826a5fa31019c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_INTPTR</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f1ae7edd0e7c3163242e8c96e770d5b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_UINTPTR</name>
      <anchor>1365e2757cbbe0e35471ce583e41021fef3c823b6d2cbb68e53fa11a7ee347c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_F8</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f18851f7d8d50b89e2ce2b259cb0248d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_F4</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f46771cdb1575c9f237a63fd38d51351f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_BOOLEAN</name>
      <anchor>1365e2757cbbe0e35471ce583e41021ffaa85ea8f168b74cad03afb2f98fa114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_CHAR</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f1fe1f5dd9715073a976eb5bbbf20953e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_CLASS</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f88a9f2b82d0294748f7a9edbac8c6a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_ARRAY</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f3a4b47bfd93afb36da45fa1088349217</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_VOID</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f25477d3eee1abe2f0c3da894fe8fb5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_MP</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f7c063e222192d1698d7228a336fd394e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_UP</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f07f594d956b07bce26508f46cb9c5770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_VALUE</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f2b100ead5a4e79bd9fe4707a0a6480ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_STRING</name>
      <anchor>1365e2757cbbe0e35471ce583e41021f2fa02513b55fef6ef0251c403e91e597</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_INVALID</name>
      <anchor>1365e2757cbbe0e35471ce583e41021faf69565511a968d56b3e832a509c3beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_DATA_TYPE_END</name>
      <anchor>1365e2757cbbe0e35471ce583e41021fe998593580564629569d4e684b108ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>PropertyTable</name>
      <anchor>20945f6a5a30e2d7e488ecae48f8c6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_PROPERTIES</name>
      <anchor>20945f6a5a30e2d7e488ecae48f8c6fa1563874c339f184cf1ca722ce5ee0155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JAVA_PROPERTIES</name>
      <anchor>20945f6a5a30e2d7e488ecae48f8c6fa6a2b416bbc8040dfa3ca2966fb6daf5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vm.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>vm_8h</filename>
    <class kind="struct">ChaClassIterator</class>
    <class kind="struct">ChaMethodIterator</class>
    <member kind="define">
      <type>#define</type>
      <name>O_A_H_VM_VMDIR</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>1c2db83ae24f45db4714bf69e96a91eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>get_vm_interface</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>e7fa71235b87a1a3f51df10a460c0a22</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>get_system_object_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>e05c3916d04ce05db693d2b2d4c0f034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>get_system_class_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>fd630c046619ea391362af0ec6347e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>get_system_string_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>280420927898893865d7439375f8dd4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_lookup_class_by_name_using_bootstrap_class_loader</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>d3e20101c84322082deda1fd41e5e8e5</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_property_is_final</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>8e0cff2c8329beae3f1274acc87f93b1</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_property_is_abstract</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>124b46872e9acf0cc0d79920ed2935e1</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_property_is_interface2</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>9f0317165bae9b79e7cc1b32e7dfc872</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_hint_is_exceptiontype</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>0ed00ff8480e57ef25359117c3199608</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_valuetype</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>80c84bc95da855055fb5e08bc68d514a</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_enum</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>c2308d2769d9773e4543d020cf67cdbb</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT VM_Data_Type</type>
      <name>class_get_enum_int_type</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>8555c03a1de74cf43aa026ec617085ac</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_primitive</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3a2c3a28ff2937cf8ff45120e2542784</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>class_get_name</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3783d694c54e304feec9e99da727396a</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>class_get_package_name</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3ef326216973c41d9b153ee79d686599</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_get_super_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>8b727faa7737d410e2ea5d1a0e4b853e</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT VTable_Handle</type>
      <name>class_get_vtable</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>373d247a210a4caab9aee29ada8deff3</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Allocation_Handle</type>
      <name>class_get_allocation_handle</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3abe02cd830f62c6a996d2c2f5b7c4f9</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>allocation_handle_get_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>7c6fb2cd1066858369d95fa6cd420f45</anchor>
      <arglist>(Allocation_Handle ah)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT VM_Data_Type</type>
      <name>class_get_primitive_type_of_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>b4809e481e5a45e8175c65d28757ce1e</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_get_class_of_primitive_type</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>d81e599fc6b373440d07533b48aae8cf</anchor>
      <arglist>(VM_Data_Type typ)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_array</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>fbb7cb1df11b2be4d072bd0ab562e970</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_instanceof</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>aae93158267b0f7cd8299a98394331b5</anchor>
      <arglist>(Class_Handle s, Class_Handle t)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_get_array_of_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>e32f167635f4c0d32cc88195d6c01948</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_get_array_of_unboxed</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>84329031561d759c3f4f82eb9ae9a60b</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Type_Info_Handle</type>
      <name>class_get_element_type_info</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>1e92e3d608ea3e418dc4d50923fe1447</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_initialized</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>bc624119d6c61a64450029e3562fc7dd</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_needs_initialization</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>ddcf6766135027ef2b2643b51e91f74c</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_before_field_init</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>970edf5079be7eea64e9175996f86017</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_num_instance_fields</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>4ed45026d94038cebf00aacd000b3ece</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Field_Handle</type>
      <name>class_get_instance_field</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>729237f6ae55ae0458a706d31d854cb1</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_num_instance_fields_recursive</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>a62c9bd82474ecce2405c4cbcfb60856</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Field_Handle</type>
      <name>class_get_instance_field_recursive</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>9dfae36805b93f66b71785080275792d</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_get_number_methods</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>9e32d49ce741b0bcb9e001e1c3c91ed4</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_get_fast_instanceof_flag</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>796387e217b25781f944e151f4a63e5b</anchor>
      <arglist>(Class_Handle cl)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>class_get_method</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>bb98234e80439fb00a4b840246308f97</anchor>
      <arglist>(Class_Handle ch, unsigned index)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_pinned</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>ce8cb51e9935888ede4f9b1d32bf8d23</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>class_alloc_via_classloader</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>7d3bda1c94ce828d7542687167b27480</anchor>
      <arglist>(Class_Handle ch, int32 size)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_non_ref_array</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3a84438c604e485e08a131980698bdc8</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_finalizable</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>cd27b4787353aada8f4c6d5481568810</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_get_alignment</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>ea014eb6f44773fcdbf6c8e708f1321a</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_get_alignment_unboxed</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>eb382eb32a161bbbaf6920157c04534f</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_element_size</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>cf23540daa2f6e63a154d79070f04d62</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_get_boxed_data_size</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>c6fa8d8d18413dc76ee4906c17ec0e71</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_get_unboxed_data_offset</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>bfcca8baff598916f64b65d4c746354e</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_get_array_element_size</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3cdd439496755a48b32a475e97360623</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_get_array_element_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>43cc0dee1f629c7a65733c19b273d254</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>vtable_get_super_array_offset</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>678ccd04225d61a3f4f69e9dbc329549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>vtable_get_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>553cd6fad5f8b72d45ff53e3f019e2b8</anchor>
      <arglist>(VTable_Handle vh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>vm_max_fast_instanceof_depth</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>f8f10b5d4772d1ea8ef6d50a6bf018f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_iterator_initialize</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>cb3b1a91f211f87e9d7ad8178871003d</anchor>
      <arglist>(ChaClassIterator *, Class_Handle root_class)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_iterator_get_current</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>112e03218dfaa0fbd34082cc37b5785d</anchor>
      <arglist>(ChaClassIterator *)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>class_iterator_advance</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>961861d36977a5a62855e2dd57186c39</anchor>
      <arglist>(ChaClassIterator *)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>class_number_inner_classes</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>c287c38c58288de3dca1f67e5f0e5803</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>class_is_inner_class_public</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>ea62375d263b01ef4ad15f94d57a5427</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_get_inner_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>e4b782c7fe3345a77fb639deaabfc6ce</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>class_get_declaring_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>7f9e1f9e288f07396e9c2ad012fa1c88</anchor>
      <arglist>(Class_Handle ch)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_static</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>576e6da1df5347a9300151905ddf3e0c</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Type_Info_Handle</type>
      <name>field_get_type_info_of_field_value</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>d2badf8680e17dc0bf58b5fecb346de4</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>field_get_class_of_field_value</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>7977d2a91ac12ddf6a853c0cf5ddfe3f</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>field_get_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>2ad45c5a2b82e88249efbb171150813e</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_reference</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>a72c23f992a64190058d995f8dbdc9c2</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_magic</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>35ae29e3265d1a068e3dadd4c04215c3</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_enumerable_reference</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3e4647afb03056d428c488a1353632e2</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_literal</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>9f8cb90776362ed9b7a1de7a67548ad1</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_unmanaged_static</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>e0c50cd209ac917266521038044c57a6</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>field_get_offset</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>fe660da92c80af31f787b642a54e48b9</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>field_get_address</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>93283287ccec99ba10cac85f0bda030e</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>field_get_name</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>9b300b07cbd1c9ad2e15d71fa8d024ef</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>field_get_descriptor</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>4714a9a3e293af321a7055e3fb8ffa07</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_final</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>12b6d0283bc2cf1e5c2c618f9b45d08b</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_volatile</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>d0a5db491555a34124fe1c112f2fc51e</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>field_is_private</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>7c8014018bf5b2358b6969d127466cc1</anchor>
      <arglist>(Field_Handle fh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>field_get_track_access_flag</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>25a88ec668840528d1e619ddb5d7ac12</anchor>
      <arglist>(Field_Handle field, char **address, char *mask)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>field_get_track_modification_flag</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>0495c3b312b0877b00ea2d1e624fd6f7</anchor>
      <arglist>(Field_Handle field, char **address, char *mask)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_java</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>823c4ecab43ef660dfe0bc84d35d50de</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>method_get_name</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>8a99f803534850c32f4f6bf68b32f3fd</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>method_get_descriptor</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>0ece2189effb8925008de07124cd54a7</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>method_get_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>0bfa9cd49898f612f8fc9855c6dec4fe</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_lock</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>d9ac81ed623ff2697b7e88061de9c5d8</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_unlock</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>d9e0c4abe0a6c11f492f9dfa28f39f1c</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_private</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>5ffd0c652569732159db8934b8947df4</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_static</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3c6ef4eadb5f059f10ff758af2785e12</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_final</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>e3d4360d25af7138a22a86b30addfda7</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_native</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>f5b7980cb6613c4e74c7b431d2b295fd</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_synchronized</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>5d65dba9fd12b159fe92b6d4fa6ddfbb</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_abstract</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>27d465190cfdad167635f37bec15fac2</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_strict</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>1732c7bf9268a1990110f0d6f225499d</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_overridden</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>55e7d296039fec6c3005fb000494a66f</anchor>
      <arglist>(Method_Handle m)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_no_inlining</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>9417466408fa3e2ecbcae6778d032797</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_is_require_security_object</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>697f074fe633fb3163719236c483818e</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Signature_Handle</type>
      <name>method_get_signature</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>70677b8f7cf07c05647770e02162f231</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>method_find_overridden_method</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>5ef853ad49620a1aefef75b9132311e7</anchor>
      <arglist>(Class_Handle ch, Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_iterator_initialize</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>a8f23d162c6e5a36507f8e4bcefcb306</anchor>
      <arglist>(ChaMethodIterator *, Method_Handle method, Class_Handle root_class)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Handle</type>
      <name>method_iterator_get_current</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3b2bd696014011b520793b6a0a38bd4c</anchor>
      <arglist>(const ChaMethodIterator *)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>method_iterator_advance</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>302cf46b4982113aad369e0af8655c7a</anchor>
      <arglist>(ChaMethodIterator *)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>method_sig_get_descriptor</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>8d8b8aee1e1d67a10efcfafb08d1143a</anchor>
      <arglist>(Method_Signature_Handle s)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Signature_Handle</type>
      <name>method_standalone_signature</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>f6d6e154b310db9bcbeada2b0a7937b2</anchor>
      <arglist>(Class_Handle ch, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_vars_get_number</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>397a04552e5b0bdecdab04c921072579</anchor>
      <arglist>(Method_Handle mh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Type_Info_Handle</type>
      <name>method_vars_get_type_info</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>7bddff605c784c0ab32318952f65abe2</anchor>
      <arglist>(Method_Handle mh, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_vars_is_managed_pointer</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>6e78cff6f6932e91156a145d2b0e1ac2</anchor>
      <arglist>(Method_Handle mh, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_vars_is_pinned</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>4a5de76c491f78e239568d0acb773129</anchor>
      <arglist>(Method_Handle mh, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>method_args_get_number</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>8212e3077b85cbe7102f1e9d107c672b</anchor>
      <arglist>(Method_Signature_Handle msh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_args_has_this</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>e56fd880462cb94aff60f24b9d5aa1c1</anchor>
      <arglist>(Method_Signature_Handle msh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Type_Info_Handle</type>
      <name>method_args_get_type_info</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>95f92ad6ddff6814e0385d19a1add1fc</anchor>
      <arglist>(Method_Signature_Handle msh, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_args_is_managed_pointer</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>b09adf75b34753db8f8ada7cb5623b51</anchor>
      <arglist>(Method_Signature_Handle msh, unsigned idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Type_Info_Handle</type>
      <name>method_ret_type_get_type_info</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>45313f07e76f2475cef647d44d30c48e</anchor>
      <arglist>(Method_Signature_Handle msh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>method_ret_type_is_managed_pointer</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>951eddf037ecbd47b5961a7a665eec80</anchor>
      <arglist>(Method_Signature_Handle msh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>type_info_is_reference</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>be837c89781dcda6b9505e34fbfc3dd7</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>type_info_is_unboxed</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>2ae5f1f09698a8152dc6cb263dc15ec2</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>type_info_is_primitive</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>7f6256dc26a058d6f83f12b352788727</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>type_info_is_unmanaged_pointer</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>0b186d2c1c44f306b83f2b90a394fbbf</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>type_info_is_void</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>bf4973d05a86fb5fd4606f9b185554a9</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>type_info_is_method_pointer</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>f8584ed9c7880a5b510e7309d2f5957d</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>type_info_is_vector</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>928106b6baa0854fefaaaa2b269a6a3b</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>type_info_is_general_array</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>daa547c858cf22735a82fb58c22899ae</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>type_info_get_type_name</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>97ca25e6014916159060e6d0ecf38a32</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>type_info_get_class</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>cfc7bd9eeb01be4002c906033edda57e</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Type_Info_Handle</type>
      <name>type_info_create_from_java_descriptor</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>2f58fb826594e617944884c717290d9f</anchor>
      <arglist>(ClassLoaderHandle cl, const char *typeName)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>type_info_get_class_no_exn</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>d07890138ae802f3c279b99fec48abfd</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Method_Signature_Handle</type>
      <name>type_info_get_method_sig</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>1c6072565daa536e203a8916a1c7ea26</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Type_Info_Handle</type>
      <name>type_info_get_type_info</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>a44986f81fb6e6e95c990d94763efc5e</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT VM_Data_Type</type>
      <name>type_info_get_type</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>f42622b70b3523bc915976172236b1de</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>type_info_is_resolved</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>f33cfb92fd74e7badf16976aea827593</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT uint32</type>
      <name>type_info_get_num_array_dimensions</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>e4764a236fbe9b87afe36e50c4fb143c</anchor>
      <arglist>(Type_Info_Handle tih)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>vector_length_offset</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>50007470d78f066505ebc80acadcf522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>array_length_offset</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>1a48d5eb6ee48480c866f9fae1602da9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>vector_first_element_offset</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3496b252b56be4d193042da4e8618260</anchor>
      <arglist>(VM_Data_Type element_type)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>array_first_element_offset</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>2e16a0518554d0ac45c4b65650837f93</anchor>
      <arglist>(VM_Data_Type element_type)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>vector_first_element_offset_class_handle</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>fbad0481166bab7fad3b2247e7b2a14f</anchor>
      <arglist>(Class_Handle element_type)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>array_first_element_offset_class_handle</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>2bfb6f6d450aabf6e5a6871db6e65c11</anchor>
      <arglist>(Class_Handle element_type)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>vector_first_element_offset_unboxed</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>573303b273de81b0fcd8764bef57ed8f</anchor>
      <arglist>(Class_Handle element_type)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>array_first_element_offset_unboxed</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>94333b53cb72440c0c517374af71448d</anchor>
      <arglist>(Class_Handle element_type)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int32</type>
      <name>vector_get_length</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>a4e364fc018eb5221e511ab0fbed7826</anchor>
      <arglist>(Vector_Handle vector)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Managed_Object_Handle *</type>
      <name>vector_get_element_address_ref</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>b94d88d41b5768c964d42813b8e98cb8</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>vm_vector_size</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>067f2a252d0911b8404889f04c68cc34</anchor>
      <arglist>(Class_Handle vector_class, int length)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>vm_references_are_compressed</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>6ffe6796e756b7eec71175b775da7fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>vm_heap_base_address</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>60584ceb669817eca2b52517ce73c658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>vm_heap_ceiling_address</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>fb97e32291132e6a69b4460e9cd1f5c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>vm_vtable_pointers_are_compressed</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3239835bf1c23818d709cad5e85041f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>object_get_vtable_offset</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>cca507647c9ada4e13ab829299e603f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT POINTER_SIZE_INT</type>
      <name>vm_get_vtable_base</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>18502aec83bcdd6a0f7b198b45cb5108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>vm_get_vtable_ptr_size</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>9fa3367a6cc544b8b4e73a391e95e77e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT char *</type>
      <name>method_sig_get_string</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>1a23d1956d2aa4f99721b7042222197f</anchor>
      <arglist>(Method_Signature_Handle msh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>free_string_buffer</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>5a060c364368ea0d6b27c563c90b82bc</anchor>
      <arglist>(char *buffer)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_property</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>381b2a8ede4108b3744d13e7372d0b70</anchor>
      <arglist>(const char *key, const char *value, PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT char *</type>
      <name>get_property</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>1b334224f93d894a6dcae53eab037508</anchor>
      <arglist>(const char *key, PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>destroy_property_value</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>8c0b9897ff821b8bb41bcbab77c95247</anchor>
      <arglist>(char *value)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>is_property_set</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>1c7390b5b8ec406aa085011881dbde54</anchor>
      <arglist>(const char *key, PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>unset_property</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>41a27c04098250d67d3588c03bc9163c</anchor>
      <arglist>(const char *key, PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT char **</type>
      <name>get_properties_keys</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>f712aec398f558fc886919ff824369f6</anchor>
      <arglist>(PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT char **</type>
      <name>get_properties_keys_staring_with</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>39f9d82ba693d5b85a87881dcdefbd5d</anchor>
      <arglist>(const char *prefix, PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>destroy_properties_keys</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>22d4821645395fe6e6c1f823f9cad5b4</anchor>
      <arglist>(char **keys)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>get_boolean_property</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>63f5858e59b94f63e5063a0988785ff9</anchor>
      <arglist>(const char *property, Boolean default_value, PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>get_int_property</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>eeb6adbcfe255289bd87f1a1bd991b6d</anchor>
      <arglist>(const char *property_name, int default_value, PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT size_t</type>
      <name>get_size_property</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>4604bb8b59ba1f07a522ca8a10ce9d7b</anchor>
      <arglist>(const char *property_name, size_t default_value, PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int64</type>
      <name>get_numerical_property</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>3284a642b996558802c4a600c6c36844</anchor>
      <arglist>(const char *property_name, int64 default_value, PropertyTable table_number)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT char *</type>
      <name>get_method_entry_flag_address</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>50ea33d32d70e9049c1217ab5b7d0e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT char *</type>
      <name>get_method_exit_flag_address</name>
      <anchorfile>vm_8h.html</anchorfile>
      <anchor>2f317cb9e7d8f46a37cca2ca68fc2b82</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vm_arrays.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>vm__arrays_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>HIGH_BIT_SET_MASK</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>632898926b39cda1835ea6cb401b4bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HIGH_BIT_CLEAR_MASK</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>e1246c8e4d993001c393e19670c8e01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TWO_HIGHEST_BITS_SET_MASK</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>9db671fb22e3f4502c79f68b48dc5e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ArrayCopyResult</name>
      <anchor>4c0eb8e98a485297944dc6f4aadab4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACR_Okay</name>
      <anchor>4c0eb8e98a485297944dc6f4aadab4f69abbc68b009dd3698bfaf1eac8f5e165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACR_NullPointer</name>
      <anchor>4c0eb8e98a485297944dc6f4aadab4f6b4293a5d127ee43ad85475c1be9340e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACR_TypeMismatch</name>
      <anchor>4c0eb8e98a485297944dc6f4aadab4f6f4a95bf492775da991e5fe53e251210a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACR_BadIndices</name>
      <anchor>4c0eb8e98a485297944dc6f4aadab4f65f07d3ee9ff31839ad7a575f8936da93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VTable *</type>
      <name>get_vector_vtable</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>65d1ee1e122787bf46367d4c72431193</anchor>
      <arglist>(Vector_Handle vector)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>get_vector_length</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>92be13b846a762458cbc522a10a9fd59</anchor>
      <arglist>(Vector_Handle vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_vector_length</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>78e8fea694b3002826441957747f5769</anchor>
      <arglist>(Vector_Handle vector, int32 length)</arglist>
    </member>
    <member kind="function">
      <type>int8 *</type>
      <name>get_vector_element_address_bool</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>fc3b1ae3da9498ebfaed6e86762010ca</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>int8 *</type>
      <name>get_vector_element_address_int8</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>7bb47dde35aef47c802df7784d555f3e</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>int16 *</type>
      <name>get_vector_element_address_int16</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>c9030cdd32f70a5b01604ca5a0929b82</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>uint16 *</type>
      <name>get_vector_element_address_uint16</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>1090a490e02b40a5e87d053c8eff4473</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>int32 *</type>
      <name>get_vector_element_address_int32</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>f6e2b107291c2a39b4cc96a4200dafec</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>int64 *</type>
      <name>get_vector_element_address_int64</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>08d6a4dee05dd80f5d3391c7ba2f466b</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>get_vector_element_address_f32</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>3c06a9bcbcb6e3e7c8360a7208300c71</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>get_vector_element_address_f64</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>f1afde364eb516c748551d4483267cce</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>ManagedObject **</type>
      <name>get_vector_element_address_ref</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>6d31522c8248bf8659ea7ebf2fa0bad7</anchor>
      <arglist>(Vector_Handle vector, int32 idx)</arglist>
    </member>
    <member kind="function">
      <type>ArrayCopyResult</type>
      <name>array_copy</name>
      <anchorfile>vm__arrays_8h.html</anchorfile>
      <anchor>736e3ee6f7a8de54908db755734ade8a</anchor>
      <arglist>(ManagedObject *src, int32 src_off, ManagedObject *dst, int32 dst_off, int32 count)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vm_core_types.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>vm__core__types_8h</filename>
    <member kind="typedef">
      <type>void(*)</type>
      <name>GenericFunctionPointer</name>
      <anchorfile>vm__core__types_8h.html</anchorfile>
      <anchor>2d01be9717743d2e4d1e273fa941d0d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>LilCodeStub *(*)</type>
      <name>NativeStubOverride</name>
      <anchorfile>vm__core__types_8h.html</anchorfile>
      <anchor>2c686d7ae5f1f913e9e6078c45bef501</anchor>
      <arglist>(LilCodeStub *, Method_Handle)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vm_gc.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>vm__gc_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>CL_PROP_ALIGNMENT_MASK</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>edda7780b3ce18f6451f2efdfacd471d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CL_PROP_NON_REF_ARRAY_MASK</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>d48ba6cc5e817c6fa16432a229d99cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CL_PROP_ARRAY_MASK</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>cb39b41bb40c3ffd94815f863067d0c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CL_PROP_PINNED_MASK</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>723796f94fa6391f1a36e15a720c373b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CL_PROP_FINALIZABLE_MASK</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>4cdbb68fd8131ccef85a15bca74d9e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>P_RECURSION_BYTE</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>5144df2a7ce225fb0eaa5b8e2cd4a1cd</anchor>
      <arglist>(x)</arglist>
      <docanchor file="C:/cvn_rep/source/trunk/working_vm/vm/include/open/vm_gc.h">class_properties</docanchor>
    </member>
    <member kind="enumeration">
      <name>safepoint_state</name>
      <anchor>a4a389285b71a92f76d849e2dcd0a296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nill</name>
      <anchor>a4a389285b71a92f76d849e2dcd0a296b21b2f43799060dbee42337b070fddff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>enumerate_the_universe</name>
      <anchor>a4a389285b71a92f76d849e2dcd0a296655cffff291c644f549e452b0dc855a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>java_suspend_one_thread</name>
      <anchor>a4a389285b71a92f76d849e2dcd0a2965995bf5e7e08a994d737a232ff926e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>java_debugger</name>
      <anchor>a4a389285b71a92f76d849e2dcd0a296b37feeb0b7619d7a1e9c5ef08056efa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>WeakReferenceType</name>
      <anchor>adc20873593369b76d3ce735d146362b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_REFERENCE</name>
      <anchor>adc20873593369b76d3ce735d146362bb82b48b1a7bd1b889ab48c6e3b98f393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEAK_REFERENCE</name>
      <anchor>adc20873593369b76d3ce735d146362b06ee5dc03f891f8706545455ed3ea3e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOFT_REFERENCE</name>
      <anchor>adc20873593369b76d3ce735d146362bbb00b610f2aead0c0a67aa613d05e4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PHANTOM_REFERENCE</name>
      <anchor>adc20873593369b76d3ce735d146362b319d646779f2973b064cd442b184ba7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT size_t</type>
      <name>vm_number_of_gc_bytes_in_vtable</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>c6ab34418ce91d31f42060841087ac22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT size_t</type>
      <name>vm_number_of_gc_bytes_in_thread_local</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>370669d148efcc164abf475d6975ea91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>vm_get_gc_thread_local</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>72cea5f44789bba90718e787639cb94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_gc_lock_init</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>ea3fbdd9c35e91eae468eedcd0e794e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_gc_lock_enum</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>b21a2f018f0fc3e486edb666a55ba88c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_gc_unlock_enum</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>8712d9c3f95cb5f64568f278315aaa00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_enumerate_root_set_all_threads</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>ccf54dc66dd7c3b22de92787433f0d69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_resume_threads_after</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>8075cb321c0bd36dae7e20e00f6a619f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_classloader_iterate_objects</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>972d89e24568e40dec2a4960b8e741fa</anchor>
      <arglist>(void *iterator)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT bool</type>
      <name>vm_iterate_object</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>cf098adbb77f7ca34a60612675573ed2</anchor>
      <arglist>(Managed_Object_Handle object)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_notify_live_object_class</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>906383a48d1a781ad632ccdb4b0e7109</anchor>
      <arglist>(Class_Handle)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_hint_finalize</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>2c560bb7eb5d1e8b826127132d7ba8f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT bool</type>
      <name>is_it_finalize_thread</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>eb63da2e847ba92af38238c22096af75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Boolean</type>
      <name>verify_object_header</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>e45f652c3e36d0ced304ed0b9bcf3cee</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_notify_obj_alive</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>01b2d89b1b29f7352cfc6dad56111cf6</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_reclaim_native_objs</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>bc65d24e2495b21d6abde31e2853c0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_enqueue_reference</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>5a4a3e7955a318471d6bed2003520429</anchor>
      <arglist>(Managed_Object_Handle p_obj)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_native_ref_enqueue_thread_flag</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>95899791048794b205a71564a6c6cc38</anchor>
      <arglist>(Boolean flag)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT WeakReferenceType</type>
      <name>class_is_reference</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>70b8e9b45e83bc88d8d10cedffaa1758</anchor>
      <arglist>(Class_Handle clss)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT Class_Handle</type>
      <name>vtable_get_class</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>553cd6fad5f8b72d45ff53e3f019e2b8</anchor>
      <arglist>(VTable_Handle vh)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT int</type>
      <name>class_get_referent_offset</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>028c764fd020d6c285b315ca860f3c86</anchor>
      <arglist>(Class_Handle clss)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_finalize_object</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>89b2daba8e2521dfc2a68bc3f0485349</anchor>
      <arglist>(Managed_Object_Handle p_obj)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_native_finalizer_thread_flag</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>225cca4e0d44c185a5f15812337a4b60</anchor>
      <arglist>(Boolean flag)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>vm_heavy_finalizer_block_mutator</name>
      <anchorfile>vm__gc_8h.html</anchorfile>
      <anchor>b86f0909639bdfae2e59d850a4d2a4c6</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vm_kernel_classes.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>vm__kernel__classes_8h</filename>
  </compound>
  <compound kind="file">
    <name>vm_strings.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>vm__strings_8h</filename>
    <member kind="function">
      <type>VMEXPORT Java_java_lang_String *</type>
      <name>vm_instantiate_cp_string_resolved</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>8390d9c760dd41ac35aa33aecebe8d13</anchor>
      <arglist>(String *)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_utf8_length_of_unicode</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>2eb5342eaf4ba091d5a8ebd53a680db6</anchor>
      <arglist>(const uint16 *str, unsigned unicode_length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_unicode_length_of_utf8</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>67df5f71916026b4eee605640083b7a7</anchor>
      <arglist>(const char *utf8)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_utf8_length_of_8bit</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>79878e503154c321c5b2eaa1eb1b85ad</anchor>
      <arglist>(const uint8 *chars, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack_utf8</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>4194c6f118894d2369d69d5825240312</anchor>
      <arglist>(char *utf8_string, const uint16 *unicode, unsigned unicode_length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>utf8_from_8bit</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>117b34be1adef7d8b67ac662dc742c66</anchor>
      <arglist>(char *utf8_string, const uint8 *chars, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack_utf8</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>659ca27f991b32c3ae1be55f5dce9ce4</anchor>
      <arglist>(uint16 *unicode, const char *utf8)</arglist>
    </member>
    <member kind="function">
      <type>Java_java_lang_String *</type>
      <name>vm_instantiate_cp_string_slow</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>48ad3be9f670d750ce41a54ae9815621</anchor>
      <arglist>(Class *, unsigned cp_index)</arglist>
    </member>
    <member kind="function">
      <type>jstring</type>
      <name>String_to_interned_jstring</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>35bb4220fac2996edda00afdf92d23bc</anchor>
      <arglist>(String *str)</arglist>
    </member>
    <member kind="function">
      <type>ManagedObject *</type>
      <name>string_create_from_utf8</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>9bef8ce92790617b58b2c54019298f47</anchor>
      <arglist>(const char *buf, unsigned length)</arglist>
    </member>
    <member kind="function">
      <type>ManagedObject *</type>
      <name>string_create_from_unicode</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>23f1b8f21611c7ae0e327e0153509272</anchor>
      <arglist>(const uint16 *buf, unsigned length)</arglist>
    </member>
    <member kind="function">
      <type>ManagedObject *</type>
      <name>string_create_blank</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>8e9dc22e7ef2bbfe58ae089d2c309462</anchor>
      <arglist>(unsigned length)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>string_get_length</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>6c92cbdb2284dd52407ec44f86f77097</anchor>
      <arglist>(ManagedObject *)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>string_get_utf8_length</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>4eb54a0544d1bf5341f602aac2518db8</anchor>
      <arglist>(ManagedObject *str)</arglist>
    </member>
    <member kind="function">
      <type>const uint16 *</type>
      <name>string_get_unicode_chars</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>1785e21f111284942970eb394f108caa</anchor>
      <arglist>(ManagedObject *string)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>string_get_utf8_chars</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>14c7d34c59871a16e8a534c07b21d7b5</anchor>
      <arglist>(ManagedObject *string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_get_unicode_region</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>41aa8dc20e34dcf5d99262797004c80d</anchor>
      <arglist>(ManagedObject *str, unsigned offset, unsigned count, uint16 *res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_get_utf8_region</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>18b2a8210822fd3693d6337e7de3ae8b</anchor>
      <arglist>(ManagedObject *str, unsigned offset, unsigned count, char *res)</arglist>
    </member>
    <member kind="function">
      <type>ObjectHandle</type>
      <name>string_create_from_utf8_h</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>239e84f88be056831f4bf4102f0fc443</anchor>
      <arglist>(const char *buf, unsigned length)</arglist>
    </member>
    <member kind="function">
      <type>ObjectHandle</type>
      <name>string_create_from_unicode_h</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>cb893b8c711d8865847eb80b6c4e54a7</anchor>
      <arglist>(const uint16 *buf, unsigned length)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>string_get_length_h</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>b75ed75dd16acd19cf3cd72317bdbe6d</anchor>
      <arglist>(ObjectHandle str)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>string_get_utf8_length_h</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>60c1a96c0683a529e456354a4501c376</anchor>
      <arglist>(ObjectHandle str)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>string_get_utf8_chars_h</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>8bf8064e7441ce6e275ad9a9ff8621ae</anchor>
      <arglist>(ObjectHandle string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_get_unicode_region_h</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>7fe41b9387f47e6765a057dc885fa57c</anchor>
      <arglist>(ObjectHandle str, unsigned offset, unsigned count, uint16 *buf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>string_get_utf8_region_h</name>
      <anchorfile>vm__strings_8h.html</anchorfile>
      <anchor>293b761d65eddde43d8660b9da02b9b2</anchor>
      <arglist>(ObjectHandle str, unsigned offset, unsigned count, char *buf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vm_threads.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>vm__threads_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>tmn_suspend_disable</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>2afeb8312da43a6ec7accc3c7fc30c7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tmn_suspend_enable</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>fcd8f9c3e986cfdfb3586207b7ea1e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tmn_suspend_disable_recursive</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>0419ba1fb18eee9529c00b0123eacb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tmn_suspend_enable_recursive</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>1f0f840378762f52b9667370879294e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>p_TLS_vmthread</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>a4077ccc7e8d3a972a1c0730afb51758</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vm_thread_t(*)</type>
      <name>vm_thread_accessor</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>650d135c38eb4dc69850da930a761523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>jvmti_thread_t</type>
      <name>jthread_self_jvmti</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>a4d40258746df535de236afd71d2bbbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>jvmti_thread_t</type>
      <name>jthread_get_jvmti_thread</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>ecec65250b007dd112fa024fc94dc728</anchor>
      <arglist>(hythread_t native)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jthread_start_count</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>6a4d0000cce7c69361a3b106c7e70934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jthread_end_count</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>1447e9b7b776b4d46acad14d5101bfe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>jint</type>
      <name>jthread_allocate_vm_thread_pool</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>1bf0f387b2449ee638d5254635d1acc3</anchor>
      <arglist>(JavaVM *java_vm, vm_thread_t vm_thread)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jthread_deallocate_vm_thread_pool</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>c2396a3d5b4380ac23666f6f4a3ff25c</anchor>
      <arglist>(vm_thread_t vm_thread)</arglist>
    </member>
    <member kind="function">
      <type>vm_thread_t</type>
      <name>jthread_allocate_thread</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>09ac63bf8ec03e2bc73ae184c1cbf582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_set_jvmti_saved_exception_registers</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>77e0a4cd1c1b44bbafd48355dd9ef9cc</anchor>
      <arglist>(vm_thread_t vm_thread, Registers *regs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_set_exception_registers</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>0cae8230e90c203582115d19b2aff2ff</anchor>
      <arglist>(vm_thread_t vm_thread, Registers &amp;regs)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>vm_get_ip_from_regs</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>e160bfe16870f5edd600aef6e7284550</anchor>
      <arglist>(vm_thread_t vm_thread)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vm_reset_ip_from_regs</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>95c980981aea14ee94bb003161e4c901</anchor>
      <arglist>(vm_thread_t vm_thread)</arglist>
    </member>
    <member kind="function">
      <type>hythread_thin_monitor_t *</type>
      <name>vm_object_get_lockword_addr</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>909fc2060ed6355401c63b46b31afeac</anchor>
      <arglist>(jobject obj)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>vm_object_get_lockword_size</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>ab8a2f012c0b600d7999609c8a6db28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>jthread_throw_exception</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>0e5ff756c4c6e5ec3f85cb82f3ebd153</anchor>
      <arglist>(char *name, char *message)</arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>jthread_throw_exception_object</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>366cf8c37a255d1cfd730696a533e8a4</anchor>
      <arglist>(jobject object)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ti_is_enabled</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>6aaf10581d566bc613bbc468d4a0881b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>VMEXPORT vm_thread_accessor</type>
      <name>get_thread_ptr</name>
      <anchorfile>vm__threads_8h.html</anchorfile>
      <anchor>876b91ad58ecefd981d1a1483da1e456</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vm_util.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>vm__util_8h</filename>
    <class kind="class">VM_Global_State</class>
    <class kind="class">ExpandableMemBlock</class>
    <member kind="typedef">
      <type>String</type>
      <name>String</name>
      <anchorfile>vm__util_8h.html</anchorfile>
      <anchor>54ad19f2d17915dbf4eb4c2fa2fa8680</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IDATA</type>
      <name>wait_for_multiple_semaphores</name>
      <anchorfile>vm__util_8h.html</anchorfile>
      <anchor>170f6a81a1c297d2ee60a72958b27eb4</anchor>
      <arglist>(int num, hysem_t *sems)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>sizeof_java_lang_class</name>
      <anchorfile>vm__util_8h.html</anchorfile>
      <anchor>67189d0ee522feedec5309eba0ef05c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>class_is_subtype</name>
      <anchorfile>vm__util_8h.html</anchorfile>
      <anchor>8fe8fcefdaf0000b316c9cc55dc1a744</anchor>
      <arglist>(Class *sub, Class *super)</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>class_is_subtype_fast</name>
      <anchorfile>vm__util_8h.html</anchorfile>
      <anchor>25dddeb59f80fbdef43d8efaa828516c</anchor>
      <arglist>(VTable *sub, Class *super)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void *</type>
      <name>vm_create_helper_for_function</name>
      <anchorfile>vm__util_8h.html</anchorfile>
      <anchor>4cdae0c11d13c515d9de916f838e0262</anchor>
      <arglist>(void *(*fptr)(void *))</arglist>
    </member>
    <member kind="variable">
      <type>VTable *</type>
      <name>cached_object_array_vtable_ptr</name>
      <anchorfile>vm__util_8h.html</anchorfile>
      <anchor>cdfc22baef3fa526da38fa1b98a52159</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vmi.h</name>
    <path>C:/cvn_rep/source/trunk/working_classlib/modules/luni/src/main/native/include/shared/</path>
    <filename>vmi_8h</filename>
    <class kind="struct">VMInterfaceFunctions_</class>
    <member kind="define">
      <type>#define</type>
      <name>vmi_h</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>17d02ec259e43a73dd0a10d06dc3cf95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USING_VMI</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>41bea1602faf2f681056380ac15ded0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VMI_ACCESS_FROM_ENV</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>8bcd9dca7cae8ee9fdf2dfa532cc0898</anchor>
      <arglist>(env)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VMI_ACCESS_FROM_JAVAVM</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>d1aa03cc21ff55b1ded3fe34540e08c3</anchor>
      <arglist>(javaVM)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VMI</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>6bf656f22301da4aad9ff3602c568dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOOTCLASSPATH_PROPERTY</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>2bd624cbade5ae1cbc2f70dea64e03b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char *</type>
      <name>value</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>176f2db63c9780b3c2d0f6bdf3b012f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char void *</type>
      <name>userData</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>1d4ba628d38c7624fd98855cce15b1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VMInterfaceFunctions_ *</type>
      <name>VMInterface</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>945edfc12a1e3166aba839134e6e3901</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>vmiError</name>
      <anchor>4cc26d792039ec5f28b517bd47143ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMI_ERROR_NONE</name>
      <anchor>4cc26d792039ec5f28b517bd47143ad2265b27aec0d596faaeacd168309b0fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMI_ERROR_UNKNOWN</name>
      <anchor>4cc26d792039ec5f28b517bd47143ad20dae37c3dd58da1cdac2143e8a50906d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMI_ERROR_UNIMPLEMENTED</name>
      <anchor>4cc26d792039ec5f28b517bd47143ad2159e00014eb4971effe39797b86e8dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMI_ERROR_UNSUPPORTED_VERSION</name>
      <anchor>4cc26d792039ec5f28b517bd47143ad2bc66efc0af92fa0ef93e040d424f3bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMI_ERROR_OUT_OF_MEMORY</name>
      <anchor>4cc26d792039ec5f28b517bd47143ad2fd2543af3ba7cafcb7c550b71561130f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMI_ERROR_ILLEGAL_ARG</name>
      <anchor>4cc26d792039ec5f28b517bd47143ad2e46f3141c6b202d4ad3dfbb704b94cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMI_ERROR_READ_ONLY</name>
      <anchor>4cc26d792039ec5f28b517bd47143ad29fcfee1283abc539e7f29567855cc105</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vmiErrorEnsureWideEnum</name>
      <anchor>4cc26d792039ec5f28b517bd47143ad29e6f0754aeb0ef78a2e4f83d2e871597</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>vmiVersion</name>
      <anchor>976d44f638c8cc26da425e2eada706de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMI_VERSION_UNKNOWN</name>
      <anchor>976d44f638c8cc26da425e2eada706de406e2c373d865add6094ecf7833d0685</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VMI_VERSION_1_0</name>
      <anchor>976d44f638c8cc26da425e2eada706de92a591e59cb27bf7069de024ac92503b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vmiVersionEnsureWideEnum</name>
      <anchor>976d44f638c8cc26da425e2eada706deed2194ab5721e8d88a17536f52fbd00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>void</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>354b1037f132054774eb26459b00deef</anchor>
      <arglist>(JNICALL *vmiSystemPropertyIterator)(char *key</arglist>
    </member>
    <member kind="function">
      <type>VMInterface *JNICALL</type>
      <name>VMI_GetVMIFromJNIEnv</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>fcf737d9dec215b6c3edc3fa87b04579</anchor>
      <arglist>(JNIEnv *env)</arglist>
    </member>
    <member kind="function">
      <type>VMInterface *JNICALL</type>
      <name>VMI_GetVMIFromJavaVM</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>02ce5bf3edc696d4176a8cc7c38da108</anchor>
      <arglist>(JavaVM *vm)</arglist>
    </member>
    <member kind="function">
      <type>vmiError JNICALL</type>
      <name>CheckVersion</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>ba6d90a8dfd683056e3edda3279c6cbd</anchor>
      <arglist>(VMInterface *vmi, vmiVersion *version)</arglist>
    </member>
    <member kind="function">
      <type>JavaVM *JNICALL</type>
      <name>GetJavaVM</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>b9a67b0c4fd13ca880346645572e13fe</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type>HyPortLibrary *JNICALL</type>
      <name>GetPortLibrary</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>1f6ad32325eb3b1c305fdcbb0a7d2b52</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type>HyVMLSFunctionTable *JNICALL</type>
      <name>GetVMLSFunctions</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>a7c29b069b7894949ffb98bdb3eaf6b6</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type>HyZipCachePool *JNICALL</type>
      <name>GetZipCachePool</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>ec1fae66bb8f874416dd21d3d2ae202c</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type>JavaVMInitArgs *JNICALL</type>
      <name>GetInitArgs</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>d805cdab5d65c407b0117a898ae72e13</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type>vmiError JNICALL</type>
      <name>GetSystemProperty</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>d9c25134aa7b169aad2804ef2e018b01</anchor>
      <arglist>(VMInterface *vmi, char *key, char **valuePtr)</arglist>
    </member>
    <member kind="function">
      <type>vmiError JNICALL</type>
      <name>SetSystemProperty</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>91c66ccfe8c36a51e9b0de2f63cbd40a</anchor>
      <arglist>(VMInterface *vmi, char *key, char *value)</arglist>
    </member>
    <member kind="function">
      <type>vmiError JNICALL</type>
      <name>CountSystemProperties</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>845d1feaa562a978f7bef9b448b61349</anchor>
      <arglist>(VMInterface *vmi, int *countPtr)</arglist>
    </member>
    <member kind="function">
      <type>vmiError JNICALL</type>
      <name>IterateSystemProperties</name>
      <anchorfile>vmi_8h.html</anchorfile>
      <anchor>3c76ac3c1d29c2b3be12cdf85a2eddcb</anchor>
      <arglist>(VMInterface *vmi, vmiSystemPropertyIterator iterator, void *userData)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>exceptions</name>
    <title>Exceptions subsystem</title>
    <filename>exceptions</filename>
    <docanchor file="exceptions">exn_issues</docanchor>
    <docanchor file="exceptions">exn_introduction</docanchor>
  </compound>
  <compound kind="page">
    <name>vm_finalization_and_weak_refs</name>
    <title>Design of finalization and weak references in VM.</title>
    <filename>vm_finalization_and_weak_refs</filename>
    <docanchor file="vm_finalization_and_weak_refs">vm_finalization_interactions</docanchor>
    <docanchor file="vm_finalization_and_weak_refs">vm_weak_refs</docanchor>
    <docanchor file="vm_finalization_and_weak_refs">vm_finalization_requirements</docanchor>
  </compound>
  <compound kind="page">
    <name>allocation</name>
    <title>Allocation of objects.</title>
    <filename>allocation</filename>
  </compound>
  <compound kind="page">
    <name>gc_finalization_and_weak_refs</name>
    <title>Finalization and weak references design in GC</title>
    <filename>gc_finalization_and_weak_refs</filename>
    <docanchor file="gc_finalization_and_weak_refs">gc_finalization</docanchor>
    <docanchor file="gc_finalization_and_weak_refs">gc_finalization_and_weak_refs_requirements</docanchor>
  </compound>
  <compound kind="page">
    <name>gc_vm_interface</name>
    <title>GC-VM interface</title>
    <filename>gc_vm_interface</filename>
  </compound>
  <compound kind="group">
    <name>port_atomic</name>
    <title>Atomic operations</title>
    <filename>group__port__atomic.html</filename>
    <member kind="function">
      <type>uint8</type>
      <name>port_atomic_cas8</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g941cfffcd1e971148662961796a1f839</anchor>
      <arglist>(volatile uint8 *data, uint8 value, uint8 comp)</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>port_atomic_cas16</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g9e8b90f60b8ae1b6aad2ff3962ec39e1</anchor>
      <arglist>(volatile uint16 *data, uint16 value, uint16 comp)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>port_atomic_cas64</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g50b6ef72dface8d7859e962a1c74367d</anchor>
      <arglist>(volatile uint64 *data, uint64 value, uint64 comp)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_disasm</name>
    <title>Disassembler of machine codes</title>
    <filename>group__port__disasm.html</filename>
    <class kind="struct">port_disasm_info_t</class>
    <member kind="typedef">
      <type>port_disassembler_t</type>
      <name>port_disassembler_t</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g5b81a44efbd5922849476295a8d4e746</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_initialize</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g06617e0dd0b21ae55d22cb97f9ac2f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disassembler_create</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>geafeb39d349c5d33d1131c107c37b625</anchor>
      <arglist>(port_disassembler_t **disassembler, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_set_info</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>gdd6038b8f95203f37914da956e78a8c5</anchor>
      <arglist>(port_disassembler_t *disassembler, const port_disasm_info_t new_info, port_disasm_info_t *old_info)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g49acc41688c10bff0f32c202dfc882b9</anchor>
      <arglist>(port_disassembler_t *disassembler, const char *code, unsigned int len, char **disasm_code)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_to_file</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g4b6cb4e97770e794788ae9fa1e40ab08</anchor>
      <arglist>(port_disassembler_t *disassembler, const char *code, unsigned int len, apr_file_t *thefile)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_dso</name>
    <title>Dynamic binaries handling</title>
    <filename>group__port__dso.html</filename>
    <subgroup>dso_modes</subgroup>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_NAME</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g494994af9d0767203152c4979822eefe</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_NAME</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g494994af9d0767203152c4979822eefe</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_dso_load_ex</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>gb53904c60696ae1e8e52c3ffb7883158</anchor>
      <arglist>(apr_dso_handle_t **handle, const char *path, uint32 mode, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_dso_search_path</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g2868fb11259c86b6382de79e24a0dcff</anchor>
      <arglist>(char **path, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_dso_name_decorate</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g7be6591f776daa83a35c79b95ad479f4</anchor>
      <arglist>(const char *dl_name, apr_pool_t *pool)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>dso_modes</name>
    <title>Shared library binding modes</title>
    <filename>group__dso__modes.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_DEFAULT</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>ge52e7091a760ed4e19a7ca60ea0e62b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_BIND_NOW</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>gcf9f2abb9a0f908a0abb59a643edc09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_BIND_DEFER</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>g38638cb6f349ff76fedc6be47ac8b0f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_filepath</name>
    <title>Filepath manipulation routines</title>
    <filename>group__port__filepath.html</filename>
    <subgroup>file_sep</subgroup>
    <member kind="function">
      <type>char *</type>
      <name>port_filepath_merge</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>g3fdf0466e120b4b0183f47106ec51800</anchor>
      <arglist>(const char *root, const char *trail, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_filepath_canonical</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>gb8f8589a36220daa16b1fbbc50ee7c2f</anchor>
      <arglist>(const char *original, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>port_filepath_basename</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>g71c48a50c516f9ca3bfd1a7166784239</anchor>
      <arglist>(const char *filepath)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>file_sep</name>
    <title>File system separators definitions.</title>
    <filename>group__file__sep.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_FILE_SEPARATOR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>gdeb85c9fa182d8b39774ec7714f5117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_PATH_SEPARATOR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>g0c373112a3b035709ffa56e8ef1d98a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_FILE_SEPARATOR_STR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>gac356bd16f39e4e78b78a78bcdfd9f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_PATH_SEPARATOR_STR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>g4cde5dee0cfce3caaedc697508cbb48f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_sysinfo</name>
    <title>System information routines</title>
    <filename>group__port__sysinfo.html</filename>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_executable_name</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>gbf29baa2b14b792c793a8418906bf2be</anchor>
      <arglist>(char **self_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>port_CPUs_number</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>ge845f74bed93bc4378ab6223abc6bf5d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>port_CPU_architecture</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g8cdc34507ae264aa806fa46cb814945c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_OS_name_version</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g13f1fe88293cfbf66ebcb6e134896402</anchor>
      <arglist>(char **os_name, char **os_ver, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_name</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g3b3dce0566b898b6fd22da65cc3da66c</anchor>
      <arglist>(char **account, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_home</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g789402dcd90a60fbbe7856c7fca4ace2</anchor>
      <arglist>(char **path, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_timezone</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>gf75a5e588d51125f01bc3c2695b1a11f</anchor>
      <arglist>(char **tzname, apr_pool_t *pool)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_timer</name>
    <title>High resolution timer</title>
    <filename>group__port__timer.html</filename>
    <member kind="typedef">
      <type>apr_int64_t</type>
      <name>apr_nanotimer_t</name>
      <anchorfile>group__port__timer.html</anchorfile>
      <anchor>g5a03080da8c2935da765c8cdd20e4ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_nanotimer_t</type>
      <name>port_nanotimer</name>
      <anchorfile>group__port__timer.html</anchorfile>
      <anchor>gc78f2e7570c33a0df57273acfb609b37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_apr</name>
    <title>Portability layer</title>
    <filename>group__port__apr.html</filename>
    <subgroup>port_atomic</subgroup>
    <subgroup>port_disasm</subgroup>
    <subgroup>port_dso</subgroup>
    <subgroup>port_filepath</subgroup>
    <subgroup>port_sysinfo</subgroup>
    <subgroup>port_timer</subgroup>
    <subgroup>port_vmem</subgroup>
  </compound>
  <compound kind="group">
    <name>port_vmem</name>
    <title>Virtual memory support</title>
    <filename>group__port__vmem.html</filename>
    <subgroup>vmem_protection</subgroup>
    <subgroup>vmem_size</subgroup>
    <member kind="typedef">
      <type>port_vmem_t</type>
      <name>port_vmem_t</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g406a1016dba358a477cd8add47b3ea56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_reserve</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ga44a5e01f82bbdf4142e56ee353b34cf</anchor>
      <arglist>(port_vmem_t **block, void **address, size_t amount, unsigned int protectionMode, size_t pageSize, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_commit</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gc8ff5428b03833e20bbe6e0d0f79c091</anchor>
      <arglist>(void **address, size_t amount, port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_decommit</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>geec5499227a84b13446adac939b775b1</anchor>
      <arglist>(void *address, size_t amount, port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_release</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ge97828bd44c4308570dadbdaba3133d2</anchor>
      <arglist>(port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>size_t *</type>
      <name>port_vmem_page_sizes</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g2845c66eac23bc855bddbde7db21eeab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_used_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g127c64f43ede7ec28663ac8d412ae28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_committed_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ge41b337073785600e419c99f4da4639a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_reserved_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gbc9cc5f9f74c35c76495790a49b15ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_max_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g74cacc02a730f5cbd6b01100cb08e0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_allocate</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gbccc9dfca3122a8ca84427a8e90a4d5e</anchor>
      <arglist>(void **addr, size_t size, unsigned int mode)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_free</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g09acf5460bd4f9082385f445ddb99b8c</anchor>
      <arglist>(void *addr, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>vmem_protection</name>
    <title>Memory protection flags</title>
    <filename>group__vmem__protection.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_READ</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>ga89c82eee1fbb767125433776697636a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_WRITE</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>g3bf9ff35a7792f612d723ac29251a78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_EXECUTE</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>g9e6b636380ddb2a72de12373b69290ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>vmem_size</name>
    <title>Memory page size directives</title>
    <filename>group__vmem__size.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_PAGESIZE_DEFAULT</name>
      <anchorfile>group__vmem__size.html</anchorfile>
      <anchor>gae1cf2fd6b48f1f399f164c23463fd32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_PAGESIZE_LARGE</name>
      <anchorfile>group__vmem__size.html</anchorfile>
      <anchor>g8d58b9abcfb54f89e9be3ddacb6cc8c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>open_interfaces</name>
    <title>Open Interfaces</title>
    <filename>group__open__interfaces.html</filename>
    <member kind="variable">
      <type>void(*</type>
      <name>interpreter_ti_set_notification_mode</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>gca6c803185f565050884d402b26b7f12</anchor>
      <arglist>)(jvmtiEvent event_type, bool enable)</arglist>
    </member>
    <member kind="variable">
      <type>jbyte(*</type>
      <name>interpreter_ti_set_breakpoint</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g87949d479c2b40cc6a0f50fd16a6d521</anchor>
      <arglist>)(jmethodID method, jlocation location)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>interpreter_ti_clear_breakpoint</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g6c685fa06d412de21c0be8fce40f981e</anchor>
      <arglist>)(jmethodID method, jlocation location, jbyte saved)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_notify_frame_pop</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g31911fb944a5252e1ff410c03df2ea3c</anchor>
      <arglist>)(jvmtiEnv *, VM_thread *thread, int depth)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_pop_frame</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g9a90649b8994566b4a28af64de5240b9</anchor>
      <arglist>)(jvmtiEnv *, VM_thread *thread)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>stack_dump</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g60975925d8444580cfd1f4b8244143e4</anchor>
      <arglist>)(int, VM_thread *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_OpenComponent</name>
    <filename>struct___open_component.html</filename>
    <member kind="variable">
      <type>const char *(*</type>
      <name>GetName</name>
      <anchorfile>struct___open_component.html</anchorfile>
      <anchor>74ddcb651e31454317fcaa352f5a766e</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="variable">
      <type>const char *(*</type>
      <name>GetVersion</name>
      <anchorfile>struct___open_component.html</anchorfile>
      <anchor>2e3e09ad049c0ecab90433d52aafc8a1</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="variable">
      <type>const char *(*</type>
      <name>GetDescription</name>
      <anchorfile>struct___open_component.html</anchorfile>
      <anchor>40280dad86b8acdd627aea61fb8634ce</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="variable">
      <type>const char *(*</type>
      <name>GetVendor</name>
      <anchorfile>struct___open_component.html</anchorfile>
      <anchor>d582d8f4a14a7c2b2831d870f4ab904f</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="variable">
      <type>const char *(*</type>
      <name>GetProperty</name>
      <anchorfile>struct___open_component.html</anchorfile>
      <anchor>0413fcbf2ace6a9d848d19f1055deba3</anchor>
      <arglist>)(const char *key)</arglist>
    </member>
    <member kind="variable">
      <type>const char **(*</type>
      <name>ListInterfaceNames</name>
      <anchorfile>struct___open_component.html</anchorfile>
      <anchor>f334fd69c12034791744d89adef7a55d</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>GetInterface</name>
      <anchorfile>struct___open_component.html</anchorfile>
      <anchor>33af9ed6f11994294a0bba53bb3d6430</anchor>
      <arglist>)(OpenInterfaceHandle *p_intf, const char *intf_name)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>Free</name>
      <anchorfile>struct___open_component.html</anchorfile>
      <anchor>35d56e09360a274beaaa5694d2354201</anchor>
      <arglist>)()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_OpenComponentManager</name>
    <filename>struct___open_component_manager.html</filename>
    <member kind="variable">
      <type>int(*</type>
      <name>GetComponent</name>
      <anchorfile>struct___open_component_manager.html</anchorfile>
      <anchor>4f3818a5b7e2b0b4c6e8011c5266c8ca</anchor>
      <arglist>)(OpenComponentHandle *p_component, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>CreateInstance</name>
      <anchorfile>struct___open_component_manager.html</anchorfile>
      <anchor>5727dd123c51ed98737aee4c511edb0c</anchor>
      <arglist>)(OpenInstanceHandle *p_instance, const char *name)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>FreeInstance</name>
      <anchorfile>struct___open_component_manager.html</anchorfile>
      <anchor>7eae767bf05de757538237659a626e71</anchor>
      <arglist>)(OpenInstanceHandle instance)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_OpenEmVm</name>
    <filename>struct___open_em_vm.html</filename>
    <member kind="variable">
      <type>void(*</type>
      <name>ExecuteMethod</name>
      <anchorfile>struct___open_em_vm.html</anchorfile>
      <anchor>d2148221a5733cd65a71a2876bd1362e</anchor>
      <arglist>)(jmethodID meth, jvalue *return_value, jvalue *args)</arglist>
    </member>
    <member kind="variable">
      <type>JIT_Result(*</type>
      <name>CompileMethod</name>
      <anchorfile>struct___open_em_vm.html</anchorfile>
      <anchor>7f1f89d351a1255dae17bc86e42be91c</anchor>
      <arglist>)(Method_Handle method_handle)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>RegisterCodeChunk</name>
      <anchorfile>struct___open_em_vm.html</anchorfile>
      <anchor>b8c6c53261d76072c0a35c8b48d5afe9</anchor>
      <arglist>)(Method_Handle method_handle, void *code_addr, size_t size, void *data)</arglist>
    </member>
    <member kind="variable">
      <type>Method_Handle(*</type>
      <name>LookupCodeChunk</name>
      <anchorfile>struct___open_em_vm.html</anchorfile>
      <anchor>ad7d265cdd092deb3696d9fceda7e1f7</anchor>
      <arglist>)(void *addr, Boolean is_ip_past, void **code_addr, size_t *size, void **data)</arglist>
    </member>
    <member kind="variable">
      <type>Boolean(*</type>
      <name>UnregisterCodeChunk</name>
      <anchorfile>struct___open_em_vm.html</anchorfile>
      <anchor>4adf082842dc7550169959a7a5b4bbd0</anchor>
      <arglist>)(void *addr)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>ProfilerThreadTimeout</name>
      <anchorfile>struct___open_em_vm.html</anchorfile>
      <anchor>8d0a7b1615bd773c399ce3869e2c2534</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>ClassloaderUnloadingCallback</name>
      <anchorfile>struct___open_em_vm.html</anchorfile>
      <anchor>4f122d94b138c682a86925262cd3a4c5</anchor>
      <arglist>)(ClassLoaderHandle class_handle)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_OpenInstance</name>
    <filename>struct___open_instance.html</filename>
    <member kind="variable">
      <type>OpenComponentHandle</type>
      <name>intf</name>
      <anchorfile>struct___open_instance.html</anchorfile>
      <anchor>318fcc36a380e11f965f9f9a62cb14f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_OpenInstanceAllocator</name>
    <filename>struct___open_instance_allocator.html</filename>
    <member kind="variable">
      <type>int(*</type>
      <name>CreateInstance</name>
      <anchorfile>struct___open_instance_allocator.html</anchorfile>
      <anchor>0f79bf2952c82d996a59c0454264f4d0</anchor>
      <arglist>)(OpenInstanceHandle *p_instance, apr_pool_t *pool)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>FreeInstance</name>
      <anchorfile>struct___open_instance_allocator.html</anchorfile>
      <anchor>bc009f16ea0899c7c0ed532409b07f26</anchor>
      <arglist>)(OpenInstanceHandle instance)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_OpenInterface</name>
    <filename>struct___open_interface.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>func1</name>
      <anchorfile>struct___open_interface.html</anchorfile>
      <anchor>e29a8bf5afa206502ccc539b1634abdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ChaClassIterator</name>
    <filename>struct_cha_class_iterator.html</filename>
    <member kind="variable">
      <type>Class_Handle</type>
      <name>_root_class</name>
      <anchorfile>struct_cha_class_iterator.html</anchorfile>
      <anchor>96ffb3b101b45830e5f84477c4bf29ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class_Handle</type>
      <name>_current</name>
      <anchorfile>struct_cha_class_iterator.html</anchorfile>
      <anchor>c9587c7008236fe660af9bf058d24591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Boolean</type>
      <name>_is_valid</name>
      <anchorfile>struct_cha_class_iterator.html</anchorfile>
      <anchor>430512cb5c700c894199b422691150a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ChaMethodIterator</name>
    <filename>struct_cha_method_iterator.html</filename>
    <member kind="variable">
      <type>Method_Handle</type>
      <name>_method</name>
      <anchorfile>struct_cha_method_iterator.html</anchorfile>
      <anchor>51a9122c70fae664f116ee1db2168ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Method_Handle</type>
      <name>_current</name>
      <anchorfile>struct_cha_method_iterator.html</anchorfile>
      <anchor>fa5d05ef835eb41d186a957812d62421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ChaClassIterator</type>
      <name>_class_iter</name>
      <anchorfile>struct_cha_method_iterator.html</anchorfile>
      <anchor>c09864684f8641efa23095fff8b42c0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Class</name>
    <filename>struct_class.html</filename>
    <member kind="function">
      <type>void</type>
      <name>init_internals</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>5fb1c81db281924b98277fe302a3cb8b</anchor>
      <arglist>(const Global_Env *env, const String *name, ClassLoader *cl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_internals</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>dfe805fe79f2315057a35adad8aac42e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_super_class</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>34515f2a033112ee5c3d5e84e7016bf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const String *</type>
      <name>get_super_class_name</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>af5f1f5a788e91c4cac720bab24cfdf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>get_super_class</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>94b874ed92d42af736c18eae65725e57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ClassLoader *</type>
      <name>get_class_loader</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>22da82222ae2e982f96df394bd7b21dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ManagedObject **</type>
      <name>get_class_handle</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>4c5f18f060c5ab41bbb9d0405dfec910</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const String *</type>
      <name>get_name</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>0dab55cc4bb9970baee729094e2c0001</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>get_java_name</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>c1d416399662425912b2adf510806264</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>get_signature</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>99024d2a4145cba2931a5e7f10474219</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>get_simple_name</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>f8abac9de3062f83c2f06737ffaa175f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Package *</type>
      <name>get_package</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>469eae53a1933ca16e759cdd70cdb908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_depth</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>334f44d5c4258f1477b235ba6e93b40f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_fast_instanceof_flag</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>fc79f851ccfbbe440dd89cd8284e882d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VTable *</type>
      <name>get_vtable</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>f96d3866e8183f167ea5e0877cb8f609</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Allocation_Handle</type>
      <name>get_allocation_handle</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>9a09303bc428a0d5192df311437fc77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_source_file_name_length</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>1423428b3b381896e21e485fdb68519e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_source_file_name</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>51f45f7f68e642944272497ca8a8a5fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>get_method_from_vtable</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>3d233f07d423753366efbd74daa9d384</anchor>
      <arglist>(unsigned method_idx) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_number_of_virtual_method_entries</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>53b0655de4e0908254a54d86fafd4b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>get_first_child</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>00b153304e41f2fc955c110927f0b7c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>get_next_sibling</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>7235505a22ea6c387170aaf7630b5450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_offset_of_fast_allocation_flag</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>046aaa6986a46f1f67d07a30517a2fe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_offset_of_allocation_handle</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>a05752e1ca90115b725d0afa03ba3a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_offset_of_instance_data_size</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>dd92165fb37a4808729874ebd7d88ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>get_number_of_dimensions</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>d77471ac98da6fff13b447e0e41b4076</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>get_array_base_class</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>53196e520c9ea3d70f7a576dba2ea9fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>get_array_element_class</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>199dd6fe5bca4571b4cf85e71332c45f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TypeDesc *</type>
      <name>get_array_element_type_desc</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>2857d27957341fa53f8f08c4fd5e4110</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Class_State</type>
      <name>get_state</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>332b7e4f0d287b9bfb3bb1e8dd291b47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_number_of_superinterfaces</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>dcf63cf89fac0e2bc86186b7c315eced</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const String *</type>
      <name>get_superinterface_name</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>a6dc587e825c5325963e7180594fc1b9</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>get_superinterface</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>d952a4ba091208057e51426ea728b4c5</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>ConstantPool &amp;</type>
      <name>get_constant_pool</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>716d324069e1bce6abda99fc0d3d77c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_number_of_fields</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>88b094a1bcd1a88f93eea4e289d25d50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_number_of_static_fields</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>d18b41e6bedeb60e892a817b88c9de46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>get_field</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>d8fda77e700c03f09cb4bd15a72c3140</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_static_data_address</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>b2d02b18c41c7cd5874b6b95ca451c0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_number_of_methods</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>418048fae97804cf1bcf241a7ce8a969</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>get_method</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>a3a8c123a35e526d2c29ab168fc33b68</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_declaring_class_index</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>143894a797a0e2e2033e1274784e4aeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_enclosing_class_index</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>36340154e00aa5be86558bbd71b5d5aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_enclosing_method_index</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>bc7d56d75260f0c19ba320407125f68e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_number_of_inner_classes</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>6b2996a535d3fdede40a3bb9c1b059b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_inner_class_index</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>95a557ed14a7f774554a4b34db556d46</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_inner_class_access_flags</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>cee31bc9e3ac05f6ae5ffb65784d54de</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>AnnotationTable *</type>
      <name>get_annotations</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>54197094773da47676c62d2f91b42ab0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnnotationTable *</type>
      <name>get_invisible_annotations</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>2d7391298fc45e684520bc605371ab89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_allocated_size</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>d3c0515441e865ac36131266750bb700</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_instance_data_size</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>f3866e88a6d842333918b3c1fc62964a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_array_element_size</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>19aab98e1a43d433a55caa8f01975515</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_id</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>2218f2dd62a05c8d7bb5cfe72f763deb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_version</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>46dc327380fd0f39a8d462a9898cb542</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_access_flags</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>792ef1eabb8146f07506bc3594485419</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_primitive</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>8c35bcba99e988826dc33fdaf13b9ad3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>af68783f258e75b4d4ab269972e67d1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array_of_primitives</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>f381de322e68eec63d188502c502482e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_public</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>38115d20b8cd2cd3fc64388c683eb023</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_private</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>e553fd6f33bc76362c73c94b692287ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_protected</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>1faee98b7f0e11b950ed22e15dfefbb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_final</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>d15b12eb8259cac0c2f5af9b63331b1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_super</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>0cb6cbfa83dc76fe5829993ead5e5329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_interface</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>0baae8c05522d6d2ca560f96504edcee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_abstract</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>a99e182a57529b88d0eb6fcf856d8088</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enum</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>75b5791b989d97f132ab4c0d95a1ba6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_synthetic</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>e0676f2881a499ef3148eb1c4acdc1bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_annotation</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>6e6084896f3503fbd77e481b8a71e124</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_finalizer</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>c3d2a6cb51dd39e8f5dd5ca20147fd34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_inner_class</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>8e2c5b806d2eebc2ab44bc8f1f1e2d31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_access_inner_class</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>7565cd07f248131bb7a2c0f5f9235092</anchor>
      <arglist>(Global_Env *env, Class *inner_class)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_access_member</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>dcc099ff1bf0c1c5a5bd349d3cb915f0</anchor>
      <arglist>(Class_Member *member)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_source_information</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>db6637d0fee789282632924b28159700</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_initializing</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>cf0a9204f666df74759a387d168ebac6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_initialized</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>6c212e13d3f70f45d08c41e2272ad6c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>in_error</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>4b7da2319f4c973345aefa889714ec39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_at_least_prepared</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>19761af29f032d440a73ad386d254b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_instanceof</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>777618d7ce8127e50c80e766785e5fed</anchor>
      <arglist>(Class *clss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_class_file_name</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>3c7047c9e27df05c95a3e6cb7a95cbf7</anchor>
      <arglist>(const char *cf_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_instance_data_size_constraint_bit</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>44f1fd2046d284ce746435148f36e9a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_class_handle</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>06b4a367618aeae600c40c7dc5ed25f5</anchor>
      <arglist>(ManagedObject **oh)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>3bbf049773c49374b63944187ad88c3c</anchor>
      <arglist>(Global_Env *env, ByteReader &amp;cfs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_ancestors</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>4690385a76db309f49ecb8da3a3355b7</anchor>
      <arglist>(Global_Env *env)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verify</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>75c5666085cd86754b975c52465548c7</anchor>
      <arglist>(const Global_Env *env)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verify_constraints</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>0d27fee029c0d3d37302ab36050f3b57</anchor>
      <arglist>(const Global_Env *env)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_as_primitive</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>0a8c2b265112b1b5f6d19ba2382aa3f8</anchor>
      <arglist>(ClassLoader *cl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup_as_array</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>01f1a3164cdf7ff3d92de311e0c77435</anchor>
      <arglist>(Global_Env *env, unsigned char num_dimensions, bool isArrayOfPrimitives, Class *baseClass, Class *elementClass)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>667c60c70486685f2e8c60e7063c5aac</anchor>
      <arglist>(Global_Env *env)</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>_resolve_class</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>281cb836e4076acc0f3443cf87d2d8d3</anchor>
      <arglist>(Global_Env *env, unsigned cp_index)</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>resolve_declaring_class</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>a71a9d0b44e782ae20e2011b6ca8d137</anchor>
      <arglist>(Global_Env *env)</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>_resolve_field</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>f196ce563d7a3dee2666bea0ac4c21f7</anchor>
      <arglist>(Global_Env *env, unsigned cp_index)</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>_resolve_method</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>496f01b22060215b80c583b2abf7d0dc</anchor>
      <arglist>(Global_Env *env, unsigned cp_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>9787479f2f51fe1ac6a8546f4fbb911f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>lookup_field</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>f52bb726c1c749ce061340eef7f29fb9</anchor>
      <arglist>(const String *name, const String *descriptor)</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>lookup_field_recursive</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>f24dcc72218a9d0927398ad6ff6d8b60</anchor>
      <arglist>(const String *name, const String *descriptor)</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>lookup_method</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>39bc5ff60e0d0290ddeb631736c716e8</anchor>
      <arglist>(const String *name, const String *desc)</arglist>
    </member>
    <member kind="function">
      <type>ManagedObject *</type>
      <name>allocate_instance</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>efad26009dfa0f885957e7f33ce20e2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>calculate_array_size</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>3602dacc47db51b65b13f3977b91a42d</anchor>
      <arglist>(int length) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>calculate_size</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>598df72b172767f8832a812c6bd36707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>register_jit_extended_class_callback</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>9dcb6927603d8ed4cf95b9291a73f742</anchor>
      <arglist>(JIT *jit_to_be_notified, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>do_jit_extended_class_callbacks</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>52a883503e6a0847156d94ed360ed8dc</anchor>
      <arglist>(Class *new_subclass)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_source_debug_extension</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>b2393c55a0ebe9960d5b35e6a7f0cfa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_source_debug_extension_length</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>b4025eff2b23299a062f28d4c18f8f3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_source_debug_extension</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>15bb823c566ca025e6e67295a8250b4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_verification_data</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>ade2370d8b1b84df166e44d7e5d85704</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_verification_data</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>7189169e178d95296863141a4bd64239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>bbf09ef8c1f09d71c6ce39bfb4a72787</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>38b1688a9eb0fb2e1593a578ac6647d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>instance_allocated</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>80f017471f7521e9b0b078d35fecfccb</anchor>
      <arglist>(unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>instanceof_slow_path_taken</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>fdbac70ed5aa2012474626a43a1df6b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>class_thrown</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>0579b28c38870304f0ca373336b74bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>code_alloc</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>aca0036b87e39dd984aa1915794d57a4</anchor>
      <arglist>(size_t size, size_t alignment, Code_Allocation_Action action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialization_checked</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>2f89b445578da2630d30d2b42a6c5091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>get_times_allocated</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>81bbbbbf0a7ef004302f020953679ad9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>get_total_bytes_allocated</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>28f5917abd46bf0e6dc265d7bd53e6f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>get_times_instanceof_slow_path_taken</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>a7e997befcc70f63b8e02584f6b68a94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>get_times_thrown</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>df50c1014d20de9890dd6cc297cf3ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>get_times_init_checked</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>4e93857ece1bd8dea40d00e2267c5d40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>get_total_padding_bytes</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>00bbe46dcb9dad0048585560c04f4a9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>get_offset_of_depth</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>57596ffa2577b202191b20205f779fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>get_offset_of_fast_instanceof_flag</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>0e29a6a96176befb8dbc185d725a1448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>get_offset_of_class_init_checks</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>a72ec51f274c93d8db9eca471d81b6bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>get_offset_of_array_element_class</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>13bae11ef3da2aa477490c22e02bd92e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>get_offset_of_jlc_handle</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>75d1cc2cf9305f90fd8bf8b578e5da53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>helper_get_interface_vtable</name>
      <anchorfile>struct_class.html</anchorfile>
      <anchor>7ff64f9301508a4feb68721f73d55135</anchor>
      <arglist>(ManagedObject *obj, Class *iid)</arglist>
    </member>
    <class kind="struct">Class::Class_Super</class>
    <class kind="struct">Class::InnerClass</class>
  </compound>
  <compound kind="struct">
    <name>Compilation_Handle</name>
    <filename>struct_compilation___handle.html</filename>
    <member kind="variable">
      <type>Global_Env *</type>
      <name>env</name>
      <anchorfile>struct_compilation___handle.html</anchorfile>
      <anchor>a0834d1da1e564c22b6115d0af65a8d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JIT *</type>
      <name>jit</name>
      <anchorfile>struct_compilation___handle.html</anchorfile>
      <anchor>cd468e633978e729f9ad0853b402e011</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ConstantPool</name>
    <filename>struct_constant_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstantPool</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>5d6f02bcf80ad4d7642bf4f3a1206d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstantPool</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>13821a575aff84fec83e44ca206d80f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>available</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>73b156b9199c88aecdc850d18665752f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_size</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>9b169730cc89ec4a62e1dd1beb39e31c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_index</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>7cd5df746f2097bd2fca1d1316b88f71</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_entry_resolved</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>3551b9a24fb62db57e85812e6b432f86</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_entry_in_error</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>58a7d572cf4a7fa812fd83834d35e952</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_utf8</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>d8b959ded5e17dfa3c8babb399c926e0</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_class</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>ea47678461f4f33d096534b4e68c6c5a</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_constant</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>503994b1d9b712e23c44f2d08a211f78</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_string</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>1f45bbbe40b13a54344386a44790ae22</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_name_and_type</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>c9a0d5a74c15f765fd8f1f141eba6ac0</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_fieldref</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>38cc95ee6cdbac0331a2b88bc2564146</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_methodref</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>5610d88a85bc9dafaadf0174628b6fd5</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_interfacemethodref</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>30b24f6b7f6adbb8b50e92d78b4001fc</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>get_tag</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>7cbf07d7501a978c2955bc46d76280e3</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_utf8_chars</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>aa53ce1742d1694ef6204cc326fa2268</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>get_utf8_string</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>5b949c9abdc5d39c350bf957cc691f17</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_string_chars</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>b180adafe6edeebd53b0af91eaa9e474</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>get_string</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>fbec5aeaff8f4a225ce1376e8034dc64</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>get_name_and_type_name</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>3c65a47d7524abed31bb4635c2a134f7</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>String *</type>
      <name>get_name_and_type_descriptor</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>c7c9855dc2265f687171300194eb7eb4</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>Class_Member *</type>
      <name>get_ref_class_member</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>bf89650a54c1d69585fde34ed2cf5700</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>Method *</type>
      <name>get_ref_method</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>aac103fdd015f616bcb833c98d02b715</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>get_ref_field</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>6e86750e123972e4d306a5e2297eee12</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>get_class_class</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>065c24d27487ac9249494095b4ea7025</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>get_4byte</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>2d1e5e5f61aa4207825c60a390976174</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>get_int</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>d6afeb12b8072c822e8ec612aae3ad99</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get_float</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>04d86a5817eb5686b7b6f29ec9492dc1</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>get_8byte_low_word</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>d3cea7a82dcf54c0331e28ea93fa7761</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>get_8byte_high_word</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>8ed1e3589aa972ab33a125c15a0910bd</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_address_of_constant</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>df8b87831bfbaf89687c9867553dbb34</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>jthrowable</type>
      <name>get_error_cause</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>69ca4ecd024ec5ffd163c9c1a1d7e1c9</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>ConstPoolEntry *</type>
      <name>get_error_chain</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>3a2a5bfbf55d15b5b067a9808269ae8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_string_index</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>b1a8ad2992acc6e7ddf3fe639bb74107</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_name_and_type_name_index</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>9a76f16959ede4c1b05f3b54b2cedd7f</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_name_and_type_descriptor_index</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>e288f7e5649b36fb400ce154ea6de366</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_ref_class_index</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>a06ce52f540d474d4e2d6b01e55ffae4</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_ref_name_and_type_index</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>f12549b54b0d08789d218c7dee833256</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>get_class_name_index</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>0e6c92f291fa17ed2bef501d3c920545</anchor>
      <arglist>(uint16 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolve_entry</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>bedce6feefebf06f4e7c384146581e6b</anchor>
      <arglist>(uint16 index, Class *clss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolve_entry</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>6944614a14b412ef06bf197c2b0dd2c4</anchor>
      <arglist>(uint16 index, Field *field)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolve_entry</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>83b16acec8cde311c74b709e821ceed6</anchor>
      <arglist>(uint16 index, Method *method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resolve_as_error</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>6eeb520f08346d6908e31e0273d08506</anchor>
      <arglist>(uint16 index, jthrowable exn)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>120e91e62cadbfeec780ca02b70f89b7</anchor>
      <arglist>(Class *clss, String_Pool &amp;string_pool, ByteReader &amp;cfs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>87c7a2e0c6b1bab6d4109c2c2fd742fc</anchor>
      <arglist>(Global_Env *env, Class *clss, bool is_trusted_cl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>335bbe86a1aefdda473746f74a34299e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>struct_constant_pool.html</anchorfile>
      <anchor>fcaaaf4ad882e4f7e663cfeecb2b4ba6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>ConstPoolEntry</name>
    <filename>union_const_pool_entry.html</filename>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>tags</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>92fa30ceb60832eb31a430a6d34bde36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@0</type>
      <name>CONSTANT_Class</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>9f80dc99e001398a37cc6ea32f362e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@0::@7</type>
      <name>@8</name>
      <anchorfile>struct_const_pool_entry_1_1@0.html</anchorfile>
      <anchor>f076de2dc920b3dd16240bfc0fecec30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>klass</name>
      <anchorfile>union_const_pool_entry_1_1@0_1_1@7.html</anchorfile>
      <anchor>5b781bd16af92b061d9016880748f276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@0::@7::@9</type>
      <name>error</name>
      <anchorfile>union_const_pool_entry_1_1@0_1_1@7.html</anchorfile>
      <anchor>f463b99669e47482d0348ee040dc1469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry *</type>
      <name>next</name>
      <anchorfile>struct_const_pool_entry_1_1@0_1_1@7_1_1@9.html</anchorfile>
      <anchor>ada7e2498b5ac39eb6bbb0264ab0f674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ManagedObject *</type>
      <name>cause</name>
      <anchorfile>struct_const_pool_entry_1_1@0_1_1@7_1_1@9.html</anchorfile>
      <anchor>bed1739dbc3965c0978bd1d63cfdcba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>name_index</name>
      <anchorfile>struct_const_pool_entry_1_1@0.html</anchorfile>
      <anchor>1b8cbe5b32e7c6cbb52a750738738ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@1</type>
      <name>CONSTANT_String</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>c6c986611206ded9c5733e61bfb2fe83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>string</name>
      <anchorfile>struct_const_pool_entry_1_1@1.html</anchorfile>
      <anchor>8d62213f188350bab43771409da75048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>string_index</name>
      <anchorfile>struct_const_pool_entry_1_1@1.html</anchorfile>
      <anchor>56468946341f31c349d61edaab4edb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@2</type>
      <name>CONSTANT_ref</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>287e9cc9fa77ef78d3ef135c04a1bea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@2::@10</type>
      <name>@11</name>
      <anchorfile>struct_const_pool_entry_1_1@2.html</anchorfile>
      <anchor>163b7bc4bd052dbebe3c3b1879292936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class_Member *</type>
      <name>member</name>
      <anchorfile>union_const_pool_entry_1_1@2_1_1@10.html</anchorfile>
      <anchor>c4b28f6ac3491843cb39784b06eb13a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Field *</type>
      <name>field</name>
      <anchorfile>union_const_pool_entry_1_1@2_1_1@10.html</anchorfile>
      <anchor>af1ff37e1a58f7b2de490f78c149d959</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Method *</type>
      <name>method</name>
      <anchorfile>union_const_pool_entry_1_1@2_1_1@10.html</anchorfile>
      <anchor>4ddd0dfe49a4d8dffc089918699dc328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@2::@10::@12</type>
      <name>error</name>
      <anchorfile>union_const_pool_entry_1_1@2_1_1@10.html</anchorfile>
      <anchor>460d291923ce08a62603c3204f113a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry *</type>
      <name>next</name>
      <anchorfile>struct_const_pool_entry_1_1@2_1_1@10_1_1@12.html</anchorfile>
      <anchor>517fac32358d89e87ec825642416ffa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ManagedObject *</type>
      <name>cause</name>
      <anchorfile>struct_const_pool_entry_1_1@2_1_1@10_1_1@12.html</anchorfile>
      <anchor>ecf107fcd0d03c66cb757aa9ddbc33f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>class_index</name>
      <anchorfile>struct_const_pool_entry_1_1@2.html</anchorfile>
      <anchor>6518063e92ba8a53f96929b7af5c5e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>name_and_type_index</name>
      <anchorfile>struct_const_pool_entry_1_1@2.html</anchorfile>
      <anchor>3ebc52a0ac4b19325e170917d846b93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@3</type>
      <name>error</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>a5f04a24b44b8641dc8692dd2db8dd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry *</type>
      <name>next</name>
      <anchorfile>struct_const_pool_entry_1_1@3.html</anchorfile>
      <anchor>c90bc9a9d6ebe8e02a5660438091b0af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ManagedObject *</type>
      <name>cause</name>
      <anchorfile>struct_const_pool_entry_1_1@3.html</anchorfile>
      <anchor>7bcbe483ff517d9a2446a10f1d409349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>int_value</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>11d2516cfb39aa57dfbcb4969ddf6442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>float_value</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>e7774d23a0e8176a779394593ecd2ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@4</type>
      <name>CONSTANT_8byte</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>297c77db606fd30bd19151fb78bfa343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>low_bytes</name>
      <anchorfile>struct_const_pool_entry_1_1@4.html</anchorfile>
      <anchor>021f9b95fa54af7633823fcdeb821393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>high_bytes</name>
      <anchorfile>struct_const_pool_entry_1_1@4.html</anchorfile>
      <anchor>214cc270c1eae98a67d21c17031e49d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@5</type>
      <name>CONSTANT_NameAndType</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>79ed35d59cc41bea647136fb484da892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>name</name>
      <anchorfile>struct_const_pool_entry_1_1@5.html</anchorfile>
      <anchor>9121df00e6aef735d1796cb8dbec4e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>descriptor</name>
      <anchorfile>struct_const_pool_entry_1_1@5.html</anchorfile>
      <anchor>3fcbaad7b071f76644196c6c64c958d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>name_index</name>
      <anchorfile>struct_const_pool_entry_1_1@5.html</anchorfile>
      <anchor>3a20ad9c1360359c57940f69cfcf8687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>descriptor_index</name>
      <anchorfile>struct_const_pool_entry_1_1@5.html</anchorfile>
      <anchor>26c7107501c5d6da848db9920f32c469</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstPoolEntry::@6</type>
      <name>CONSTANT_Utf8</name>
      <anchorfile>union_const_pool_entry.html</anchorfile>
      <anchor>14f8b5c73bcbddc4bf94f36a4bd1cf84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>string</name>
      <anchorfile>struct_const_pool_entry_1_1@6.html</anchorfile>
      <anchor>bcd0ff71c759602561080eb6f1c96719</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DynamicCode</name>
    <filename>struct_dynamic_code.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>struct_dynamic_code.html</anchorfile>
      <anchor>b1aac6e85cf67b03c09cd3fee2e1ec5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>free_name</name>
      <anchorfile>struct_dynamic_code.html</anchorfile>
      <anchor>7fa3f8726a63d33d807da2c113934adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>address</name>
      <anchorfile>struct_dynamic_code.html</anchorfile>
      <anchor>467f968bc0cd7eab26a4525b6a5fd76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>length</name>
      <anchorfile>struct_dynamic_code.html</anchorfile>
      <anchor>2daef250812c4140faa99651548764aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DynamicCode *</type>
      <name>next</name>
      <anchorfile>struct_dynamic_code.html</anchorfile>
      <anchor>18ee5e2038743ef9ca7475c22f9f2439</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EM_ProfileAccessInterface</name>
    <filename>struct_e_m___profile_access_interface.html</filename>
    <member kind="variable">
      <type>EM_PCTYPE(*</type>
      <name>get_pc_type</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>1dcfb68b2e8a1ae137f8d9992be472ae</anchor>
      <arglist>)(EM_Handle _this, PC_Handle pc)</arglist>
    </member>
    <member kind="variable">
      <type>Method_Profile_Handle(*</type>
      <name>get_method_profile</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>d04afa967bd5f05f66a30776c11f9f97</anchor>
      <arglist>)(EM_Handle _this, PC_Handle pc, Method_Handle mh)</arglist>
    </member>
    <member kind="variable">
      <type>PC_Handle(*</type>
      <name>get_pc</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>b23afb371c776934588ba3b7ff677393</anchor>
      <arglist>)(EM_Handle _this, EM_PCTYPE profile_type, JIT_Handle jh, EM_JIT_PC_Role jit_role)</arglist>
    </member>
    <member kind="variable">
      <type>Method_Profile_Handle(*</type>
      <name>eb_profiler_create_profile</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>3b2b34a0aaddfc8a20d1edd8e79ed349</anchor>
      <arglist>)(PC_Handle ph, Method_Handle mh)</arglist>
    </member>
    <member kind="variable">
      <type>void *(*</type>
      <name>eb_profiler_get_entry_counter_addr</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>4ee282ffdbce6ea34512dcbd47edd162</anchor>
      <arglist>)(Method_Profile_Handle mph)</arglist>
    </member>
    <member kind="variable">
      <type>void *(*</type>
      <name>eb_profiler_get_backedge_counter_addr</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>b4f60232a03ecc3252d89c8db256531d</anchor>
      <arglist>)(Method_Profile_Handle mph)</arglist>
    </member>
    <member kind="variable">
      <type>char(*</type>
      <name>eb_profiler_is_in_sync_mode</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>47602b316a4e5819c45e212a8f0dfe78</anchor>
      <arglist>)(PC_Handle pch)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>eb_profiler_sync_mode_callback</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>9da9a70f2067a44b0bbb889c39fadb57</anchor>
      <arglist>)(Method_Profile_Handle mph)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*</type>
      <name>eb_profiler_get_entry_threshold</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>be2e260e93875c37462178c4e531899d</anchor>
      <arglist>)(PC_Handle pch)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*</type>
      <name>eb_profiler_get_backedge_threshold</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>b4f55baf4499960093780f5814247e1d</anchor>
      <arglist>)(PC_Handle pch)</arglist>
    </member>
    <member kind="variable">
      <type>Method_Profile_Handle(*</type>
      <name>edge_profiler_create_profile</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>b4c7762faaf3f5fd8714c03ebd540513</anchor>
      <arglist>)(PC_Handle ph, Method_Handle mh, uint32 numEdgeCounters, uint32 *counterKeys, uint32 checkSum)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*</type>
      <name>edge_profiler_get_num_counters</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>19df1812f920a783a1ba5cf8c898adf6</anchor>
      <arglist>)(Method_Profile_Handle mph)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*</type>
      <name>edge_profiler_get_checksum</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>95328a5a09b2207aee0d216b1a0eda3a</anchor>
      <arglist>)(Method_Profile_Handle mph)</arglist>
    </member>
    <member kind="variable">
      <type>void *(*</type>
      <name>edge_profiler_get_counter_addr</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>4d584f2887b8d764515aa854fe3f5653</anchor>
      <arglist>)(Method_Profile_Handle mph, uint32 key)</arglist>
    </member>
    <member kind="variable">
      <type>void *(*</type>
      <name>edge_profiler_get_entry_counter_addr</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>b68800b8097eef4b6d67c54349eb4246</anchor>
      <arglist>)(Method_Profile_Handle mph)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*</type>
      <name>edge_profiler_get_entry_threshold</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>0b99a697ca8d810a02eb0789ef7ce0d3</anchor>
      <arglist>)(PC_Handle pch)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*</type>
      <name>edge_profiler_get_backedge_threshold</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>89c93122ac454fa09405f899e13db27d</anchor>
      <arglist>)(PC_Handle pch)</arglist>
    </member>
    <member kind="variable">
      <type>Method_Profile_Handle(*</type>
      <name>value_profiler_create_profile</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>5e43879dec7e551299361e91f40cd64d</anchor>
      <arglist>)(PC_Handle pch, Method_Handle mh, uint32 numKeys, uint32 *keys)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>value_profiler_add_value</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>f302590bb7343abd0d7e1d7755716387</anchor>
      <arglist>)(Method_Profile_Handle mph, uint32 instructionKey, POINTER_SIZE_INT valueToAdd)</arglist>
    </member>
    <member kind="variable">
      <type>POINTER_SIZE_INT(*</type>
      <name>value_profiler_get_top_value</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>15ad860ba57f83c33b3ff0a71e2d2691</anchor>
      <arglist>)(Method_Profile_Handle mph, uint32 instructionKey)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>value_profiler_dump_values</name>
      <anchorfile>struct_e_m___profile_access_interface.html</anchorfile>
      <anchor>51c8596e67835598eebaf41aebf3e28d</anchor>
      <arglist>)(Method_Profile_Handle mph, std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExpandableMemBlock</name>
    <filename>class_expandable_mem_block.html</filename>
    <member kind="function">
      <type></type>
      <name>ExpandableMemBlock</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>d77ded0bf815b5854649ba634e19e2c9</anchor>
      <arglist>(long nBlockLen=2000, long nInc=1000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExpandableMemBlock</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>33eff72e39f36f303c902da3a6c80dd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendBlock</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>d267c410d986c45eb79fe6faf17bc0d6</anchor>
      <arglist>(char *szBlock, long nLen=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>AppendFormatBlock</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>80f31e7e5af9d1ffff9e78e596dc191f</anchor>
      <arglist>(char *szfmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetIncrement</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>94634ec58da0e84f6d144f2b82cd536f</anchor>
      <arglist>(long nInc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetCurrentPos</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>539cf14282859166d8a5d28228768da9</anchor>
      <arglist>(long nPos)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>GetCurrentPos</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>d04db0de1dad60dd53ff5e0016b8dfef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>AccessBlock</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>0b40976f3af78d455e51a3b4ceaad6b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>toString</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>8c5c8191196ff3ceee1a72174c57b5b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>EnsureCapacity</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>8749ec1d2423c20520f6f13dd2e355a4</anchor>
      <arglist>(long capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CopyTo</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>eae294ae19f0029f3c14abe41f7ec529</anchor>
      <arglist>(ExpandableMemBlock &amp;mb, long len=-1)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>m_pBlock</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>ad1b5ea5cf973ad8c3e5b2eae3d81c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>m_nBlockLen</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>0812f0b15bacdeeb9748efadf088259c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>m_nCurPos</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>7ca1e0651902e644756f9b04ef74a4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>m_nInc</name>
      <anchorfile>class_expandable_mem_block.html</anchorfile>
      <anchor>ab642964b458c7cfc412743d356b2119</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Global_Env</name>
    <filename>struct_global___env.html</filename>
    <member kind="enumeration">
      <name>VM_STATE</name>
      <anchor>f2d0a38c85fc6276db116bc64ae6ef27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_INITIALIZING</name>
      <anchor>f2d0a38c85fc6276db116bc64ae6ef27a1b360de035fa908e9c60ff3d81d4645</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_RUNNING</name>
      <anchor>f2d0a38c85fc6276db116bc64ae6ef27963ae50430655b3bfeeddf76d88e57ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VM_SHUTDOWNING</name>
      <anchor>f2d0a38c85fc6276db116bc64ae6ef2772f26bbfc60825bb358c0e885c3c4ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Global_Env</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>ea63c76deed068b4c99233541481f22f</anchor>
      <arglist>(apr_pool_t *pool, size_t string_pool_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Global_Env</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>f2339d1e833f659ceb43304ab23faacb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>8b0e76f27e8a179fd93622a56f5c475f</anchor>
      <arglist>(size_t size, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>ea4a7bd84b6c080134877617057db1b4</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4ee5800c1e56010601b0df429d1194c9</anchor>
      <arglist>(void *mem, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>InBootstrap</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>434c5d5f35089a8709c680f5cf576c94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>StartVMBootstrap</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>c15d73847b7e72bdc8f7db15fe922075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>FinishVMBootstrap</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>1225c54e2c8d11ae100870ad9ce9b5a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isVmInitializing</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>a9c26a7a856bdde2ab1da1c4f68d31cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isVmRunning</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>e1b9a4229fed88d823eebd8d21358483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>IsVmShutdowning</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>a00b392cbeda529a3c7750cd46dcc335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>LoadCoreClass</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>83e3729d6af4f6337c3e95d7f4790939</anchor>
      <arglist>(const String *name)</arglist>
    </member>
    <member kind="function">
      <type>Class *</type>
      <name>LoadCoreClass</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>14c77e83026a52493acd87bd7ca4e74d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ReadyForExceptions</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>fab6fe76e03e26f0638d8f799336e833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsReadyForExceptions</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>30e93040fe43ff3762212bf4086a7942</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Properties *</type>
      <name>JavaProperties</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>3b5715735614e597f9ee9c5d0bc1ce04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Properties *</type>
      <name>VmProperties</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>68b3b153fa87cd412c0037f63aed11ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init_pools</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>e6357ff73f2213b7ff9abaffbeca11d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>apr_pool_t *</type>
      <name>mem_pool</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>928ef0a67a3eb64394a73eae8a85f731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BootstrapClassLoader *</type>
      <name>bootstrap_class_loader</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>d6cda2b280099ed2a776d4db45dd93c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UserDefinedClassLoader *</type>
      <name>system_class_loader</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>9ca9eb1649b20155bb0d64c5a142ebbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>bootstrap_code_pool_size</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>41944b77a3d6055361b18577c9162858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>user_code_pool_size</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>5f366b1f416652ced1bbaf6914432afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DebugUtilsTI *</type>
      <name>TI</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>16ad4862c361e934c718987d3c7e1432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GlobalNCAI *</type>
      <name>NCAI</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b89f00eeb2d9a00d40c0102d254762ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NSOTableItem *</type>
      <name>nsoTable</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>2026ea6758003aa38c39c6892c9a2b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>portLib</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>901e352e8381f624eed8cedfee704737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DynamicCode *</type>
      <name>dcList</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>de1bf9aaac9202448d9089b652c60bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Assertion_Registry *</type>
      <name>assert_reg</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>937a6e32ca7616cdf0ac6b7f70541dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PoolManager *</type>
      <name>GlobalCodeMemoryManager</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>336c3e6786930061c979ea966cf37758</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PoolManager *</type>
      <name>VTableMemoryManager</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>717c36b47a05a3d887fe81c6f6df34fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_library_t</type>
      <name>hythread_lib</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>82bb06c43bba900c37636b23c784db36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String_Pool</type>
      <name>string_pool</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>83d1a18354cfb117541f597f676086b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JavaVMInitArgs</type>
      <name>vm_arguments</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>5d3ffc8561a2fd00c2bcd1bbbb35eeac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_hyperthreading_enabled</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>8a4aad4ecf8e48de5e8e9c0e2e3cea83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_lil_stubs</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>895057e0486768f761e63a996e602849</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>strings_are_compressed</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4d2d027edd6a3436f3127030abc9c901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_large_pages</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>cd927082966aa9d7d1f395c2d3c43d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>pin_interned_strings</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>821296507fe0c584c0cbf677b79ff3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>retain_invisible_annotations</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4f9a1aff9a9523a4d0308d52e30acd6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verify_all</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>f44b636237fe72e09390263c45417877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verify_strict</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>2a7699c1fc944c902d6796132f8094e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verify</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>a29c71e5c67a60a81871bc3207ed718c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>system_page_size</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>a3d1b2e2cb8d98a6e9ba944d77a6ca2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Lock_Manager *</type>
      <name>p_jit_a_method_lock</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>51dd7f13f4baa071bace78480e27809e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Lock_Manager *</type>
      <name>p_vtable_patch_lock</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>71a9c970dd2790a716fe49589fd6e0ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Lock_Manager *</type>
      <name>p_method_call_lock</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>6ffa64e92ee5ba9c9394f8b8447024ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Lock_Manager *</type>
      <name>p_handle_lock</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>c07486d30f41b68a85114e261ee86ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Lock_Manager *</type>
      <name>p_dclist_lock</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>5ca380afbfa52487a65c5927fdb225ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Lock_Manager *</type>
      <name>p_suspend_lock</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>79e8e10e2ce57e5116cd406c3c0d1128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_common_jar_cache</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>14a9e6d2663b100e2b9cdcb622b31125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>compact_fields</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>a3d522abf82a2ffcb922b0923961e45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sort_fields</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>7656c4a371443a95c8b51bde0624df05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Byte *</type>
      <name>heap_base</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>ccfe8066c0c9a16914e3d7b4832e4042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Byte *</type>
      <name>heap_end</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>a8d7496e099c67571ba55f9e5867c12a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Byte *</type>
      <name>managed_null</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>8ad00643e4f55822a5a376515d684300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangObject_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>057abbda4ba9b05d2d733460841909bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangClass_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>7a43cef197fb1d516f069d2d7e39aa05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>Init_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>ab1b1774589198f621846ab4eebe9d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>Clinit_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>9c3a2869f6d3841fb5f136b28ff7d94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>FinalizeName_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>2589cd40426b9de33b88fabcc9433ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>EnqueueName_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>28c354e6de6efcbfb454b79e43e69f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>VoidVoidDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>7cc640fc2c1d09b28721184a75d66623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>VoidIntegerDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>3330fa53362677d11a6978ac3cb14baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>VoidBooleanDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>1334bbd3d67a4e32122fc71fa295246a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>Clonable_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>434582eed78c5eaa28fb979200f42a85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>Serializable_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>0a99a6c32d53c397cf20059b8719df95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>Detach_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>00144f0012bce78ae632152b08026a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>DetachDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>45668089c90b5874ebf03fad9d8d7c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>GetUncaughtExceptionHandler_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>426c1f8b16b90aa43ac74af7a4f0e9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>GetUncaughtExceptionHandlerDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4a8e24c5ecdbe1b97a5529fc520709b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>UncaughtException_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>6348e4a970d844608bf9d0ce492afde9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>UncaughtExceptionDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>e5c34f4dfad31fc2fa61ad18d0516295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>GetDefaultUncaughtExceptionHandler_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>9be4ff1282a090a50777c409dfad2035</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>GetDefaultUncaughtExceptionHandlerDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>1f5cbecfc50f27b3bdd9a4479e7de640</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>GetName_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>bff7ab3ed3d23db0ff41503802a4696c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>GetNameDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>0380ac96b66a6723714b137683424d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>Remove_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4de028a399e7e625a040186bbd4cdecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>RemoveDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>5a68d1e5dba055f71642b599e3c692ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>LLRemove_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>761e00ba1c556aa4daafea5c35f96e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>LLRemoveDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>18e4a929ced66b967994dca635fbb59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangReflectMethod_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b223124c0778d8eade107e2c6a1c480c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangNullPointerException_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b56f7ebf9bf0cc0299576903918f1cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangUnsatisfiedLinkError_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>352771c7f526768639ae9756819d3eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangReflectConstructor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>127d9cabd993043eee718c89c5387e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangReflectField_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>02d1aa4e9270bcef699c965f6c1aba15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangIllegalArgumentException_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>20ac590189a051fd0dc5d15c815a92a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaNioByteBuffer_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>65aaae67073fef327812ddc969896315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangArrayIndexOutOfBoundsException_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b41e9ed36229dfa5d66008354b3f2415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangThrowable_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>3dce73f7278ce080b8497122e1550d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangNoClassDefFoundError_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>85da10f8fb4624ef70b44706661d8183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangString_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4635a0c941d9483e911cff0c7aff50e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>JavaLangStringBuffer_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>cdf7304e3d2f84a5a0edb032e558b2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>Length_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>ea79b0bd4d8f1f667321c1df7304383b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>LoadClass_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>db62dd4d70571e97ea79ed30a46edf45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>InitCause_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>7e7d16fa74651c02d45cb07bcbdaab6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>FromStringConstructorDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>997ccb7d7c1b14f11521b13a5e3535e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>LoadClassDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>f457f94610dd849f51a930219ffbb2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>String *</type>
      <name>InitCauseDescriptor_String</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>0e618e8047ee19cbdd40ee448443204d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Method *</type>
      <name>VM_intern</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>faa8396b397349909e86d3bc82010835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>Boolean_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>14ec4707ddf0995152eda37dc58aceef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>Char_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>7fdecd6f094aa441c904563456b53edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>Float_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>0ac2e1a53c222470513679866956e963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>Double_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>d3e5506c8c6795ed3bec4141365cc33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>Byte_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>43f89010c87a8082ee81b897261a888d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>Short_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>e5bb0e459ebcb1e994edc4c78a4acde8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>Int_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>7876d9eae5b9a9abc007016f83bcaed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>Long_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>5af95acdc91aca0b54574d5f41e622f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>Void_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>e2d2f726bdf7e726887b1eb0c0d86795</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>ArrayOfBoolean_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>796d4132457315fb99cc9260764a3853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>ArrayOfChar_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4601ee51b265fafbc965c4f71a6da67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>ArrayOfFloat_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>90e473759a3c14dea4390e455a02ac76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>ArrayOfDouble_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b1103955528a926ce390a9f17877c462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>ArrayOfByte_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>ae32ee691fc62b99e65e801bc72ae127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>ArrayOfShort_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>75387632444bdf9d2ebfbcaf1ef119ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>ArrayOfInt_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>1d7c859f334a456a8dd7e61b4935773b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>ArrayOfLong_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>552e669866447750b0322ec207dbdcbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>JavaLangObject_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>70aef562cbfe8c32841933703dfb5276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>JavaLangString_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>3749f6839b7b44c75f4cdb3b66da7a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>JavaLangClass_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>bc76ebd35f1e48089cdd0c86e9f28bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_Throwable_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>25c32ee6e8a5c2da58b159697089e78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_StackTraceElement_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4fc8a7918491d5f6a541bd39db7b5fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_Error_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>42708673cca9d4a1a8dbaf9c6e9cbb83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_ExceptionInInitializerError_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>055a0a62c710719b152a5e3c53211b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_NullPointerException_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>8d6ff44cec426dd9c2a285afbcacca76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_StackOverflowError_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>81efb0b6c37c9ec458327e1521a8bb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_ClassNotFoundException_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>a466fd84bb57fc8e5cb9a7edd9a7b454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_NoClassDefFoundError_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4f34667e93d0df29b1e3dd4140c33a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_ArrayIndexOutOfBoundsException_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>ecbdb03b5f58c9621ac5c364d311c4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_ArrayStoreException_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>eb74ac4b36c805faca17daf8262ceb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_ArithmeticException_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>dd4883e3c7bd6161dde56eefca3e3655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_ClassCastException_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>4232bc40903d59af30087a7c66307bb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_OutOfMemoryError_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>0a203210f319cdf40b2074c05bfab561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_InternalError_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b1449bcee2961b93188d5f810d19f864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_ThreadDeath_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>89ebad261df45abd01e60b9be41c9eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_security_ProtectionDomain_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>e061bed703afd41b2a00a465baa8c1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>Class_domain_field_offset</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>8480931be0a063b84589fff3e4028250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ObjectHandle</type>
      <name>java_lang_Object</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>48ee45d86ab0cf29b22b84b66d06181b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ObjectHandle</type>
      <name>java_lang_OutOfMemoryError</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>d06a037fbf4d456af65cf601a3b9cffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ObjectHandle</type>
      <name>java_lang_ThreadDeath</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>e638e5b700a254ac3f750200ee9aa7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ObjectHandle</type>
      <name>popFrameException</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>631287805cf3588d5ac32ffafaf1bdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_io_Serializable_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b24491d32058a9caaef3e13ca8af2648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_Cloneable_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>37573d05dab610d6c6057f18a26e772b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_Thread_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>bc4319361101ea0ed0f50bd7829a9133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_ThreadGroup_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>c6e42af13a67e8eb04e856b2f1aac911</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_util_LinkedList_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>101e3a4352981cfbde61f17991ab34f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_util_Date_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>7cff3ac662eb15f94e236df32d54c965</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_util_Properties_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>1823d20aca5e2c605c970bdc9746ce03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_Runtime_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>35660f7d0a017229b8262fad9ca2dc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_reflect_Constructor_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>f7c2f7330c4bc29e30723c27994e276e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_reflect_Field_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b8d40bd8f6bc481e491d4d0b298087dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_reflect_Method_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>072f4b335af7ac33f5a89de8732549c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_FinalizerThread_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b83f3c46eb1000f97482bcb852b5df5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Class *</type>
      <name>java_lang_EMThreadSupport_Class</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>5a6d67fdd17f539e5d6b324a3742531d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VTable *</type>
      <name>JavaLangString_VTable</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>925025a853d16305200c4c01981508e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>vm_class_offset</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>b75cafc66499f9c232956922e80d788b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>apr_time_t</type>
      <name>start_time</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>44c03f78b93ca7618a5766f5fe32a79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>apr_time_t</type>
      <name>total_compilation_time</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>71566133d7f6744994971c1f2e7cf304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>total_loaded_class_count</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>da8e8987663e1bc397dfe62411420d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>unloaded_class_count</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>c89440cc9adf65471eda5a25b41c2d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jboolean</type>
      <name>class_loading_verbose</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>9e37d13637da21c48728adab67c74808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>init_gc_used_memory</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>8918d91120fc594eadfff3d437e8b083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>init_used_memory</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>6e96c2e2ca26ead4c073b52c8e347090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>volatile int</type>
      <name>vm_state</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>38beef2de63cc2ce35d442a30db470a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpenComponentManagerHandle</type>
      <name>cm</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>adabca40ffd14d2b7a77030a98a312be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpenInstanceHandle</type>
      <name>em_instance</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>2dc551bda1ee8871e69d44b46b323dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpenEmVmHandle</type>
      <name>em_interface</name>
      <anchorfile>struct_global___env.html</anchorfile>
      <anchor>c0a05fe7c609d5e37ad0594f098bf055</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HyThread</name>
    <filename>struct_hy_thread.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>reserved</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>fcc1a9c84c304bc60aa2b5c5653a08f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>request</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>e00fd86e1269fb69b167e69259ec1ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>disable_count</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>06ff0c192a419ecaa8ea6979de608f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_group_t</type>
      <name>group</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>183592eaa07de918d9f8b6880c1690b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>thread_local_storage</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>d389d1ea525a766bf9150ac568df012a</anchor>
      <arglist>[10]</arglist>
    </member>
    <member kind="variable">
      <type>hythread_library_t</type>
      <name>library</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>bbcb0cadcc94435204a6bd895e693dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>suspend_count</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>45604302d409e2f13b1cb6779c71e04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_event_callback_proc</type>
      <name>safepoint_callback</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>a3cad6ff5ec47aa1b856b55f8191fd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hysem_t</type>
      <name>resume_event</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>d66b415308fd88c3c74837df093debb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_t</type>
      <name>next</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>6acd7d71e95b7cffe2e11fc05ee2777d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_t</type>
      <name>prev</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>6af4a3427053b3121184966ad5ad2789</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>osthread_t</type>
      <name>os_handle</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>e4ba996a2ca5330db559f9c9ddc5c2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hymutex_t</type>
      <name>mutex</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>284abdec0a29cebcb2b78c87477d27ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_monitor_t</type>
      <name>monitor</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>bdde678e9a37f0a836a1651b06811a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hycond_t *</type>
      <name>current_condition</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>50787f1b7462f8ff7f4e88e3af1df838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IDATA</type>
      <name>state</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>6b1937639768cae454c0294282b38a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>priority</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>484e2aaecdf6cb4240df31ef1cc1fc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>java_status</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>11d40e4835c68d7ea5cd6e2c53b2ae4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>need_to_free</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>5222d60a5c2def8842194b2c09985b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UDATA</type>
      <name>stacksize</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>ac995d576d49dd660cb52372fd7d412b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>interrupted</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>fa3979c38b67921e761eb83709c73740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_monitor_t</type>
      <name>waited_monitor</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>5ab3abe01a45219abd75fe573ac382ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IDATA</type>
      <name>thread_id</name>
      <anchorfile>struct_hy_thread.html</anchorfile>
      <anchor>f008ef6051fb8126615c8af54a44baf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HyThread_public</name>
    <filename>struct_hy_thread__public.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>reserved</name>
      <anchorfile>struct_hy_thread__public.html</anchorfile>
      <anchor>15880616f1674b9bc49329b425339341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>request</name>
      <anchorfile>struct_hy_thread__public.html</anchorfile>
      <anchor>5dcf90aae0ff3ce3e50d87ae2f807a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>disable_count</name>
      <anchorfile>struct_hy_thread__public.html</anchorfile>
      <anchor>54daec3b1d77deac1aaf9c0fe076fabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_group_t</type>
      <name>group</name>
      <anchorfile>struct_hy_thread__public.html</anchorfile>
      <anchor>56f9776d1560d0519ca3131823ffe671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>thread_local_storage</name>
      <anchorfile>struct_hy_thread__public.html</anchorfile>
      <anchor>eaff63f1f6bb130856fb7cb4f67822d5</anchor>
      <arglist>[10]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hythread_start_proc_data</name>
    <filename>structhythread__start__proc__data.html</filename>
    <member kind="variable">
      <type>hythread_t</type>
      <name>thread</name>
      <anchorfile>structhythread__start__proc__data.html</anchorfile>
      <anchor>8c7ea4701ee431538ba43e55aacec543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_group_t</type>
      <name>group</name>
      <anchorfile>structhythread__start__proc__data.html</anchorfile>
      <anchor>30522a6c1f5fbf32dc0d5801671159c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hythread_entrypoint_t</type>
      <name>proc</name>
      <anchorfile>structhythread__start__proc__data.html</anchorfile>
      <anchor>c68f3f599f0b4190be28fa20b82fcccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>proc_args</name>
      <anchorfile>structhythread__start__proc__data.html</anchorfile>
      <anchor>d3ee0473bdc6921688af7740e8a88dcd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HyThreadMonitorTracing</name>
    <filename>struct_hy_thread_monitor_tracing.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>monitor_name</name>
      <anchorfile>struct_hy_thread_monitor_tracing.html</anchorfile>
      <anchor>e7a4103e1f4026ad24964bb61bf2c32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UDATA</type>
      <name>enter_count</name>
      <anchorfile>struct_hy_thread_monitor_tracing.html</anchorfile>
      <anchor>ccabc65921d3a409210e2e1d3cc00f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UDATA</type>
      <name>slow_count</name>
      <anchorfile>struct_hy_thread_monitor_tracing.html</anchorfile>
      <anchor>95c307cfc54e6a9e496d1bf5e2338487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UDATA</type>
      <name>recursive_count</name>
      <anchorfile>struct_hy_thread_monitor_tracing.html</anchorfile>
      <anchor>d7cb6b74aefe93d1ce5a3dda36e1ee66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UDATA</type>
      <name>spin2_count</name>
      <anchorfile>struct_hy_thread_monitor_tracing.html</anchorfile>
      <anchor>efc5602b27e144b2902ebd9adb713d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UDATA</type>
      <name>yield_count</name>
      <anchorfile>struct_hy_thread_monitor_tracing.html</anchorfile>
      <anchor>1a93beeb1c0a5e90c0dcbcf22099c9ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>HyVMLSFunctionTable</name>
    <filename>struct_hy_v_m_l_s_function_table.html</filename>
    <member kind="function">
      <type></type>
      <name>UDATA</name>
      <anchorfile>struct_hy_v_m_l_s_function_table.html</anchorfile>
      <anchor>78cd956a53c00c95e2fad96624df1362</anchor>
      <arglist>(JNICALL *HYVMLSAllocKeys)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>UDATA</type>
      <name>void</name>
      <anchorfile>struct_hy_v_m_l_s_function_table.html</anchorfile>
      <anchor>6ccf866378177000e61259c72c5597e9</anchor>
      <arglist>(JNICALL *HYVMLSFreeKeys)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>UDATA UDATA void *JNICALL *</type>
      <name>HyVMLSGet</name>
      <anchorfile>struct_hy_v_m_l_s_function_table.html</anchorfile>
      <anchor>69a3177fa1e9a713ec3ed5e084773723</anchor>
      <arglist>(JNIEnv *env, void *key)</arglist>
    </member>
    <member kind="function">
      <type>void *JNICALL *</type>
      <name>HyVMLSSet</name>
      <anchorfile>struct_hy_v_m_l_s_function_table.html</anchorfile>
      <anchor>f08c54f2fcddf2aae9a4581695606826</anchor>
      <arglist>(JNIEnv *env, void **pKey, void *value)</arglist>
    </member>
    <member kind="variable">
      <type>UDATA *</type>
      <name>pInitCount</name>
      <anchorfile>struct_hy_v_m_l_s_function_table.html</anchorfile>
      <anchor>24a911c08e38c05e453573bac94734a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UDATA UDATA *</type>
      <name>pInitCount</name>
      <anchorfile>struct_hy_v_m_l_s_function_table.html</anchorfile>
      <anchor>94b89725d5f27edf83e844161d1cc442</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Interpreter</name>
    <filename>struct_interpreter.html</filename>
    <member kind="variable">
      <type>bool(*</type>
      <name>interpreter_st_get_frame</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>3922a64847a0ebd51dd9f6f8393480f6</anchor>
      <arglist>)(unsigned target_depth, struct StackTraceFrame *stf)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>interpreter_st_get_trace</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>dbca99c845d77c6d4067f8dc99d773bc</anchor>
      <arglist>)(struct VM_thread *thread, unsigned *res_depth, struct StackTraceFrame **stfs)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>interpreter_enumerate_thread</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>42c39c23654cd04496b026ddb26a1524</anchor>
      <arglist>)(struct VM_thread *thread)</arglist>
    </member>
    <member kind="variable">
      <type>FrameHandle *(*</type>
      <name>interpreter_get_last_frame</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>be258bcf5983058015f53e34ad2fb73c</anchor>
      <arglist>)(struct VM_thread *thread)</arglist>
    </member>
    <member kind="variable">
      <type>FrameHandle *(*</type>
      <name>interpreter_get_prev_frame</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>de22139460f3eb684c96d9feef4f418b</anchor>
      <arglist>)(FrameHandle *frame)</arglist>
    </member>
    <member kind="variable">
      <type>Method_Handle(*</type>
      <name>interpreter_get_frame_method</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>bdd250eae2883c480a6b0d3bb5e6422a</anchor>
      <arglist>)(FrameHandle *frame)</arglist>
    </member>
    <member kind="variable">
      <type>uint8 *(*</type>
      <name>interpreter_get_frame_bytecode_ptr</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>5900f65c57987a586909a2c36ad03b96</anchor>
      <arglist>)(FrameHandle *frame)</arglist>
    </member>
    <member kind="variable">
      <type>bool(*</type>
      <name>is_frame_in_native_frame</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>58f35b349d04479ccfcf629bd2df4d85</anchor>
      <arglist>)(struct FrameHandle *frame, void *begin, void *end)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>interpreter_ti_enumerate_thread</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>ffd968f4718381fa6c38eccbfc0c6899</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *thread)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_getFrameLocation</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>ea63ef92b7b055c5f37df42ee366f6a2</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *, int, struct _jmethodID **, int64 *)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_getLocal32</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>77b1d746389b33f15c225c108e22d710</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *, int, int, int *)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_getLocal64</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>705976e1cb58d1231d76265245eda5f7</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *, int, int, int64 *)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_getObject</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>fc9e4458a0caa1686e44eea951c6aa36</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *, int, int, struct _jobject **)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_getStackTrace</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>f3927285f1a0a856a040ba0ce63deea1</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *, int, int, jvmtiFrameInfo *, int *)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_get_frame_count</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>a979b104b86bd877cc0532f32444ebdc</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *, int *)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_setLocal32</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>f526a07a673a2a6f8bf6f1103d10bf2f</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *, int, int, int)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_setLocal64</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>e76c9f73a8a353f2893496ee70d2c4e1</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *, int, int, int64)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_setObject</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>c596c52c705669f84b27748dba20e333</anchor>
      <arglist>)(jvmtiEnv *, struct VM_thread *, int, int, struct _jobject *)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int(*</type>
      <name>interpreter_st_get_interrupted_method_native_bit</name>
      <anchorfile>struct_interpreter.html</anchorfile>
      <anchor>3e8510098460e0e7a05ec250d337cdac</anchor>
      <arglist>)(struct VM_thread *)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>interpreter_ti_set_notification_mode</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>gca6c803185f565050884d402b26b7f12</anchor>
      <arglist>)(jvmtiEvent event_type, bool enable)</arglist>
    </member>
    <member kind="variable">
      <type>jbyte(*</type>
      <name>interpreter_ti_set_breakpoint</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g87949d479c2b40cc6a0f50fd16a6d521</anchor>
      <arglist>)(jmethodID method, jlocation location)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>interpreter_ti_clear_breakpoint</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g6c685fa06d412de21c0be8fce40f981e</anchor>
      <arglist>)(jmethodID method, jlocation location, jbyte saved)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_notify_frame_pop</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g31911fb944a5252e1ff410c03df2ea3c</anchor>
      <arglist>)(jvmtiEnv *, VM_thread *thread, int depth)</arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError(*</type>
      <name>interpreter_ti_pop_frame</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g9a90649b8994566b4a28af64de5240b9</anchor>
      <arglist>)(jvmtiEnv *, VM_thread *thread)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>stack_dump</name>
      <anchorfile>group__open__interfaces.html</anchorfile>
      <anchor>g60975925d8444580cfd1f4b8244143e4</anchor>
      <arglist>)(int, VM_thread *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JavaVM_External</name>
    <filename>struct_java_v_m___external.html</filename>
    <member kind="variable">
      <type>JNIInvokeInterface_ *</type>
      <name>functions</name>
      <anchorfile>struct_java_v_m___external.html</anchorfile>
      <anchor>21d6503e41829d0294c268d80bd5d560</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JavaVMAttachArgs</name>
    <filename>struct_java_v_m_attach_args.html</filename>
    <member kind="variable">
      <type>jint</type>
      <name>version</name>
      <anchorfile>struct_java_v_m_attach_args.html</anchorfile>
      <anchor>6bfca61c52a67178240fa9a925e49393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>struct_java_v_m_attach_args.html</anchorfile>
      <anchor>3bbd61d1b7c7b7704dde67ea447d680f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>group</name>
      <anchorfile>struct_java_v_m_attach_args.html</anchorfile>
      <anchor>dfbf1154b217c0d249d781842a750851</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JavaVMInitArgs</name>
    <filename>struct_java_v_m_init_args.html</filename>
    <member kind="variable">
      <type>jint</type>
      <name>version</name>
      <anchorfile>struct_java_v_m_init_args.html</anchorfile>
      <anchor>61b182b75c0301662276a6b33ad6c6d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>nOptions</name>
      <anchorfile>struct_java_v_m_init_args.html</anchorfile>
      <anchor>395a13d484a7d5ec53de7fa098529b6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JavaVMOption *</type>
      <name>options</name>
      <anchorfile>struct_java_v_m_init_args.html</anchorfile>
      <anchor>c8f3aa4dd8872c5a2bcd0160ee408b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jboolean</type>
      <name>ignoreUnrecognized</name>
      <anchorfile>struct_java_v_m_init_args.html</anchorfile>
      <anchor>2f15a6507cd14451559b23390cfeb484</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JavaVMOption</name>
    <filename>struct_java_v_m_option.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>optionString</name>
      <anchorfile>struct_java_v_m_option.html</anchorfile>
      <anchor>2c844e5516ec7946d60a0bd4ce620ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>extraInfo</name>
      <anchorfile>struct_java_v_m_option.html</anchorfile>
      <anchor>af5bcacc41d0b26c77921a3237c7d8d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JNIEnv_External</name>
    <filename>struct_j_n_i_env___external.html</filename>
    <member kind="variable">
      <type>JNINativeInterface_ *</type>
      <name>functions</name>
      <anchorfile>struct_j_n_i_env___external.html</anchorfile>
      <anchor>5006128700d4e90ef5116591bd0392b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JNIInvokeInterface_</name>
    <filename>struct_j_n_i_invoke_interface__.html</filename>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>dc4678a6c5c21afd71b4243704cddb08</anchor>
      <arglist>(JNICALL *DestroyJavaVM)(JavaVM *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>97796b40d406315b1a8714cc6006d22b</anchor>
      <arglist>(JNICALL *AttachCurrentThread)(JavaVM *</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>fa0c5fbaa1b153f37d1848b2f0b269c6</anchor>
      <arglist>(JNICALL *DetachCurrentThread)(JavaVM *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>13a330d5650bd76fd0bf7f31f8d3ddf3</anchor>
      <arglist>(JNICALL *GetEnv)(JavaVM *</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>c324531b1effabefb5b8814c9dde6250</anchor>
      <arglist>(JNICALL *AttachCurrentThreadAsDaemon)(JavaVM *</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved0</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>7e36fb87ca5d48f18cf0b3a231e922a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved1</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>ce89b3500ba1234edeb771e3f14c22df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved2</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>6f38ee3843151d95219146a6f4c68b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void **</type>
      <name>penv</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>6a83683fd577f1a1c0c8081486bede4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void void *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>37ec1262038701765d03946a40699f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void **</type>
      <name>penv</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>6a83683fd577f1a1c0c8081486bede4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void jint</type>
      <name>ver</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>2c2da608df450fb9efaff98533f56632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void **</type>
      <name>penv</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>6a83683fd577f1a1c0c8081486bede4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void void *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_invoke_interface__.html</anchorfile>
      <anchor>37ec1262038701765d03946a40699f32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JNINativeInterface_</name>
    <filename>struct_j_n_i_native_interface__.html</filename>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>bb4082fd5720b20d2227cb2004753e76</anchor>
      <arglist>(JNICALL *GetVersion)(JNIEnv *env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jclass</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d94fb239d53a29232d8147b39e3224fe</anchor>
      <arglist>(JNICALL *DefineClass)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jclass</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>69851368e7623cc9e47954562307f168</anchor>
      <arglist>(JNICALL *FindClass)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jmethodID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>3a9e8f955ebd340cba91c2ed6d791dc6</anchor>
      <arglist>(JNICALL *FromReflectedMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfieldID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>91fc8f32ba6b2c860f52d415015892a1</anchor>
      <arglist>(JNICALL *FromReflectedField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f3dd00c5f793b05fbe891e645f5a1f3d</anchor>
      <arglist>(JNICALL *ToReflectedMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jclass</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ee69072bd2fe494e10797063f348084d</anchor>
      <arglist>(JNICALL *GetSuperclass)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>cffbf41a91b9cfcc367f6c4a150195e2</anchor>
      <arglist>(JNICALL *IsAssignableFrom)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9b74034ec53ab8a58275ae462bfe46f2</anchor>
      <arglist>(JNICALL *ToReflectedField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ff1e390e96d76f32b2f44cdc9a5b15b9</anchor>
      <arglist>(JNICALL *Throw)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a2a035a94fbe08a792a1c2afe4069335</anchor>
      <arglist>(JNICALL *ThrowNew)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jthrowable</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>93ec59224ad69ccd81bd9d5a862dae4f</anchor>
      <arglist>(JNICALL *ExceptionOccurred)(JNIEnv *env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>2da3b57e40d34c3b4aef5557a10bc496</anchor>
      <arglist>(JNICALL *ExceptionDescribe)(JNIEnv *env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>24856f0568eea4bf77535e5b83d80340</anchor>
      <arglist>(JNICALL *ExceptionClear)(JNIEnv *env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f8f4dfb1efdff896ce7453d03a108419</anchor>
      <arglist>(JNICALL *FatalError)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d026d938fe06ef9cf7585febabb5f3c3</anchor>
      <arglist>(JNICALL *PushLocalFrame)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6bb1c3d2c284748e1bd03cec7cea5edf</anchor>
      <arglist>(JNICALL *PopLocalFrame)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ec8763d9d45ed4bf3fe55f65b5e76247</anchor>
      <arglist>(JNICALL *NewGlobalRef)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>60f9add171e9df61f98132bcd655cbfa</anchor>
      <arglist>(JNICALL *DeleteGlobalRef)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>22784863a148f932e66d41ac638e8031</anchor>
      <arglist>(JNICALL *DeleteLocalRef)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>901edb537fd94738f8fdfeb768f02cb6</anchor>
      <arglist>(JNICALL *IsSameObject)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>39efeed870bba893d315ffb233c973ae</anchor>
      <arglist>(JNICALL *NewLocalRef)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6ce4c8313c01483ea120c2a4bc26a1b5</anchor>
      <arglist>(JNICALL *EnsureLocalCapacity)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9802b05c8e7b3b9442bc6606f7a57486</anchor>
      <arglist>(JNICALL *AllocObject)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1ab36e5c3506123741cc24fd0297bbc5</anchor>
      <arglist>(JNICALL *NewObject)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>021acb2f729c67df916b02de84892f6b</anchor>
      <arglist>(JNICALL *NewObjectV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b91dc3b5286a83fe309c947cc802a00a</anchor>
      <arglist>(JNICALL *NewObjectA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jclass</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8d040ce7926246952fb7f586c61931f3</anchor>
      <arglist>(JNICALL *GetObjectClass)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>994d9225ba47f899f6489908be54dd35</anchor>
      <arglist>(JNICALL *IsInstanceOf)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jmethodID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5eff01ea42dfb01c395631f320556b71</anchor>
      <arglist>(JNICALL *GetMethodID)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f960d09d05b510b515013687ba977c83</anchor>
      <arglist>(JNICALL *CallObjectMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0bbd0d3f20ccf5cf95cc0e414a8e49ed</anchor>
      <arglist>(JNICALL *CallObjectMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5cb9b74944ffbb716034d82902d20ec4</anchor>
      <arglist>(JNICALL *CallObjectMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>670fa142769e5da2eb6c6a6784275371</anchor>
      <arglist>(JNICALL *CallBooleanMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>2726eac52f5aa85f5ff1105b1249e0f4</anchor>
      <arglist>(JNICALL *CallBooleanMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5c70c858f03bc9261c9bd51d71321f64</anchor>
      <arglist>(JNICALL *CallBooleanMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>fb8256aca142722505644b16718c0256</anchor>
      <arglist>(JNICALL *CallByteMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4fa3a2505a91772bf7465bbbdd9a6606</anchor>
      <arglist>(JNICALL *CallByteMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6363693a387749ba96fa39960f4ad29e</anchor>
      <arglist>(JNICALL *CallByteMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b797351eb0ff55ad5f7235c55c0902b2</anchor>
      <arglist>(JNICALL *CallCharMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6dc51008f5d4e9f8221a578746a53626</anchor>
      <arglist>(JNICALL *CallCharMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>3727cbd8bc3deca8c82c7265374b8b60</anchor>
      <arglist>(JNICALL *CallCharMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e8ae6b3e1fd2d4cf206471290747d475</anchor>
      <arglist>(JNICALL *CallShortMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>45f116d75bebabcea90c3b03680e5126</anchor>
      <arglist>(JNICALL *CallShortMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0d73d4d2a5f0d3a5e2e6122b721681f6</anchor>
      <arglist>(JNICALL *CallShortMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5ebbdbe5caf72a63b85b4b3c568f67be</anchor>
      <arglist>(JNICALL *CallIntMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9826b63336c2c755ef1dd61a9ed35fc0</anchor>
      <arglist>(JNICALL *CallIntMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ee2da1f31e2442429e8e814ded10e030</anchor>
      <arglist>(JNICALL *CallIntMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>192082c14076447847a580e02698e6c0</anchor>
      <arglist>(JNICALL *CallLongMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>16d9b29231e2a35c029d01c68a1ee795</anchor>
      <arglist>(JNICALL *CallLongMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d0be830190d1449a16e79b54c4279a5a</anchor>
      <arglist>(JNICALL *CallLongMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>7d7a65ed2a01ae60b5677a03c6ef4f42</anchor>
      <arglist>(JNICALL *CallFloatMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>88fc0e98c95b32916f4dd13946c9b41a</anchor>
      <arglist>(JNICALL *CallFloatMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>99cb5b098d0637270c1906b1eb2a6546</anchor>
      <arglist>(JNICALL *CallFloatMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>52f2c46ff43e02bc176c4dcac75294e3</anchor>
      <arglist>(JNICALL *CallDoubleMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>cbe0e8d50de85a791b7ff4af34010189</anchor>
      <arglist>(JNICALL *CallDoubleMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1ebabcd13d38f0e59e9ee15968f134ac</anchor>
      <arglist>(JNICALL *CallDoubleMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f5fbed63a6d6e79483a03b71692deb8b</anchor>
      <arglist>(JNICALL *CallVoidMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jmethodID</type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9f4c6137660670703a42c44b75ac5b73</anchor>
      <arglist>(JNICALL *CallVoidMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1dce5d6c228a424c090443786ddaf190</anchor>
      <arglist>(JNICALL *CallVoidMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>20b2542af65252d9f5fcabe0fc63e90d</anchor>
      <arglist>(JNICALL *CallNonvirtualObjectMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6ad81faf7cb8d69d5a1afc36076d957b</anchor>
      <arglist>(JNICALL *CallNonvirtualObjectMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>62c36f7a8821cd7fb2ac737e316947fb</anchor>
      <arglist>(JNICALL *CallNonvirtualObjectMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>88de43cd9e87d9d3d2aab8442f263028</anchor>
      <arglist>(JNICALL *CallNonvirtualBooleanMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>72015902078ef03e0bf30555486aa90e</anchor>
      <arglist>(JNICALL *CallNonvirtualBooleanMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c8942421d27c9b17dece811410fe379e</anchor>
      <arglist>(JNICALL *CallNonvirtualBooleanMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>00dd023b6bac62760825aa21e0d36668</anchor>
      <arglist>(JNICALL *CallNonvirtualByteMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>eeb1b260e05fca30e1eb42ad7a252adc</anchor>
      <arglist>(JNICALL *CallNonvirtualByteMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>08456c5e00d767f80263404d60ee1344</anchor>
      <arglist>(JNICALL *CallNonvirtualByteMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>921a01db4c2da657f59ec4d6344592d0</anchor>
      <arglist>(JNICALL *CallNonvirtualCharMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b6e349a5f0d7b99759980798a1d9136d</anchor>
      <arglist>(JNICALL *CallNonvirtualCharMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4b40ea7814d231b1486cc03841db7ab9</anchor>
      <arglist>(JNICALL *CallNonvirtualCharMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>917fddd9c7e967810f4c387ed475c8fe</anchor>
      <arglist>(JNICALL *CallNonvirtualShortMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>03663fa924cbcb023ca60fab59ec7e2c</anchor>
      <arglist>(JNICALL *CallNonvirtualShortMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>903be5122b2d09bb736f8b562ab3a02e</anchor>
      <arglist>(JNICALL *CallNonvirtualShortMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>eefd347f7ed17903d289d2439f0692ef</anchor>
      <arglist>(JNICALL *CallNonvirtualIntMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9bc67870a0c50b1e7af969edbe3247b7</anchor>
      <arglist>(JNICALL *CallNonvirtualIntMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d9e1b3aa041b25b6d7b472d726f96524</anchor>
      <arglist>(JNICALL *CallNonvirtualIntMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>752d326f90d96bcf991857dffd4f3ccd</anchor>
      <arglist>(JNICALL *CallNonvirtualLongMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>229d01533e3669ca5fb0394568127397</anchor>
      <arglist>(JNICALL *CallNonvirtualLongMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>57c9de4d66c87489e789ac8004a425ca</anchor>
      <arglist>(JNICALL *CallNonvirtualLongMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>dcf298e24661068c3b18aaa66e959aba</anchor>
      <arglist>(JNICALL *CallNonvirtualFloatMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>33df8c2d9a34a695bc59b7526084a009</anchor>
      <arglist>(JNICALL *CallNonvirtualFloatMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e434b8c1347a85c22a79ed006184471d</anchor>
      <arglist>(JNICALL *CallNonvirtualFloatMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f8c80960cb54addeb5c49cb1650b105f</anchor>
      <arglist>(JNICALL *CallNonvirtualDoubleMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>129bb66f2bdaea74e79fe44ea93575fe</anchor>
      <arglist>(JNICALL *CallNonvirtualDoubleMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4f4ffec3923efead4f7675699473be00</anchor>
      <arglist>(JNICALL *CallNonvirtualDoubleMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e767eaeee5356127508edf7251f2cf27</anchor>
      <arglist>(JNICALL *CallNonvirtualVoidMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jobject jclass jmethodID</type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>00754e405251e107d7e520b9ef0cc28f</anchor>
      <arglist>(JNICALL *CallNonvirtualVoidMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>126661a61e04611a0eba2e273f9d886b</anchor>
      <arglist>(JNICALL *CallNonvirtualVoidMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfieldID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>46a30570025fe653aa5c8cb92cf7893c</anchor>
      <arglist>(JNICALL *GetFieldID)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f819c369f6495b8b7f1969d9c0c9bb64</anchor>
      <arglist>(JNICALL *GetObjectField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0c683cf2d0af7d07b58067e946c04512</anchor>
      <arglist>(JNICALL *GetBooleanField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ff0d1db4999d984b9311825da00d5da4</anchor>
      <arglist>(JNICALL *GetByteField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>82695cebf813403004c629b673aa1cc4</anchor>
      <arglist>(JNICALL *GetCharField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>bafdc81f1d82c8dff9f884cdd92f4342</anchor>
      <arglist>(JNICALL *GetShortField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>329dd8ac49284c31a96ed17dda57fa4e</anchor>
      <arglist>(JNICALL *GetIntField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>2b2aab129524db17f0ad813600d47f30</anchor>
      <arglist>(JNICALL *GetLongField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>bd356aa8179020a6a1f32c2b6e927576</anchor>
      <arglist>(JNICALL *GetFloatField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c5d8d7971073e1c5c65bb30d97b0535a</anchor>
      <arglist>(JNICALL *GetDoubleField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c6e87a6a6d275331c6f83c86c1ef214d</anchor>
      <arglist>(JNICALL *SetObjectField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4fd39c6b515d946d0a59e7378e9628e3</anchor>
      <arglist>(JNICALL *SetBooleanField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d1cf029ccb515c7badccb57636ede297</anchor>
      <arglist>(JNICALL *SetByteField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>7deef16dfedab2c899eb9e6136352545</anchor>
      <arglist>(JNICALL *SetCharField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>eb62faf43f862d53f1eab759550253b3</anchor>
      <arglist>(JNICALL *SetShortField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>aad503b2d41ae2134e3c635938238961</anchor>
      <arglist>(JNICALL *SetIntField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>33621d381b41770f60089b14e23fe361</anchor>
      <arglist>(JNICALL *SetLongField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a0817c25cf34809c4a6e3ba4ecd90171</anchor>
      <arglist>(JNICALL *SetFloatField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c3eda8d9a993900d3ef0a482892557b6</anchor>
      <arglist>(JNICALL *SetDoubleField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jmethodID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>697cd30349c52039ca25ec7198109edf</anchor>
      <arglist>(JNICALL *GetStaticMethodID)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0cd1990d7ebdf36b75de007580b2cd8c</anchor>
      <arglist>(JNICALL *CallStaticObjectMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>061c52e0edc0ce20e306d6ffecad8955</anchor>
      <arglist>(JNICALL *CallStaticObjectMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1b96e568bd674516126fdf769268f81b</anchor>
      <arglist>(JNICALL *CallStaticObjectMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>342209b34dec013a05bc26c7b09b815d</anchor>
      <arglist>(JNICALL *CallStaticBooleanMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>29c71a5f4be5f13812971120857bb203</anchor>
      <arglist>(JNICALL *CallStaticBooleanMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>fb51de0d75e07c874b154f4aba32ce91</anchor>
      <arglist>(JNICALL *CallStaticBooleanMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>2b247cdec6bd46624762b5c09a3f82e2</anchor>
      <arglist>(JNICALL *CallStaticByteMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c62a34aa7d926d7ab5320af34b256cf5</anchor>
      <arglist>(JNICALL *CallStaticByteMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4e07fec1318e5339348ba5f59b5d106a</anchor>
      <arglist>(JNICALL *CallStaticByteMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>44b6942b8c6b747890654fcc3e2720db</anchor>
      <arglist>(JNICALL *CallStaticCharMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8917fc87f37dcaa9f1fe6b87ee8c2a9b</anchor>
      <arglist>(JNICALL *CallStaticCharMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>51ac858c5edb1eb4338fac36e0a5a0aa</anchor>
      <arglist>(JNICALL *CallStaticCharMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b70667a1033c5983a42d4d46b3ce4422</anchor>
      <arglist>(JNICALL *CallStaticShortMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>79398d8e75e89c0d790c529318b9559b</anchor>
      <arglist>(JNICALL *CallStaticShortMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>7002e88820f0dad7b30ce29a49895198</anchor>
      <arglist>(JNICALL *CallStaticShortMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1565eb19e6980d42ee6278c62e321730</anchor>
      <arglist>(JNICALL *CallStaticIntMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>127f09e2177ffe2b9161f1a5d815b996</anchor>
      <arglist>(JNICALL *CallStaticIntMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>405b00bffb751e2e51d784a5942063c0</anchor>
      <arglist>(JNICALL *CallStaticIntMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>3484b4a675666c3d8692ef7ab8d23874</anchor>
      <arglist>(JNICALL *CallStaticLongMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>2e74fe07c0c4f72069c80a35c5156f1b</anchor>
      <arglist>(JNICALL *CallStaticLongMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ab941d0c1e15adb43d530caeef16eedc</anchor>
      <arglist>(JNICALL *CallStaticLongMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>2e200e48446084483c1f60837c8a3a2c</anchor>
      <arglist>(JNICALL *CallStaticFloatMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6f60780c126d3be5035ed5635e0e01c5</anchor>
      <arglist>(JNICALL *CallStaticFloatMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1786c489d3f949cfffd38b6f09ad261c</anchor>
      <arglist>(JNICALL *CallStaticFloatMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f530ed2ece057325791a7726f4f75423</anchor>
      <arglist>(JNICALL *CallStaticDoubleMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8c60c25ed79c35409ca4354672397ea1</anchor>
      <arglist>(JNICALL *CallStaticDoubleMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>de7eff9ef69742a467ddada7284083d7</anchor>
      <arglist>(JNICALL *CallStaticDoubleMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e4f640b5a06fc5314a57ac3a7c03a5c3</anchor>
      <arglist>(JNICALL *CallStaticVoidMethod)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jclass jmethodID</type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>efd20413e51ffe0456d395d9055bd32b</anchor>
      <arglist>(JNICALL *CallStaticVoidMethodV)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>792868a5a88d5a01f8553357d6f967be</anchor>
      <arglist>(JNICALL *CallStaticVoidMethodA)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfieldID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0be743913c410352a164187c79db3a6b</anchor>
      <arglist>(JNICALL *GetStaticFieldID)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>20297166adf72d6b750a64b8e941ba04</anchor>
      <arglist>(JNICALL *GetStaticObjectField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a7e5bc8052a0aa2b3491fed695f890bd</anchor>
      <arglist>(JNICALL *GetStaticBooleanField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbyte</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6ae3b9bf9e653b64ff1949cd97ae96c6</anchor>
      <arglist>(JNICALL *GetStaticByteField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jchar</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5c0c1dcf75ffe105f8755e65e9e04552</anchor>
      <arglist>(JNICALL *GetStaticCharField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jshort</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5381515552efe8ba279b106890b60850</anchor>
      <arglist>(JNICALL *GetStaticShortField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>99ea76f1a7f06585a977650230e01a81</anchor>
      <arglist>(JNICALL *GetStaticIntField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e24ba6945d906c346b4f7115d8ed6d1a</anchor>
      <arglist>(JNICALL *GetStaticLongField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfloat</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>062335d499064d2e3986afd7b24422d4</anchor>
      <arglist>(JNICALL *GetStaticFloatField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jdouble</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>3e21eda356b40b3421c2fe48d98a8c4b</anchor>
      <arglist>(JNICALL *GetStaticDoubleField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>765fb3c222c3de311d6953131cd4fc4f</anchor>
      <arglist>(JNICALL *SetStaticObjectField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>11ebe5ce050d9b003d2c51e4e527aa76</anchor>
      <arglist>(JNICALL *SetStaticBooleanField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>af661cffcd8edcd3ad95930baa84f2bd</anchor>
      <arglist>(JNICALL *SetStaticByteField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0467e950310555a6ef07f10f22adb488</anchor>
      <arglist>(JNICALL *SetStaticCharField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4b6447e57d18358154694b01c0a683c4</anchor>
      <arglist>(JNICALL *SetStaticShortField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>596167fc1f1b2f8c72bb9035244ad2dd</anchor>
      <arglist>(JNICALL *SetStaticIntField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>afe02a94eb536572de27ac70cfff959f</anchor>
      <arglist>(JNICALL *SetStaticLongField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>acf974cd053f054d3509c686d7079af2</anchor>
      <arglist>(JNICALL *SetStaticFloatField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ac8e6283f130d0d7f30fa08299f39654</anchor>
      <arglist>(JNICALL *SetStaticDoubleField)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jstring</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8da5b33a1e0138a6fe796111ddf9f657</anchor>
      <arglist>(JNICALL *NewString)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jsize</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e2ef112f83e60d320ca4d70d07f432a5</anchor>
      <arglist>(JNICALL *GetStringLength)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>const jchar *JNICALL *</type>
      <name>GetStringChars</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9f794fc84ffbcbf140b8c7acdc396538</anchor>
      <arglist>(JNIEnv *env, jstring str, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9c5edb52b2b28ea1d162a50f38db28c2</anchor>
      <arglist>(JNICALL *ReleaseStringChars)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jstring</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>29baacaf00e6544fa387febd054b4a8b</anchor>
      <arglist>(JNICALL *NewStringUTF)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jsize</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5293b00e058f637a6e3f1414ed2d2633</anchor>
      <arglist>(JNICALL *GetStringUTFLength)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>const char *JNICALL *</type>
      <name>GetStringUTFChars</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e3858a6eec1573fdef451f512b5333e2</anchor>
      <arglist>(JNIEnv *env, jstring str, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1b403af7248133a4648e53c3114b6e2d</anchor>
      <arglist>(JNICALL *ReleaseStringUTFChars)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jsize</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>65de1666026201dd1017902680a4c3b2</anchor>
      <arglist>(JNICALL *GetArrayLength)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobjectArray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0f942bf224397eefb40aa1f770cfdcd7</anchor>
      <arglist>(JNICALL *NewObjectArray)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>747bdfd0682e8390ca06b30ca0849559</anchor>
      <arglist>(JNICALL *GetObjectArrayElement)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f8b5b640ed8b43a6bb1fd4841d88bda2</anchor>
      <arglist>(JNICALL *SetObjectArrayElement)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbooleanArray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0436cbb12745063525c8c85b183ae508</anchor>
      <arglist>(JNICALL *NewBooleanArray)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jbyteArray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8513966b48d728683f9d3189be136032</anchor>
      <arglist>(JNICALL *NewByteArray)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jcharArray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>be73b571ab2f9a40a3bebd4ec76c23e3</anchor>
      <arglist>(JNICALL *NewCharArray)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jshortArray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1bfe2a26165016511d563dbb096a7f33</anchor>
      <arglist>(JNICALL *NewShortArray)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jintArray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b84ea0b2d512b21695e116565df3103d</anchor>
      <arglist>(JNICALL *NewIntArray)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlongArray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a529f03cb7d214e9b0f49b296e1d940d</anchor>
      <arglist>(JNICALL *NewLongArray)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jfloatArray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d6623fcfc25e397a8ab4ef6d4d2df8be</anchor>
      <arglist>(JNICALL *NewFloatArray)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jdoubleArray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>febfd74853db34af628e7819aa1dd606</anchor>
      <arglist>(JNICALL *NewDoubleArray)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jboolean *JNICALL *</type>
      <name>GetBooleanArrayElements</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>db045d56479b6a128aafd2109d1f7543</anchor>
      <arglist>(JNIEnv *env, jbooleanArray array, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type>jbyte *JNICALL *</type>
      <name>GetByteArrayElements</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0e3f558efbc827dc0cb029af4acf68a7</anchor>
      <arglist>(JNIEnv *env, jbyteArray array, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type>jchar *JNICALL *</type>
      <name>GetCharArrayElements</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>73b716d25a84e03832527e7ec2103098</anchor>
      <arglist>(JNIEnv *env, jcharArray array, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type>jshort *JNICALL *</type>
      <name>GetShortArrayElements</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6e605f9d61091d46b08131c50d850a23</anchor>
      <arglist>(JNIEnv *env, jshortArray array, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type>jint *JNICALL *</type>
      <name>GetIntArrayElements</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>fcb6a4f58ea52771fae50da452961ef4</anchor>
      <arglist>(JNIEnv *env, jintArray array, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type>jlong *JNICALL *</type>
      <name>GetLongArrayElements</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f0a0c4497b86b9eee67eac79fa590cfe</anchor>
      <arglist>(JNIEnv *env, jlongArray array, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type>jfloat *JNICALL *</type>
      <name>GetFloatArrayElements</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>7e5b11adfce22f714b4a778d836176ab</anchor>
      <arglist>(JNIEnv *env, jfloatArray array, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type>jdouble *JNICALL *</type>
      <name>GetDoubleArrayElements</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5fdbe5e110608cb8f333ac3c9ab4eb8c</anchor>
      <arglist>(JNIEnv *env, jdoubleArray array, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b1332f748aa9587169c99e77943d85b7</anchor>
      <arglist>(JNICALL *ReleaseBooleanArrayElements)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8b58f8979a8b6876da92cbc4dd17f51d</anchor>
      <arglist>(JNICALL *ReleaseByteArrayElements)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b3f6deee113a4ef2c9b039a1e73015fd</anchor>
      <arglist>(JNICALL *ReleaseCharArrayElements)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d5d04f49a813090671fd985e573bd4b5</anchor>
      <arglist>(JNICALL *ReleaseShortArrayElements)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>494217f8edc81c210a4da4a0f039ef52</anchor>
      <arglist>(JNICALL *ReleaseIntArrayElements)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f022498c5d8f2ebe812e4c10854431dc</anchor>
      <arglist>(JNICALL *ReleaseLongArrayElements)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>bdca2a70e9ad302a3e2897941eb1e5c5</anchor>
      <arglist>(JNICALL *ReleaseFloatArrayElements)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5423005d31a0496b399b52c810933f77</anchor>
      <arglist>(JNICALL *ReleaseDoubleArrayElements)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e3c85442efc7d2c066eb96aa3aa94373</anchor>
      <arglist>(JNICALL *GetBooleanArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a19cdbb53dd8dd11877eefd4ba2c7f48</anchor>
      <arglist>(JNICALL *GetByteArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>73040950a9631eb05aac40acbdd18292</anchor>
      <arglist>(JNICALL *GetCharArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>2be754fc2cc826267eff3906a76088cb</anchor>
      <arglist>(JNICALL *GetShortArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>3f23d40c5bfb75d8283a6a32adef8acc</anchor>
      <arglist>(JNICALL *GetIntArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1fb61f9589bc993d2ceb4398b09343bc</anchor>
      <arglist>(JNICALL *GetLongArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c0dd2f6957b39b5962a3ab385cc160f8</anchor>
      <arglist>(JNICALL *GetFloatArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6aedcba50e71923f68facb0427bf7ca5</anchor>
      <arglist>(JNICALL *GetDoubleArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>081ddfced026ce013ad3d6eba05cf145</anchor>
      <arglist>(JNICALL *SetBooleanArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ce263f13e9562c13109c3eecac57ceb5</anchor>
      <arglist>(JNICALL *SetByteArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f54c751b727b3bcd73d6b96a50831371</anchor>
      <arglist>(JNICALL *SetCharArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>88f52926c5ad95fd4ab617119610915a</anchor>
      <arglist>(JNICALL *SetShortArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a76d03ad71a1930e180b5d628224374e</anchor>
      <arglist>(JNICALL *SetIntArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4678493701adfcd90cb89855620e9362</anchor>
      <arglist>(JNICALL *SetLongArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a7cad36134b28986380cc59ccb1dee2a</anchor>
      <arglist>(JNICALL *SetFloatArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e61bfa349a25cfec22c62256defec75a</anchor>
      <arglist>(JNICALL *SetDoubleArrayRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f0aec15892ec75d941b13155a92a93ba</anchor>
      <arglist>(JNICALL *RegisterNatives)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f48223931af71dc25d73db461ee092fe</anchor>
      <arglist>(JNICALL *UnregisterNatives)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f37a15aba7862cc721562ad3f942369e</anchor>
      <arglist>(JNICALL *MonitorEnter)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>94100814a3a5d6949dd322843f4c7fe7</anchor>
      <arglist>(JNICALL *MonitorExit)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c6a20f57486e080710150fe973abf731</anchor>
      <arglist>(JNICALL *GetJavaVM)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8c89511dcb20b6d184bf3b0207a8b95b</anchor>
      <arglist>(JNICALL *GetStringRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jchar *</type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1b3d4c42bcedf4997525b1e8c2fd50e4</anchor>
      <arglist>(JNICALL *GetStringUTFRegion)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>jchar char *void *JNICALL *</type>
      <name>GetPrimitiveArrayCritical</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4f2c7f92c17b9d10cf3e53e928d4b5a2</anchor>
      <arglist>(JNIEnv *env, jarray array, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>beba023a02861a1370aca489625707e2</anchor>
      <arglist>(JNICALL *ReleasePrimitiveArrayCritical)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>const jchar *JNICALL *</type>
      <name>GetStringCritical</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a2b2f8b9ca7b2edb7c962d855071f432</anchor>
      <arglist>(JNIEnv *env, jstring s, jboolean *isCopy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5400f43521e4ffa5b59eea69c1a58b89</anchor>
      <arglist>(JNICALL *ReleaseStringCritical)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jweak</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>539754409f4903527bc0b4457c214294</anchor>
      <arglist>(JNICALL *NewWeakGlobalRef)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>void</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b2f31fa9c5a72da11100f4a51e7b87ff</anchor>
      <arglist>(JNICALL *DeleteWeakGlobalRef)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jboolean</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>03b12735d309643fcc3b598d1d7cceb8</anchor>
      <arglist>(JNICALL *ExceptionCheck)(JNIEnv *env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jobject</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>7e70f51bc24353568a142e20529c87e8</anchor>
      <arglist>(JNICALL *NewDirectByteBuffer)(JNIEnv *env</arglist>
    </member>
    <member kind="function">
      <type>void *JNICALL *</type>
      <name>GetDirectBufferAddress</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8da03c262774d68f7f588f039bb89e98</anchor>
      <arglist>(JNIEnv *env, jobject buf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jlong</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5caf6a5e11ee3c1f82db3fabcaea5c58</anchor>
      <arglist>(JNICALL *GetDirectBufferCapacity)(JNIEnv *env</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved0</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9814afe8c3819e2e9516ad263cdf8387</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved1</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d3acba1977e7c341ed87cbb2116a94d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved2</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>cdb27ed79892c13cf105ccd47c8ffa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved3</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>bc17019c257071bc166b9eb05e55e96a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>bb9ad2389b082b87bbd77dff80aeb688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char jobject</type>
      <name>loader</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a42cb6a2b27b1b66fec6532b3c909ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char jobject const jbyte *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>120de6775958283cc288e0ffbcf4df71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char jobject const jbyte jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>22bcf1d705e1320d3443cebfa9d635c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>bb9ad2389b082b87bbd77dff80aeb688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>method</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>bde817cebc4d2ce2aa5d3095823b81f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>field</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>925a5654dc04c6b92a2ca40cf0078a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass</type>
      <name>cls</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5ce82a08d09cea18a0fe951c74e6c49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID</type>
      <name>methodID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>cc48743ba20b339e3916c6139dd582ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jboolean</type>
      <name>isStatic</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d408a02ef79ce598394ecde5a62613fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass</type>
      <name>sub</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>665401eabc508ceb69b1b0ed02eeb54c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jclass</type>
      <name>sup</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1193e2ff5eaa3c3222c7abc3be87cb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID</type>
      <name>fieldID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f446bf6287df38c8d4e2804ff4983628</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jboolean</type>
      <name>isStatic</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>33f276968dc03677b8b6f4a7fc0a8d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthrowable</type>
      <name>obj</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d6d099cfdd059c36949940457474f81f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass</type>
      <name>clazz</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>67b9cd8410c80b6dd291976a129a868c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const char *</type>
      <name>msg</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c46de18ca8dba4a151bf5eea36bc92e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>msg</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>723b6f0e4f618d42c51cf82b15179cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>cap</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5035da15156c3940ef3e443b141c13b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>res</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1354752175e226c3602b496a800885ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>lobj</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d31c1fc5fa94a47c224bf62b59fc9232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>gref</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>33a9caaf3e8b0bb1e22dac577e430f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>obj</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>dc4f72a40c04376323ff9d0549f3a60a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>obj1</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>629a5071b41f85615eddc80c25165100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jobject</type>
      <name>obj2</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0d206f668fd371a12f4215ad99185577</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>ref</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>3c7f6219c8c0bf98e08c0f7f51032cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>jint</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>6fe2a1b8054afa1239016424b5d12907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jclass</type>
      <name>clazz</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a305360f552ae76aad97fb450594222a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jclass jmethodID</type>
      <name>methodID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>55f70830284950297487fe60a9c90206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jclass jmethodID va_list</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>2ecee8843cbdfe75d1963b6de1dc12c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass</type>
      <name>clazz</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>26e52cf03b9114b63b5c807a0487dad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const char *</type>
      <name>name</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>aecf0921dae35a047d4bc2a4047d9615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const char const char *</type>
      <name>sig</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a8c20b754e41ec7c5ac00315c0460333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID</type>
      <name>methodID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>7398118f59cf566ab499fc75c7b19fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jobject</type>
      <name>obj</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>506117347ab8208816b7a6733959027b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jobject jmethodID</type>
      <name>methodID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>cc5603e887218c891e3d3703f1986df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jobject jmethodID va_list</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0a4b5e240d122730709c3f12f8e6ea84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e38de0a235e74f6ba77ef411826ddceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID</type>
      <name>methodID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>fe4752d79ebb004ae804728183ce0c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jobject</type>
      <name>obj</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>78913d3b97e0e9f56732f33950b9993d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jobject jclass</type>
      <name>clazz</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>02248bf00346f4c1b5e622eb6966f398</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jobject jclass jmethodID</type>
      <name>methodID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>35cf318caadc598ebdc7f6049d2ad9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jobject jclass jmethodID va_list</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f1aa6d713c36007d1248fdad43b0944a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a383f843bdc706e9a7233cab26cd686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const char *</type>
      <name>name</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>aecf0921dae35a047d4bc2a4047d9615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const char const char *</type>
      <name>sig</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a8c20b754e41ec7c5ac00315c0460333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID</type>
      <name>fieldID</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1ed81eb90270b377e6e231bfbeac5c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID jobject</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4381c90f390817d850a7d0a2c964a31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID jboolean</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8969c3c95a8b13c6e693aac321bcaaff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID jbyte</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>09ec8b4f68a3e04665d9e0c2c8507f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID jchar</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5728b61b6dfc1d37157e8434c3f79f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID jshort</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9bc09336e4ce440be3a2ff69a524e095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID jint</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0d80d01c4e7114e36b62dbe2b9061439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID jlong</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>579d68ef505a184498218d578e1a1c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID jfloat</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>36b84ff8fc7458d57c83e5d5efae44a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jfieldID jdouble</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>98b745b0bd95a2f5e7bd53d4cf6dc99d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const char *</type>
      <name>name</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>aecf0921dae35a047d4bc2a4047d9615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const char const char *</type>
      <name>sig</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a8c20b754e41ec7c5ac00315c0460333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jclass</type>
      <name>cls</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>20464dd48dbafa7ae800826af0e35e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jmethodID jvalue *</type>
      <name>args</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c95a4882d30b292e106aba3f4f658079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const char *</type>
      <name>name</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>aecf0921dae35a047d4bc2a4047d9615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const char const char *</type>
      <name>sig</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a8c20b754e41ec7c5ac00315c0460333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jobject</type>
      <name>value</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>614030333a62993603d1533316a3b45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jboolean</type>
      <name>value</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>98ba003a6407334fe43002acd354fab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jbyte</type>
      <name>value</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b8f8930418f41e9ef021e5bfe334e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jchar</type>
      <name>value</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c672032b85efd9e06fced3c6a5c00b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jshort</type>
      <name>value</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>7f97809e503b887d371d85e6a286fad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jint</type>
      <name>value</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>3a9576d650b91c9cf8bcf1dd7fedb642</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jlong</type>
      <name>value</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>7adf0ee220eabb1933c78c5a3bd3ebb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jfloat</type>
      <name>value</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9d8d6cdb22ab640b13579dbe98f0d3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jdouble</type>
      <name>value</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e99cc29cb93f9db6bccba63595ad2ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const jchar *</type>
      <name>unicode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>657eaa2c6dad1c6c06e73089527396c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const jchar jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1825daa9e440ee57a450192e60bac84b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jstring</type>
      <name>str</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0bf7418a69e70eb22604667aa951d091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jstring const jchar *</type>
      <name>chars</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>09b433ad383155fa497ff7215a40a893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>utf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1ee919ee5189c79505b32287713ae111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jstring const char *</type>
      <name>chars</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>af14689edcba40bf8b309a1e4c9b573f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jarray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>2390847dd0fbfd498704e7c8b718c5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>10ae47f425e78ded04ba126157e08b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jsize jclass</type>
      <name>clazz</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0256406577d2dac1602f7492160c1cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jsize jclass jobject</type>
      <name>init</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ad5870270882ec4d30a1b241a818aa15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobjectArray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>93eb34cef019fa7807a8d60eb913d16e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobjectArray jsize</type>
      <name>index</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>37cecb5ff98dbcf4abf93a98c5303bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobjectArray jsize jobject</type>
      <name>val</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>de50695e15099a2df46b3242b63eeeb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbooleanArray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>32b7a37a0046a0cca3809657c6a9996f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbooleanArray jboolean *</type>
      <name>elems</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a4465d92094031bfb26bf896fe00b103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbooleanArray jboolean jint</type>
      <name>mode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>be1867c59c54294e5a79f9218d7cc5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbyteArray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>63c7c86a8cfd18dff7af144631436dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbyteArray jbyte *</type>
      <name>elems</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0087b745e38e68086b971b405201d2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbyteArray jbyte jint</type>
      <name>mode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>cdbd3c4229cc6b0c2b309e6277f03bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jcharArray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ad51b9f80ebd349956022730fff6b8d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jcharArray jchar *</type>
      <name>elems</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ccbcf064b3c544b7049c9c528622f35c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jcharArray jchar jint</type>
      <name>mode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a92a13e1ecefc09876a9720066a27c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jshortArray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>bcc5fb7abb65cf8745d8df570c75e343</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jshortArray jshort *</type>
      <name>elems</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>78dbeee350c26c1e21824fb9927c91ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jshortArray jshort jint</type>
      <name>mode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>34da5d11c68cbf0d764b3465a9fd5e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jintArray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5070c425afe82202bf3e5ef919ee0857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jintArray jint *</type>
      <name>elems</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>1b07cd4530050a4d124d898671245492</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jintArray jint jint</type>
      <name>mode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>ebe718191d6f49269fdf1a7a7af9376e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlongArray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c4cfc54213cb45630c6bcacb2d3942e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlongArray jlong *</type>
      <name>elems</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>cf5e0df550bb3663e3640be8fa9d0f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlongArray jlong jint</type>
      <name>mode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9a6d09e3f9a73f5dcb82e43f32786830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jfloatArray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>aa62259cbe2f7af18c1b72c9334d2702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jfloatArray jfloat *</type>
      <name>elems</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>34b39c0a9ddd88f8f3d335581e886bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jfloatArray jfloat jint</type>
      <name>mode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>71d42cb09d29d8723d884985cfcab12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jdoubleArray</type>
      <name>array</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>07854a63895a3ee7bcaa2dee98ae8136</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jdoubleArray jdouble *</type>
      <name>elems</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8112e5de87226b1285623f66bf872736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jdoubleArray jdouble jint</type>
      <name>mode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>938f4b3ed21a8c455e2510781233d9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbooleanArray jsize</type>
      <name>start</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4d424ee1b700b76b9575e3b343d2e5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbooleanArray jsize jsize</type>
      <name>l</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8595d9e6452bc7705a22701e16d77efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbooleanArray jsize jsize jboolean *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>85bac95ac73c09fd362bb070b1716df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbyteArray jsize</type>
      <name>start</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5d2a8bf7063f9365a83c4be52cd4199e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbyteArray jsize jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a6c33d532259c9a65b02127d66d667f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbyteArray jsize jsize jbyte *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>864064ef4a4ad5fbb1815bd280f1b242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jcharArray jsize</type>
      <name>start</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e2d72f08a947a2497937e214a1235cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jcharArray jsize jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>b1cdb1e3d0ac351d3e871a232b7a79e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jcharArray jsize jsize jchar *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>06560da7b7456e5c32b8eb55ca67f650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jshortArray jsize</type>
      <name>start</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e093d2b573c4fed5778dcaf5109c5d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jshortArray jsize jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f0a6028a65fc5e7501c6ac1398e1ef51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jshortArray jsize jsize jshort *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f56964513b8d9ddc9ac318aac48f3531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jintArray jsize</type>
      <name>start</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>11aa997fe6916be825b58c7bc050f492</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jintArray jsize jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>49910fbdf48e18948de57a2f4528898b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jintArray jsize jsize jint *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>42544c337d4374ce87161a4083d01723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlongArray jsize</type>
      <name>start</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>349a7472b1644d64d280d70d8b7fdb39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlongArray jsize jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>16b8446d437edd6f1a58e5e5b1b832fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlongArray jsize jsize jlong *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4ff6bd789278ebd155ed6250eeefe5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jfloatArray jsize</type>
      <name>start</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>61b4fa77e0c6b90a6337cb9717fa06b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jfloatArray jsize jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>9ee526f96d0a26f96eddef42567eb478</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jfloatArray jsize jsize jfloat *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>13f69cda2c2e5de293e92c34da93ef16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jdoubleArray jsize</type>
      <name>start</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f179c6256684a7c96fda276d83012ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jdoubleArray jsize jsize</type>
      <name>len</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c08cbd85f6b16eaff030590e67052bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jdoubleArray jsize jsize jdouble *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5ae9c7e987548dde9605d6ae627a80db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbooleanArray jsize jsize jboolean *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>85bac95ac73c09fd362bb070b1716df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbyteArray jsize jsize jbyte *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>864064ef4a4ad5fbb1815bd280f1b242</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jcharArray jsize jsize jchar *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>06560da7b7456e5c32b8eb55ca67f650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jshortArray jsize jsize jshort *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>f56964513b8d9ddc9ac318aac48f3531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jintArray jsize jsize jint *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>42544c337d4374ce87161a4083d01723</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlongArray jsize jsize jlong *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>4ff6bd789278ebd155ed6250eeefe5a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jfloatArray jsize jsize jfloat *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>13f69cda2c2e5de293e92c34da93ef16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jdoubleArray jsize jsize jdouble *</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5ae9c7e987548dde9605d6ae627a80db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const JNINativeMethod *</type>
      <name>methods</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>28bb3e4b483fda013a2f9f23f8f35a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass const JNINativeMethod jint</type>
      <name>nMethods</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c0663dc137aac9b3aedc4ef2f1384a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JavaVM **</type>
      <name>vm</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>0ff0939e0ed36f768f45bee2cd7c59aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>jstring</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>465a251862e7cc7baf330c74787264e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>jsize</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>a7a147102d34b63960315b568db72de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jchar *</type>
      <name>jstring</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5965750b288f4eb3953e21a3df948b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jchar</type>
      <name>jsize</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>77865c03e171ddfa2208b753ee347b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jarray void *</type>
      <name>carray</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>d32bb786e3764a40631f0f4fd1720f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jarray void jint</type>
      <name>mode</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>14078e929e7470199e783ea7804c76c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jstring</type>
      <name>s</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>e694db93b85c2e66eda864ac65b1b380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jstring const jchar *</type>
      <name>cstr</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>c021e58f6da542e1078472c3cab468f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jweak</type>
      <name>obj</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>664ec98da25cdb0571cb0a08fda87b25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>address</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>096bdb62070145ab6328399158e5bbe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void jlong</type>
      <name>capacity</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>8c64e8bf667ed1dfe102f2d1fd8a3ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>buf</name>
      <anchorfile>struct_j_n_i_native_interface__.html</anchorfile>
      <anchor>5fcdb2367bb427d0094030e3537a5d4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JNINativeMethod</name>
    <filename>struct_j_n_i_native_method.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>struct_j_n_i_native_method.html</anchorfile>
      <anchor>886dedcd58f3a13bd2cd094454b28c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>signature</name>
      <anchorfile>struct_j_n_i_native_method.html</anchorfile>
      <anchor>dd3e0001371a3f6eff24e1eb87b4b751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>fnPtr</name>
      <anchorfile>struct_j_n_i_native_method.html</anchorfile>
      <anchor>603bb8ca19db5f4173265324aae72d17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jthread_start_proc_data</name>
    <filename>structjthread__start__proc__data.html</filename>
    <member kind="variable">
      <type>hythread_t</type>
      <name>native_thread</name>
      <anchorfile>structjthread__start__proc__data.html</anchorfile>
      <anchor>c27d49c9d5add26141779f83a954df7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JavaVM *</type>
      <name>java_vm</name>
      <anchorfile>structjthread__start__proc__data.html</anchorfile>
      <anchor>83c5f3591c329f1e15002d20f1b487ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>priority</name>
      <anchorfile>structjthread__start__proc__data.html</anchorfile>
      <anchor>73ef4a41980eea3c29af6631c5e7971f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UDATA</type>
      <name>stacksize</name>
      <anchorfile>structjthread__start__proc__data.html</anchorfile>
      <anchor>0211ef51a763191374761d78fb7dd248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jboolean</type>
      <name>daemon</name>
      <anchorfile>structjthread__start__proc__data.html</anchorfile>
      <anchor>fa87e8b7725351911612b74068dff119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEnv *</type>
      <name>jvmti_env</name>
      <anchorfile>structjthread__start__proc__data.html</anchorfile>
      <anchor>2d2348c8cb4050b161fb2f7c8820ace8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiStartFunction</type>
      <name>proc</name>
      <anchorfile>structjthread__start__proc__data.html</anchorfile>
      <anchor>fd701a4e04a5e8bb3733a039a79636c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>arg</name>
      <anchorfile>structjthread__start__proc__data.html</anchorfile>
      <anchor>6399855efc4184eae7e8d86e04218e3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>jvalue</name>
    <filename>unionjvalue.html</filename>
    <member kind="variable">
      <type>jboolean</type>
      <name>z</name>
      <anchorfile>unionjvalue.html</anchorfile>
      <anchor>aefdeb0dd22e4298e1f4b587e9db60eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbyte</type>
      <name>b</name>
      <anchorfile>unionjvalue.html</anchorfile>
      <anchor>22028a0382ea48ec0c2f571a4fa3c2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jchar</type>
      <name>c</name>
      <anchorfile>unionjvalue.html</anchorfile>
      <anchor>6f65e6984a3509917e3ca5ca97ee803e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jshort</type>
      <name>s</name>
      <anchorfile>unionjvalue.html</anchorfile>
      <anchor>37f52b742a360f9c6776b1b4e6118822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>i</name>
      <anchorfile>unionjvalue.html</anchorfile>
      <anchor>429bc7bbf54f470e6af3b08c977816fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong</type>
      <name>j</name>
      <anchorfile>unionjvalue.html</anchorfile>
      <anchor>4ef15cf84df7d1bc07d29509a4a12976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jfloat</type>
      <name>f</name>
      <anchorfile>unionjvalue.html</anchorfile>
      <anchor>ca1d07e4a0340617d1514c4b80efd3e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jdouble</type>
      <name>d</name>
      <anchorfile>unionjvalue.html</anchorfile>
      <anchor>68d0cdf968ed5b20e3f047fb4fbc5a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>l</name>
      <anchorfile>unionjvalue.html</anchorfile>
      <anchor>02043b3d08e3ca75c416cd72d68b03e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiAddrLocationMap</name>
    <filename>structjvmti_addr_location_map.html</filename>
    <member kind="variable">
      <type>const void *</type>
      <name>start_address</name>
      <anchorfile>structjvmti_addr_location_map.html</anchorfile>
      <anchor>b88193e186bcc06f8197ec0aa1b96524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlocation</type>
      <name>location</name>
      <anchorfile>structjvmti_addr_location_map.html</anchorfile>
      <anchor>a36f9aa33cff58c221917063c3b98d43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiCapabilities</name>
    <filename>structjvmti_capabilities.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_tag_objects</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>77089888c3e8d3e6fb7817e48ac79eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_field_modification_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>e93656168a8f43ac551337df2616c1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_field_access_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>51e127b93d568e6d7c384fd162e16fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_bytecodes</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>dfc6bb771fa2993d11bd7d81315c3e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_synthetic_attribute</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>4716febd04618ab23efb217478ed858c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_owned_monitor_info</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>11064ce0f67f304a287416682d355964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_current_contended_monitor</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>3e2079b3d79098508c893b0e3da6bae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_monitor_info</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>2ad49516ef35795ddecc9db1b96d713f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_pop_frame</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>01b0e5512ce5c2ad90e83bb7e59960ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_redefine_classes</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>615c9529238251ebca98fbb731e211af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_signal_thread</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>3bd8d67695d051320e1c6f3eef3e0354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_source_file_name</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>266b338c2e95895eb48de052676f9d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_line_numbers</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>47032418120bafca35cc10c439d94f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_source_debug_extension</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>dd2ff9351748d648422089b7ce0e26c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_access_local_variables</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>de3b7fcecfcfd996d555a1bf03fbf654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_maintain_original_method_order</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>d05b38ca198b6df8973568a8570ddd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_single_step_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>9216028512a1dba9f9942cf7f1f5b97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_exception_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>2d4386270d03e837e67e2b46d1ce3fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_frame_pop_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>7e3a54417ea52a5fc21d45f775d7497d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_breakpoint_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>da3c79a6da6fb7d5b2ad28c493962e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_suspend</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>00734d4356e43a7ddeef7f50a417897f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_redefine_any_class</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>76463358642d94244578dac0d67fcd1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_current_thread_cpu_time</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>5dc771b850476dff9b2e24f08b3afd71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_get_thread_cpu_time</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>ca3e92f80a4f3e767a9f48cf3fbcd020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_method_entry_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>e324d956d033833d3be0618e39e8a88b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_method_exit_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>d5db9d28d1d909b260d522787e3f5ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_all_class_hook_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>ed2f9e744bcce2bc08be88b30801f558</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_compiled_method_load_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>c130e2e7997abd34ba14e5588da13171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_monitor_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>faefefa8c8051abb6893f7ed476c21bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_vm_object_alloc_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>1b1142a98d66eb8c41ebffea3d123660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_native_method_bind_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>d215f8789e7b5d8c7cb6aaaf460d8623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_garbage_collection_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>7ad81c68b71b148236453c3275baadf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>can_generate_object_free_events</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>ec39777533bb81c9ff9f8515a3a3e7b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>int</name>
      <anchorfile>structjvmti_capabilities.html</anchorfile>
      <anchor>ba30c82424d904112c2393a77b1c1998</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiClassDefinition</name>
    <filename>structjvmti_class_definition.html</filename>
    <member kind="variable">
      <type>jclass</type>
      <name>klass</name>
      <anchorfile>structjvmti_class_definition.html</anchorfile>
      <anchor>045cb79bba5d2d091d8fefed4c4124ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>class_byte_count</name>
      <anchorfile>structjvmti_class_definition.html</anchorfile>
      <anchor>d404a6268ad11fa63211510ebb65ab7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned char *</type>
      <name>class_bytes</name>
      <anchorfile>structjvmti_class_definition.html</anchorfile>
      <anchor>dd3bc96747e4de7bd650fe812736f78d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiEnv_struct</name>
    <filename>structjvmti_env__struct.html</filename>
    <member kind="variable">
      <type>ti_interface *</type>
      <name>funcs</name>
      <anchorfile>structjvmti_env__struct.html</anchorfile>
      <anchor>c03638f6003e76bc6af7ea823d50dc37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiEventCallbacks</name>
    <filename>structjvmti_event_callbacks.html</filename>
    <member kind="variable">
      <type>jvmtiEventVMInit</type>
      <name>VMInit</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>a9742b13b594fb129173ff872953d896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventVMDeath</type>
      <name>VMDeath</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>b5c049b15f5e2011fa4f6a8365166545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventThreadStart</type>
      <name>ThreadStart</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>43a91d996ea568ec99ba2318e39ca6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventThreadEnd</type>
      <name>ThreadEnd</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>e5179ebafde2b993cd2987d11a3b87aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventClassFileLoadHook</type>
      <name>ClassFileLoadHook</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>e31f3704e6f584f715a75710ba43e9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventClassLoad</type>
      <name>ClassLoad</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>18daf3767848c23ed6bf766bb90eda95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventClassPrepare</type>
      <name>ClassPrepare</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>b99ae017750c14ccf7c5dc83f7a39002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventVMStart</type>
      <name>VMStart</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>f63fa01030238f4d5a5eb04b877d620d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventException</type>
      <name>Exception</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>863cee2b81d592ad55cb9f8743c7be83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventExceptionCatch</type>
      <name>ExceptionCatch</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>e5cae764ac6a8897ab35579caaf1a2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventSingleStep</type>
      <name>SingleStep</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>db5d26e2bd94795cbc27649278d23057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventFramePop</type>
      <name>FramePop</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>9480db6798e1b3515f450a19c8d324cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventBreakpoint</type>
      <name>Breakpoint</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>86b1461ef814791428da2141b0204e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventFieldAccess</type>
      <name>FieldAccess</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>0ae577ee8281827b83c594038c245f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventFieldModification</type>
      <name>FieldModification</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>94da64aef9b223866ed2cb6ded58e59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMethodEntry</type>
      <name>MethodEntry</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>b85cf60f3b5ebbce8c22e74fe4bd1e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMethodExit</type>
      <name>MethodExit</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>a0837b390d09717b7a64fee37abb2f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventNativeMethodBind</type>
      <name>NativeMethodBind</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>efe89f27ad7001e28d5ece800a332e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventCompiledMethodLoad</type>
      <name>CompiledMethodLoad</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>b9c7824e830e4c7dd1406a996f2e7e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventCompiledMethodUnload</type>
      <name>CompiledMethodUnload</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>af1d04c6db38a34d574e524ac4e4837c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventDynamicCodeGenerated</type>
      <name>DynamicCodeGenerated</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>f1677b344466b34cefcbcf93fcd1a544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventDataDumpRequest</type>
      <name>DataDumpRequest</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>eac5104364eaca6fa5fae047d7963e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventDataResetRequest</type>
      <name>DataResetRequest</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>9fd1aa2684fe57044a44b96fe76ba12d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMonitorWait</type>
      <name>MonitorWait</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>431a77079a7a76f1592c583de463c156</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMonitorWaited</type>
      <name>MonitorWaited</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>6ef67bdf9374624b635d183f3932f19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMonitorContendedEnter</type>
      <name>MonitorContendedEnter</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>2fc693300ea999871600de9f4b27cc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMonitorContendedEntered</type>
      <name>MonitorContendedEntered</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>628db21d1d2fc231e1279ab3d580be42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventReserved</type>
      <name>reserved77</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>fa175b26a429759aa61f9315490c28c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventReserved</type>
      <name>reserved78</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>e2b377c3e969b26734a9011605d9d4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventReserved</type>
      <name>reserved79</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>01a960529196acbaea93b7cc1cc1df11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventReserved</type>
      <name>reserved80</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>568a9841233d8960413d275d0e297402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventGarbageCollectionStart</type>
      <name>GarbageCollectionStart</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>5fb412eebdc10c94dbcd3505f4171d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventGarbageCollectionFinish</type>
      <name>GarbageCollectionFinish</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>7f56e4023ef5a6a486bf2ac32681e206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventObjectFree</type>
      <name>ObjectFree</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>9fd15400405c6a0d8a8e19e9c7ec4721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventVMObjectAlloc</type>
      <name>VMObjectAlloc</name>
      <anchorfile>structjvmti_event_callbacks.html</anchorfile>
      <anchor>16298c2de787a8df610f146fde22a882</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiExtensionEventInfo</name>
    <filename>structjvmti_extension_event_info.html</filename>
    <member kind="variable">
      <type>jint</type>
      <name>extension_event_index</name>
      <anchorfile>structjvmti_extension_event_info.html</anchorfile>
      <anchor>7e439ff9d553c3e69171257890da1016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>id</name>
      <anchorfile>structjvmti_extension_event_info.html</anchorfile>
      <anchor>e6648b1c27b0eb4f2c8709044fbdedb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>short_description</name>
      <anchorfile>structjvmti_extension_event_info.html</anchorfile>
      <anchor>b1e02987a597bd55095f2f82410d769c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>param_count</name>
      <anchorfile>structjvmti_extension_event_info.html</anchorfile>
      <anchor>2f9f0f4d4b62a82f83670735ff3f0198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiParamInfo *</type>
      <name>params</name>
      <anchorfile>structjvmti_extension_event_info.html</anchorfile>
      <anchor>aca81420602fcaadad0057b6c6c20653</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiExtensionFunctionInfo</name>
    <filename>structjvmti_extension_function_info.html</filename>
    <member kind="variable">
      <type>jvmtiExtensionFunction</type>
      <name>func</name>
      <anchorfile>structjvmti_extension_function_info.html</anchorfile>
      <anchor>2a507c599b83f34a8e748afd2937c6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>id</name>
      <anchorfile>structjvmti_extension_function_info.html</anchorfile>
      <anchor>1b915fbaf2eec96a9466fce6fd698947</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>short_description</name>
      <anchorfile>structjvmti_extension_function_info.html</anchorfile>
      <anchor>d9c2c8afcd90656b2b6c7e44aba043f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>param_count</name>
      <anchorfile>structjvmti_extension_function_info.html</anchorfile>
      <anchor>bd0f2ddea9442d66706151db470fce2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiParamInfo *</type>
      <name>params</name>
      <anchorfile>structjvmti_extension_function_info.html</anchorfile>
      <anchor>5a937c1e3ee2db5d8cad20a0a428c45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>error_count</name>
      <anchorfile>structjvmti_extension_function_info.html</anchorfile>
      <anchor>0472ff39b363e45ed59d31dc306dd2e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError *</type>
      <name>errors</name>
      <anchorfile>structjvmti_extension_function_info.html</anchorfile>
      <anchor>acca6f1234188ba73c8fcf8fd86dbdc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiFrameInfo</name>
    <filename>structjvmti_frame_info.html</filename>
    <member kind="variable">
      <type>jmethodID</type>
      <name>method</name>
      <anchorfile>structjvmti_frame_info.html</anchorfile>
      <anchor>760a153dd874bc322a7412a43c19ca72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlocation</type>
      <name>location</name>
      <anchorfile>structjvmti_frame_info.html</anchorfile>
      <anchor>65f57b1904c6278d7007c508ee4ff4c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiLineNumberEntry</name>
    <filename>structjvmti_line_number_entry.html</filename>
    <member kind="variable">
      <type>jlocation</type>
      <name>start_location</name>
      <anchorfile>structjvmti_line_number_entry.html</anchorfile>
      <anchor>f70f90befaeaa4d228015cff82da71a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>line_number</name>
      <anchorfile>structjvmti_line_number_entry.html</anchorfile>
      <anchor>9a21ff9a6fa0a0d48720745fe4b25828</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JVMTILocalStorage</name>
    <filename>struct_j_v_m_t_i_local_storage.html</filename>
    <member kind="variable">
      <type>jvmtiEnv *</type>
      <name>env</name>
      <anchorfile>struct_j_v_m_t_i_local_storage.html</anchorfile>
      <anchor>f6c26f83806c8d47e65cf95af310c223</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>struct_j_v_m_t_i_local_storage.html</anchorfile>
      <anchor>300661adb6ade85e2467547d12ed75aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiLocalVariableEntry</name>
    <filename>structjvmti_local_variable_entry.html</filename>
    <member kind="variable">
      <type>jlocation</type>
      <name>start_location</name>
      <anchorfile>structjvmti_local_variable_entry.html</anchorfile>
      <anchor>3277880b1b7267101c19d99f8023476c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>length</name>
      <anchorfile>structjvmti_local_variable_entry.html</anchorfile>
      <anchor>8c5be1e42c224ee50d0c2216d1ca08c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjvmti_local_variable_entry.html</anchorfile>
      <anchor>5db761b5db1a6ac6698b19f03c18701a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>signature</name>
      <anchorfile>structjvmti_local_variable_entry.html</anchorfile>
      <anchor>fb778497af303d700ca59c95a2f3f0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>generic_signature</name>
      <anchorfile>structjvmti_local_variable_entry.html</anchorfile>
      <anchor>d8a024eae06560fe0495f995557f4140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>slot</name>
      <anchorfile>structjvmti_local_variable_entry.html</anchorfile>
      <anchor>0c8cea5f0d99e46e87db3fcc987cac5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiMonitorUsage</name>
    <filename>structjvmti_monitor_usage.html</filename>
    <member kind="variable">
      <type>jthread</type>
      <name>owner</name>
      <anchorfile>structjvmti_monitor_usage.html</anchorfile>
      <anchor>f43949f7f19ca68c1cc5d7db4127c100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>entry_count</name>
      <anchorfile>structjvmti_monitor_usage.html</anchorfile>
      <anchor>c0dbe50af4108f93b981a3951bf2252e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>waiter_count</name>
      <anchorfile>structjvmti_monitor_usage.html</anchorfile>
      <anchor>5e3090e38b848faf0c8df386954028c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread *</type>
      <name>waiters</name>
      <anchorfile>structjvmti_monitor_usage.html</anchorfile>
      <anchor>031d8fe1ebffc1835ee61289e77e08ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>notify_waiter_count</name>
      <anchorfile>structjvmti_monitor_usage.html</anchorfile>
      <anchor>e9dcf1737e72b81a3b66982dd9dff7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread *</type>
      <name>notify_waiters</name>
      <anchorfile>structjvmti_monitor_usage.html</anchorfile>
      <anchor>4f9147ede89a72565a42f54b8659f2e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiParamInfo</name>
    <filename>structjvmti_param_info.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjvmti_param_info.html</anchorfile>
      <anchor>5821b84fa46fc33452b5d9fe7bf90586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiParamKind</type>
      <name>kind</name>
      <anchorfile>structjvmti_param_info.html</anchorfile>
      <anchor>badfc391e00ddd68c21bc20f2e3751a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiParamTypes</type>
      <name>base_type</name>
      <anchorfile>structjvmti_param_info.html</anchorfile>
      <anchor>6e22a8b16687bfc28f57adf299218faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jboolean</type>
      <name>null_ok</name>
      <anchorfile>structjvmti_param_info.html</anchorfile>
      <anchor>cef15e04cd18906071ce323ce4f6fdb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiStackInfo</name>
    <filename>structjvmti_stack_info.html</filename>
    <member kind="variable">
      <type>jthread</type>
      <name>thread</name>
      <anchorfile>structjvmti_stack_info.html</anchorfile>
      <anchor>38b5b981725ab221cddf0a18810e182f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>state</name>
      <anchorfile>structjvmti_stack_info.html</anchorfile>
      <anchor>c2022b65c7efd7b187df1c721b598151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiFrameInfo *</type>
      <name>frame_buffer</name>
      <anchorfile>structjvmti_stack_info.html</anchorfile>
      <anchor>38c4567ed35e02d505400e2be9f30aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>frame_count</name>
      <anchorfile>structjvmti_stack_info.html</anchorfile>
      <anchor>1781556fd36aefc2ace52eb06e5cc2e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>JVMTIThread</name>
    <filename>struct_j_v_m_t_i_thread.html</filename>
    <member kind="variable">
      <type>jlong</type>
      <name>blocked_count</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>5d3ed79b596b525a42b16d111138503a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong</type>
      <name>blocked_time</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>03e26f6ff633bb2ffd67078ea6ea9ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong</type>
      <name>waited_count</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>71643f02ab73ba764b79c7e894ba1b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong</type>
      <name>waited_time</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>598d3e61a3b0a4938956e4f5cf24312f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JVMTILocalStorage</type>
      <name>jvmti_local_storage</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>7daace718c41946ec3fa05a739a22211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>contended_monitor</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>6e049416fed05f63492bb27312b3acca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>wait_monitor</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>5c9502954fc943bf67271a443fc72fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject *</type>
      <name>owned_monitors</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>6c4e99d78fff0307630434e7979af4f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>owned_monitors_nmb</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>c91bc2c83f58585fe861280d52cc19a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>owned_monitors_size</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>1446422173d9341169161bbf7d145e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ManagedObject *</type>
      <name>p_exception_object_ti</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>52f2efcc7c76e29bdb20b99a2569ff25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jbyte *</type>
      <name>jvmti_jit_breakpoints_handling_buffer</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>a49cc2815d297d0b13045d99dce93963</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmti_frame_pop_listener *</type>
      <name>frame_pop_listener</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>aeede5606a97122dfdc5e0e8e3cb92c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JVMTISingleStepState *</type>
      <name>ss_state</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>82ef27110d11db6cd7836949560f0f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Registers *</type>
      <name>jvmti_saved_exception_registers</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>14f947239578995bfef1f598d3c53263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>violation_flag</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>fd54a618359f6c197e6cfed8bf30ab06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>violation_restart_address</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>0a4b7086e22331423f3919c79ef91099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NCAISingleStepState *</type>
      <name>ncai_ss</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>a1d1d9ae93465e6a5a3473a32f4c614e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jboolean</type>
      <name>flag_ncai_handler</name>
      <anchorfile>struct_j_v_m_t_i_thread.html</anchorfile>
      <anchor>cd04ec20efe6ca2bb78bea2402a50a76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiThreadGroupInfo</name>
    <filename>structjvmti_thread_group_info.html</filename>
    <member kind="variable">
      <type>jthreadGroup</type>
      <name>parent</name>
      <anchorfile>structjvmti_thread_group_info.html</anchorfile>
      <anchor>8c539b152a2f8a5d3cfa597c715749db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjvmti_thread_group_info.html</anchorfile>
      <anchor>b5163cf2d43b3c161402dc98f84b0c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>max_priority</name>
      <anchorfile>structjvmti_thread_group_info.html</anchorfile>
      <anchor>8c96e6e32c9d2ebb7cfd43f9ab36f272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jboolean</type>
      <name>is_daemon</name>
      <anchorfile>structjvmti_thread_group_info.html</anchorfile>
      <anchor>8e3090a1102e1e26a187c35109286651</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiThreadInfo</name>
    <filename>structjvmti_thread_info.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjvmti_thread_info.html</anchorfile>
      <anchor>ddc4eacc5802ee03d6e2aefb380b5201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>priority</name>
      <anchorfile>structjvmti_thread_info.html</anchorfile>
      <anchor>bdb244c08edc794e1a2e01d1d4c31669</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jboolean</type>
      <name>is_daemon</name>
      <anchorfile>structjvmti_thread_info.html</anchorfile>
      <anchor>c548106516ba87a779fd25bcb434c2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthreadGroup</type>
      <name>thread_group</name>
      <anchorfile>structjvmti_thread_info.html</anchorfile>
      <anchor>959348aa76232cc62a5b82c724cd2cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>context_class_loader</name>
      <anchorfile>structjvmti_thread_info.html</anchorfile>
      <anchor>c4898f1c06fed83d1be0cd661bc44370</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jvmtiTimerInfo</name>
    <filename>structjvmti_timer_info.html</filename>
    <member kind="variable">
      <type>jlong</type>
      <name>max_value</name>
      <anchorfile>structjvmti_timer_info.html</anchorfile>
      <anchor>83415487f0ffb077fb83cf42b189f385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jboolean</type>
      <name>may_skip_forward</name>
      <anchorfile>structjvmti_timer_info.html</anchorfile>
      <anchor>0eda3365932eea4774aaa39903672c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jboolean</type>
      <name>may_skip_backward</name>
      <anchorfile>structjvmti_timer_info.html</anchorfile>
      <anchor>51ca1828f4e36da1323971c92ca757eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiTimerKind</type>
      <name>kind</name>
      <anchorfile>structjvmti_timer_info.html</anchorfile>
      <anchor>0f8161c3b9a980e354244bdb6983fccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong</type>
      <name>reserved1</name>
      <anchorfile>structjvmti_timer_info.html</anchorfile>
      <anchor>bfc169f6d9b1145a5f8c1b0d27f91201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong</type>
      <name>reserved2</name>
      <anchorfile>structjvmti_timer_info.html</anchorfile>
      <anchor>04485cc876e82ded9026ab3ac34efd62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LoggerString</name>
    <filename>class_logger_string.html</filename>
    <member kind="typedef">
      <type>std::ios_base &amp;(*)</type>
      <name>iomanip</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>84661b0eb55556a58c1d53577bceb119</anchor>
      <arglist>(std::ios_base &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>std::ostream &amp;(*)</type>
      <name>iomanip2</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>44cd1bda653f9bbf342cb63f513d0cb3</anchor>
      <arglist>(std::ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>release</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>2377bcb4007ad5429f706bbc9b84c4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>485512ef8def1efcae84eeccfe6af506</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>222ff6ca55cff73b5df424c30d0ce931</anchor>
      <arglist>(char *message)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>7f7750f378fb27d40a58e0502fd54821</anchor>
      <arglist>(volatile void *pointer)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>b36e6ec14d4d2771e20c1919a8d399cc</anchor>
      <arglist>(const void *pointer)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>533603ab758ac4e7d4f4a5f207ddf3cf</anchor>
      <arglist>(void *pointer)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>b32b11dcb05e56da1ee67e0281154836</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>ea1f11006fe904f39f5ed5f3e1f5f920</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>0a559a1020695b0d1013e90609e7ad92</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>a793b347a6407f950703b752f1f2eac0</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>5439872a30e1650f5862fd2d12056c15</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>72a764d01a7cc73d1136ae9e8366aa08</anchor>
      <arglist>(int64 i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>4b32dd9c9734f448a5b9ec83ab5c98e5</anchor>
      <arglist>(uint64 i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>b59b4b030d1624340a5b703d6f3bb88d</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>a5796030c742e0c013828fba0a0651fd</anchor>
      <arglist>(iomanip UNREF i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>1886bee474318e7be4986d1077980d38</anchor>
      <arglist>(iomanip2 UNREF i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LogSite</name>
    <filename>struct_log_site.html</filename>
    <member kind="variable">
      <type>CachedState</type>
      <name>state</name>
      <anchorfile>struct_log_site.html</anchorfile>
      <anchor>a5358a349e626074bb1fd409bc507b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LogSite *</type>
      <name>next</name>
      <anchorfile>struct_log_site.html</anchorfile>
      <anchor>1154e075e442465baa8ac1ba6a52f587</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>port_disasm_info_t</name>
    <filename>structport__disasm__info__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>print_addr</name>
      <anchorfile>structport__disasm__info__t.html</anchorfile>
      <anchor>dd9997439486607ea8c2d335e8a1475b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>print_mnemonic</name>
      <anchorfile>structport__disasm__info__t.html</anchorfile>
      <anchor>3403a9887d6b18014761c7c1870f1b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>print_bytes</name>
      <anchorfile>structport__disasm__info__t.html</anchorfile>
      <anchor>4d39ecb65083d05a978d0524ed52584b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Slot</name>
    <filename>class_slot.html</filename>
    <member kind="function">
      <type></type>
      <name>Slot</name>
      <anchorfile>class_slot.html</anchorfile>
      <anchor>369842c2fe84c25a44d1e9403342b071</anchor>
      <arglist>(void *v)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>set_address</name>
      <anchorfile>class_slot.html</anchorfile>
      <anchor>aa5028052fcbabe7702f402a4c88c859</anchor>
      <arglist>(void *v)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_address</name>
      <anchorfile>class_slot.html</anchorfile>
      <anchor>41276fbe147a5caeb132fa0a89fd6770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>dereference</name>
      <anchorfile>class_slot.html</anchorfile>
      <anchor>a3e768318766c4ad1e916cd49cbf4bcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>class_slot.html</anchorfile>
      <anchor>50091daf0f41191e111a20776245648b</anchor>
      <arglist>(void *obj)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_null</name>
      <anchorfile>class_slot.html</anchorfile>
      <anchor>e06bd36d596a9aa4f69e5f194f683f8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>class_slot.html</anchorfile>
      <anchor>156c608e117a2b9c7f401e36db29c1ef</anchor>
      <arglist>(void *base, void *ceiling)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>managed_null</name>
      <anchorfile>class_slot.html</anchorfile>
      <anchor>26c50f057cc9e3944b2628b2d68e86c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>StackTraceFrame</name>
    <filename>struct_stack_trace_frame.html</filename>
    <member kind="variable">
      <type>Method_Handle</type>
      <name>method</name>
      <anchorfile>struct_stack_trace_frame.html</anchorfile>
      <anchor>a2f6583160ee15a92a701de832222dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NativeCodePtr</type>
      <name>ip</name>
      <anchorfile>struct_stack_trace_frame.html</anchorfile>
      <anchor>45112c82dbbe47d8ad3216e6d7b9a666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>depth</name>
      <anchorfile>struct_stack_trace_frame.html</anchorfile>
      <anchor>a25581a6ae8ce3fd852bcd92729eedc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>outdated_this</name>
      <anchorfile>struct_stack_trace_frame.html</anchorfile>
      <anchor>024b7083bd6afada6d9b168774c5bda1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Stub_Override_Entry</name>
    <filename>struct_stub___override___entry.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>class_name</name>
      <anchorfile>struct_stub___override___entry.html</anchorfile>
      <anchor>a09f3bf41f197f135064c7c29fd4a486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>method_name</name>
      <anchorfile>struct_stub___override___entry.html</anchorfile>
      <anchor>a7e258ddffc8a712e67f8f9d681f9ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>descriptor</name>
      <anchorfile>struct_stub___override___entry.html</anchorfile>
      <anchor>f4d1c6dbea7029e3d0d32004db3f6025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Override_Generator *</type>
      <name>override_generator</name>
      <anchorfile>struct_stub___override___entry.html</anchorfile>
      <anchor>271af0ec95d77e195e1dc206c472e79b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Override_Size *</type>
      <name>override_size</name>
      <anchorfile>struct_stub___override___entry.html</anchorfile>
      <anchor>052e00d4f2c04cdab1c5b74b8301441e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ti_interface</name>
    <filename>structti__interface.html</filename>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>0b1bf95e51403ec48c56ff5a6d59676e</anchor>
      <arglist>(JNICALL *SetEventNotificationMode)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f39b8426433b27afb1d4513097b85275</anchor>
      <arglist>(JNICALL *GetAllThreads)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>06e0e79fbafb7e7607a1f7411c0f6930</anchor>
      <arglist>(JNICALL *SuspendThread)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>04b6bb485a6752ed2e307659d34062ea</anchor>
      <arglist>(JNICALL *ResumeThread)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d30809be5aa32c2dad641cc27a18d350</anchor>
      <arglist>(JNICALL *StopThread)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>3b14665597cd86a302bc83168a5b0014</anchor>
      <arglist>(JNICALL *InterruptThread)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>84c91a5b5ed089e8551509c7dbc13eea</anchor>
      <arglist>(JNICALL *GetThreadInfo)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d4179d6482ae850d6b8f2909a55d27e0</anchor>
      <arglist>(JNICALL *GetOwnedMonitorInfo)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>3f50e69f8ead779985f051beee06aea0</anchor>
      <arglist>(JNICALL *GetCurrentContendedMonitor)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>66f8ae58edb86ea596dcd9905b80056c</anchor>
      <arglist>(JNICALL *RunAgentThread)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>22d087291322409cad3e0a3e5ca0061e</anchor>
      <arglist>(JNICALL *GetTopThreadGroups)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7d6c2e689b172328f44767f8c050a543</anchor>
      <arglist>(JNICALL *GetThreadGroupInfo)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>64415564d605bc61770f1ba55bfc4018</anchor>
      <arglist>(JNICALL *GetThreadGroupChildren)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>9fe2d7c48997baa85e492d41f27f9a17</anchor>
      <arglist>(JNICALL *GetFrameCount)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f67a9a0cf14d702a1a349642a28a701a</anchor>
      <arglist>(JNICALL *GetThreadState)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>065b63b866335aa29eeb4fa0d475d86d</anchor>
      <arglist>(JNICALL *GetFrameLocation)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c5cd179a47eb10a909b39c6535b84c45</anchor>
      <arglist>(JNICALL *NotifyFramePop)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>bc35ce0ef334e8c6af23230afc4025e4</anchor>
      <arglist>(JNICALL *GetLocalObject)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>01237698dd82d06d6f1b3d3aa63ce14c</anchor>
      <arglist>(JNICALL *GetLocalInt)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1458ac4c5aaa1410d65b2d348122642a</anchor>
      <arglist>(JNICALL *GetLocalLong)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5a76096bf13e05227278847719577ea3</anchor>
      <arglist>(JNICALL *GetLocalFloat)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>69b99eff1bebcb948342b69571dbc80a</anchor>
      <arglist>(JNICALL *GetLocalDouble)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f8ea64df65e890cada75f5680e881cb2</anchor>
      <arglist>(JNICALL *SetLocalObject)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7b60a772ccffa494b0e5a53840e4b625</anchor>
      <arglist>(JNICALL *SetLocalInt)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8c088688abb659eceaf364347b3255d8</anchor>
      <arglist>(JNICALL *SetLocalLong)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>05c3cd5329adf1622bdf9ef532954bc0</anchor>
      <arglist>(JNICALL *SetLocalFloat)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8560616a56b66a0151288245bf4be72d</anchor>
      <arglist>(JNICALL *SetLocalDouble)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d532c9522fa4b103ddf398a193462e89</anchor>
      <arglist>(JNICALL *CreateRawMonitor)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1b7243346d36a151c83843b4f882f252</anchor>
      <arglist>(JNICALL *DestroyRawMonitor)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>fe5a95d2f41c07a308c0f940c1734a8c</anchor>
      <arglist>(JNICALL *RawMonitorEnter)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>999f1464d246d9a2c6fe28a1f8eebec2</anchor>
      <arglist>(JNICALL *RawMonitorExit)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>4432e32bcb34d3f7fa194c372e2b3da1</anchor>
      <arglist>(JNICALL *RawMonitorWait)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>15f154b02277daf2915f582156ab265e</anchor>
      <arglist>(JNICALL *RawMonitorNotify)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7458d7a76d90921df1228f92b568976e</anchor>
      <arglist>(JNICALL *RawMonitorNotifyAll)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>51ed44f91bf879c4e96ff54ef4e7440b</anchor>
      <arglist>(JNICALL *SetBreakpoint)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>04f647c8378820e15af650a55744a212</anchor>
      <arglist>(JNICALL *ClearBreakpoint)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>93cb813302ccebc66be5b154aa10b912</anchor>
      <arglist>(JNICALL *SetFieldAccessWatch)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>21956f0d036ef6d02a81f014563f3ea9</anchor>
      <arglist>(JNICALL *ClearFieldAccessWatch)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>3e70c2bca892a4fd14d39060355c646a</anchor>
      <arglist>(JNICALL *SetFieldModificationWatch)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e93e71e5bcac085996814d97aaf4f97b</anchor>
      <arglist>(JNICALL *ClearFieldModificationWatch)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a4a334c8291a65658b240eb205b9a1ba</anchor>
      <arglist>(JNICALL *Allocate)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>441d5dd8ba6f70667f68f45e40576084</anchor>
      <arglist>(JNICALL *Deallocate)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e0e8566cdecea8694335bac54264b10f</anchor>
      <arglist>(JNICALL *GetClassSignature)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8652d2d1514245a99d8f4d5695944825</anchor>
      <arglist>(JNICALL *GetClassStatus)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>df3bc79873b87d2d26159f2f77305df1</anchor>
      <arglist>(JNICALL *GetSourceFileName)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8a93d8a8265b922f1b64050fe1908c9b</anchor>
      <arglist>(JNICALL *GetClassModifiers)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b6f2fab7ac8d9b3ec4ce92323829549e</anchor>
      <arglist>(JNICALL *GetClassMethods)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>cd44e7fd52a5214bc6470f857b12358c</anchor>
      <arglist>(JNICALL *GetClassFields)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>9d2ac78686f3eee1ce38599f5e282852</anchor>
      <arglist>(JNICALL *GetImplementedInterfaces)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>66eebbfd293c3f06b7a6cea0cb981629</anchor>
      <arglist>(JNICALL *IsInterface)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e11af2da45a67bb2381f75a367f01f79</anchor>
      <arglist>(JNICALL *IsArrayClass)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a50c07fea009bceb8a82be5b50fc48aa</anchor>
      <arglist>(JNICALL *GetClassLoader)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>80138546b7eec9194badb60f247252e4</anchor>
      <arglist>(JNICALL *GetObjectHashCode)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f03e8c0d8824eae536043138f852d6a0</anchor>
      <arglist>(JNICALL *GetObjectMonitorUsage)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>259958c6f9e5614760fc0e2902ad7449</anchor>
      <arglist>(JNICALL *GetFieldName)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>055d1245a3f16f4f46b620243ec802ef</anchor>
      <arglist>(JNICALL *GetFieldDeclaringClass)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8ae64ee3bba26253fc62a0c68dbd6df0</anchor>
      <arglist>(JNICALL *GetFieldModifiers)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d79ffec4da9249080e763d10345cd2ac</anchor>
      <arglist>(JNICALL *IsFieldSynthetic)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ffff628b85cda8198fcddaa7d4bd9bbf</anchor>
      <arglist>(JNICALL *GetMethodName)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>96b7df5d2d331904796f2868ee4a23ec</anchor>
      <arglist>(JNICALL *GetMethodDeclaringClass)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>832ba33f67328a3baed51934555868c6</anchor>
      <arglist>(JNICALL *GetMethodModifiers)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>479399f01cd923445ff2f4516f20b2cc</anchor>
      <arglist>(JNICALL *GetMaxLocals)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7eed2c51ae13072d2b8c2d00eaf43d0c</anchor>
      <arglist>(JNICALL *GetArgumentsSize)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>9a734781a36cdb9a4ac22d442e90d0a7</anchor>
      <arglist>(JNICALL *GetLineNumberTable)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>6e7692b59155953095655c24fdbc5c15</anchor>
      <arglist>(JNICALL *GetMethodLocation)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1f7145772e849954b8eba86f9814ce2f</anchor>
      <arglist>(JNICALL *GetLocalVariableTable)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>70f1702c958bfa15f364149d044eaa51</anchor>
      <arglist>(JNICALL *GetBytecodes)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>295fd06ac0d3dffc0cb09560b38560b4</anchor>
      <arglist>(JNICALL *IsMethodNative)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>468c04a2358e9275f160b4cb9168619c</anchor>
      <arglist>(JNICALL *IsMethodSynthetic)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>0f416c5f9239ac68935c0d0064e40e22</anchor>
      <arglist>(JNICALL *GetLoadedClasses)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a074536a5f66cb2c1b5450be40770ba2</anchor>
      <arglist>(JNICALL *GetClassLoaderClasses)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>87614c4b916720ca86063a5705f0b05e</anchor>
      <arglist>(JNICALL *PopFrame)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ec0bd48940bf6f9f37913d09cbd28436</anchor>
      <arglist>(JNICALL *RedefineClasses)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>77d93d7e8a294adc14d65eb3a0efc311</anchor>
      <arglist>(JNICALL *GetVersionNumber)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d756edc68e2697a1f39ed486ac2d2ab1</anchor>
      <arglist>(JNICALL *GetCapabilities)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d49db10bc7637b34314071e5f5ce1fe0</anchor>
      <arglist>(JNICALL *GetSourceDebugExtension)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8a675f2c443ce9aed160561485c27a9f</anchor>
      <arglist>(JNICALL *IsMethodObsolete)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>697699c67f108263ddb87fdf2072048b</anchor>
      <arglist>(JNICALL *SuspendThreadList)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>50b110bbd2db00eaaf97eb84e20f75bb</anchor>
      <arglist>(JNICALL *ResumeThreadList)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>0c9c9ca6265078a0a366cd2266899850</anchor>
      <arglist>(JNICALL *GetAllStackTraces)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>860f14d507fd571e7dddeb21482734f3</anchor>
      <arglist>(JNICALL *GetThreadListStackTraces)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1cc7d693b5f1b35dd6247145f7a914ed</anchor>
      <arglist>(JNICALL *GetThreadLocalStorage)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f68b5f9e501f146c93a814704ecadef7</anchor>
      <arglist>(JNICALL *SetThreadLocalStorage)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f0431d7c15720f5cda089cbd97fb1457</anchor>
      <arglist>(JNICALL *GetStackTrace)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c0fd1de0b94e07fa6b1adcac15b09cf3</anchor>
      <arglist>(JNICALL *GetTag)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>647d0b1bb1512072dcd5c95995f84675</anchor>
      <arglist>(JNICALL *SetTag)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>15ee3bbe883b6aa3bba0bf1780b590e2</anchor>
      <arglist>(JNICALL *ForceGarbageCollection)(jvmtiEnv *env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>73056ab233ccdaa512e2de4b5871ce7a</anchor>
      <arglist>(JNICALL *IterateOverObjectsReachableFromObject)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e25f755df42bf25ecc1894bb1321a5ea</anchor>
      <arglist>(JNICALL *IterateOverReachableObjects)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>93d74e4e8253e2f1a8bab2dc52d7de1e</anchor>
      <arglist>(JNICALL *IterateOverHeap)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8e9d2ad473e2f457c36ccf3238cbcc41</anchor>
      <arglist>(JNICALL *IterateOverInstancesOfClass)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>79fde71892513ed71fefece04e64d975</anchor>
      <arglist>(JNICALL *GetObjectsWithTags)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8c747900d6f2d3f11c7815b72aa262fc</anchor>
      <arglist>(JNICALL *SetJNIFunctionTable)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b95b45de5fdd1903014a1647a20bb4f5</anchor>
      <arglist>(JNICALL *GetJNIFunctionTable)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b91ca0edd53171611ab866b70a8d81f7</anchor>
      <arglist>(JNICALL *SetEventCallbacks)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c940cd2b97815f555c57471f9c24f9f5</anchor>
      <arglist>(JNICALL *GenerateEvents)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>45bcd78d064c78eee904082b980e30e7</anchor>
      <arglist>(JNICALL *GetExtensionFunctions)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>6086bff70e0f3ecf9b3df7c479f83517</anchor>
      <arglist>(JNICALL *GetExtensionEvents)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5616e64b046dec4db33233b4b6f40626</anchor>
      <arglist>(JNICALL *SetExtensionEventCallback)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>eab7ee1a966b38745a060f9ec61cf248</anchor>
      <arglist>(JNICALL *DisposeEnvironment)(jvmtiEnv *env)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d9606c98d49fbcaf8b8bc8db3f6a64ec</anchor>
      <arglist>(JNICALL *GetErrorName)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>09975a8afb46e1e994072a5ff58fa53d</anchor>
      <arglist>(JNICALL *GetJLocationFormat)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a9edfd1569f060dba0da5bab20c5e1c6</anchor>
      <arglist>(JNICALL *GetSystemProperties)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>38607870eeb0326022192a808e598b2f</anchor>
      <arglist>(JNICALL *GetSystemProperty)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5b8500137e4d1e94e1535a023ffd2d84</anchor>
      <arglist>(JNICALL *SetSystemProperty)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>76452a1e6dd6dfeaa5ce0006d8121c1e</anchor>
      <arglist>(JNICALL *GetPhase)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>91be0649b3eb1ce733fb08fa9fa6cdb2</anchor>
      <arglist>(JNICALL *GetCurrentThreadCpuTimerInfo)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c77f144c4321ea4b1b07cbac5d75d1d1</anchor>
      <arglist>(JNICALL *GetCurrentThreadCpuTime)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b1d6c4c92b4ff0cc2dbdf9771209cf76</anchor>
      <arglist>(JNICALL *GetThreadCpuTimerInfo)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>6f137f851bc1732aed5483a1ed2da9b2</anchor>
      <arglist>(JNICALL *GetThreadCpuTime)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>3615060b01ebb5e3fabd6c1d2a7258e7</anchor>
      <arglist>(JNICALL *GetTimerInfo)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>12918fd5a276a67b1c2ea7086e9b0ae5</anchor>
      <arglist>(JNICALL *GetTime)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>86bf34fc959455e51f3ec8480d481281</anchor>
      <arglist>(JNICALL *GetPotentialCapabilities)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>6cdaf35a1feeb7ec8af90a5807f2e140</anchor>
      <arglist>(JNICALL *AddCapabilities)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>4e8b29281f250d474861d7027506991d</anchor>
      <arglist>(JNICALL *RelinquishCapabilities)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>cfeaf46e38129e88366b7b1692243845</anchor>
      <arglist>(JNICALL *GetAvailableProcessors)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ed98fff57feba56ec39404adc0d45fea</anchor>
      <arglist>(JNICALL *GetEnvironmentLocalStorage)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>cb413a0849cc72a4834e9b71047a8cc5</anchor>
      <arglist>(JNICALL *SetEnvironmentLocalStorage)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>fea1ea48db5b9c89b705fc18b1f5cd6d</anchor>
      <arglist>(JNICALL *AddToBootstrapClassLoaderSearch)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>342a9ad19eadfe00af6c390590c50074</anchor>
      <arglist>(JNICALL *SetVerboseFlag)(jvmtiEnv *env</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>jvmtiError</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>65798d02e6046f46dc7bb0a52c19316e</anchor>
      <arglist>(JNICALL *GetObjectSize)(jvmtiEnv *env</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved1</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>49eb82c415214a88c4546ce441551033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMode</type>
      <name>mode</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d668ca81ae29069cdfe7a417b459e5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMode jvmtiEvent</type>
      <name>event_type</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>cc5319a9742d6d593eda7dcc32ddb95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMode jvmtiEvent jthread</type>
      <name>event_thread</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>fcc2dfe184267d3370285aaf2b189894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEventMode jvmtiEvent jthread void *</type>
      <name>reserved3</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>bfe55b2462365f8624c48265fcf8c7be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint *</type>
      <name>threads_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f4ed7469949a11deb267d7edb99d161c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint jthread **</type>
      <name>threads_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>faa0304b80f0066abe05c4d04ea17dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread</type>
      <name>thread</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>0435216c48790daa68a4859280685a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jobject</type>
      <name>exception</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1306c27354980adcd5f4102fb7c1605f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jvmtiThreadInfo *</type>
      <name>info_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a40436600c1bddb9eff250aa6f2345e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint *</type>
      <name>owned_monitor_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5d490287093a07510aa0f481c9b1347f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jobject **</type>
      <name>owned_monitors_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>72173e2b434491f145f10aae28ddfec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jobject *</type>
      <name>monitor_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>0cf54599fadc38b682b6c794f8dec4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jvmtiStartFunction</type>
      <name>proc</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>0c154e0428fda359e5f09fcba288f8e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jvmtiStartFunction const void *</type>
      <name>arg</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a7c1e4d417e6dd971296af70e5df62c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jvmtiStartFunction const void jint</type>
      <name>priority</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>12526f0322ee824abf909508e154f8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint *</type>
      <name>group_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>68309c7d123d22eeac5ca50bd98a32cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint jthreadGroup **</type>
      <name>groups_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d4ffc3741fe9e5e039231ae5fc7baab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthreadGroup</type>
      <name>group</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>31d45d43be3051598a830971e9e8ffca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthreadGroup jvmtiThreadGroupInfo *</type>
      <name>info_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>6988c077dd91fa083a277e6bf6b1f4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthreadGroup jint *</type>
      <name>thread_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>093ce6ac5fcec8266350705aadcd638d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthreadGroup jint jthread **</type>
      <name>threads_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d372811bfefbe2836d2d7e1bbcf77462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthreadGroup jint jthread jint *</type>
      <name>group_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d235187edd2028b453fc42ce0f4e17e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthreadGroup jint jthread jint jthreadGroup **</type>
      <name>groups_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>2f493175da896a5c48e614c0073204b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint *</type>
      <name>count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7c1b013681c2d2386f90bb5852131227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint *</type>
      <name>thread_state_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>629c1a03fca3fbcc34ab617cc4d4524f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved18</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>59ce50c19e880cef9fa009099f8bcd8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint</type>
      <name>depth</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d0a3a4e6fc54388d5a29a6fac7fd4fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jmethodID *</type>
      <name>method_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d18fca27cf80362d010b4de6e7825151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jmethodID jlocation *</type>
      <name>location_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5d37a98a7de93ffecee0319f81457ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint</type>
      <name>slot</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b2ad9a88759807174368c1e0cbba12aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jobject *</type>
      <name>value_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d682eaac2f2975b7060270656201df84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jint *</type>
      <name>value_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b93b4d0602b13c2194e4777ba969817f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jlong *</type>
      <name>value_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>fbad3858db36060efc0dad0d6942b127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jfloat *</type>
      <name>value_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ca4b4d2cc6c605c2d80129651d1077ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jdouble *</type>
      <name>value_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>84d668521366ecf4bd5a8f6a22916adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jobject</type>
      <name>value</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a7e560e6f3e93772185bd9e675626795</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jint</type>
      <name>value</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1a48bc9a78964b522c0cc30b4ec444af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jlong</type>
      <name>value</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>62b3db5d7a9e33c6b7d55a92e8e36ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jfloat</type>
      <name>value</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>424c7925515d441a2b1bf6b61cbbe06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jdouble</type>
      <name>value</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d7b0985042f8d18c5b2e803b3c853d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>163f84742efff6ac4dd58abac6aea46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char jrawMonitorID *</type>
      <name>monitor_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>99dac1151d47a1d1944e9ac5a7640805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jrawMonitorID</type>
      <name>monitor</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5c252b974d691f516abbec60c7ababd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jrawMonitorID jlong</type>
      <name>millis</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5b6a51a42417a2f29288b3d527d5f571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID</type>
      <name>method</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>25e791093295001ad46b8f1135f8918b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jlocation</type>
      <name>location</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>100f22343da17e24258c1d60adf7d7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved40</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a94348a199abfe507ba1c6e336051d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass</type>
      <name>clazz</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b3182b88bd303e17e6e126a23a2afed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID</type>
      <name>field</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7244bbb3ee0f496820c808bcb157dcf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved45</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c0ecfc78073c37bb9e33500358e38ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong</type>
      <name>size</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>90c0b6c700fb897def68591329f83711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong unsigned char **</type>
      <name>mem_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>250c4e5c89f094a77d3a745c23f05d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char *</type>
      <name>mem</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ad17dd731898c822796aa7bce8bc5966</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass char **</type>
      <name>signature_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e01cae4b30f764c6892bd0f6a465127a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass char char **</type>
      <name>generic_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>91af1fd6610ecb9f58817aa9731b2a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jint *</type>
      <name>status_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b0f2d19ce2ebf9b0a403e70f9db9de9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass char **</type>
      <name>source_name_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>121da7e21f43a37e118e694e519ef0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jint *</type>
      <name>modifiers_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>95fac0a9d56f88300476509de1883704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jint *</type>
      <name>method_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>4309f5432adf42302ccf2be49c6120ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jint jmethodID **</type>
      <name>methods_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1bb3bbc0fa65514e48d4371a6dc9ff76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jint *</type>
      <name>field_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>db6855eb113c00c414d0c670cf613dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jint jfieldID **</type>
      <name>fields_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ec1565b938ccb8f7af9445dcd8f5189b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jint *</type>
      <name>interface_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>41f3731e3cc046ac8954cc583d175784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jint jclass **</type>
      <name>interfaces_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8d21b95faf76305082d29f8d0af2803c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jboolean *</type>
      <name>is_interface_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b9535653b398bfa44a682bb962feb312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jboolean *</type>
      <name>is_array_class_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e910dee0f348203fff5d79bfb50f9348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jobject *</type>
      <name>classloader_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5e2ff3393ad19bb1efe66cb1720e39df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>object</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b2d94b0a650c512b0cacb95be777b738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jint *</type>
      <name>hash_code_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>76b7fad9fd3899ec0a25e358138e417b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jvmtiMonitorUsage *</type>
      <name>info_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>27ecb89b99062b077e1172c7ef4b0300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID char **</type>
      <name>name_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>9fc428c288b6defa11ee86ccc114f907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID char char **</type>
      <name>signature_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>9d12688356d9366a660864e60f9f1949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID char char char **</type>
      <name>generic_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>6298588dca592765f6bef99e9772a1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jclass *</type>
      <name>declaring_class_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>39d0ff2a8328212c8d6ff80ab923e5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jint *</type>
      <name>modifiers_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a16a33c582c73fff9bb5dc5516000113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jfieldID jboolean *</type>
      <name>is_synthetic_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>004bce06c4c85cc946f423be0a0f7f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID char **</type>
      <name>name_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>bac6edee1a4e8acfce2bb42cf81c6ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID char char **</type>
      <name>signature_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>9e9ad8eff56363cd0ca05cc280314b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID char char char **</type>
      <name>generic_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>dd764626d4fcd9b762bcc36fcad6432a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jclass *</type>
      <name>declaring_class_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>71c32141cd7e1898b711cdd1f858fe79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jint *</type>
      <name>modifiers_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>033847496ebadeacb150fa874c549342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved67</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>0664b9805eadcfeafc6f7780c1dd3983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jint *</type>
      <name>max_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d4e7e278df4996708faca24c576c4ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jint *</type>
      <name>size_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1ae2d8be32989f065e89a55be0b10c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jint *</type>
      <name>entry_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>44c7974db53b18f786bc1501a90b27e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jint jvmtiLineNumberEntry **</type>
      <name>table_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>fdcefc835a36f8af6f3a5f3866755f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jlocation *</type>
      <name>start_location_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>af11edbb87c83a2d9dc11b148eefa8f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jlocation jlocation *</type>
      <name>end_location_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>af2bfbbfa0b3fa554deff9d1e06ffc4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jint *</type>
      <name>entry_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>44c7974db53b18f786bc1501a90b27e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jint jvmtiLocalVariableEntry **</type>
      <name>table_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e4b0a3b949706ab80d86440541c25d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved73</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>14a351eec1f1389a28f0b129f0ee59db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved74</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ad788c2e15c3f0c7c9945cdc8099c84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jint *</type>
      <name>bytecode_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>db7e98d7961e883f57331f68bc2d564f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jint unsigned char **</type>
      <name>bytecodes_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>cc9db4238d9313af56b41f8df493fc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jboolean *</type>
      <name>is_native_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>38ab8ef0324b680e7ffcf117eec0244d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jboolean *</type>
      <name>is_synthetic_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>3100ce711bcb0261b54d01b5d4500106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint *</type>
      <name>class_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c642f01ea9092ced7e14505f21f388a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint jclass **</type>
      <name>classes_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>99c82361e1ef2c1464e0e6903857d226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>initiating_loader</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7b1f01b7c68b7f5f482e5e52440279ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jint *</type>
      <name>class_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d4dd5a412fd4ca46cf8b90081a38384e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jint jclass **</type>
      <name>classes_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>fb9f74ebeda2e622bb9c6c19b1fb3679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved81</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>113dc5365d6f8abc90a94c51ac111033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved82</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f2b55ee7a59098f4125ca4a07ee9808a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved83</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1102fe9dfee674d3fbcbae698945c001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved84</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>62236b6347c7cb039d04615b9afc55ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved85</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>40181d6b2dd3962c54f3da6f3a3f5c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved86</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>240676a361c534d597a679618fbdf1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>class_count</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b714e09f25491ce62dd67f334205df43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jvmtiClassDefinition *</type>
      <name>class_definitions</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>293e1468bd672d17513c22e95cae5119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint *</type>
      <name>version_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>bd6c66fe15e7aff3e724d8e668d76574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiCapabilities *</type>
      <name>capabilities_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e034d6a97a2589efc01a726665ce9498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass char **</type>
      <name>source_debug_extension_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>40ee14eb616676fb9cd6495635674b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jmethodID jboolean *</type>
      <name>is_obsolete_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c496cae0e970a01d996ac211db018dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>request_count</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>277e31c14396336b63f789f8eaab8390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jthread *</type>
      <name>request_list</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>6a35594ce4689815961f3971c00c5b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jthread jvmtiError *</type>
      <name>results</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>dd6fe1bb6a1765118c883fea6e6cac3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jthread *</type>
      <name>request_list</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>6a35594ce4689815961f3971c00c5b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jthread jvmtiError *</type>
      <name>results</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>dd6fe1bb6a1765118c883fea6e6cac3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved94</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>dcc3051f94bc72c7f586dae90f6a1bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved95</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7565b8acbce2b8edd4b07997ab4349f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved96</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8809fe524c0e10721dfd5f675b1be833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved97</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>a84ac854c307739fcdd3e0d1401df25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved98</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>3f979f8054d4897f20e7686fb721d310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved99</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>85d60bb68fae77b3afddc541e594bb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>max_frame_count</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5c6116202174a8317394b48925fae124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint jvmtiStackInfo **</type>
      <name>stack_info_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>56bd22cd99932b2f24bd5956ad84c7f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint jvmtiStackInfo jint *</type>
      <name>thread_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>bb78e166b31c2657dc6f3d6b4b988245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>thread_count</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>669fb087c8929cd1bb7d896d461e1125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jthread *</type>
      <name>thread_list</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c634c2e4cf81519930c2afe0146ca857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jthread jint</type>
      <name>max_frame_count</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5e7e13e360000559489ca2c1a9c8270b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jthread jint jvmtiStackInfo **</type>
      <name>stack_info_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>139153f7410a7ad5276803d86c308dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread void **</type>
      <name>data_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b43c3995ca62151086f320eed8d53e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread const void *</type>
      <name>data</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>071d309076cb1a63aa2e483278418682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint</type>
      <name>start_depth</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ac097443f5e7da05b0e617e640e71400</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint</type>
      <name>max_frame_count</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>63cab5e1a26a3e97d4bd736ef4e9a8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jvmtiFrameInfo *</type>
      <name>frame_buffer</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ce71c2e27431758cc4e3a2664939e818</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jint jint jvmtiFrameInfo jint *</type>
      <name>count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>61b81e3c15d6f37ec0b812bae27555f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved105</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>895e203b412192a1bf235c04f129ad53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jlong *</type>
      <name>tag_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ac21c8d3f4b6f021279d9b3bd03f6d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jlong</type>
      <name>tag</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>1536b0f4551a5aed943bd6643bf6e71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jvmtiObjectReferenceCallback</type>
      <name>object_reference_callback</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>9d4eaf800837b7abc7b918f1063b9490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jvmtiObjectReferenceCallback void *</type>
      <name>user_data</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>29947f5bec764870ca31b99f094410e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiHeapRootCallback</type>
      <name>heap_root_callback</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ab2c6272bcd02ea033cb3ef3586f8921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiHeapRootCallback jvmtiStackReferenceCallback</type>
      <name>stack_ref_callback</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>842bf82e3fc355b734e1c70a907c31ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiHeapRootCallback jvmtiStackReferenceCallback jvmtiObjectReferenceCallback</type>
      <name>object_ref_callback</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e2fe7d832905b70fb48917718c5ce4e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiHeapRootCallback jvmtiStackReferenceCallback jvmtiObjectReferenceCallback void *</type>
      <name>user_data</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>598823c869c98adfc15e099e323d120f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiHeapObjectFilter</type>
      <name>object_filter</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>12f9067cb4d5485b41961a798e160cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiHeapObjectFilter jvmtiHeapObjectCallback</type>
      <name>heap_object_callback</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5cfc5ccafc86d9bfd5d8d05849974212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiHeapObjectFilter jvmtiHeapObjectCallback void *</type>
      <name>user_data</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>62f0227b760bbe7d0cd9839437b4fe03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jvmtiHeapObjectFilter</type>
      <name>object_filter</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>4e786dac628724fd59075d7bc2668b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jvmtiHeapObjectFilter jvmtiHeapObjectCallback</type>
      <name>heap_object_callback</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7ca47d417c5ffb37f0c456c012f80e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jclass jvmtiHeapObjectFilter jvmtiHeapObjectCallback void *</type>
      <name>user_data</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5b801fbd54f813e85365163961bd8572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved113</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>6d45a3d298127334906ef06c7f281ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>tag_count</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>031a158652f8e1a81e8c176e04805021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jlong *</type>
      <name>tags</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>2a4dcd43e1aaac3ce3bf67f6f53b0211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jlong jint *</type>
      <name>count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>cdfa0f5597975596b0095a29aaec13be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jlong jint jobject **</type>
      <name>object_result_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>eed7bdc8571baf206f568744f17d749a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint const jlong jint jobject jlong **</type>
      <name>tag_result_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>37d4c06e1be5ea42ea427eeb8b98f6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved115</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e20a8269a236b677e56490e9d1f2b7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved116</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>85e43fd59749c5e7ee198f7d68aed9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved117</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c5e75fb3cc25a5bd5718947199b7507e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved118</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b5f9b429ed4018428f84e60bed8a651b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved119</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>2bae5db3af5a021f04c06a500bca59c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const jniNativeInterface *</type>
      <name>function_table</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8fce9639a509d0ae7b5ace95469aeceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jniNativeInterface **</type>
      <name>function_table</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ede467cf9f0c93be16f451dca8e7ceb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const jvmtiEventCallbacks *</type>
      <name>callbacks</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>08e3efcc9861f3082723f0e9912fa9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const jvmtiEventCallbacks jint</type>
      <name>size_of_callbacks</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>518819511059e5ff2d7b92a55746c9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiEvent</type>
      <name>event_type</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>c2f32ce35cc1da6e8bc310db2ae01251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint *</type>
      <name>extension_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ca964f635025f8ec1ecdc96762212455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint jvmtiExtensionFunctionInfo **</type>
      <name>extensions</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>8fb3c885f8abc3058d75e2f6fa1c8c0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint *</type>
      <name>extension_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ca964f635025f8ec1ecdc96762212455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint jvmtiExtensionEventInfo **</type>
      <name>extensions</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e43e7fc16bee08e2663f6646a8cc2cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint</type>
      <name>extension_event_index</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>0f1c004aa4828ea651738e1ed08a1dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint jvmtiExtensionEvent</type>
      <name>callback</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f19b007a7c631dd7f9939f65a7d3b13d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError</type>
      <name>error</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>cb7d39d539cf152339334e52b9bc227e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiError char **</type>
      <name>name_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>d9e98bbcbe0650b3f7979469c4b241e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiJlocationFormat *</type>
      <name>format_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7aba0f80d284048acdd650c563bbcb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint *</type>
      <name>count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ac5e5c0f7008d4518936183572e37e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint char ***</type>
      <name>property_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>fea7658b97c74246d2ea5e482a5753b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>property</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ebd82f90542c9d42a396e3f288a2470a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char char **</type>
      <name>value_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>81f1943122a89057af76a0aaac60e3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>property</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ebd82f90542c9d42a396e3f288a2470a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char const char *</type>
      <name>value</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>9a17ca793f4f5a5c8d591930a091aa0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiPhase *</type>
      <name>phase_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>514bd35ba7288f2bd90712cafcabeff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiTimerInfo *</type>
      <name>info_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>71066ce57c0f38788cd989bbb09db131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong *</type>
      <name>nanos_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5cb3a83b3403113f0378f6938ea1d7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiTimerInfo *</type>
      <name>info_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>71066ce57c0f38788cd989bbb09db131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthread jlong *</type>
      <name>nanos_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>7f2844874b288910b428d8f7ccb9c686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiTimerInfo *</type>
      <name>info_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>71066ce57c0f38788cd989bbb09db131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jlong *</type>
      <name>nanos_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>5cb3a83b3403113f0378f6938ea1d7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiCapabilities *</type>
      <name>capabilities_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e034d6a97a2589efc01a726665ce9498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved141</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>ca6e144e1a5f9c6d8b03d298b83c5f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const jvmtiCapabilities *</type>
      <name>capabilities_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>aadcde71facb41168e902b4567f2d840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const jvmtiCapabilities *</type>
      <name>capabilities_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>aadcde71facb41168e902b4567f2d840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jint *</type>
      <name>processor_count_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f7776a54b5c2ec53b455b048a9080edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved145</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>9b3f7992f9b70f313b22fbd12f2c4e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved146</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>f948faa4266c982897d3bd58979a23d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void **</type>
      <name>data_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>795defca33e88aa40e5769705c0d59bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>data</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>fe017b620ac6ed01ef945e82e315d99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>segment</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>03be0c9c6a276b4a4d47e8ddacd09df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiVerboseFlag</type>
      <name>flag</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>09641ea9bd3e3b30412b2bbf73a5552f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jvmtiVerboseFlag jboolean</type>
      <name>value</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>4b72c2ec61bb3e8661513eec7a3e51f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved151</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>86c7ac5d847bd004899d5629fb87d5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved152</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>b06ac680833c0ae862cd649918dd834b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>reserved153</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>73279799e821adbbf03c9ddb9bfd0cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject jlong *</type>
      <name>size_ptr</name>
      <anchorfile>structti__interface.html</anchorfile>
      <anchor>e0eb61b4b223f46aa84ceea0f94ea031</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>timespec</name>
    <filename>structtimespec.html</filename>
    <member kind="variable">
      <type>long</type>
      <name>tv_sec</name>
      <anchorfile>structtimespec.html</anchorfile>
      <anchor>f2647e5e40fd73e26e2f288c84f14fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>tv_nsec</name>
      <anchorfile>structtimespec.html</anchorfile>
      <anchor>45c06ff9bb031267372a1e5d3d3769cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tm_props</name>
    <filename>structtm__props.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>use_soft_unreservation</name>
      <anchorfile>structtm__props.html</anchorfile>
      <anchor>a11e66d896e404a168ada9df87d11322</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VM_Global_State</name>
    <filename>class_v_m___global___state.html</filename>
    <member kind="variable" static="yes">
      <type>static VMEXPORT Global_Env *</type>
      <name>loader_env</name>
      <anchorfile>class_v_m___global___state.html</anchorfile>
      <anchor>55a048768ecb124d3a1da40082ea55c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VM_thread</name>
    <filename>struct_v_m__thread.html</filename>
    <member kind="variable">
      <type>HyThread</type>
      <name>hy_thread</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>813a5a2ecba0bf57286907404ab033d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>weak_ref</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>de799b74eb994db3668c96920d74622c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jobject</type>
      <name>java_thread</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>3b8e5de1d72b9c298fa21f880cd0a4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jthrowable</type>
      <name>stop_exception</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>25fc0f59e6303bb511e4d2f2c44f489f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>apr_pool_t *</type>
      <name>pool</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>1476db50a70c040c387f4a4fbd2def91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JNIEnv *</type>
      <name>jni_env</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>bab06521b92cde04653102f37efbdd48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ClassLoader *</type>
      <name>onload_caller</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>00bed8a5c67f364d2eaa24a7fd460a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>class_not_found</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>077d28149db6b2f1fce12589e20fd809</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>suspend_flag</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>0a381ec6451e7b1f1d1354e51d5c883a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Exception</type>
      <name>thread_exception</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>d0062da2041cacf7bc6635267aa43b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>restore_guard_page</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>52d34c2a126612779ac8deb3e25cc93e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>stack_addr</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>9d9672ea76384197d12c4d584ac1049e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UDATA</type>
      <name>stack_size</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>96af6dc4f26b9ece897b886f720dd2cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>finalize_thread_flags</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>b9a02eec6590bf0081b8e0db3872791b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Registers *</type>
      <name>regs</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>80fb26fcb35d369ff9c452dae5ed6bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>last_m2n_frame</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>fbcadf8817225ca78d73dbc02db98aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>_gc_private_information</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>c6836aebec03fdfec4ab4d5fdfddd555</anchor>
      <arglist>[(20 *sizeof(void *))]</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>native_handles</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>bce93ea981040d7ebedd535a720ea26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>gc_frames</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>5c6f33548c5d111360bfdb013b011615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>lastFrame</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>57ccefc0541bfcd9911896c1318c1777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>firstFrame</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>659f4d55ad046a2be71e65e7b46be2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>interpreter_state</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>dc3eaf04dc8e7ca32dc21100ab85baba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void **</type>
      <name>stack_end</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>d382a64e2af53054c049a88cb4191c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IDATA</type>
      <name>daemon</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>6af9719d430c14fc2544de96d733ae2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JVMTIThread</type>
      <name>jvmti_thread</name>
      <anchorfile>struct_v_m__thread.html</anchorfile>
      <anchor>83765c617e46ffdbe04831cf6b516f4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VMInterfaceFunctions_</name>
    <filename>struct_v_m_interface_functions__.html</filename>
    <member kind="function">
      <type></type>
      <name>vmiError</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>f465fef54fcee710e008fb8d33c3f0a6</anchor>
      <arglist>(JNICALL *CheckVersion)(VMInterface *vmi</arglist>
    </member>
    <member kind="function">
      <type>JavaVM *JNICALL *</type>
      <name>GetJavaVM</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>6aa6b707766074b770c9ce97dc02aad0</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type>HyPortLibrary *JNICALL *</type>
      <name>GetPortLibrary</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>be8ac90f674c0b33885cdc6fc3eb9cfc</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type>HyVMLSFunctionTable *JNICALL *</type>
      <name>GetVMLSFunctions</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>1d184583286f8914a58852e4e2246b34</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type>HyZipCachePool *JNICALL *</type>
      <name>GetZipCachePool</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>37fac2fb6eb3f72786b8af8e9af6669d</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type>JavaVMInitArgs *JNICALL *</type>
      <name>GetInitArgs</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>f3f7da818b66a52bb74147471e974e5a</anchor>
      <arglist>(VMInterface *vmi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vmiError</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>d50b5f6b645396b60128879c6836ca7f</anchor>
      <arglist>(JNICALL *GetSystemProperty)(VMInterface *vmi</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vmiError</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>05004a6160d19eda5e41704a1273eadb</anchor>
      <arglist>(JNICALL *SetSystemProperty)(VMInterface *vmi</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vmiError</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>ee52dce7c46956742b5a31929185be91</anchor>
      <arglist>(JNICALL *CountSystemProperties)(VMInterface *vmi</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vmiError</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>899ee993b78614ff6ee85c5906ccaeef</anchor>
      <arglist>(JNICALL *IterateSystemProperties)(VMInterface *vmi</arglist>
    </member>
    <member kind="variable">
      <type>vmiVersion *</type>
      <name>version</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>fc074f195c9e14c670d6c9a2fe327263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>key</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>ae667607c4eb4654e0ffe5ca0ed3eba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char char **</type>
      <name>valuePtr</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>788332fe9426934c6a6680cf276ecab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>key</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>ae667607c4eb4654e0ffe5ca0ed3eba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char char *</type>
      <name>value</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>09db83b773a4eef760b96a9f2cbf3a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>countPtr</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>609a479c869892a8e1ff1a2e6ecfc356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vmiSystemPropertyIterator</type>
      <name>iterator</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>e1c02aa25f1d397cd8f52fa244eb3867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vmiSystemPropertyIterator void *</type>
      <name>userData</name>
      <anchorfile>struct_v_m_interface_functions__.html</anchorfile>
      <anchor>8f143bc0e981e5a07cc0096c0df340d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>util</name>
    <filename>namespaceutil.html</filename>
    <member kind="variable">
      <type>const char</type>
      <name>CLASS_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>d76a668b3c804f36e01349d86e65e2e6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>GC_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae7e8ab2b56e9f16b187a4bfad5921a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>JNI_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>fc46375ca69ad212c36d5991f42a785f</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
</tagfile>
