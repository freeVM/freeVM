<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>allocator.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/tl/</path>
    <filename>allocator_8h</filename>
    <namespace>tl</namespace>
    <class kind="class">tl::BasicAllocator</class>
    <class kind="struct">tl::BasicAllocator::rebind</class>
    <class kind="class">tl::MPAllocator</class>
    <class kind="struct">tl::MPAllocator::rebind</class>
  </compound>
  <compound kind="file">
    <name>clog.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>clog_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>LOGGER_EXIT</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>c0d9a97d44cab26bdcc215f6a37e4f99</anchor>
      <arglist>(code)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIE2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>fe08ec2aba851e528717d10b0fedfafa</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WARN2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>ef489482f031c1435ab1f7b2a40fcfc7</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INFO2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>238f7517569377ac94a5304e0ba631e8</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>b5d9fbc90a267623afbd4dfc70299610</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRACE2</name>
      <anchorfile>clog_8h.html</anchorfile>
      <anchor>0a8186ea202123f971720c034b5d20c6</anchor>
      <arglist>(category, message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cxxlog.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>cxxlog_8h</filename>
    <namespace>util</namespace>
    <member kind="define">
      <type>#define</type>
      <name>LOGGER_EXIT</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>c0d9a97d44cab26bdcc215f6a37e4f99</anchor>
      <arglist>(code)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ECHO</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>52cf405f792a326cdaae3bb7c654f0f2</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LECHO</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>be7d81fb6b230b73dea2ca83074deb99</anchor>
      <arglist>(message_number, messagedef_and_params)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIE2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>fe08ec2aba851e528717d10b0fedfafa</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LDIE2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>d2588dc4fc6e1f15493afd638d502f87</anchor>
      <arglist>(category, message_number, messagedef_and_params)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WARN2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>ef489482f031c1435ab1f7b2a40fcfc7</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LWARN2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>be6b58c7ee9f167fc039cbe965c22548</anchor>
      <arglist>(category, message_number, messagedef_and_params)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INFO2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>238f7517569377ac94a5304e0ba631e8</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>b5d9fbc90a267623afbd4dfc70299610</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRACE2</name>
      <anchorfile>cxxlog_8h.html</anchorfile>
      <anchor>0a8186ea202123f971720c034b5d20c6</anchor>
      <arglist>(category, message)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>CLASS_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>d76a668b3c804f36e01349d86e65e2e6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>GC_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae7e8ab2b56e9f16b187a4bfad5921a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>JNI_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>fc46375ca69ad212c36d5991f42a785f</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dec_base.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/src/encoder/ia32_em64t/</path>
    <filename>dec__base_8h</filename>
    <class kind="struct">Inst</class>
    <class kind="class">DecoderBase</class>
    <member kind="define">
      <type>#define</type>
      <name>IF_CONDITIONAL</name>
      <anchorfile>dec__base_8h.html</anchorfile>
      <anchor>186eff888d798c1a4dcd6228eea070e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IF_SYMMETRIC</name>
      <anchorfile>dec__base_8h.html</anchorfile>
      <anchor>04fc638d5e12669290428df6e5b0ec7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IF_BRANCH</name>
      <anchorfile>dec__base_8h.html</anchorfile>
      <anchor>7f1a8dc27f261ce0f2273175dadef4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_jcc</name>
      <anchorfile>dec__base_8h.html</anchorfile>
      <anchor>af633539f97cf3fab1041b0735367347</anchor>
      <arglist>(Mnemonic mn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>enc_base.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/src/encoder/ia32_em64t/</path>
    <filename>enc__base_8h</filename>
    <class kind="class">EncoderBase</class>
    <class kind="struct">EncoderBase::OpndDesc</class>
    <class kind="struct">EncoderBase::OpndRolesDesc</class>
    <class kind="union">EncoderBase::OpcodeDesc</class>
    <class kind="struct">EncoderBase::MnemonicDesc</class>
    <class kind="class">EncoderBase::Operand</class>
    <class kind="class">EncoderBase::Operands</class>
  </compound>
  <compound kind="file">
    <name>enc_defs.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/src/encoder/ia32_em64t/</path>
    <filename>enc__defs_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>ENCODER_NAMESPACE_START</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>bce360de0a025cf6c79cc8647ca2392b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENCODER_NAMESPACE_END</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>2517b5b457b1c3653c3dc8a4743db55a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COUNTOF</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>d0add60b29474b53705e3863a72935d4</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REG_STACK</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>bd1d1217e4ee6c204fc267136b01db89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REG_MAX</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>7bf0745445b86dffaa684215783643d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_REGS</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>5bd5b2d507cb44d9460d82aa1429824a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STACK_SLOT_SIZE</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>e85c50decf58bf4faf54f72be579104f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>JMP_TARGET_ALIGMENT</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>c21845fb7852b9c0d27d7c00ce548bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NATIVE_INST_SIZE</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>7664edb8d99a662ab67885f2e1fe9d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REGNAME</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>1b7d256ee71aeed517eb1c16969e02a2</anchor>
      <arglist>(k, s, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CCM</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>3aa30ebaf16cdd5d5cfdd8752cf1133d</anchor>
      <arglist>(prefix, cond)</arglist>
    </member>
    <member kind="enumeration">
      <name>OpndKind</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_Null</name>
      <anchor>34de76a79dd2919bbf1e375c3557895aad85cdf13364fd441da6c1980ba19b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_GPReg</name>
      <anchor>34de76a79dd2919bbf1e375c3557895af94d23fe842ce560c16b3950ee42d3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_MinRegKind</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a9d966a467eb329d09d9b5bb365ea53ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_SReg</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a69b0e2df9a7aaa79372cd9d2470d731a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_FPReg</name>
      <anchor>34de76a79dd2919bbf1e375c3557895ad14e533d4550245d26b1609eefd6a65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_XMMReg</name>
      <anchor>34de76a79dd2919bbf1e375c3557895ab9c6e2a3d1d8a4ff8ae70dcee351b317</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_OtherReg</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a5755026f351e20667980942cacab3304</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_StatusReg</name>
      <anchor>34de76a79dd2919bbf1e375c3557895aa22e2817020f6f3876601cb9ed149e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_MaxRegKind</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a98058fd40643141ea66af266d7766142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_MaxReg</name>
      <anchor>34de76a79dd2919bbf1e375c3557895ac1feb465924e6146abc0ad1493a553c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_Immediate</name>
      <anchor>34de76a79dd2919bbf1e375c3557895ac02a5b5e6a776b98290a62a275729afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_Imm</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a7cb37b71aa0277b49d49255f940c95b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_Memory</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a4f5f76b6fb1e9ba06bf3096e874cb1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_Mem</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a44ba6ccde26c0acc713cd9d6b01d5c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_Reg</name>
      <anchor>34de76a79dd2919bbf1e375c3557895ad99fb332cff68438b29a58287339a7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_Any</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a724b588241a54310a707686406af36b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_GPReg_Mem</name>
      <anchor>34de76a79dd2919bbf1e375c3557895a114fae5597d830dc46c986949c47ee91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndKind_XMMReg_Mem</name>
      <anchor>34de76a79dd2919bbf1e375c3557895ae404b506bafa2a5f0be6403d74baa1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OpndSize</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_Null</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b91747ee498683f40c00dd23e8d8b3dd28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_8</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b91c97d7c6f4a589ac8dc36780e6fe71d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_16</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b91a572eb803f6c1412d753462d066725fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_32</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b91efc79e543a20113d45b428c324eb6679</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_64</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b91e93fcfaecbdc64f9272ba9858152e064</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_80</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b911c2a8f540b74270e951b7d96375b4add</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_128</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b91b8fa344174eda2131dfd03a4a7b7b60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_Max</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b91d0b5fb5386570be0ce7e89c03111086d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_Any</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b912f759adeb9457d019a2bde632493cbcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndSize_Default</name>
      <anchor>d5827b4ef7cd2116f14629ee19387b910fd30487f013fb6918c3e2cf20f11326</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OpndRole</name>
      <anchor>dced35d4c26ef0991ba446901b88b34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndRole_Null</name>
      <anchor>dced35d4c26ef0991ba446901b88b34fe0fdcd66ad9d0524d54d5728d8ba170b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndRole_Use</name>
      <anchor>dced35d4c26ef0991ba446901b88b34f3af2334f720a3fe2905e642032cd7461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndRole_Def</name>
      <anchor>dced35d4c26ef0991ba446901b88b34fcd5deb2c3badd9d6c459f1a07b745e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndRole_UseDef</name>
      <anchor>dced35d4c26ef0991ba446901b88b34fab36e22b9ff3b33e7b5cf728741f5c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpndRole_All</name>
      <anchor>dced35d4c26ef0991ba446901b88b34f5f0c8fcbf4148371bc84279971baba84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>RegName</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_Null</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc8273febdbc7ed4141b76877eef7fb0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_EAX</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc7e57b00fd0de2ff813fdd3df020cd1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_ECX</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcc72f180f8967627827cde5d2f40a1a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_EDX</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcfed22a0604325718cf8da14a39c9081c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_EBX</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc6629f15b1fa5a31a45dd9ee6524527d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_ESP</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc6101076c784b6f1b2639dbb62e80cbce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_EBP</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcea275433090df114d4159a23661470b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_ESI</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc2f0a0c66e5837039ea3f1ad804bc783c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_EDI</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcd787fe5284be6efa8cea4cf467783e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_AX</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc1b06d791d4f71ae8fa38fd538d99fff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_CX</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc6f5c9476bd624a4301f49bd8eccca34c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_DX</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc9238d4bccae153d3e2552ef9168b84f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_BX</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc78af33786b7be55d0244828647643ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_SP</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc4f4eb1638476c64b31ff03434d55d8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_BP</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcb3e7595538d42c74c79c8eab5132ff84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_SI</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc76494a0b5d992991a59285e7ef2657d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_DI</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bca4cc33d0ef13f0d1597abf740cf775d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_AL</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc19560a4394004c7c962cbe3d276cd6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_CL</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc2046abed16e057b8001b502a20da87c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_DL</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc7b9a3bd417b241052709e9c1bd19c8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_BL</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcd46b5064e9b2280b6c932a1968bb15f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_AH</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc60b11292a17457d171333c3be02bedb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_CH</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc797220e66fff59a5697329d8ec827431</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_DH</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcd0abb60e9718ed5944e37473b7abf80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_BH</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc3cf3042f4794391939669817bbf44a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_ES</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc096c7470d59ab1e265ca30469035d7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_CS</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc63cc58da0e8fb6a85ee1df6c4641e53d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_SS</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc2d5977ae5f4716398469b847a457ba96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_DS</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc3243375929ec93982b5563d2125d9a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FS</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcb9da631ac9ba41bfe0d1cd15511f6414</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_GS</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc96b8387ee7c7f30cc5363f81bc3a1be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_EFLAGS</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc2f30935a39b4b8d18d51716497ce3e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP0</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcfa7f9ea882c005bc4325c6f5d9f4e1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP1</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc31f45317b05f721c4e14893d79fa627e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP2</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc8271281f8772b910f6c204f237496838</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP3</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc84468b7012ebb4fb999a8366e81bb0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP4</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc4440c28785e07b3a2882d47acda96221</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP5</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc6285adfc936e4065d1922725f5b43298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP6</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc99e909c77369ec9444390d77b85ebc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP7</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc27d6c57d43d5c37e48026cdd514671ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP0S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc2650facdaff45fe5230345297e4b2106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP1S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc25cd0fac40086355fb9a041eafc013e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP2S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcf96e4ca6256e17763dcc4284a3980e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP3S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc85e080dfaef2b317750fea39049d017d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP4S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc0281755e91e3fd04c61668da2d96f8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP5S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcc9b8e67f404d08e84c484d9ff7b0d25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP6S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc095267c5660a455354af1d4e5f2a1c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP7S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bce4e5b64696ed019c74ee4bf033674445</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP0D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc2bfe63f71b33325174bdcb243eaa7d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP1D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc19df959cfd435b3f56d5b0752b1cdada</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP2D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc37780385c65a4f86a1d97765baf5765b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP3D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcf1b0fa2679b5aad0e520e50dae1eb83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP4D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc923d78b631f1672e165f862a3e52e071</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP5D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bceaac4ab17a61b32ae4ce9d424a3fd4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP6D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bca73188fcdfb69164a3218d422fe22532</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_FP7D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bce9a5fd56f26434b4ddea25db8ecb5735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM0</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc7b41bc246d4eb90bab776bc162fa79e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM1</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc52fa87e5106ac1d44f5bd99c6930a1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM2</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc338819f5b0aa0299802b90d2e75c0c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM3</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc36ecd41264f42b069429c960b2849df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM4</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcf6d0056a438a5a52ddaf3fa4f580aa56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM5</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc4fbfd3a889b5d6c4b64ea77195a18253</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM6</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc34eacf918eaae295555b5c3c16524546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM7</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcc1dc7e21477f6d9bd3d4a883ee5add02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM0S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bce536a2546564c0360f8ca30c94024dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM1S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcd6b372320243cf207936b6650f34f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM2S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcdf024ed95448770e62c0f1f087916805</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM3S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bce0ea49e3f0facdd4c485b354e3e3ca81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM4S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc6007122b5f07e1ced9c35c4710db1011</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM5S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc3c0fc978f6cd28e5f93c6bf7b1caf42e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM6S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc17c330c7de3a30494fed3bdefc00ff15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM7S</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcea0874c332e98c83eccbceb499e892a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM0D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc0c10af5bfa3ea1b1526f23419ebff630</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM1D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc7f7a76d7b304d36139f139a60c329855</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM2D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bce8cf11c36c42be2b3330e951287f5f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM3D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc162626aee4b06c8abbfc4bd34ab2680e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM4D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc8299f7c264c4d225517cc1ed57a69896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM5D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc38b6f5bb75ddda3e5c2fe50e0293bb09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM6D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bcf0e35ab21569c8859b45873a4642b74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RegName_XMM7D</name>
      <anchor>a023b8e3c032b6182a70344d95bcb7bc9d6de1d24d9b34aecab3f44cd5cd5e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ConditionMnemonic</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_O</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d24723c9a15cc6755e929f9146461df4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NO</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d21a09cfd5a706fd31f237ff6b31dbeb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_B</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d213e08dccad06aeac165e2f762048c1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NAE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2c2dd0762d28af903669c6c41a7807694</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_C</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d223db17d760b3cfa8d26cdeec8b5bd4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NB</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2530f5bff348aefa3c12d3bade53c63fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_AE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2e12b60f9b51e88ae48f17ea6b802c1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NC</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2e08db09a10b2ff197aa8a81236e3879b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_Z</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2ce168402445d3727d035d39904c30238</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_E</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2f4dd0077c27b82724d7f13426432137d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NZ</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2c601a28e1b9ceb0618cdd5bc0512617e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2daf92932b987f96e76bcbc415d277003</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_BE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d225778655f5393c3daaa51eaa46b9f880</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NA</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d249c66b6941b26cb76845171d12fcaa10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NBE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2f2ddcf1ca0916ce23b4f19301529213d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_A</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d22fe3fa9d28d6ee6ee368ff0bc1e3687a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_S</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d20b5854bf8a5f148483274be0a874ad7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NS</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2718e4261c29830b980f45489ef0ed8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_P</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2a4850e72f4d3ddb3e1c067223f888c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_PE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d278db0b085b9e3bf387f57af13999c64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NP</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d24f32c39ebb17ab78ee95f2eae12d867b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_PO</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d270519310b87b7d9b1512f8bd29958130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_L</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d229f4b94270cca12e2ce5b8ff6a1576dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NGE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2ff6631d77e41de025be162e037ccea5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NL</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2a508d4715382b381e896d1ace3344bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_GE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d25e74be2d97b596f07ed101ca70893bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_LE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2bbb6a503864c8133860838107f15edcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NG</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d29d32ce83fda027d056cecbb4e7f319ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_NLE</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d28042dd79af95ffcc7fa677e2e0287f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_G</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2c5a5f316ff843c987f5611ee26bf9f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ConditionMnemonic_Count</name>
      <anchor>2fd3b6f41db427a58f9eee1bc1ee29d2724f78bcd5973eca9abbbe53392b6f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Mnemonic</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_NULL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e8b7740a37269e3d1f19252b1aeb0d14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_Null</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ea81a707410da35f91e30e2ac23e7ca91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_ADC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e112bc58bbf1bac9e6fe94ec02acb5d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_ADD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9f970575722662f726e94f456390d2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_ADDSD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e5f1458ad887624f432460181345feff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_ADDSS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ec1d4cc21dfa3f58548fe8617868ebd2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_AND</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e0f3ca492e2992f50ff3bb64edc37ec09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_BSF</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e62cb2859a56a92289a5a9b3ea02db8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_BSR</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e56e520552718bd3f49fc38dd8e3741eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CALL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e90bc5f50bd2ad4b1f65e414827f47a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e16af8108fb5a517a41f242177c0bf4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CWD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb6231869520517cd7eac987f89a2d9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CDQ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ed59fc6acc26a122808817d86f70e6ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVcc</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e2e81f1c4a3bfeccce45bdb3ca3e52e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVO</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e39907e345545e147474acc7557be8efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNO</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e2ae03e3d6bfc82a0a8f7843bf5fc2d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb9d2cf848ac035f2e15bcaef4a5326c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNAE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e47d7d04b030695a7561f279ff846aec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e0b36004f8838af5d58fe65b364587f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eac129e7372abdce33725c7e0eb0317e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVAE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eeabfbca2297981495abf61022ad05e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e6681b584f64de33122f1312551240521</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVZ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107edf075feae7b13e588e8ae2962f05b2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb49c3dc69aa1be297a94498f21590204</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNZ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e6ce2bc06f4b32e302ae5d24c66c15fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e6677f063521df35bbfc39bb6f0f3ea28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVBE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9f9af2effea0f1278ad9b5307726b49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNA</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ec593e9d280279faacc85152c2967c0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNBE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e71d5452a9f4e19f7a1038ca420fee6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVA</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e6c635a863239945370533c855bac096c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e3b49e0e454fa09d7204b4aab94f53958</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ec6e1d705ad51b73bba38b7f73c269b4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9979032a2ada15b6cb3ac134aac97831</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVPE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e7a14d0e140461b2326d5b0be7b2df954</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e23f90f991475efcdda33142030c7101b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVPO</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e968958d529f908b992faf0e184181432</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb6a506a89c63cb721139c13901d7b817</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNGE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e6e18c943ed7b5cc0df5a8ef70023e998</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e2f4e5cbbb17b4cd13a4ad6813c9b97f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVGE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e56c05febe2ab06d6a6925a90139c642a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVLE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e1e3e43bb876e473bcb270a5060c52fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNG</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ee557a76d66cfbb30e196c5c647865fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVNLE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e0871ed1725a2c58f4f3ce292858d6023</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMOVG</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e45e4a4a7a656c9f54356d8109a8f6fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ebc38519f6691d2e6bd396b52ef9af8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMPXCHG</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e5045fd2ff605ba099fe8c4525ec8c7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMPXCHG8B</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e8e8dd1dea75eae489e51c5378ae0a584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMPSB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ef7ecebbb0c364384f6d11c7b7a78c194</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMPSW</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ece8d145e1be6c6a1ace4eda9c5eb9538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CMPSD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e79120a86e6ffa38e7f5125bd18fa5771</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTSD2SS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e25c902ebb7e9b9aee288d8a0c00c8a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTSD2SI</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107efbb7daea42c491fb938c614aa118d0a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTTSD2SI</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e147127c498774d738e58acf7cdeab6bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTSS2SD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e3088ef3c8d6f485910d198687220df8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTSS2SI</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e00a550b4352fb944c2aec1530ce23dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTTSS2SI</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e8a304e7a97f50e439ef234f30218fefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTSI2SD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ebf38e234205da2075e5aff583666afb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTSI2SS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107efe55b70b9d0ee9d61de56de3fc1d9664</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_COMISD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e2f7835e38fa67014901cb305ba73fa17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_COMISS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e2798212ddea8c14fe956ed0c5956e403</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_DEC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e1b500596b2b77e31e7f55927b608b2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_DIVSD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107efa999252f71ab174faf6aa0ecb13accd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_DIVSS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9226cd2e5e274258591cad715a915a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_ENTER</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e29a9c7b76ce9b2f8eb44d171ea1ba234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FLDCW</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e6aa00972fd2d617a6f3c0340458cfb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FADDP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ea6e6e1829d1c04e3018c27b9b5a311fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FLDZ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e3ed70f582b03a08fae78015c3ec9d907</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FADD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e5ad1aa7c99e84a10dd7749aeb4a36238</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FSUBP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e7b00c8db87b7eed75222416606725bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FSUB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e65a43d0226f9911120b2269d34c21f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FMUL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e06e5b739a4ed1178914f4696eafedb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FMULP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ea1335c2c212cf5367c63d1fcdba7da29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FDIVP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e7cb415f543c1cacde2cb1064e29d256e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FDIV</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e58fec5756007e47616ae0871ba5c3290</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FUCOMPP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e13bf245ddfab6aaed8e95c37fb0cd6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FRNDINT</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e4f6843a46f8b5b7044b028c365998412</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FNSTCW</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eceb05e298d389ce0accb5f5228726b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FSTSW</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb8ed29dde38dc48e62a69101a257aa01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FNSTSW</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e504d1191cf2b131da390a189887e9b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FILD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e52167e19f1f8642d062000fd4ab6ff2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FLD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e69390f241fc27c3612d493acc42d2e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FCLEX</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107efe074a5b9f6a0dbf82152b4bf6e37c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FCHS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eacb60e2a8b09c422a2bb21ac1162ad90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FNCLEX</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eed7f8fa44bad1f17ae321a163737458b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FIST</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ef42c0547a0b9ffad2b43a4a099f9a315</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FISTP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e8a4d84341d46f5691f4050a6d289d935</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FISTTP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e1a82c3ab06c998ba6e98106f5681457d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FPREM</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ed26392d7206cbed06a5a5c5035574744</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FPREM1</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e43331a6d5070a0bf31ee488d06825147</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FST</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ede49c5c526f6d7bfc503dda5b46c80b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_FSTP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e4174a2531f94897fa6672cc734de0057</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_XCHG</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e51174e1446edee1118c4f242addcccd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_DIV</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e2cda01300e261c092563778a13a0c793</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_IDIV</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e442e431312aa983cbb6b3c05d0cee4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MUL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ee4818934c0f09348ae5dd58227ed2bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_IMUL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e3a8d558fc3c6db04d00537648526ba1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_INC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ecd4fb3267b9b6cbc1b9aa55760e42e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_INT3</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e3993fad6d00703d8a6582e8149c04ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_Jcc</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e5ac5955b52e6351d7e5b88e1b4f437ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JO</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9ed514dccaf618532f9138eb59465d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNO</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e5398f9a0e1b4ae21001ac7793adc1d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eadaabc191449e4cc8232da89d61c70f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNAE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e32cb9c03c8a8b3a4a7218f40c7b051c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e8ac3cc9a21a29fe35559e4a37c7ab2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e0e64fd7d5cd44e65e05116b13d9799e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JAE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e4868a5b07cecbc0956ac69232c887a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9f23bd835947010ff3dd61f0054b19e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JZ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ef73cc2db09c6feb9e29b13cf56de0719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e5a4184dd1fb9309f5860d6dbba964c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNZ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e59ac0433313b40538a9e151f12acedf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e4ecd2b296c4b85626e52c0a211290282</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JBE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e14c6c296092e8f83f621a90b8905fd3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNA</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ead33edc4be63699de6f46b758a8012c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNBE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ebb05ddf78bd16fae0ebe3306a81c8155</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JA</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e467dd4da307774d40963616a54cd615e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ecd461f8dfd4e4273103a04e97fe769cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e0d765b2673dbce2e2993e8dcff48b0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ea73dd0d508f0da6120849ca4bb41bafd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JPE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e91a086e3dd74c168d6b27c618fa53883</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107edf79855d30269f6e2f89e9e54d4591e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JPO</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9990267e5bd77a3317c0a408444e8efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e03680afb2ebef190b4902b9e178b289d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNGE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e7abae6fac47b9062732aa7802890758f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e6fe02b272089a67f4896f417d046e89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JGE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107efe6110ab2f44bce0f7b12b7dd70c07ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JLE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e04534e7ae673b65dd39535d0e2379156</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNG</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e15a7dae957f34bc1bff2b244611ea44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JNLE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e10c79df88c64e331dd08882bcf4e0430</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JG</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ec6d9455d3f944a69f1f337890fe89c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_JMP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e25c0b19db547b32bbbf1e7b9a73413bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_LEA</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ebd8579da7876ed418982345d4bf70f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_LEAVE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e3495e8ba7f32b849fca32b3e7f7d2d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_LOOP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e0630355719cd2962310c0fa84f201feb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_LOOPE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e0ceb09ef34cd0c5b37d5b33c835e65c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_LOOPNE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e20d56957c9a6f019c8df531e65b3b6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_LOOPNZ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb407ae82c214b9b2aefc386c83c03635</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_LAHF</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb3bbd88f887b0628edbdac5e8524306c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOV</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e3acf5e7d6713df8dc5c4ec6146fcb746</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e09e48fae0deddf2a68abd8ab1be72601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVQ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e7cd40328e588e9c811bd9a6a1fad2893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVS8</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ebe38a78a8fe52c745a09e73f29e17c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVS16</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e7b89592c887f7ffccfc15b43f9c8767b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVS32</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e38792c3a91d38ea8726515bf139a1e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVS64</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eae87b989a91c3e8731b81a06fa479c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVSD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9fe22a9e0b8eb9b973ebb0a9e426443a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVSS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e7f3d79b13e7fb98401fdf5fad7c60092</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVSX</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e4d81cd1e9475978866d2ef6d70a42416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MOVZX</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e5c3632a0c7fc6a57e7378e1a2b1f8af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MULSD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e65b926518895d9940fb5eb73c1cf6dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_MULSS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ea5669218f822723c1824d2a4ec9ea59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_NEG</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e6362abb626a7f0aaaa6fc836382fff04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_NOP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e30c4e725c7d21fa2e9f5e103c9769717</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_NOT</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ef74700d229c11227b2b145897a52a74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_OR</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9d446290e9be8df95535ef3c28ae1dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_PREFETCH</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ebe7f0b9bb4dddbd94d4520d8d74c70f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_PXOR</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e26af57acf6b3a567f8848fb8381e36f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_POP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e192dfac001b31e47aaf2b0e1ef20ff4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_POPFD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ed5e4c6462819c5c43536ef9268aa6062</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_PUSH</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb75ea074dd60d94961340db96a641719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_PUSHFD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e35005dbd3e0ff8591e6fc0a734c5d009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_RET</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ef1b4586c64fa8ec6af460cfa3579b790</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETcc</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e80dfdf076f0411f7e103181ead837aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETO</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ed538a302f74874154efb145b5de56992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNO</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ec7bf718b485c2da2f97d37e446571c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9ec587c9b03ac130db4596b9e4b163e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNAE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e512c500a08ff4e7087661daaf5a30623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e622e841f7dd51ab381b75d99de7d4f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e124337437e2c4728dd6e38b554d77ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETAE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e295af02b155e6d7b33a5deb33dd33d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNC</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e3648693ae139977389318eeaaa8baee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETZ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e65585876eb3f3a1f61934e626520d6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e33c603b761e97d231c78ac1806329153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNZ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e89b428f8aa0776fc6e4414c21dfb87f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e8f3e2d6d7fafc251b8b22a5863b049e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETBE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eced738a0447e823d84c1ba690f85b112</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNA</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e861d6d23977db029097fa19b0f584c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNBE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9f8ecb6c55032e75978d93b2c9430ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETA</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e2c358ad394718404e12ddbb0fa1cf8bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107edf8f1427845d7a6dbccd16145c875166</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ebb929d49a9033873f4f0a1d76fae5edf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e1549bbe9b1c15f52df5a07e1142a4c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETPE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ee9fd90781967003e969386c4129a4fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNP</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ec7a51f76fe43de83d318d19f65c585f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETPO</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e277df8a77575eed2b411868f01b50b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e62dc58df833326dcd4ec0a13f049ebfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNGE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e345ef56a8fd03cde3836fd9eda83ad0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ec7dd7b4b74273598aabdac45447f2eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETGE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ee3bdde63f52221c09c6a6bf07652679c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETLE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ebfee23f6a3694b706cafa040e818893a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNG</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e6bd421aa5fb0f2fba5880ad7e68357c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETNLE</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e4b7934f1d23c419884aa01b70ffe0042</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SETG</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e2df43d5431952d6bfb9626ff13a4fcae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SAL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e89dbddc4e3a74d27afc16cb04b54f786</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SHL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e605ec75def6d5432802683d6ecc41ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SAR</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ed5df5c99d616cc555e8fd0ebd6a69efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_ROR</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ec2d57975337e87d61543e5e8d06cd53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_RCR</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e2a85802d39b6954f32a3ba205ea67052</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_ROL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9725b19c5df2d562afa34f9957e54f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_RCL</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e3e67cc9d9ad35aa28497f151a307be91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SHR</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e5efecf78dc6e000267ecfffaa4aef1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SHRD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ee9b210f620db291455be1c135f4fe4b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SHLD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ea7e3aec85ee4e27d272c3aa15c22a2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SBB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eee4600e204b0283d34e6f29e07ca5b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SUB</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e8fc91f9c5dd99ba9e9c1db6fc32cec60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SUBSD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb39dbc406ec8ab0effcde2c817918ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SUBSS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eebefa6b02b8c1acf23daaa779567ea4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_TEST</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e99b8b2f14d787140d654acb4f449e34c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_UCOMISD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e9e3e22c461e44edd2cc21fc18a7818f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_UCOMISS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107eb68dc2627d994a09defa21d72ef2731e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_XOR</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e102a88593e0ad2ccb8b0da548991f76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_XORPD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ee7a39b3d1edaab4fb10df5bb4991616a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_XORPS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ed2d856462ef2107c449ce978a395384e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTDQ2PD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e76cea7deb1d74b4acfc024e4cf3a3a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTTPD2DQ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e748acbc6e11421c4395d0998eea53884</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTDQ2PS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e37fc9eb09a77903a8fd53f9958ab08b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CVTTPS2DQ</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ebbc188d24565c71111d1ce38206e5c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_STD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ec915cc2500e42a79e09ffdee969fcfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_CLD</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e171700aeba078cfd67c22221a9ceaffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_SCAS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107ee08c61cb318a41174bca81aca1d286f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_STOS</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e5dbdee31edd2bf40ffa7e909300e44e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_WAIT</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e47d5970fec19b6f4098bb7750bbd8867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mnemonic_Count</name>
      <anchor>9f4c39258cc8dc05ca58cfb84306107e65ad2d67d9402e04178193bbd5094480</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>InstPrefix</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_Null</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6ae25d098be4f516fc6e9b5b4159cee862</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_LOCK</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6a9828ffa5e63fdfda7dd41735b4c8e043</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_REPNE</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6aa7339011f93f50f983f05ed9115c884e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_REPNZ</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6a2041d26219c1ddde8d5ab6684afcd612</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_REP</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6a61cf7f9b25aca045dfe1081e635f05e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_REPZ</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6af8f3e54ab9b2354a78872a5e6cec36f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_CS</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6a151ffd919b51a830cbe7b939a8630bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_SS</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6afd9bac8ac8135677f0796a61ec354e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_DS</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6ae1081673c123efb8ac4b529996924188</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_ES</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6af99400a620f49619e9b1365b6183e0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_FS</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6ab8edec43d38736388fcb1efb2a6d9fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_GS</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6a36923ede46181440c1ce26d1b4ee09b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_HintTaken</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6a148383214524570503a7ae468cd166a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_HintNotTaken</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6a19a991d06c5787b91d9b7fae6db7652f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_OpndSize</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6aa35a745211b2f47fcd5ec8b978d1c7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InstPrefix_AddrSize</name>
      <anchor>4ba40f381ec1b1eeb03fb3cab87a5c6aa4c5904f8cb512e51189847e4d49c530</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getSizeBytes</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>672a194ac6db0f714a034bb952ceff41</anchor>
      <arglist>(OpndSize sz)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRegKind</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>347a67b10b534f4a43dc68484b3c4f84</anchor>
      <arglist>(OpndKind kind)</arglist>
    </member>
    <member kind="function">
      <type>RegName</type>
      <name>getRegName</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>8ae2eb888b24dc5277418c5a759ff73b</anchor>
      <arglist>(const char *regname)</arglist>
    </member>
    <member kind="function">
      <type>RegName</type>
      <name>getRegName</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>fcbb563c038bf742fb57d499eac4d79e</anchor>
      <arglist>(OpndKind k, OpndSize s, int idx)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>getRegMask</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>a8a4da0eacba55fa131610eb9a174e8b</anchor>
      <arglist>(RegName reg)</arglist>
    </member>
    <member kind="function">
      <type>OpndKind</type>
      <name>getRegKind</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>cdd7c7dab45b1f30fab687874c013de8</anchor>
      <arglist>(RegName reg)</arglist>
    </member>
    <member kind="function">
      <type>OpndSize</type>
      <name>getRegSize</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>53b382ce5592592f806fc9f2eb39a20b</anchor>
      <arglist>(RegName reg)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getRegIndex</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>f134ff4b08311a01055f516c7dd6b78f</anchor>
      <arglist>(RegName reg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getRegNameString</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>4d89c4482bfd484efeb52f6511fdd2d7</anchor>
      <arglist>(RegName reg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getOpndSizeString</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>3f2a3424e0c811715cbad99555af4933</anchor>
      <arglist>(OpndSize size)</arglist>
    </member>
    <member kind="function">
      <type>OpndSize</type>
      <name>getOpndSize</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>11d01fb1302e45832c8c14cd084a0eb8</anchor>
      <arglist>(const char *sizeString)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getOpndKindString</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>ed594a605d00e4db8f581d380bafe25d</anchor>
      <arglist>(OpndKind kind)</arglist>
    </member>
    <member kind="function">
      <type>OpndKind</type>
      <name>getOpndKind</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>0be6b6a1b5aab4e30007844810f473c4</anchor>
      <arglist>(const char *kindString)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getConditionString</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>1bf5b742e5291914b387b3ea3549c4b5</anchor>
      <arglist>(ConditionMnemonic cm)</arglist>
    </member>
    <member kind="function">
      <type>RegName</type>
      <name>getAliasReg</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>e5b9ade5e937884bf398e1e4e03230c0</anchor>
      <arglist>(RegName reg, OpndSize sz)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>enc__defs_8h.html</anchorfile>
      <anchor>80a9b6f774d60d28a215e5c339b77e1a</anchor>
      <arglist>(RegName r0, RegName r1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>enc_prvt.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/src/encoder/ia32_em64t/</path>
    <filename>enc__prvt_8h</filename>
    <class kind="struct">Rex</class>
    <class kind="struct">SIB</class>
    <class kind="struct">ModRM</class>
    <class kind="struct">OpcodeInfo</class>
    <class kind="struct">MnemonicInfo</class>
    <member kind="define">
      <type>#define</type>
      <name>MF_NONE</name>
      <anchorfile>enc__prvt_8h.html</anchorfile>
      <anchor>6f2842a6f4370b2522220ae3c3dd1fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MF_AFFECTS_FLAGS</name>
      <anchorfile>enc__prvt_8h.html</anchorfile>
      <anchor>ab5d46649ec24ce146762d725723e3a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MF_USES_FLAGS</name>
      <anchorfile>enc__prvt_8h.html</anchorfile>
      <anchor>9e12ed743eeee0c1406cb0ba99419eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MF_CONDITIONAL</name>
      <anchorfile>enc__prvt_8h.html</anchorfile>
      <anchor>92bfc53ea8ef62baa60a427eb6c7151d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MF_SYMMETRIC</name>
      <anchorfile>enc__prvt_8h.html</anchorfile>
      <anchor>8ff7bc740b3a33c7abf11653666d0214</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MF_SAME_ARG_NO_USE</name>
      <anchorfile>enc__prvt_8h.html</anchorfile>
      <anchor>c871d6a7527faf3247e341463b9119ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OpcodeByteKind</name>
      <anchor>ba956dfb1163949426b16037d1238c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_ZeroOpcodeByte</name>
      <anchor>ba956dfb1163949426b16037d1238c131c4871de82fee27e95b69e65a2dfc40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_SlashR</name>
      <anchor>ba956dfb1163949426b16037d1238c134d2f343c62b8747c3afd293344575e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_SlashNum</name>
      <anchor>ba956dfb1163949426b16037d1238c139ff1d3566bb1809de974b4a2d863d33f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_ib</name>
      <anchor>ba956dfb1163949426b16037d1238c1333767ad739a3af4fae6110141cc84910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_iw</name>
      <anchor>ba956dfb1163949426b16037d1238c135953d9894770f01d71372266bee47d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_id</name>
      <anchor>ba956dfb1163949426b16037d1238c137a5c0bd4e2ec3a492cccd2e28e7bb3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_cb</name>
      <anchor>ba956dfb1163949426b16037d1238c132912f14da77f6c421504879ecc0f4b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_cw</name>
      <anchor>ba956dfb1163949426b16037d1238c134416a4c1c47b4200fc229fbab91ae6f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_cd</name>
      <anchor>ba956dfb1163949426b16037d1238c13385436a85836ccebacf069a946b66ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_rb</name>
      <anchor>ba956dfb1163949426b16037d1238c13bc309c5efc617e01c4dc1cbed3fdf427</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_rw</name>
      <anchor>ba956dfb1163949426b16037d1238c13a509f8222271ffa6b9ffe5ed773437b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_rd</name>
      <anchor>ba956dfb1163949426b16037d1238c13f35da792c018862e114489ac0fd29c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_plus_i</name>
      <anchor>ba956dfb1163949426b16037d1238c13f998218511aecd740c08fbc23ab3a9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_EMPTY</name>
      <anchor>ba956dfb1163949426b16037d1238c13e525ae08cebd4932cfc27fe8fd9cf41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_LAST</name>
      <anchor>ba956dfb1163949426b16037d1238c13f7c7e0fac5afafa8a5854628c564ce99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_KindMask</name>
      <anchor>ba956dfb1163949426b16037d1238c139f7775c3c3e6bcee7d288a3ab4ed2de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpcodeByteKind_OpcodeMask</name>
      <anchor>ba956dfb1163949426b16037d1238c1390410e4e66ff261080295cc0b731bca1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>encoder.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/src/encoder/ia32_em64t/</path>
    <filename>encoder_8h</filename>
    <class kind="class">Opnd</class>
    <class kind="class">Imm_Opnd</class>
    <class kind="class">RM_Opnd</class>
    <class kind="class">R_Opnd</class>
    <class kind="class">M_Opnd</class>
    <class kind="class">M_Base_Opnd</class>
    <class kind="class">M_Index_Opnd</class>
    <class kind="class">XMM_Opnd</class>
    <member kind="define">
      <type>#define</type>
      <name>GR_STACK_SIZE</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>5769f7bd40113d9a6404b73a4300a387</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FR_STACK_SIZE</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>1b02f838a8c729d1db58316bbf3550c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENCODER_DECLARE_EXPORT</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>a61bdbcf04f60b93678e1b8fd54b3c28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Reg_No</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>eax_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde1d800479a28db3a8b6a6f378a9be0a734</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ebx_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde166279364d64cb0b6922bca3dae0d5d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ecx_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde11adc3ba1b63a94ab136ea8ad8d0a8427</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edx_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde13d97cf50003ca44a5974ecfab82f0f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>edi_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde1ff807c420a6f76ee4cd343f5688e054d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>esi_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde1bb84a8dedfaff403d631d48c74fdaf1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>esp_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde1a81df5fd98d7fe9ce01989192c9b1241</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ebp_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde15c45349efc11c0d7d0138bef3d35fa14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmm0_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde119faa0c58abe18b916f4490898b698e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmm1_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde146c84b5432368936ed1b034944e437e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmm2_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde1751e3d10dc51be109861420eb76042f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmm3_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde17bfa0e0d9aa402529203dda144be7934</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmm4_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde11a2c47d4cd7bea63e54a642352fb23df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmm5_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde1ec51a5d66bc8b415493b857f4df037ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmm6_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde18bfcf6dcb7a878a23c0fb31af296048d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xmm7_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde11e47570d9b5e778aaee1b6c8ae5e2775</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>fs_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde1330354424937f8a00827eb5afedbc42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>n_reg</name>
      <anchor>54c27f5eeb2462ad88740e4891c9fde106f0de44a88838079d5940476153c478</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Opnd_Size</name>
      <anchor>bf9f7f7a1f6a530b62ecb5662799734b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size_8</name>
      <anchor>bf9f7f7a1f6a530b62ecb5662799734bce44ab0ac2f7f9b3e01c3aef472a61fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size_16</name>
      <anchor>bf9f7f7a1f6a530b62ecb5662799734b5dad1b78ef5e4afb6f0d18b1c26df065</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size_32</name>
      <anchor>bf9f7f7a1f6a530b62ecb5662799734ba9ebe0d1269570ac74a1f9716d9b3b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size_64</name>
      <anchor>bf9f7f7a1f6a530b62ecb5662799734b06a23d87a5f31fa3bcff7f627b735df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>n_size</name>
      <anchor>bf9f7f7a1f6a530b62ecb5662799734b5e8e7abdd44d22a76ee2cb979a04bee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size_platf</name>
      <anchor>bf9f7f7a1f6a530b62ecb5662799734b6338ed56a81e4257edbdb2f85400c7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ALU_Opcode</name>
      <anchor>cbf01cb609f4381502821fcc6df07585</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>add_opc</name>
      <anchor>cbf01cb609f4381502821fcc6df075853e5c80a1303d2ac3fcc64b473b7897c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>or_opc</name>
      <anchor>cbf01cb609f4381502821fcc6df0758512ca4b34429939a5291d8eed1ba8a446</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>adc_opc</name>
      <anchor>cbf01cb609f4381502821fcc6df07585ebd4b8ecbf9d2ea1574e55ef0906bed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sbb_opc</name>
      <anchor>cbf01cb609f4381502821fcc6df075850051240ef0177899cb435b5f67d57b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>and_opc</name>
      <anchor>cbf01cb609f4381502821fcc6df075858b5d4c542d092db6c111f5ac15a1bba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sub_opc</name>
      <anchor>cbf01cb609f4381502821fcc6df0758529fbd041501eef16a5098c7f643546f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>xor_opc</name>
      <anchor>cbf01cb609f4381502821fcc6df07585b13199e21633383df82d191d9230abe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cmp_opc</name>
      <anchor>cbf01cb609f4381502821fcc6df075851c065eef6bf1b0bb3653d42ba7249c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>n_alu</name>
      <anchor>cbf01cb609f4381502821fcc6df07585445b03b0eb38623a878d6f97ffa74b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Shift_Opcode</name>
      <anchor>d146841143dfd46becf0f296cf405913</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shld_opc</name>
      <anchor>d146841143dfd46becf0f296cf40591387b0bb434d4c045d79cebc04b7867d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shrd_opc</name>
      <anchor>d146841143dfd46becf0f296cf405913fe58f53f403d525407c1c7d57cb226fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shl_opc</name>
      <anchor>d146841143dfd46becf0f296cf40591346a3ead5f3007f0e59026b0cf6d369ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shr_opc</name>
      <anchor>d146841143dfd46becf0f296cf40591302c44dd433aedb2a644d2022c1c6204e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sar_opc</name>
      <anchor>d146841143dfd46becf0f296cf40591380f481ad83e336b88d918b82f0ee04f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ror_opc</name>
      <anchor>d146841143dfd46becf0f296cf405913a45fa4aac7aa6b49199ad5672198e169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>max_shift_opcode</name>
      <anchor>d146841143dfd46becf0f296cf4059139d64c3db8db160594c6e133e8b424c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>n_shift</name>
      <anchor>d146841143dfd46becf0f296cf405913c2e454142eac8b1d8cba430633eacf21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ConditionCode</name>
      <anchor>b8f08e777c4753720cff841f81da8e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_O</name>
      <anchor>b8f08e777c4753720cff841f81da8e06d5280e55e3a94f678d2a814aa69f6838</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NO</name>
      <anchor>b8f08e777c4753720cff841f81da8e061a9773e2f558d226987db9f113e08c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_B</name>
      <anchor>b8f08e777c4753720cff841f81da8e06f711762e1f3a8e50646cbf0ca316235e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NAE</name>
      <anchor>b8f08e777c4753720cff841f81da8e064f9804e31d1fe563c681e56f3474433e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_C</name>
      <anchor>b8f08e777c4753720cff841f81da8e0606ce32f7fda03bcb650d6d51ab91a3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NB</name>
      <anchor>b8f08e777c4753720cff841f81da8e0614778abe0d265f514d1724c2256c34a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_AE</name>
      <anchor>b8f08e777c4753720cff841f81da8e063fe1b5da4eef1cf367fd5bd8e1daa969</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NC</name>
      <anchor>b8f08e777c4753720cff841f81da8e06da396071cfda24415ff3a227aa5bd7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_Z</name>
      <anchor>b8f08e777c4753720cff841f81da8e0691131e31b54d564875fbb2531e59e6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_E</name>
      <anchor>b8f08e777c4753720cff841f81da8e06186c88604be2a9f1e2acb3e16aa03e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NZ</name>
      <anchor>b8f08e777c4753720cff841f81da8e0698d9f2a28a78aa794eea12224b5d3d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NE</name>
      <anchor>b8f08e777c4753720cff841f81da8e0633c85f33ae87ccac9a79b91e4e879192</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_BE</name>
      <anchor>b8f08e777c4753720cff841f81da8e06f740793950fd11549a78cc71b1806854</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NA</name>
      <anchor>b8f08e777c4753720cff841f81da8e06087ea6727c5fbcee49dac32b00fe5ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NBE</name>
      <anchor>b8f08e777c4753720cff841f81da8e06b582aa8f9d79225ad080845cc173ddc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_A</name>
      <anchor>b8f08e777c4753720cff841f81da8e06bd2927a8d33814e6376b17ed8136cffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_S</name>
      <anchor>b8f08e777c4753720cff841f81da8e06b2c1326698f93e8d376bc3cc994e1ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NS</name>
      <anchor>b8f08e777c4753720cff841f81da8e068ea1b03a81abdba3f71060d4c8538613</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_P</name>
      <anchor>b8f08e777c4753720cff841f81da8e06abf5433e466cc6a94a8f8cd213de747b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_PE</name>
      <anchor>b8f08e777c4753720cff841f81da8e062391b839c261deec4615d0e945f23f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NP</name>
      <anchor>b8f08e777c4753720cff841f81da8e065473f4da8d60a665fe2057ade618d1df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_PO</name>
      <anchor>b8f08e777c4753720cff841f81da8e06a2d20b6ba6792f7e3e7aa30319e0469c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_L</name>
      <anchor>b8f08e777c4753720cff841f81da8e06f8869c85951497923a94f88818d6c28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NGE</name>
      <anchor>b8f08e777c4753720cff841f81da8e06a91b881bce5194072baabcd93917733e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NL</name>
      <anchor>b8f08e777c4753720cff841f81da8e06db5b66d6bded77d19564b9c790516663</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_GE</name>
      <anchor>b8f08e777c4753720cff841f81da8e06d914f842ad58e449966e731b8ad482da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_LE</name>
      <anchor>b8f08e777c4753720cff841f81da8e06c73f6d2b0348bac1e7a3ff89e2ea191a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NG</name>
      <anchor>b8f08e777c4753720cff841f81da8e0627c97fb9e271444a16e2e024e02838a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_NLE</name>
      <anchor>b8f08e777c4753720cff841f81da8e06413136c49aa65e7552cbdad76866e5c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_G</name>
      <anchor>b8f08e777c4753720cff841f81da8e067306553c61ac488624cb593f54950f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Condition_Count</name>
      <anchor>b8f08e777c4753720cff841f81da8e0614f9954f6247f6bb6becbaa2b2303b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>InstrPrefix</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>no_prefix</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f4429d1ffeffcc0b9d83cdb33743973d3fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>lock_prefix</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f44020a136653e1b31836949ac6f0db0051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hint_branch_taken_prefix</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f44cb58676ab5a5daa28e21793fb0b561fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hint_branch_not_taken_prefix</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f447022b5abeaeba90ee1edd513feda8b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_repne</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f44fa3f4a6ce67059247173cf73ca712291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_repnz</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f44efbf714d89cdc48195dc54d300ffd32b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_repe</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f446af78b1d70f40d99724dad7fdab166cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_repz</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f4459766c3418a889f0209f91dbf04e05d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_rep</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f440bac9dea8e05cd5b4a8b8530165bec92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_cs</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f446fffea0db08b098b89d1c3e5c971a0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_ss</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f440b58f571a322a3c63204c6d026562811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_ds</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f447b5fb689a986122039a6e477379a7a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_es</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f447a7a88a8eb0083ca8a0e113e70c8faad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_fs</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f44f11b4c71b831aebbf82d69f8f9364167</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prefix_gs</name>
      <anchor>b0a1b8e2352e76cb08586aa0e9640f44771477f653ecd3759d920a90cbc72c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>prefix</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>730abe76f426c54821e3365ef3560a20</anchor>
      <arglist>(char *stream, InstrPrefix p)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>push</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>8b839047801df3554d39999af4507489</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>push</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>a8d6c8f0837860ef61601784ced21592</anchor>
      <arglist>(char *stream, const Imm_Opnd &amp;imm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>pop</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>a73e3f890841a71022374f30a432465a</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>cmpxchg</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>5826b079bb385cb77f65d3dcde2e86e1</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, const R_Opnd &amp;r, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>xchg</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>ef8f6dd4216594cd5ed25cc883ea0fbb</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, const R_Opnd &amp;r, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>inc</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>9c840f01a88bfb87d3c329c384005f48</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>dec</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>0b99d52140c8de57daf26e4e13291fc5</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>_not</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>f3fdb262b4acacfc1c2f5423f47cff4c</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>neg</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>9043f42f96d2f78f5cc90367c9018aa6</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>nop</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>62b0ba703f0b38862e33f7ee2f98fe84</anchor>
      <arglist>(char *stream)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>int3</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>d32f7caf9beff058e62fc73ff4a5c854</anchor>
      <arglist>(char *stream)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>alu</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>24c8a1ee82710831d002e12cf6dd3335</anchor>
      <arglist>(char *stream, ALU_Opcode opc, const RM_Opnd &amp;rm, const Imm_Opnd &amp;imm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>alu</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>013f1b4a4697ec13d50b30e4584dc6a7</anchor>
      <arglist>(char *stream, ALU_Opcode opc, const M_Opnd &amp;m, const R_Opnd &amp;r, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>alu</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>ed4b618ee6710065ace61f93d9e55b4e</anchor>
      <arglist>(char *stream, ALU_Opcode opc, const R_Opnd &amp;r, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>test</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>f63a3df78b5059dfce62ffdbcf88805d</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, const Imm_Opnd &amp;imm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>test</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>3905c4c60c28f16662b7eff877398d4c</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, const R_Opnd &amp;r, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>shift</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>efef0ef1df0bce412a7e69c29bdebf43</anchor>
      <arglist>(char *stream, Shift_Opcode opc, const RM_Opnd &amp;rm, const Imm_Opnd &amp;imm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>shift</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>fd859d8f9783bfd9d2d71195bb939edf</anchor>
      <arglist>(char *stream, Shift_Opcode opc, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>shift</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>88b9d826ccef54945434655227437391</anchor>
      <arglist>(char *stream, Shift_Opcode opc, const RM_Opnd &amp;rm, const R_Opnd &amp;r, const Imm_Opnd &amp;imm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>shift</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>b0e4a6314471dcc4ac71cf214f098dc9</anchor>
      <arglist>(char *stream, Shift_Opcode opc, const RM_Opnd &amp;rm, const R_Opnd &amp;r, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>mul</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>6b40037b85edb60938d9e1aaeabf6753</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>imul</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>5ef07e5ace8cf214c35d67e2c7a7d9df</anchor>
      <arglist>(char *stream, const R_Opnd &amp;r, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>imul</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>2c09a342f193caa17ba795e51c5ff29b</anchor>
      <arglist>(char *stream, const R_Opnd &amp;r, const Imm_Opnd &amp;imm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>imul</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>af1119f793e24e2d8d198e55be637feb</anchor>
      <arglist>(char *stream, const R_Opnd &amp;r, const RM_Opnd &amp;rm, const Imm_Opnd &amp;imm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>idiv</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>a214c261e3013afb32fcc09a40ae1918</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>mov</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>e85ef44807cf2e501774699afffa43f1</anchor>
      <arglist>(char *stream, const M_Opnd &amp;m, const R_Opnd &amp;r, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>mov</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>9914ac43140d54552f0f5fb8c6f5e082</anchor>
      <arglist>(char *stream, const R_Opnd &amp;r, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>mov</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>ae2d77e9e95f103b26d28c9d41ab2871</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, const Imm_Opnd &amp;imm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>movsx</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>dc5d1a32a66c55f18bbb6fff07365b3f</anchor>
      <arglist>(char *stream, const R_Opnd &amp;r, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>movzx</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>edc8b1cbaf2744e13c684c60fb32b14b</anchor>
      <arglist>(char *stream, const R_Opnd &amp;r, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>movd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>61359e8051e5313aa156d976b9028c9b</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, const XMM_Opnd &amp;xmm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>movd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>025ed397d3a065cc7efd26e2faa152ad</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm, const RM_Opnd &amp;rm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>movq</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>fe15bb0e5ae9e74d7251b43033055224</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, const XMM_Opnd &amp;xmm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>movq</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>a4f0a9059942367aa45e823d966f39cd</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm, const RM_Opnd &amp;rm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_mov</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>3afea1758e31179257d88e0cae299b0a</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm, const M_Opnd &amp;mem, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_mov</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>7d14c21dd0bd94b48e8ed7696760a662</anchor>
      <arglist>(char *stream, const M_Opnd &amp;mem, const XMM_Opnd &amp;xmm, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_mov</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>5a12d3767cab827e595e79c01b24be7e</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_add</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>902835c508ce9354d5ce0e1f09c80254</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm, const M_Opnd &amp;mem, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_add</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>bcaed14cccb62953f30c24645e6eced3</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_sub</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>d8db022f23049c3aebace922cc4d72a7</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm, const M_Opnd &amp;mem, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_sub</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>547b57a05b25139643e37552f388dc30</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_mul</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>28eb47bced8e3f1b0e95d852690c4549</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm, const M_Opnd &amp;mem, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_mul</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>7f35e7fd29766ed5b45f1c3b42bba3d2</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_div</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>2f7a5b618f8c315ca4f423d2c23727f7</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm, const M_Opnd &amp;mem, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_div</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>b0927ed2f262a3501e91affdf750eb54</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_xor</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>57d77d009c6a512e5ac7dc5e41d1482f</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_compare</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>d5082ccc3dcb2c2b50ada2debc660906</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_compare</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>439093610f566183fd2d62c4c27e3d81</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const M_Opnd &amp;mem, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_cvt_si</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>fe58921c251e69956e64825a71852389</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm, const M_Opnd &amp;mem, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_cvtt2si</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>f96229c0e42d92cd818c89fd20910c4f</anchor>
      <arglist>(char *stream, const R_Opnd &amp;reg, const M_Opnd &amp;mem, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_cvtt2si</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>1c1cd525c45524a57de7b26ae20471ff</anchor>
      <arglist>(char *stream, const R_Opnd &amp;reg, const XMM_Opnd &amp;xmm, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_cvt_fp2dq</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>1bc0b8160f23aaddbbe41f0a0294e7f5</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_cvt_dq2fp</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>097c965ccb5587b0a5a3a9ed1a2d17ea</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1, bool dbl)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_d2s</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>225813cc1d7c8ede3b65142d1ccfa2f4</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const M_Opnd &amp;mem64)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_d2s</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>f3ec7f0e7f974ac0b746a6613afcf0ed</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_s2d</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>35d2493d505d4844dd3c9627c481eec6</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const M_Opnd &amp;mem32)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>sse_s2d</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>45c7c64673b35ffe885b34c2e507972a</anchor>
      <arglist>(char *stream, const XMM_Opnd &amp;xmm0, const XMM_Opnd &amp;xmm1)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>cmov</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>86000cf977c834bd031f2db76cbcca4f</anchor>
      <arglist>(char *stream, ConditionCode cc, const R_Opnd &amp;r, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>setcc</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>cdaee6c74209eb7a6782f7cf8b2ff97f</anchor>
      <arglist>(char *stream, ConditionCode cc, const RM_Opnd &amp;rm8)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>lea</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>2d0495b4557eff8841d6a3df01d6092e</anchor>
      <arglist>(char *stream, const R_Opnd &amp;r, const M_Opnd &amp;m, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>cdq</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>e638fc83e9556ffb82f9feeac1f9052c</anchor>
      <arglist>(char *stream)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>wait</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>22f43e7583af0c76a88003c0acd60fdd</anchor>
      <arglist>(char *stream)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>loop</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>a1ac10cf7d8794d1eab05500cd15ed5c</anchor>
      <arglist>(char *stream, const Imm_Opnd &amp;imm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>jump8</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>2589e638fb3b2fa39727e3cfc034d548</anchor>
      <arglist>(char *stream, const Imm_Opnd &amp;imm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>jump32</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>0accc11f763fc0aa2b21253f010d0596</anchor>
      <arglist>(char *stream, const Imm_Opnd &amp;imm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>jump</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>814863184952cfb2056fe2bbb472b2c0</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>jump</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>90afc57138d2d433c74fec8d7f0b91b9</anchor>
      <arglist>(char *stream, char *target)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>branch8</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>baff1e5efacad9343f1e9054c62e3516</anchor>
      <arglist>(char *stream, ConditionCode cc, const Imm_Opnd &amp;imm, InstrPrefix prefix=no_prefix)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>branch32</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>cd4e6266a0380735bb61818aa213496f</anchor>
      <arglist>(char *stream, ConditionCode cc, const Imm_Opnd &amp;imm, InstrPrefix prefix=no_prefix)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>branch</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>4b2d953118070fa3911d286c3573a4d5</anchor>
      <arglist>(char *stream, ConditionCode cc, int32 disp, InstrPrefix prefix=no_prefix)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>call</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>dddd8564e2f0a1081b7649aca1737d53</anchor>
      <arglist>(char *stream, const Imm_Opnd &amp;imm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>call</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>6c3c0bf30c17c4aa8b9fa3c5e14f9199</anchor>
      <arglist>(char *stream, const RM_Opnd &amp;rm, Opnd_Size sz=size_platf)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>call</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>101489780cbc6fc7988271555aff8649</anchor>
      <arglist>(char *stream, const char *target)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>ret</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>e40fc87374fac8bb8dba44287fa452af</anchor>
      <arglist>(char *stream)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>ret</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>c0aa0b9e2086a3867ccac70c192eef71</anchor>
      <arglist>(char *stream, unsigned short pop)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>ret</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>fbe308af32653b4a358db9fa9405aefe</anchor>
      <arglist>(char *stream, const Imm_Opnd &amp;imm)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>set_d</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>6565ab09c41d33fd9ac7a96566a42b71</anchor>
      <arglist>(char *stream, bool set)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>scas</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>cef0fb821e2523086d61721a0b614b62</anchor>
      <arglist>(char *stream, unsigned char prefix)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>stos</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>bd50d5cc8b32e1121ddf0ece3ba1da8e</anchor>
      <arglist>(char *stream, unsigned char prefix)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fldcw</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>991486f9ef32949441350b839274f87a</anchor>
      <arglist>(char *stream, const M_Opnd &amp;mem)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fnstcw</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>8385cf6a660af17b251dfc45b738ffea</anchor>
      <arglist>(char *stream, const M_Opnd &amp;mem)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fnstsw</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>b4bc5e08da69ba69ed4103e76d1b0390</anchor>
      <arglist>(char *stream)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fld</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>52916d6af013aa4fada13105033f2314</anchor>
      <arglist>(char *stream, const M_Opnd &amp;m, bool is_double)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fist</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>6042a8449c8aa1a6cd81b1e460dbf88b</anchor>
      <arglist>(char *stream, const M_Opnd &amp;mem, bool is_long, bool pop_stk)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fst</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>e53ff48be8cc9873c81a757a33d0f368</anchor>
      <arglist>(char *stream, const M_Opnd &amp;m, bool is_double, bool pop_stk)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fst</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>19c2b066dfb7ed2ff7d26a5c89effee7</anchor>
      <arglist>(char *stream, unsigned i, bool pop_stk)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fprem</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>9ae3763ad2fc097ff183393bb5f14738</anchor>
      <arglist>(char *stream)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>fprem1</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>f0fc32216b8040fdd06d977cad5ad792</anchor>
      <arglist>(char *stream)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_GR</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>1a2fb3b3d8bef025b077b3888a93bb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>MAX_FR</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>554cd8edd599eb06540687d0671dd00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>R_Opnd</type>
      <name>eax_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>52e9bd71245035c977be9be49e56dbd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>R_Opnd</type>
      <name>ecx_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>fc31c18d047f28a269630e5ebe67e3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>R_Opnd</type>
      <name>edx_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>677f8d503c3309d17538c37ed3870f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>R_Opnd</type>
      <name>ebx_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>9ff66aaa366ea6c904658f1dbc3220cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>R_Opnd</type>
      <name>esp_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>5fb96223af89f3408fcb39cbae456513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>R_Opnd</type>
      <name>ebp_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>85e8cc3a858b57604f46d6e5456ed0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>R_Opnd</type>
      <name>esi_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>2c6667128d8beb7fc60af54dda19a93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>R_Opnd</type>
      <name>edi_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>8e0e1b820166832f5c9e9abe86bf981f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XMM_Opnd</type>
      <name>xmm0_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>1850d12fb6472a7f4a71d56b09e0fb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XMM_Opnd</type>
      <name>xmm1_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>365803157a0430c536569114cc9de640</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XMM_Opnd</type>
      <name>xmm2_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>00d392c2275dc52dad0b6a48b03fa7b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XMM_Opnd</type>
      <name>xmm3_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>554f9a30bbe185389ef824294fcad54f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XMM_Opnd</type>
      <name>xmm4_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>11868a0091783e2049f05794b3fd9803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XMM_Opnd</type>
      <name>xmm5_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>bb1f176e9e7c12e5eea2c9d28daaeced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XMM_Opnd</type>
      <name>xmm6_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>4882c61d5c341421cf5c9472be2adab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>XMM_Opnd</type>
      <name>xmm7_opnd</name>
      <anchorfile>encoder_8h.html</anchorfile>
      <anchor>49119381c609e4e0655c311198f26dd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>list_mt.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/tl/</path>
    <filename>list__mt_8h</filename>
    <namespace>tl</namespace>
    <class kind="class">tl::List</class>
  </compound>
  <compound kind="file">
    <name>log_macro.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>log__macro_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>EXPAND_</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>67344d1b810047432365bec27359d53d</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXPAND</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>163034f672135660e04386e0812f57cc</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_FILELINE</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>d40ca6dda0828b7062265a1d848a4948</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_HEAD</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>7761771a1fffd10f76064614895bde5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ABORT</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>588bb345837ba0129362a3da364c87a3</anchor>
      <arglist>(message)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_DEBUG_F</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>038bd146daaed8a66ebb4a1fdc424500</anchor>
      <arglist>(printf_args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG_ASSERT</name>
      <anchorfile>log__macro_8h.html</anchorfile>
      <anchor>8fff10840307bbf63aa41ecc24d39593</anchor>
      <arglist>(assertion, message)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>logger.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>logger_8h</filename>
    <class kind="struct">LogSite</class>
    <member kind="define">
      <type>#define</type>
      <name>LOG4CXX</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>43415589f2870777c32a87018dc0f32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOG4CXX_STATIC</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>e3d644819245771e533158ef23be73a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_EMPTY</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>8e121a05e7befdaa1f298f3394a64f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_TIMESTAMP</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>7a78251c10dd2222872004ffee1fc812</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_FILELINE</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>573da7ddc0b908cbc5b165ee29f50628</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_CATEGORY</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>564adc43a9557425e548e04f9ab2ef8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_THREAD_ID</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>4a348e6c5444602b0a48ac75161fdf89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_LEVEL</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>5e52206741fbb2d68b445429b6b8de5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HEADER_FUNCTION</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>5bb388e06b103449d8597daa7944b25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__LOG4CXX_FUNC__</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>f2ed1fdb28766adf9a6f7647f2431439</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned</type>
      <name>HeaderFormat</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>a613094fd4649af7f1e142a671327b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LogSite</type>
      <name>LogSite</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>0faaea3d31eb38cff745a31546100309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LoggingLevel</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIE</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd20658a044abed2bacbb5defa6969c269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WARN</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd74dac7ac23d5b810db6d4067f14e8676</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFO</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd748005382152808a72b1a9177d9dc806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOG</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efdcd7ffe737ad5fb21fbd7499886934910</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRACE</name>
      <anchor>ecb37f0eff8778a45f12bd24b9108efd7fa27e82c6c4f69434225ed81e5d151e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>CachedState</name>
      <anchor>8b859fdd95c18d7779af2d8e1836b568</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISABLED</name>
      <anchor>8b859fdd95c18d7779af2d8e1836b56840f39385238042f6ec0cbac821a19fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ENABLED</name>
      <anchor>8b859fdd95c18d7779af2d8e1836b56899788d1f27bac42d0c7bac63026c5959</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchor>8b859fdd95c18d7779af2d8e1836b5686ce26a62afab55d7606ad4e92428b30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>init_log_system</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>2c966660091afce723707ae423f8f2ff</anchor>
      <arglist>(void *portLib)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>shutdown_log_system</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>1b7f65cdfbaabd1fc6f64ebae9ccc6c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_logging_level_from_file</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>177515091413ce2ecdf3a31d4ded3ed9</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>log4cxx_from_c</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>0b091db1425d51a375e3da03e669441c</anchor>
      <arglist>(const char *category, LoggingLevel level, const char *message, const char *file, const char *func, int line)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_threshold</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>85d6fd989b3b48677a6fa1e9cf06453d</anchor>
      <arglist>(const char *category, LoggingLevel level)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>4b7f9fefcef28983d13c647f2d85b1a9</anchor>
      <arglist>(const char *category, LoggingLevel level)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_warn_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>27a98fcf49833d62cce06e5f9ce9c760</anchor>
      <arglist>(const char *category)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_info_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>89ef731b5ab76d9a511af63ff076239a</anchor>
      <arglist>(const char *category)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_log_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>9b2cd5938df70a2b2bfe860f2c4df8a7</anchor>
      <arglist>(const char *category, LogSite *site)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT unsigned</type>
      <name>is_trace_enabled</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>4006d9d0658d7f8c6e69cbf2ecf6cae4</anchor>
      <arglist>(const char *category, LogSite *site)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_out</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>020f46cbfc0f1f27ce7049ab923a6ab7</anchor>
      <arglist>(const char *category, const char *file)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_header_format</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>fecf133b432ad070ecae5990a99be2e4</anchor>
      <arglist>(const char *category, HeaderFormat format)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT void</type>
      <name>set_thread_specific_out</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>40a47f7adf2974ffc3be9798f0f8450c</anchor>
      <arglist>(const char *category, const char *pattern)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT const char *</type>
      <name>log_printf</name>
      <anchorfile>logger_8h.html</anchorfile>
      <anchor>b43c0e0aacfca0d20ca41f68bed4c568</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loggerstring.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>loggerstring_8h</filename>
    <class kind="class">LoggerString</class>
  </compound>
  <compound kind="file">
    <name>memory_pool.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/tl/</path>
    <filename>memory__pool_8h</filename>
    <namespace>tl</namespace>
    <class kind="class">tl::MemoryPool</class>
    <class kind="class">tl::MemoryPoolMT</class>
  </compound>
  <compound kind="file">
    <name>platform_core_natives.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>platform__core__natives_8h</filename>
    <member kind="function">
      <type>jlong</type>
      <name>get_current_time</name>
      <anchorfile>platform__core__natives_8h.html</anchorfile>
      <anchor>12656eaf1b6b63bd96ce569214589322</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_atomic.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__atomic_8h</filename>
    <member kind="function">
      <type>uint8</type>
      <name>port_atomic_cas8</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g941cfffcd1e971148662961796a1f839</anchor>
      <arglist>(volatile uint8 *data, uint8 value, uint8 comp)</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>port_atomic_cas16</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g9e8b90f60b8ae1b6aad2ff3962ec39e1</anchor>
      <arglist>(volatile uint16 *data, uint16 value, uint16 comp)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>port_atomic_cas64</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g50b6ef72dface8d7859e962a1c74367d</anchor>
      <arglist>(volatile uint64 *data, uint64 value, uint64 comp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_disasm.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__disasm_8h</filename>
    <class kind="struct">port_disasm_info_t</class>
    <member kind="typedef">
      <type>port_disassembler_t</type>
      <name>port_disassembler_t</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g5b81a44efbd5922849476295a8d4e746</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_initialize</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g06617e0dd0b21ae55d22cb97f9ac2f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disassembler_create</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>geafeb39d349c5d33d1131c107c37b625</anchor>
      <arglist>(port_disassembler_t **disassembler, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_set_info</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>gdd6038b8f95203f37914da956e78a8c5</anchor>
      <arglist>(port_disassembler_t *disassembler, const port_disasm_info_t new_info, port_disasm_info_t *old_info)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g49acc41688c10bff0f32c202dfc882b9</anchor>
      <arglist>(port_disassembler_t *disassembler, const char *code, unsigned int len, char **disasm_code)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_to_file</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g4b6cb4e97770e794788ae9fa1e40ab08</anchor>
      <arglist>(port_disassembler_t *disassembler, const char *code, unsigned int len, apr_file_t *thefile)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_dso.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__dso_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_NAME</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g494994af9d0767203152c4979822eefe</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_NAME</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g494994af9d0767203152c4979822eefe</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_DEFAULT</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>ge52e7091a760ed4e19a7ca60ea0e62b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_BIND_NOW</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>gcf9f2abb9a0f908a0abb59a643edc09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_BIND_DEFER</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>g38638cb6f349ff76fedc6be47ac8b0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_dso_load_ex</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>gb53904c60696ae1e8e52c3ffb7883158</anchor>
      <arglist>(apr_dso_handle_t **handle, const char *path, uint32 mode, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_dso_search_path</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g2868fb11259c86b6382de79e24a0dcff</anchor>
      <arglist>(char **path, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_dso_name_decorate</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g7be6591f776daa83a35c79b95ad479f4</anchor>
      <arglist>(const char *dl_name, apr_pool_t *pool)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_filepath.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__filepath_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_FILE_SEPARATOR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>gdeb85c9fa182d8b39774ec7714f5117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_PATH_SEPARATOR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>g0c373112a3b035709ffa56e8ef1d98a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_FILE_SEPARATOR_STR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>gac356bd16f39e4e78b78a78bcdfd9f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_PATH_SEPARATOR_STR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>g4cde5dee0cfce3caaedc697508cbb48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_filepath_merge</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>g3fdf0466e120b4b0183f47106ec51800</anchor>
      <arglist>(const char *root, const char *trail, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_filepath_canonical</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>gb8f8589a36220daa16b1fbbc50ee7c2f</anchor>
      <arglist>(const char *original, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>port_filepath_basename</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>g71c48a50c516f9ca3bfd1a7166784239</anchor>
      <arglist>(const char *filepath)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_general.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__general_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>port__general_8h.html</anchorfile>
      <anchor>070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_INLINE</name>
      <anchorfile>port__general_8h.html</anchorfile>
      <anchor>82c1124472d86de3ec4e20b6c126f49e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_malloc.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__malloc_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>STD_FREE</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>34a8e99843523537b92d06e5528b92a1</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STD_MALLOC</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>72d2db4a27f1ec4afcc72a172132492e</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STD_CALLOC</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>59d0ce5f181dfedb338d6f23fa8e1d84</anchor>
      <arglist>(n, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STD_REALLOC</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>31f73c514abecf7169791b15c7db7384</anchor>
      <arglist>(p, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STD_ALLOCA</name>
      <anchorfile>port__malloc_8h.html</anchorfile>
      <anchor>18084a477b532fcb5a75bdbcefebc937</anchor>
      <arglist>(s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_sysinfo.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__sysinfo_8h</filename>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_executable_name</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>gbf29baa2b14b792c793a8418906bf2be</anchor>
      <arglist>(char **self_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>port_CPUs_number</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>ge845f74bed93bc4378ab6223abc6bf5d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>port_CPU_architecture</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g8cdc34507ae264aa806fa46cb814945c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_OS_name_version</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g13f1fe88293cfbf66ebcb6e134896402</anchor>
      <arglist>(char **os_name, char **os_ver, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_name</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g3b3dce0566b898b6fd22da65cc3da66c</anchor>
      <arglist>(char **account, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_home</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g789402dcd90a60fbbe7856c7fca4ace2</anchor>
      <arglist>(char **path, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_timezone</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>gf75a5e588d51125f01bc3c2695b1a11f</anchor>
      <arglist>(char **tzname, apr_pool_t *pool)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_timer.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__timer_8h</filename>
    <member kind="typedef">
      <type>apr_int64_t</type>
      <name>apr_nanotimer_t</name>
      <anchorfile>group__port__timer.html</anchorfile>
      <anchor>g5a03080da8c2935da765c8cdd20e4ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_nanotimer_t</type>
      <name>port_nanotimer</name>
      <anchorfile>group__port__timer.html</anchorfile>
      <anchor>gc78f2e7570c33a0df57273acfb609b37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>port_vmem.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/</path>
    <filename>port__vmem_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_READ</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>ga89c82eee1fbb767125433776697636a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_WRITE</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>g3bf9ff35a7792f612d723ac29251a78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_EXECUTE</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>g9e6b636380ddb2a72de12373b69290ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_PAGESIZE_DEFAULT</name>
      <anchorfile>group__vmem__size.html</anchorfile>
      <anchor>gae1cf2fd6b48f1f399f164c23463fd32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_PAGESIZE_LARGE</name>
      <anchorfile>group__vmem__size.html</anchorfile>
      <anchor>g8d58b9abcfb54f89e9be3ddacb6cc8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>port_vmem_t</type>
      <name>port_vmem_t</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g406a1016dba358a477cd8add47b3ea56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_reserve</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ga44a5e01f82bbdf4142e56ee353b34cf</anchor>
      <arglist>(port_vmem_t **block, void **address, size_t amount, unsigned int protectionMode, size_t pageSize, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_commit</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gc8ff5428b03833e20bbe6e0d0f79c091</anchor>
      <arglist>(void **address, size_t amount, port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_decommit</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>geec5499227a84b13446adac939b775b1</anchor>
      <arglist>(void *address, size_t amount, port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_release</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ge97828bd44c4308570dadbdaba3133d2</anchor>
      <arglist>(port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>size_t *</type>
      <name>port_vmem_page_sizes</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g2845c66eac23bc855bddbde7db21eeab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_used_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g127c64f43ede7ec28663ac8d412ae28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_committed_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ge41b337073785600e419c99f4da4639a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_reserved_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gbc9cc5f9f74c35c76495790a49b15ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_max_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g74cacc02a730f5cbd6b01100cb08e0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_allocate</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gbccc9dfca3122a8ca84427a8e90a4d5e</anchor>
      <arglist>(void **addr, size_t size, unsigned int mode)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_free</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g09acf5460bd4f9082385f445ddb99b8c</anchor>
      <arglist>(void *addr, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>set.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/tl/</path>
    <filename>set_8h</filename>
    <namespace>tl</namespace>
    <class kind="class">tl::vector_set</class>
  </compound>
  <compound kind="file">
    <name>set_mt.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/tl/</path>
    <filename>set__mt_8h</filename>
    <namespace>tl</namespace>
    <class kind="class">tl::vector_set_mt</class>
  </compound>
  <compound kind="file">
    <name>vector.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/tl/</path>
    <filename>vector_8h</filename>
    <namespace>tl</namespace>
    <class kind="class">tl::vector</class>
  </compound>
  <compound kind="file">
    <name>vector_mt.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/port/include/tl/</path>
    <filename>vector__mt_8h</filename>
    <namespace>tl</namespace>
    <class kind="class">tl::vector_mt</class>
  </compound>
  <compound kind="group">
    <name>port_atomic</name>
    <title>Atomic operations</title>
    <filename>group__port__atomic.html</filename>
    <member kind="function">
      <type>uint8</type>
      <name>port_atomic_cas8</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g941cfffcd1e971148662961796a1f839</anchor>
      <arglist>(volatile uint8 *data, uint8 value, uint8 comp)</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>port_atomic_cas16</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g9e8b90f60b8ae1b6aad2ff3962ec39e1</anchor>
      <arglist>(volatile uint16 *data, uint16 value, uint16 comp)</arglist>
    </member>
    <member kind="function">
      <type>uint64</type>
      <name>port_atomic_cas64</name>
      <anchorfile>group__port__atomic.html</anchorfile>
      <anchor>g50b6ef72dface8d7859e962a1c74367d</anchor>
      <arglist>(volatile uint64 *data, uint64 value, uint64 comp)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_disasm</name>
    <title>Disassembler of machine codes</title>
    <filename>group__port__disasm.html</filename>
    <class kind="struct">port_disasm_info_t</class>
    <member kind="typedef">
      <type>port_disassembler_t</type>
      <name>port_disassembler_t</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g5b81a44efbd5922849476295a8d4e746</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_initialize</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g06617e0dd0b21ae55d22cb97f9ac2f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disassembler_create</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>geafeb39d349c5d33d1131c107c37b625</anchor>
      <arglist>(port_disassembler_t **disassembler, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_set_info</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>gdd6038b8f95203f37914da956e78a8c5</anchor>
      <arglist>(port_disassembler_t *disassembler, const port_disasm_info_t new_info, port_disasm_info_t *old_info)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g49acc41688c10bff0f32c202dfc882b9</anchor>
      <arglist>(port_disassembler_t *disassembler, const char *code, unsigned int len, char **disasm_code)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_disasm_to_file</name>
      <anchorfile>group__port__disasm.html</anchorfile>
      <anchor>g4b6cb4e97770e794788ae9fa1e40ab08</anchor>
      <arglist>(port_disassembler_t *disassembler, const char *code, unsigned int len, apr_file_t *thefile)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_dso</name>
    <title>Dynamic binaries handling</title>
    <filename>group__port__dso.html</filename>
    <subgroup>dso_modes</subgroup>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_NAME</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g494994af9d0767203152c4979822eefe</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_NAME</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g494994af9d0767203152c4979822eefe</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_dso_load_ex</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>gb53904c60696ae1e8e52c3ffb7883158</anchor>
      <arglist>(apr_dso_handle_t **handle, const char *path, uint32 mode, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_dso_search_path</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g2868fb11259c86b6382de79e24a0dcff</anchor>
      <arglist>(char **path, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_dso_name_decorate</name>
      <anchorfile>group__port__dso.html</anchorfile>
      <anchor>g7be6591f776daa83a35c79b95ad479f4</anchor>
      <arglist>(const char *dl_name, apr_pool_t *pool)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>dso_modes</name>
    <title>Shared library binding modes</title>
    <filename>group__dso__modes.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_DEFAULT</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>ge52e7091a760ed4e19a7ca60ea0e62b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_BIND_NOW</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>gcf9f2abb9a0f908a0abb59a643edc09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_DSO_BIND_DEFER</name>
      <anchorfile>group__dso__modes.html</anchorfile>
      <anchor>g38638cb6f349ff76fedc6be47ac8b0f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_filepath</name>
    <title>Filepath manipulation routines</title>
    <filename>group__port__filepath.html</filename>
    <subgroup>file_sep</subgroup>
    <member kind="function">
      <type>char *</type>
      <name>port_filepath_merge</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>g3fdf0466e120b4b0183f47106ec51800</anchor>
      <arglist>(const char *root, const char *trail, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>port_filepath_canonical</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>gb8f8589a36220daa16b1fbbc50ee7c2f</anchor>
      <arglist>(const char *original, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>port_filepath_basename</name>
      <anchorfile>group__port__filepath.html</anchorfile>
      <anchor>g71c48a50c516f9ca3bfd1a7166784239</anchor>
      <arglist>(const char *filepath)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>file_sep</name>
    <title>File system separators definitions.</title>
    <filename>group__file__sep.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_FILE_SEPARATOR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>gdeb85c9fa182d8b39774ec7714f5117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_PATH_SEPARATOR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>g0c373112a3b035709ffa56e8ef1d98a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_FILE_SEPARATOR_STR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>gac356bd16f39e4e78b78a78bcdfd9f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_PATH_SEPARATOR_STR</name>
      <anchorfile>group__file__sep.html</anchorfile>
      <anchor>g4cde5dee0cfce3caaedc697508cbb48f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_sysinfo</name>
    <title>System information routines</title>
    <filename>group__port__sysinfo.html</filename>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_executable_name</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>gbf29baa2b14b792c793a8418906bf2be</anchor>
      <arglist>(char **self_name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>port_CPUs_number</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>ge845f74bed93bc4378ab6223abc6bf5d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>port_CPU_architecture</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g8cdc34507ae264aa806fa46cb814945c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_OS_name_version</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g13f1fe88293cfbf66ebcb6e134896402</anchor>
      <arglist>(char **os_name, char **os_ver, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_name</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g3b3dce0566b898b6fd22da65cc3da66c</anchor>
      <arglist>(char **account, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_home</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>g789402dcd90a60fbbe7856c7fca4ace2</anchor>
      <arglist>(char **path, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_user_timezone</name>
      <anchorfile>group__port__sysinfo.html</anchorfile>
      <anchor>gf75a5e588d51125f01bc3c2695b1a11f</anchor>
      <arglist>(char **tzname, apr_pool_t *pool)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_timer</name>
    <title>High resolution timer</title>
    <filename>group__port__timer.html</filename>
    <member kind="typedef">
      <type>apr_int64_t</type>
      <name>apr_nanotimer_t</name>
      <anchorfile>group__port__timer.html</anchorfile>
      <anchor>g5a03080da8c2935da765c8cdd20e4ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_nanotimer_t</type>
      <name>port_nanotimer</name>
      <anchorfile>group__port__timer.html</anchorfile>
      <anchor>gc78f2e7570c33a0df57273acfb609b37</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>port_apr</name>
    <title>Portability layer</title>
    <filename>group__port__apr.html</filename>
    <subgroup>port_atomic</subgroup>
    <subgroup>port_disasm</subgroup>
    <subgroup>port_dso</subgroup>
    <subgroup>port_filepath</subgroup>
    <subgroup>port_sysinfo</subgroup>
    <subgroup>port_timer</subgroup>
    <subgroup>port_vmem</subgroup>
  </compound>
  <compound kind="group">
    <name>port_vmem</name>
    <title>Virtual memory support</title>
    <filename>group__port__vmem.html</filename>
    <subgroup>vmem_protection</subgroup>
    <subgroup>vmem_size</subgroup>
    <member kind="typedef">
      <type>port_vmem_t</type>
      <name>port_vmem_t</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g406a1016dba358a477cd8add47b3ea56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_reserve</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ga44a5e01f82bbdf4142e56ee353b34cf</anchor>
      <arglist>(port_vmem_t **block, void **address, size_t amount, unsigned int protectionMode, size_t pageSize, apr_pool_t *pool)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_commit</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gc8ff5428b03833e20bbe6e0d0f79c091</anchor>
      <arglist>(void **address, size_t amount, port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_decommit</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>geec5499227a84b13446adac939b775b1</anchor>
      <arglist>(void *address, size_t amount, port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_release</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ge97828bd44c4308570dadbdaba3133d2</anchor>
      <arglist>(port_vmem_t *block)</arglist>
    </member>
    <member kind="function">
      <type>size_t *</type>
      <name>port_vmem_page_sizes</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g2845c66eac23bc855bddbde7db21eeab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_used_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g127c64f43ede7ec28663ac8d412ae28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_committed_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>ge41b337073785600e419c99f4da4639a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_reserved_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gbc9cc5f9f74c35c76495790a49b15ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>port_vmem_max_size</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g74cacc02a730f5cbd6b01100cb08e0ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_allocate</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>gbccc9dfca3122a8ca84427a8e90a4d5e</anchor>
      <arglist>(void **addr, size_t size, unsigned int mode)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>port_vmem_free</name>
      <anchorfile>group__port__vmem.html</anchorfile>
      <anchor>g09acf5460bd4f9082385f445ddb99b8c</anchor>
      <arglist>(void *addr, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>vmem_protection</name>
    <title>Memory protection flags</title>
    <filename>group__vmem__protection.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_READ</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>ga89c82eee1fbb767125433776697636a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_WRITE</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>g3bf9ff35a7792f612d723ac29251a78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_MODE_EXECUTE</name>
      <anchorfile>group__vmem__protection.html</anchorfile>
      <anchor>g9e6b636380ddb2a72de12373b69290ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>vmem_size</name>
    <title>Memory page size directives</title>
    <filename>group__vmem__size.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_PAGESIZE_DEFAULT</name>
      <anchorfile>group__vmem__size.html</anchorfile>
      <anchor>gae1cf2fd6b48f1f399f164c23463fd32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PORT_VMEM_PAGESIZE_LARGE</name>
      <anchorfile>group__vmem__size.html</anchorfile>
      <anchor>g8d58b9abcfb54f89e9be3ddacb6cc8c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MF_</name>
    <title>Mnemonic flags</title>
    <filename>group___m_f__.html</filename>
  </compound>
  <compound kind="class">
    <name>DecoderBase</name>
    <filename>class_decoder_base.html</filename>
    <member kind="function" static="yes">
      <type>static unsigned</type>
      <name>decode</name>
      <anchorfile>class_decoder_base.html</anchorfile>
      <anchor>126c8e87a0d96e2d2ca737a97252b9aa</anchor>
      <arglist>(const void *addr, Inst *pinst)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EncoderBase</name>
    <filename>class_encoder_base.html</filename>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>encode</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>d615cb4cbfdb6fcd420d48975d3f90ef</anchor>
      <arglist>(char *stream, Mnemonic mn, const Operands &amp;opnds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>nops</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>f574754673109a00082b940ce0b9ebc1</anchor>
      <arglist>(char *stream, unsigned howMany)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>prefix</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>a98f51aa2d999278ced044ce4da280ef</anchor>
      <arglist>(char *stream, InstPrefix pref)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MnemonicDesc *</type>
      <name>getMnemonicDesc</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>f8f5fce5333f198cd78711d3cc094820</anchor>
      <arglist>(Mnemonic mn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mnemonic</type>
      <name>str2mnemonic</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>b7d458f3329085c75579bd3e7424a87e</anchor>
      <arglist>(const char *mn_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getMnemonicString</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>ceee55eba598d92c1a5c39532e9c92be</anchor>
      <arglist>(Mnemonic mn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>toStr</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>28d8d646cd08878e8c2cb1b3d80fb01e</anchor>
      <arglist>(Mnemonic mn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OpndRole</type>
      <name>getOpndRoles</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>b8270d654a04a1f3707e08ed911fd223</anchor>
      <arglist>(OpndRolesDesc ord, unsigned idx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>buildTable</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>8c9af1bd6d109ee24cec63d7dcc3ea03</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildMnemonicDesc</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>f0a8818d3f58d58dccbc38b9d49ea6c3</anchor>
      <arglist>(const MnemonicInfo *minfo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned short</type>
      <name>getHash</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>fd0be52bf28720b9e99d8f3550607901</anchor>
      <arglist>(const OpcodeInfo *odesc)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>HASH_MAX</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>88bf5c19de4dc735983419f06a774546</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>NOHASH</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>5305444c285df9c7c28fbe5e71b8c078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>HASH_BITS_PER_OPERAND</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>31acb1d53c4e5fb596d723a959f950a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>size_hash</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>dc4656551a60b38fb01d2b3513aefafc</anchor>
      <arglist>[OpndSize_64+1]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>kind_hash</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>1f9e3fc865a588d45ac88c0f855038d4</anchor>
      <arglist>[OpndKind_Mem+1]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>MAX_OPCODES</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>30f87fd2b9c33846b46575b2018694de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned char</type>
      <name>opcodesHashMap</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>ad12d20c697e9893fbf423011ff126b3</anchor>
      <arglist>[Mnemonic_Count][HASH_MAX]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static MnemonicDesc</type>
      <name>mnemonics</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>8bd8e1ac4474b54de8443dadcd6d9b03</anchor>
      <arglist>[Mnemonic_Count]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static OpcodeDesc</type>
      <name>opcodes</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>bb52365702866b57937a385a9ae9a489</anchor>
      <arglist>[Mnemonic_Count][MAX_OPCODES]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>dummy</name>
      <anchorfile>class_encoder_base.html</anchorfile>
      <anchor>2c17413b4ed86b32bd983293557cf898</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">EncoderBase::MnemonicDesc</class>
    <class kind="union">EncoderBase::OpcodeDesc</class>
    <class kind="class">EncoderBase::Operand</class>
    <class kind="class">EncoderBase::Operands</class>
    <class kind="struct">EncoderBase::OpndDesc</class>
    <class kind="struct">EncoderBase::OpndRolesDesc</class>
  </compound>
  <compound kind="struct">
    <name>EncoderBase::MnemonicDesc</name>
    <filename>struct_encoder_base_1_1_mnemonic_desc.html</filename>
    <member kind="variable">
      <type>Mnemonic</type>
      <name>mn</name>
      <anchorfile>struct_encoder_base_1_1_mnemonic_desc.html</anchorfile>
      <anchor>e7b77f30a1d75ea69e91eb78b8d48ca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>flags</name>
      <anchorfile>struct_encoder_base_1_1_mnemonic_desc.html</anchorfile>
      <anchor>2ea200141bb3e0b241376a4887b462f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpndRolesDesc</type>
      <name>roles</name>
      <anchorfile>struct_encoder_base_1_1_mnemonic_desc.html</anchorfile>
      <anchor>6ecf6067ae45299babb33c24ea3379ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>struct_encoder_base_1_1_mnemonic_desc.html</anchorfile>
      <anchor>85ec8d7cb9b84b6f02f95f6c4d6037b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>EncoderBase::OpcodeDesc</name>
    <filename>union_encoder_base_1_1_opcode_desc.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>dummy</name>
      <anchorfile>union_encoder_base_1_1_opcode_desc.html</anchorfile>
      <anchor>88180f2bbc179ac7914e40045dcbe593</anchor>
      <arglist>[128]</arglist>
    </member>
    <member kind="variable">
      <type>EncoderBase::OpcodeDesc::@2</type>
      <name>@3</name>
      <anchorfile>union_encoder_base_1_1_opcode_desc.html</anchorfile>
      <anchor>3485621c2f0596ee306ba9cb93a8622e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>opcode</name>
      <anchorfile>struct_encoder_base_1_1_opcode_desc_1_1@2.html</anchorfile>
      <anchor>644c0ea0ef33d99a81444a432e89aa54</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>opcode_len</name>
      <anchorfile>struct_encoder_base_1_1_opcode_desc_1_1@2.html</anchorfile>
      <anchor>0c08470f7fd6f559bb2ba0eaf1a0a3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>aux0</name>
      <anchorfile>struct_encoder_base_1_1_opcode_desc_1_1@2.html</anchorfile>
      <anchor>d6e9bb9e7bedb3b3aaa4e30edd172f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>aux1</name>
      <anchorfile>struct_encoder_base_1_1_opcode_desc_1_1@2.html</anchorfile>
      <anchor>c8c02e2bc38478da261c5b6ab57a6bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpndDesc</type>
      <name>opnds</name>
      <anchorfile>struct_encoder_base_1_1_opcode_desc_1_1@2.html</anchorfile>
      <anchor>65b16810f91b2b54bfb00b860ee2d013</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>first_opnd</name>
      <anchorfile>struct_encoder_base_1_1_opcode_desc_1_1@2.html</anchorfile>
      <anchor>526334c4a9b847523b91666ad95100b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpndRolesDesc</type>
      <name>roles</name>
      <anchorfile>struct_encoder_base_1_1_opcode_desc_1_1@2.html</anchorfile>
      <anchor>183b4bce36b9943112839c8dd36cf548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>last</name>
      <anchorfile>struct_encoder_base_1_1_opcode_desc_1_1@2.html</anchorfile>
      <anchor>e0d8cc593b50abbe2b6a282afbfca7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>platf</name>
      <anchorfile>struct_encoder_base_1_1_opcode_desc_1_1@2.html</anchorfile>
      <anchor>a136dba1197f4fbac616bee04f95b3e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EncoderBase::Operand</name>
    <filename>class_encoder_base_1_1_operand.html</filename>
    <member kind="function">
      <type></type>
      <name>Operand</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>57b4edb3304fd31ab183c0c79c413f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operand</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>32166537b26a121695f15dc1fc8d99fd</anchor>
      <arglist>(RegName reg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operand</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>05a38f1aaefb8877802a954faec11185</anchor>
      <arglist>(OpndSize sz, OpndKind kind, RegName reg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operand</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>61809e3219f1e5088bc60adad349ddba</anchor>
      <arglist>(OpndSize size, long long ival)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operand</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>e6b9fadb3c8465776f7327e00efcb1f4</anchor>
      <arglist>(int ival)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operand</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>aa9278aae2f7914b986ad5a2a93f250b</anchor>
      <arglist>(short ival)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operand</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>142d536168bdbc465a46c9753f7f05af</anchor>
      <arglist>(char ival)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operand</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>9b717a24d3a8a8c5cda609cad7063876</anchor>
      <arglist>(OpndSize size, RegName base, RegName index, unsigned scale, int disp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operand</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>b41d4f1189fecce5d5a4e24e7fc13ada</anchor>
      <arglist>(OpndSize size, RegName base, int disp)</arglist>
    </member>
    <member kind="function">
      <type>OpndKind</type>
      <name>kind</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>502479dd65f4bd6630a6c90d7d71173f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>OpndSize</type>
      <name>size</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>bd26a9696c57d5833eedf271fb129840</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>hash</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>3ba837bab6a72478841cfbb586eb3bd9</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>need_rex</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>f5a27a39f48c2c95741fcc6bc991dc24</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_mem</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>8bd6f9e1c98ddfafcad06a1d45ae7e5d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_imm</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>3a4e62eec472512bc067cfce384b3df8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_reg</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>5c8d4c2ebb5e285b9123edf65eb31942</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_gpreg</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>280aac754ae74b367b86322f87e6113b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_fpreg</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>6d6ea8af11edc1607148be3cbca0a8ea</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_xmmreg</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>72f5c32e9d693cf3d1d53610d26d1277</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>RegName</type>
      <name>base</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>50608fff0be9f2835ff20b3bf5f5b1a5</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>RegName</type>
      <name>index</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>5a9b54fc9cdce9eb94400e40c463d27c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>scale</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>de3ec52e8e72f6aa4961dc96302af1a0</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>disp</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>36aeda47c79539650cf7b1c80093ddda</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>RegName</type>
      <name>reg</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>d310d7744f1f1273d94ff368c17f982f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>imm</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>9c8b554fcd452c50c74442dcd0fac79b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>EncoderBase::Operands</name>
      <anchorfile>class_encoder_base_1_1_operand.html</anchorfile>
      <anchor>17d0dde72e87e866d2da0e6a04afbe99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EncoderBase::Operands</name>
    <filename>class_encoder_base_1_1_operands.html</filename>
    <member kind="function">
      <type></type>
      <name>Operands</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>2226e937f205540b71799eda3818be39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operands</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>a1a0d43c5e5fae4491abe7ad39d9860b</anchor>
      <arglist>(const Operand &amp;op0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operands</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>bed4174cf6c4ff1b1ba29bc69a3d74bb</anchor>
      <arglist>(const Operand &amp;op0, const Operand &amp;op1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Operands</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>354e0fedd5a903a2f7218fc23d4f1177</anchor>
      <arglist>(const Operand &amp;op0, const Operand &amp;op1, const Operand &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>count</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>ff90e80a861065cc740b07a48ba12874</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>hash</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>7f92585e4e76c01a5c464b634d1e5282</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Operand &amp;</type>
      <name>operator[]</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>c436328f2d527d32e3da3291348b96af</anchor>
      <arglist>(unsigned idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>8ccf0a31c0a2decf77f595a38fa892cb</anchor>
      <arglist>(const Operand &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>need_rex</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>5adab1023574627113ee8bd6905fb8b8</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>class_encoder_base_1_1_operands.html</anchorfile>
      <anchor>2de43f577c020c47e770a9be20fcce03</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EncoderBase::OpndDesc</name>
    <filename>struct_encoder_base_1_1_opnd_desc.html</filename>
    <member kind="variable">
      <type>OpndKind</type>
      <name>kind</name>
      <anchorfile>struct_encoder_base_1_1_opnd_desc.html</anchorfile>
      <anchor>485e27b4ad6d60a969ebfab7ba179b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpndSize</type>
      <name>size</name>
      <anchorfile>struct_encoder_base_1_1_opnd_desc.html</anchorfile>
      <anchor>4a4238900da1b530160f630aedb67976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RegName</type>
      <name>reg</name>
      <anchorfile>struct_encoder_base_1_1_opnd_desc.html</anchorfile>
      <anchor>1e89ad507a3bb511ba44d4b28f2467ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>EncoderBase::OpndRolesDesc</name>
    <filename>struct_encoder_base_1_1_opnd_roles_desc.html</filename>
    <member kind="variable">
      <type>unsigned</type>
      <name>count</name>
      <anchorfile>struct_encoder_base_1_1_opnd_roles_desc.html</anchorfile>
      <anchor>d4500e4148ff1a77584ba26cde9e5dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>defCount</name>
      <anchorfile>struct_encoder_base_1_1_opnd_roles_desc.html</anchorfile>
      <anchor>2ba84d14a8e09403d8912c79023cf026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>useCount</name>
      <anchorfile>struct_encoder_base_1_1_opnd_roles_desc.html</anchorfile>
      <anchor>33d15a6bf4e7b6f2ce803aba325e9edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>roles</name>
      <anchorfile>struct_encoder_base_1_1_opnd_roles_desc.html</anchorfile>
      <anchor>d22f8a32d19e07f0a25826c8cfb1ad8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Imm_Opnd</name>
    <filename>class_imm___opnd.html</filename>
    <base>Opnd</base>
    <member kind="function">
      <type></type>
      <name>Imm_Opnd</name>
      <anchorfile>class_imm___opnd.html</anchorfile>
      <anchor>b98280331b3b219781064828f10b3d58</anchor>
      <arglist>(int32 val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Imm_Opnd</name>
      <anchorfile>class_imm___opnd.html</anchorfile>
      <anchor>7125505afd5a9f18f4196593043d400e</anchor>
      <arglist>(const Imm_Opnd &amp;that)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Imm_Opnd</name>
      <anchorfile>class_imm___opnd.html</anchorfile>
      <anchor>53d2f084148f42afbdb0e18726d496a1</anchor>
      <arglist>(Opnd_Size sz, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>get_value</name>
      <anchorfile>class_imm___opnd.html</anchorfile>
      <anchor>515d91a45764b67a3f198488c28f15f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Opnd_Size</type>
      <name>get_size</name>
      <anchorfile>class_imm___opnd.html</anchorfile>
      <anchor>49a113d91ca88cd5a4565e0f6d74813f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Imm_Opnd::@0</type>
      <name>@1</name>
      <anchorfile>class_imm___opnd.html</anchorfile>
      <anchor>c1175175342fcc80504c443698767c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>value</name>
      <anchorfile>union_imm___opnd_1_1@0.html</anchorfile>
      <anchor>e54d66222c72afe1ead344842295a133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>bytes</name>
      <anchorfile>union_imm___opnd_1_1@0.html</anchorfile>
      <anchor>d51bdb0d6a6468946e526e8305d97e10</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Opnd_Size</type>
      <name>size</name>
      <anchorfile>class_imm___opnd.html</anchorfile>
      <anchor>e62807a1ae3ada294c74114db7421123</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Inst</name>
    <filename>struct_inst.html</filename>
    <member kind="function">
      <type></type>
      <name>Inst</name>
      <anchorfile>struct_inst.html</anchorfile>
      <anchor>59c967653259710039d0c7131b774c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Mnemonic</type>
      <name>mn</name>
      <anchorfile>struct_inst.html</anchorfile>
      <anchor>6dc61e56fd1ade1fe604dd810aa44085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>size</name>
      <anchorfile>struct_inst.html</anchorfile>
      <anchor>55ef22718c440fea8a33fcb72b1cf604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>flags</name>
      <anchorfile>struct_inst.html</anchorfile>
      <anchor>fbdbc92f2f63ad33e1d986c6f59830fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>argc</name>
      <anchorfile>struct_inst.html</anchorfile>
      <anchor>897789eb17910c61ebcb8827d298934d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EncoderBase::Operand</type>
      <name>operands</name>
      <anchorfile>struct_inst.html</anchorfile>
      <anchor>b058b4abae281e79753feb2c775ac6b4</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>const EncoderBase::OpcodeDesc *</type>
      <name>odesc</name>
      <anchorfile>struct_inst.html</anchorfile>
      <anchor>679b6158ec0191d28ff458e4571da588</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LoggerString</name>
    <filename>class_logger_string.html</filename>
    <member kind="typedef">
      <type>std::ios_base &amp;(*)</type>
      <name>iomanip</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>84661b0eb55556a58c1d53577bceb119</anchor>
      <arglist>(std::ios_base &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>std::ostream &amp;(*)</type>
      <name>iomanip2</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>44cd1bda653f9bbf342cb63f513d0cb3</anchor>
      <arglist>(std::ostream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>release</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>2377bcb4007ad5429f706bbc9b84c4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>485512ef8def1efcae84eeccfe6af506</anchor>
      <arglist>(const char *message)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>222ff6ca55cff73b5df424c30d0ce931</anchor>
      <arglist>(char *message)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>7f7750f378fb27d40a58e0502fd54821</anchor>
      <arglist>(volatile void *pointer)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>b36e6ec14d4d2771e20c1919a8d399cc</anchor>
      <arglist>(const void *pointer)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>533603ab758ac4e7d4f4a5f207ddf3cf</anchor>
      <arglist>(void *pointer)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>b32b11dcb05e56da1ee67e0281154836</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>ea1f11006fe904f39f5ed5f3e1f5f920</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>0a559a1020695b0d1013e90609e7ad92</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>a793b347a6407f950703b752f1f2eac0</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>5439872a30e1650f5862fd2d12056c15</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>72a764d01a7cc73d1136ae9e8366aa08</anchor>
      <arglist>(int64 i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>4b32dd9c9734f448a5b9ec83ab5c98e5</anchor>
      <arglist>(uint64 i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>b59b4b030d1624340a5b703d6f3bb88d</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>a5796030c742e0c013828fba0a0651fd</anchor>
      <arglist>(iomanip UNREF i)</arglist>
    </member>
    <member kind="function">
      <type>LoggerString &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>class_logger_string.html</anchorfile>
      <anchor>1886bee474318e7be4986d1077980d38</anchor>
      <arglist>(iomanip2 UNREF i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LogSite</name>
    <filename>struct_log_site.html</filename>
    <member kind="variable">
      <type>CachedState</type>
      <name>state</name>
      <anchorfile>struct_log_site.html</anchorfile>
      <anchor>a5358a349e626074bb1fd409bc507b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LogSite *</type>
      <name>next</name>
      <anchorfile>struct_log_site.html</anchorfile>
      <anchor>1154e075e442465baa8ac1ba6a52f587</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>M_Base_Opnd</name>
    <filename>class_m___base___opnd.html</filename>
    <base>M_Opnd</base>
    <member kind="function">
      <type></type>
      <name>M_Base_Opnd</name>
      <anchorfile>class_m___base___opnd.html</anchorfile>
      <anchor>069b667956dacb8ed647ea2dcc2371fc</anchor>
      <arglist>(Reg_No base, int32 disp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>M_Index_Opnd</name>
    <filename>class_m___index___opnd.html</filename>
    <base>M_Opnd</base>
    <member kind="function">
      <type></type>
      <name>M_Index_Opnd</name>
      <anchorfile>class_m___index___opnd.html</anchorfile>
      <anchor>c4e730c2b765232a85348c19d69bc576</anchor>
      <arglist>(Reg_No base, Reg_No index, int32 disp, unsigned scale)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>M_Opnd</name>
    <filename>class_m___opnd.html</filename>
    <base>RM_Opnd</base>
    <member kind="function">
      <type></type>
      <name>M_Opnd</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>ad29b33f10243cd74abf919c49e67610</anchor>
      <arglist>(int32 disp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>M_Opnd</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>1958d634f3514f93c04e28ef3468cd40</anchor>
      <arglist>(Reg_No rbase, int32 rdisp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>M_Opnd</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>75063d45ce8dfad33e577982f82d87c0</anchor>
      <arglist>(int32 disp, Reg_No rbase, Reg_No rindex, unsigned scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>M_Opnd</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>b3ebea0b21478c1e2a825ee15169e5b9</anchor>
      <arglist>(const M_Opnd &amp;that)</arglist>
    </member>
    <member kind="function">
      <type>const R_Opnd &amp;</type>
      <name>base</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>301d262d07d48461a7386ae9f1997dce</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const R_Opnd &amp;</type>
      <name>index</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>b16dfbb2cb48dfaa6f09e2b9472954de</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Imm_Opnd &amp;</type>
      <name>scale</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>6d27641305a37eaec38b2125bc0c9c7f</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>const Imm_Opnd &amp;</type>
      <name>disp</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>b178124916a7b11ab9b84f8420b6195e</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Imm_Opnd</type>
      <name>m_disp</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>7d5ff8c97c6d79513ebf3c29d8e726f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Imm_Opnd</type>
      <name>m_scale</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>430581f14d66d05f11499b7e231a8471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>R_Opnd</type>
      <name>m_index</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>69cbf6d1e5f97a96340ce9e7003ec5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>R_Opnd</type>
      <name>m_base</name>
      <anchorfile>class_m___opnd.html</anchorfile>
      <anchor>dce6bedfecc44aaa983ff37cbb5d34f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MnemonicInfo</name>
    <filename>struct_mnemonic_info.html</filename>
    <member kind="variable">
      <type>Mnemonic</type>
      <name>mn</name>
      <anchorfile>struct_mnemonic_info.html</anchorfile>
      <anchor>3eb982fef86f4399b88b44f9ae630f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>flags</name>
      <anchorfile>struct_mnemonic_info.html</anchorfile>
      <anchor>a4d420c70bb4c2e14d2efc33f309ac6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EncoderBase::OpndRolesDesc</type>
      <name>roles</name>
      <anchorfile>struct_mnemonic_info.html</anchorfile>
      <anchor>ee2282c584e4586aaae74b81c2660018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>struct_mnemonic_info.html</anchorfile>
      <anchor>0e52d131027835bed7c358cb5bf3ebdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OpcodeInfo</type>
      <name>opcodes</name>
      <anchorfile>struct_mnemonic_info.html</anchorfile>
      <anchor>d9fed4ead51eb2f4dbface089b1e5684</anchor>
      <arglist>[25]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ModRM</name>
    <filename>struct_mod_r_m.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>rm</name>
      <anchorfile>struct_mod_r_m.html</anchorfile>
      <anchor>f05dee5155f028f9cf4d31be9abc2e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>reg</name>
      <anchorfile>struct_mod_r_m.html</anchorfile>
      <anchor>d7b7c91c72f78425dd9fdcd9f24dba91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>mod</name>
      <anchorfile>struct_mod_r_m.html</anchorfile>
      <anchor>873365ffbb93ae924205b159f805061d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>padding</name>
      <anchorfile>struct_mod_r_m.html</anchorfile>
      <anchor>7ddfbc711939c957502b406d2ae09d9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>OpcodeInfo</name>
    <filename>struct_opcode_info.html</filename>
    <member kind="enumeration">
      <name>platform</name>
      <anchor>975ad25bef2562f377e669cadbd2c730</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>all</name>
      <anchor>975ad25bef2562f377e669cadbd2c7300aca8d65d12e454d678bb7b0ed62d9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>em64t</name>
      <anchor>975ad25bef2562f377e669cadbd2c730f951960f750f66eed8f3a35f16098995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ia32</name>
      <anchor>975ad25bef2562f377e669cadbd2c73002255982dd637dc6c10d566b20d7999e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>decoder</name>
      <anchor>975ad25bef2562f377e669cadbd2c730f478c65e4bbb5ea2b6f8c4531b3560d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>decoder32</name>
      <anchor>975ad25bef2562f377e669cadbd2c7301fb3e6581c6b320c2f7cdbf99d158a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>decoder64</name>
      <anchor>975ad25bef2562f377e669cadbd2c7300f6c9d7f674203c15694ce35691418d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>platform</type>
      <name>platf</name>
      <anchorfile>struct_opcode_info.html</anchorfile>
      <anchor>cc476e7245da590bf43be824b28e780f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>opcode</name>
      <anchorfile>struct_opcode_info.html</anchorfile>
      <anchor>d3047fb54325317af9da0e6dc88d342e</anchor>
      <arglist>[4+1+1]</arglist>
    </member>
    <member kind="variable">
      <type>EncoderBase::OpndDesc</type>
      <name>opnds</name>
      <anchorfile>struct_opcode_info.html</anchorfile>
      <anchor>83346ae62df809aa613317bf95eafac1</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>EncoderBase::OpndRolesDesc</type>
      <name>roles</name>
      <anchorfile>struct_opcode_info.html</anchorfile>
      <anchor>6c5ac67abebae8753a133031016549d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Opnd</name>
    <filename>class_opnd.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>class_opnd.html</anchorfile>
      <anchor>b59046e2c824d52409172ddacc9ac798</anchor>
      <arglist>(size_t, void *mem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>class_opnd.html</anchorfile>
      <anchor>fc0eb1fa9db6a1a77b3c4621a6f31ea8</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>class_opnd.html</anchorfile>
      <anchor>a6efd2d3bc7a4b0f3916c5506357e812</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
    <member kind="enumeration">
      <name>Tag</name>
      <anchor>1c0e442774a79667a076cdaf32d25a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Imm</name>
      <anchor>1c0e442774a79667a076cdaf32d25a5616f8a67ab2e25cd289f649dca731eb7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reg</name>
      <anchor>1c0e442774a79667a076cdaf32d25a56c12d47d6a00aae3039a7d66373c52145</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Mem</name>
      <anchor>1c0e442774a79667a076cdaf32d25a56baef8a837241215620598b01b6cd7c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FP</name>
      <anchor>1c0e442774a79667a076cdaf32d25a568a946c7fbf1a0468b42c48d27576f2c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XMM</name>
      <anchor>1c0e442774a79667a076cdaf32d25a568529e85e147252db89802f61981fa132</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Opnd</name>
      <anchorfile>class_opnd.html</anchorfile>
      <anchor>a41c988860a293be9e98099709e8bca0</anchor>
      <arglist>(Tag t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Tag</type>
      <name>tag</name>
      <anchorfile>class_opnd.html</anchorfile>
      <anchor>9e5029f1a16fa35396473cbc1a49ae42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>port_disasm_info_t</name>
    <filename>structport__disasm__info__t.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>print_addr</name>
      <anchorfile>structport__disasm__info__t.html</anchorfile>
      <anchor>dd9997439486607ea8c2d335e8a1475b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>print_mnemonic</name>
      <anchorfile>structport__disasm__info__t.html</anchorfile>
      <anchor>3403a9887d6b18014761c7c1870f1b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>print_bytes</name>
      <anchorfile>structport__disasm__info__t.html</anchorfile>
      <anchor>4d39ecb65083d05a978d0524ed52584b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>R_Opnd</name>
    <filename>class_r___opnd.html</filename>
    <base>RM_Opnd</base>
    <member kind="function">
      <type></type>
      <name>R_Opnd</name>
      <anchorfile>class_r___opnd.html</anchorfile>
      <anchor>28392c35eefa61922711ad091d964396</anchor>
      <arglist>(Reg_No r)</arglist>
    </member>
    <member kind="function">
      <type>Reg_No</type>
      <name>reg_no</name>
      <anchorfile>class_r___opnd.html</anchorfile>
      <anchor>b85ccee1a69e37ff4f4687cefaad9356</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Reg_No</type>
      <name>_reg_no</name>
      <anchorfile>class_r___opnd.html</anchorfile>
      <anchor>3965ce842ca85cd16028864b17a6f8d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Rex</name>
    <filename>struct_rex.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>b</name>
      <anchorfile>struct_rex.html</anchorfile>
      <anchor>3775e9248f4eb79277d275a1dd3b8699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>x</name>
      <anchorfile>struct_rex.html</anchorfile>
      <anchor>54147760f5e8e2f7f20e44b40de2fc47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>r</name>
      <anchorfile>struct_rex.html</anchorfile>
      <anchor>75b9b90dd6dcfb4652ad124da8d4f899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>w</name>
      <anchorfile>struct_rex.html</anchorfile>
      <anchor>35846eeae7fd17e6bbea906c14e6eead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>dummy</name>
      <anchorfile>struct_rex.html</anchorfile>
      <anchor>ca08d6ea7c8ad857535412c810edf1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>int</name>
      <anchorfile>struct_rex.html</anchorfile>
      <anchor>864c6e7e7c529451cc49e8a4c3b24cb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RM_Opnd</name>
    <filename>class_r_m___opnd.html</filename>
    <base>Opnd</base>
    <member kind="function">
      <type>bool</type>
      <name>is_reg</name>
      <anchorfile>class_r_m___opnd.html</anchorfile>
      <anchor>4482532c7a5dad7819ff63ad22e0e603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RM_Opnd</name>
      <anchorfile>class_r_m___opnd.html</anchorfile>
      <anchor>c44d70db92154accb04d87b2128d2bb5</anchor>
      <arglist>(Tag t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SIB</name>
    <filename>struct_s_i_b.html</filename>
    <member kind="variable">
      <type>unsigned char</type>
      <name>base</name>
      <anchorfile>struct_s_i_b.html</anchorfile>
      <anchor>815d6f3eb82e3fc230ed045370456982</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>index</name>
      <anchorfile>struct_s_i_b.html</anchorfile>
      <anchor>c7051eaf85ed4610aa80f35978edc6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>scale</name>
      <anchorfile>struct_s_i_b.html</anchorfile>
      <anchor>d83162146fdcb0196d7490892c2a62e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>padding</name>
      <anchorfile>struct_s_i_b.html</anchorfile>
      <anchor>1e95187a1cab5651407e1697e8fd5e93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>XMM_Opnd</name>
    <filename>class_x_m_m___opnd.html</filename>
    <base>Opnd</base>
    <member kind="function">
      <type></type>
      <name>XMM_Opnd</name>
      <anchorfile>class_x_m_m___opnd.html</anchorfile>
      <anchor>7ad3fef586ff5687ede6690a11cb00b3</anchor>
      <arglist>(unsigned _idx)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>get_idx</name>
      <anchorfile>class_x_m_m___opnd.html</anchorfile>
      <anchor>87ac5ad98c6ea0fc4811815b77ef4d58</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned</type>
      <name>m_idx</name>
      <anchorfile>class_x_m_m___opnd.html</anchorfile>
      <anchor>4c31bc87712cbed3685c07238abc9f20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tl</name>
    <filename>namespacetl.html</filename>
    <class kind="class">tl::BasicAllocator</class>
    <class kind="class">tl::MPAllocator</class>
    <class kind="class">tl::List</class>
    <class kind="class">tl::MemoryPool</class>
    <class kind="class">tl::MemoryPoolMT</class>
    <class kind="class">tl::vector_set</class>
    <class kind="class">tl::vector_set_mt</class>
    <class kind="class">tl::vector</class>
    <class kind="class">tl::vector_mt</class>
  </compound>
  <compound kind="class">
    <name>tl::BasicAllocator</name>
    <filename>classtl_1_1_basic_allocator.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>37f7562e9d45cfd92617dd16cff4f014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>fd62b3638b6d6b337caee7016ce29fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>c1ffd1b691307bc0196d567445e37070</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>3b74ce7c664e27eb36ffb088e4637ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>1939d35be53c23f92d5dbc7f41d39cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>039404cd3e7eef34f04fff3f2bf8224a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>186dfa348a47a54c7800042a0ff713c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicAllocator</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>108f041c0448b047b8c8672d97fdc9cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicAllocator</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>bf1b7cfed489ca4101a99764d9e96c88</anchor>
      <arglist>(const BasicAllocator&lt; U &gt; &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BasicAllocator</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>a3cd7f6d92adc9270390f28fd44f20a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>6c2fca533098210183150aca8912b631</anchor>
      <arglist>(reference x) const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>214da56234bd1028567cd0d39758a445</anchor>
      <arglist>(const_reference x) const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>f11aa89e8ae56e1459045944d887c103</anchor>
      <arglist>(size_type n, const void *=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>97f137917955dff5e5860284c9fd98ff</anchor>
      <arglist>(void *UNREF p, size_type)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>3087b9d4fa606bd3ce9980e5d0855ea1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>647b54a78b464d88114844fcad37af01</anchor>
      <arglist>(pointer p, const value_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>9db61a397804b3c6efe761dc21f70b2b</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>332e5be0eeb6938b79f7110278f757f6</anchor>
      <arglist>(const BasicAllocator&lt; U &gt; &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classtl_1_1_basic_allocator.html</anchorfile>
      <anchor>478fb559f22c9d11b9ae5ca2aa267017</anchor>
      <arglist>(const BasicAllocator&lt; U &gt; &amp;allocator)</arglist>
    </member>
    <class kind="struct">tl::BasicAllocator::rebind</class>
  </compound>
  <compound kind="struct">
    <name>tl::BasicAllocator::rebind</name>
    <filename>structtl_1_1_basic_allocator_1_1rebind.html</filename>
    <templarg>U</templarg>
    <member kind="typedef">
      <type>BasicAllocator&lt; U &gt;</type>
      <name>other</name>
      <anchorfile>structtl_1_1_basic_allocator_1_1rebind.html</anchorfile>
      <anchor>fc567f0f09ca4f36a1ff98031d6888d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::MPAllocator</name>
    <filename>classtl_1_1_m_p_allocator.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>52a0c349f965bf64db0235963f50f477</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>b60f2f806db8694478f99b9588a5c124</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>2bd90b22d26e423f3be842fdadd1d7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>0d0576c87e643bae3860368a44ddf5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>d77d2c7f51c8f779f50561cf2269187c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>08d5aa1ba064a26164262b5b97335385</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>1bb2291a2006059faed55c9517aae6d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPAllocator</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>8e3c38335f04daf91ce5a0d5b1982eb7</anchor>
      <arglist>(MemoryPool &amp;mp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPAllocator</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>7975fe26e136ffb8311891f9f183ffe1</anchor>
      <arglist>(const MPAllocator&lt; U &gt; &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MPAllocator</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>8468989a067d0999111846b17f0efd37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>a4f50056f8e885b026174ed694ade6a7</anchor>
      <arglist>(reference x) const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>20a85675e59c196291b290462d05aa18</anchor>
      <arglist>(const_reference x) const </arglist>
    </member>
    <member kind="function">
      <type>MemoryPool &amp;</type>
      <name>getMemoryPool</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>3a24433c87819a78a72df37aba84c925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>e4e065bf176e0af8a00e083fd1d74e61</anchor>
      <arglist>(size_type n, const void *=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>41da0238f5318cf16a02eeaa7a59024e</anchor>
      <arglist>(void *p, size_type)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>d563df04b11330f11ed208854e8bd09d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>74cb099fe4084092a73fec4a4525b64d</anchor>
      <arglist>(pointer p, const value_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>7f6f15633b1ac4c6cfcafe98387489c9</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>48846bd44589e0229b1e52eedb745fdb</anchor>
      <arglist>(const MPAllocator&lt; U &gt; &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classtl_1_1_m_p_allocator.html</anchorfile>
      <anchor>34c7f902112439c14d322fae13fbb232</anchor>
      <arglist>(const MPAllocator&lt; U &gt; &amp;allocator)</arglist>
    </member>
    <class kind="struct">tl::MPAllocator::rebind</class>
  </compound>
  <compound kind="struct">
    <name>tl::MPAllocator::rebind</name>
    <filename>structtl_1_1_m_p_allocator_1_1rebind.html</filename>
    <templarg>U</templarg>
    <member kind="typedef">
      <type>MPAllocator&lt; U &gt;</type>
      <name>other</name>
      <anchorfile>structtl_1_1_m_p_allocator_1_1rebind.html</anchorfile>
      <anchor>68c51ee5c2ede7ff620a7ee4e2095895</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::List</name>
    <filename>classtl_1_1_list.html</filename>
    <templarg>_ListElement</templarg>
    <templarg>_Allocator</templarg>
    <templarg>_RWLock</templarg>
    <member kind="function">
      <type>void</type>
      <name>SetNextElement</name>
      <anchorfile>classtl_1_1_list.html</anchorfile>
      <anchor>d9d83f80f67e73dcfaeab91010a6be17</anchor>
      <arglist>(ListElement *element_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SetPrevElement</name>
      <anchorfile>classtl_1_1_list.html</anchorfile>
      <anchor>2acc1f8ded27d54f3a3de37d5a8c3496</anchor>
      <arglist>(ListElement *element_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Remove</name>
      <anchorfile>classtl_1_1_list.html</anchorfile>
      <anchor>1e9f797389c5b530504ca662b57927d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Contains</name>
      <anchorfile>classtl_1_1_list.html</anchorfile>
      <anchor>3a5cfe53653fd83cd9c85598272b5bdc</anchor>
      <arglist>(_Key _key)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>GetIterator</name>
      <anchorfile>classtl_1_1_list.html</anchorfile>
      <anchor>eef0f9595fe5380da650faabb74c1a8a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::MemoryPool</name>
    <filename>classtl_1_1_memory_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>MemoryPool</name>
      <anchorfile>classtl_1_1_memory_pool.html</anchorfile>
      <anchor>2477f669ba788ce38615672661eb1243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryPool</name>
      <anchorfile>classtl_1_1_memory_pool.html</anchorfile>
      <anchor>2344dfa38c5c5cb93fc902d962986f37</anchor>
      <arglist>(const MemoryPool *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryPool</name>
      <anchorfile>classtl_1_1_memory_pool.html</anchorfile>
      <anchor>7faec38aecc27d2ee86b0d605110901a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>alloc</name>
      <anchorfile>classtl_1_1_memory_pool.html</anchorfile>
      <anchor>87653e7b19a0327d371a599e6e2cf399</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>create_mutex</name>
      <anchorfile>classtl_1_1_memory_pool.html</anchorfile>
      <anchor>f368f582aed0326b0888c366579243c5</anchor>
      <arglist>(apr_thread_mutex_t **, unsigned int flags)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>apr_pool_t *</type>
      <name>pool</name>
      <anchorfile>classtl_1_1_memory_pool.html</anchorfile>
      <anchor>7cf7f1d0bd3af93f28cc17da6961cb3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::MemoryPoolMT</name>
    <filename>classtl_1_1_memory_pool_m_t.html</filename>
    <member kind="function">
      <type></type>
      <name>MemoryPoolMT</name>
      <anchorfile>classtl_1_1_memory_pool_m_t.html</anchorfile>
      <anchor>189c637d6893a11b77f93594e01b0a4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryPoolMT</name>
      <anchorfile>classtl_1_1_memory_pool_m_t.html</anchorfile>
      <anchor>b92ed2a292112c4c4ed533c872c79b48</anchor>
      <arglist>(const MemoryPool *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryPoolMT</name>
      <anchorfile>classtl_1_1_memory_pool_m_t.html</anchorfile>
      <anchor>622c5e4c7b2bde5902330844bda53cec</anchor>
      <arglist>(const MemoryPoolMT *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryPoolMT</name>
      <anchorfile>classtl_1_1_memory_pool_m_t.html</anchorfile>
      <anchor>c674369040a2fa789986da08e4361e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>alloc</name>
      <anchorfile>classtl_1_1_memory_pool_m_t.html</anchorfile>
      <anchor>43e8a049e4bfb09bcee3033c637dd962</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>apr_status_t</type>
      <name>create_mutex</name>
      <anchorfile>classtl_1_1_memory_pool_m_t.html</anchorfile>
      <anchor>600c8b0433b53c32d321d103503efdf6</anchor>
      <arglist>(apr_thread_mutex_t **, unsigned int flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::vector_set</name>
    <filename>classtl_1_1vector__set.html</filename>
    <templarg>T</templarg>
    <templarg>Allocator</templarg>
    <member kind="function">
      <type></type>
      <name>vector_set</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>af8931fa722717d91c3528fa91830782</anchor>
      <arglist>(Allocator const &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector_set</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>a221fa2bc56c4fbd06b213ec27d2048a</anchor>
      <arglist>(Allocator const &amp;a, size_type n, const T &amp;x=T())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector_set</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>06bb94212d80eb1cbc11fb71211cb137</anchor>
      <arglist>(const std_vector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>vector_set &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>eb87184d679cf16591be2d69ae234cb8</anchor>
      <arglist>(const std_vector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>vector_set &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>1844ebef0eb5d6a45c11495084091294</anchor>
      <arglist>(const vector_set &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>::std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>51407f8748efb027f9604efa79b2fb21</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>1830f8f595841fc0c5ede547fc6c1962</anchor>
      <arglist>(iterator pos, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>174aaa9a0bf84001e473afb18118b363</anchor>
      <arglist>(iterator i1, iterator i2)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>aace24103092211bb8924bec20e4bb6c</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>ec99cf5483b643de61fe1e1e5d3286ae</anchor>
      <arglist>(iterator __position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>d83aeb3901af00eb346b0ce27debffb8</anchor>
      <arglist>(iterator __first, iterator __last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>b72b98933396d3658e344d468a3698d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>22291ee7dac3fef64413c0fbfa04defd</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>67f79ae94b79702e991b6afc9c588fd7</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>b8e6a5a0f6f4701ea6e97b0538fdc6b1</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>upper_bound</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>e28d87d342cf8a7ee5ecbf2900a7e8a5</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>upper_bound</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>fb4a240601548ab8ec40b31bff186782</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>::std::pair&lt; const_iterator, const_iterator &gt;</type>
      <name>equal_range</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>8fe4a2dcc725445ba3e9a684ef6433d6</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>::std::pair&lt; iterator, iterator &gt;</type>
      <name>equal_range</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>c5b2d19d9aa71953d7aece245961767d</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>f26562a728fbf07b0056ebc49aa2b4d8</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>a7a94ec65eb5e9f143923fbcd22347b3</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classtl_1_1vector__set.html</anchorfile>
      <anchor>217497876eef4e50fe1556bf2da26c1c</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::vector_set_mt</name>
    <filename>classtl_1_1vector__set__mt.html</filename>
    <templarg>T</templarg>
    <templarg>Allocator</templarg>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>adae88126c6cc6f2789bd118a9ad0437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>3b4253f870f6ec9be5b9da4fb75c3c58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector_set_mt</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>9a8e8bf4dca43f4a15020e053e936242</anchor>
      <arglist>(Allocator const &amp;a=Allocator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector_set_mt</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>8b1ea361aab2e41397b1d45b2b2b1daf</anchor>
      <arglist>(size_type n, const T &amp;x=T(), Allocator const &amp;a=Allocator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector_set_mt</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>393e194935e9aaac3cd7e39114dde2d8</anchor>
      <arglist>(const std_vector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>vector_set_mt &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>aa229e2787cd38b00d9d2d8a67cf4aed</anchor>
      <arglist>(const std_vector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>vector_set_mt &amp;</type>
      <name>operator=</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>bd174ca4177f953e0614dfe314a64555</anchor>
      <arglist>(const vector_set_mt &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>::std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>a73e2a83490668bef657394420d5de23</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>56399d084250f563f4de240688a46308</anchor>
      <arglist>(iterator pos, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>fdfbc77e4186d00c070ee7e8e0654d7b</anchor>
      <arglist>(iterator i1, iterator i2)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>4197ff434f60749bb52bfa2efd339850</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>a3d88c5c655f0be624a7d2b11906c48c</anchor>
      <arglist>(iterator __position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>3b75957d75865d7f1e22acd813001f54</anchor>
      <arglist>(iterator __first, iterator __last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>b68c5f4efebe9ffc4d2bba7198ae33c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>833afa6665d7256df884764cab0d5c7f</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>d319370373851adb5f9e28c5a79a75b1</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>ab67703996dbaac1a158ebda6e264a9b</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>upper_bound</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>6496dab57e38abc703cfeaf588e0a006</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>upper_bound</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>28fd632cbf77d80fe8e8184898829b3b</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>::std::pair&lt; const_iterator, const_iterator &gt;</type>
      <name>equal_range</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>1d9212bf61079f47ce905ce6e468e018</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>::std::pair&lt; iterator, iterator &gt;</type>
      <name>equal_range</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>53ca29deff36d00e01c1d2e9c135598e</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>74c802a87f6e6269dd64931fa05e60c4</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>cf6ef4e93df44273f1ef299b67325e80</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classtl_1_1vector__set__mt.html</anchorfile>
      <anchor>ec6be2db58b41e94f3a2a4e0db582c19</anchor>
      <arglist>(const T &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::vector</name>
    <filename>classtl_1_1vector.html</filename>
    <templarg>T</templarg>
    <templarg>Allocator</templarg>
    <member kind="function">
      <type></type>
      <name>vector</name>
      <anchorfile>classtl_1_1vector.html</anchorfile>
      <anchor>02eee929d9524a5baa34219e88736970</anchor>
      <arglist>(Allocator const &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tl::vector_mt</name>
    <filename>classtl_1_1vector__mt.html</filename>
    <templarg>T</templarg>
    <templarg>Allocator</templarg>
    <member kind="typedef">
      <type>std_vector::size_type</type>
      <name>size_type</name>
      <anchorfile>classtl_1_1vector__mt.html</anchorfile>
      <anchor>667e0a3927b70f357916d4f413520f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector_mt</name>
      <anchorfile>classtl_1_1vector__mt.html</anchorfile>
      <anchor>e3c2659673fc7f736262f13a0bc827a5</anchor>
      <arglist>(Allocator const &amp;a=Allocator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vector_mt</name>
      <anchorfile>classtl_1_1vector__mt.html</anchorfile>
      <anchor>02d89f32d3b8acac472baf95dd268f14</anchor>
      <arglist>(size_type n, const T &amp;x=T(), Allocator const &amp;a=Allocator())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classtl_1_1vector__mt.html</anchorfile>
      <anchor>3ea1ff9b2651246e8b5c0e547bf77f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classtl_1_1vector__mt.html</anchorfile>
      <anchor>f412b1251534e6657b04ff975b22e318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classtl_1_1vector__mt.html</anchorfile>
      <anchor>bc7980df82ee8b2b6e5689891df96c75</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>util</name>
    <filename>namespaceutil.html</filename>
    <member kind="variable">
      <type>const char</type>
      <name>CLASS_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>d76a668b3c804f36e01349d86e65e2e6</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>GC_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>ae7e8ab2b56e9f16b187a4bfad5921a3</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>JNI_LOGGER</name>
      <anchorfile>namespaceutil.html</anchorfile>
      <anchor>fc46375ca69ad212c36d5991f42a785f</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
</tagfile>
