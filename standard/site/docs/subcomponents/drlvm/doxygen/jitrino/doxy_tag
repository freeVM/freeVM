<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>ee_em_intf.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/open/</path>
    <filename>ee__em__intf_8h</filename>
    <member kind="typedef">
      <type>void *(*)</type>
      <name>vm_adaptor_t</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>e68ed1e5342985b10306f62150b3bb86</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_init</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>cd204968de20c266df6815075562ca23</anchor>
      <arglist>(JIT_Handle jit, const char *name, vm_adaptor_t adaptor)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_deinit</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>c48f664f41319e284af5296a89105cdd</anchor>
      <arglist>(JIT_Handle jit)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_set_profile_access_interface</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>bef11b57bbb3c2acd025911ada2f8b56</anchor>
      <arglist>(JIT_Handle jit, EM_Handle em, struct EM_ProfileAccessInterface *pc_interface)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT bool</type>
      <name>JIT_enable_profiling</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>e58bd4753edd99e1129ad6465fd27a5a</anchor>
      <arglist>(JIT_Handle jit, PC_Handle pc, EM_JIT_PC_Role role)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_profile_notification_callback</name>
      <anchorfile>ee__em__intf_8h.html</anchorfile>
      <anchor>b1e8106277ec5186343340ec12e2063f</anchor>
      <arglist>(JIT_Handle jit, PC_Handle pc, Method_Handle mh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EMInterface.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/jitrino/src/vm/</path>
    <filename>_e_m_interface_8h</filename>
    <namespace>Jitrino</namespace>
    <class kind="class">Jitrino::MethodProfile</class>
    <class kind="class">Jitrino::EntryBackedgeMethodProfile</class>
    <class kind="class">Jitrino::EdgeMethodProfile</class>
    <class kind="class">Jitrino::ValueMethodProfile</class>
    <class kind="class">Jitrino::ProfilingInterface</class>
    <member kind="enumeration">
      <name>ProfileType</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProfileType_Invalid</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f9426d5ab2c14315a532512a1e06602274</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProfileType_EntryBackedge</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f9375956b47d135bad528c8a96048e714f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProfileType_Edge</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f931c75d2d8675168129959fe48ae172cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProfileType_Value</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f9f5243a5e3ec212ab49e8d84fefe0064a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>JITProfilingRole</name>
      <anchor>dc4a52f9c2bbfa75c64c076f5e724f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JITProfilingRole_GEN</name>
      <anchor>dc4a52f9c2bbfa75c64c076f5e724f507ac898b8d09b3310010bc9fc3218d10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JITProfilingRole_USE</name>
      <anchor>dc4a52f9c2bbfa75c64c076f5e724f50c395ad441f72f4565d71c67a1955d70d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>internal_jit_intf.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/include/</path>
    <filename>internal__jit__intf_8h</filename>
    <member kind="function">
      <type>VMEXPORT char *</type>
      <name>gen_setup_j2n_frame</name>
      <anchorfile>internal__jit__intf_8h.html</anchorfile>
      <anchor>644a405b9c94dff7044ee5772b4dcbe4</anchor>
      <arglist>(char *s)</arglist>
    </member>
    <member kind="function">
      <type>VMEXPORT char *</type>
      <name>gen_pop_j2n_frame</name>
      <anchorfile>internal__jit__intf_8h.html</anchorfile>
      <anchor>c708a349d98fe1b5984d5a403bf4d904</anchor>
      <arglist>(char *s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jet.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/jitrino/src/jet/</path>
    <filename>jet_8h</filename>
    <namespace>Jitrino</namespace>
    <namespace>Jitrino::Jet</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__JET_H_INCLUDED__</name>
      <anchorfile>jet_8h.html</anchorfile>
      <anchor>a5c396be10ffade5fac8abdc3636f1de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rt_check_method</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g55989c2fa1ca5661499ee2827647a51c</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_unwind</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g986590625299ef2b6f02b6847830cc77</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_enum</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g47add259c443c5c73b6f3840dffdb977</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, GC_Enumeration_Handle henum, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_fix_handler_context</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g5d8ca0dc79652e7458bf7fcbf0778a8f</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>rt_is_soe_area</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>gd9848b13daabba9c97c8b5e03e30c4ec</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>rt_get_address_of_this</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g4f86d5056fe32bc4fb366387ff962737</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_native2bc</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g37638e13eddeb08d09cedde2de21d302</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const void *ip, unsigned short *pbc_pc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_bc2native</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g4a0576f8ab9614e5135a8e9c09e2d424</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, unsigned short bc_pc, void **pip)</arglist>
    </member>
    <member kind="function">
      <type>::OpenExeJpdaError</type>
      <name>rt_get_local_var</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___j_v_m_t_i___s_u_p_p_o_r_t.html</anchorfile>
      <anchor>gf0f69618ff1981ff232e655e8d5d37d1</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const ::JitFrameContext *context, unsigned var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
    <member kind="function">
      <type>::OpenExeJpdaError</type>
      <name>rt_set_local_var</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___j_v_m_t_i___s_u_p_p_o_r_t.html</anchorfile>
      <anchor>g890d7b343d5c5116e5f301333a6b85bc</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const ::JitFrameContext *context, unsigned var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>b96b990dc62b3d9531733a5c013a78a9</anchor>
      <arglist>(JIT_Handle hjit, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>0cd10b07c77475790c17f7e50d282a5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cmd_line_arg</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>a2e91683fe5492ee84ca0f15dd265b8f</anchor>
      <arglist>(JIT_Handle jit, const char *name, const char *arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_compresed_refs</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>de2c0ef7ec61ad9e7343d58c9d31ae5b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>JIT_Result</type>
      <name>compile_with_params</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>971ef414c10e3d8a1076176ce41c7525</anchor>
      <arglist>(JIT_Handle jh, Compile_Handle compile, Method_Handle method, OpenMethodExecutionParams params)</arglist>
    </member>
    <member kind="function">
      <type>OpenMethodExecutionParams</type>
      <name>get_exe_capabilities</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>2a7d4fe4c99091b655e4c57c7e36016d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_profile_notification_callback</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>29c1b34a510496b28cfaa27763e5eaf5</anchor>
      <arglist>(JIT_Handle jit, PC_Handle pc, Method_Handle mh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_export.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>jit__export_8h</filename>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_next_command_line_argument</name>
      <anchorfile>jit__export_8h.html</anchorfile>
      <anchor>66ec41211e0ec8c07f299946bf366a1d</anchor>
      <arglist>(JIT_Handle jit, const char *name, const char *arg)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT JIT_Result</type>
      <name>JIT_compile_method_with_params</name>
      <anchorfile>jit__export_8h.html</anchorfile>
      <anchor>2b90ff37e7a428d2d6ed5b2d8c70e833</anchor>
      <arglist>(JIT_Handle jit, Compile_Handle compile_handle, Method_Handle method_handle, OpenMethodExecutionParams compilation_params)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenMethodExecutionParams</type>
      <name>JIT_get_exe_capabilities</name>
      <anchorfile>jit__export_8h.html</anchorfile>
      <anchor>4abdcd9e96bc3cfce5ea6ce3342ad8b8</anchor>
      <arglist>(JIT_Handle jit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_export_jpda.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>jit__export__jpda_8h</filename>
    <member kind="enumeration">
      <name>OpenExeJpdaError</name>
      <anchor>4f097ac15bf97731434190a2b060e122</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_NONE</name>
      <anchor>4f097ac15bf97731434190a2b060e122cf658e0896cab259b06e17913e15fa08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_INVALID_METHODID</name>
      <anchor>4f097ac15bf97731434190a2b060e1229a2b5f831656a99f96b9d7340da4ca78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_INVALID_LOCATION</name>
      <anchor>4f097ac15bf97731434190a2b060e122de2e651e9d3177f2f99c893d42c9cc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_TYPE_MISMATCH</name>
      <anchor>4f097ac15bf97731434190a2b060e1223ec7a55a2f2f345c8c6538fc96f58ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_INVALID_SLOT</name>
      <anchor>4f097ac15bf97731434190a2b060e1222f0d70c03db9274b092588a0faf09014</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXE_ERROR_UNSUPPORTED</name>
      <anchor>4f097ac15bf97731434190a2b060e12228a7084a5e5ff743461f3cb529a8ce1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenExeJpdaError</type>
      <name>get_native_location_for_bc</name>
      <anchorfile>jit__export__jpda_8h.html</anchorfile>
      <anchor>0ed9e3b5c277bd81ef9b44c9ff4cd4c6</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, uint16 bc_pc, NativeCodePtr *native_pc)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenExeJpdaError</type>
      <name>get_bc_location_for_native</name>
      <anchorfile>jit__export__jpda_8h.html</anchorfile>
      <anchor>549b28837a66ffca63b57a7c69ed0168</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, NativeCodePtr native_pc, uint16 *bc_pc)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenExeJpdaError</type>
      <name>get_local_var</name>
      <anchorfile>jit__export__jpda_8h.html</anchorfile>
      <anchor>1a3181f1db066b8296a954b279c93a6c</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context, uint16 var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT OpenExeJpdaError</type>
      <name>set_local_var</name>
      <anchorfile>jit__export__jpda_8h.html</anchorfile>
      <anchor>60de8fb6b56e4bf67f30cc2c8f1de765</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context, uint16 var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jit_export_rt.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/vmcore/include/</path>
    <filename>jit__export__rt_8h</filename>
    <member kind="function">
      <type>JITEXPORT Boolean</type>
      <name>JIT_extended_class_callback</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>473d6b4f9ca6d3723e1df30dde6210e3</anchor>
      <arglist>(JIT_Handle jit, Class_Handle extended_class, Class_Handle new_class, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT Boolean</type>
      <name>JIT_overridden_method_callback</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>0f1a53059de1876d9a44a96976a780f2</anchor>
      <arglist>(JIT_Handle jit, Method_Handle overridden_method, Method_Handle new_method, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT Boolean</type>
      <name>JIT_recompiled_method_callback</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>a7a3442a1bf268f99de05d704d72415e</anchor>
      <arglist>(JIT_Handle jit, Method_Handle recompiled_method, void *callback_data)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_unwind_stack_frame</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>b487fe18db2e736bec6aa9cf7930e9f4</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_get_root_set_from_stack_frame</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>9dd85410b1d61c7ab5f3ee6d48d00816</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, GC_Enumeration_Handle enum_handle, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_get_root_set_for_thread_dump</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>87f3e8b555c9bff6461b4b79ef512445</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, GC_Enumeration_Handle enum_handle, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT uint32</type>
      <name>JIT_get_inline_depth</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>c433e15a767be42df3419994690ae0ff</anchor>
      <arglist>(JIT_Handle jit, InlineInfoPtr ptr, uint32 offset)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT Method_Handle</type>
      <name>JIT_get_inlined_method</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>66c168fda2a7f1e3103d65b7aa1e0aab</anchor>
      <arglist>(JIT_Handle jit, InlineInfoPtr ptr, uint32 offset, uint32 inline_depth)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT uint16</type>
      <name>JIT_get_inlined_bc</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>01e8b6b298ea9e6552b682b813016856</anchor>
      <arglist>(JIT_Handle jit, InlineInfoPtr ptr, uint32 offset, uint32 inline_depth)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void</type>
      <name>JIT_fix_handler_context</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>90a935551eefc0cfd441ba7f69c14868</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT void *</type>
      <name>JIT_get_address_of_this</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>dc70b067511b45acf65b3bd522bb19a9</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>JITEXPORT Boolean</type>
      <name>JIT_supports_compressed_references</name>
      <anchorfile>jit__export__rt_8h.html</anchorfile>
      <anchor>35d09d1ebcc29f8686d5447c80e5b53a</anchor>
      <arglist>(JIT_Handle jit)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Jitrino.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/jitrino/src/main/</path>
    <filename>_jitrino_8h</filename>
    <namespace>Jitrino</namespace>
    <class kind="class">Jitrino::Jitrino</class>
    <class kind="struct">Jitrino::Jitrino::Flags</class>
    <member kind="define">
      <type>#define</type>
      <name>jitrino_assert</name>
      <anchorfile>_jitrino_8h.html</anchorfile>
      <anchor>5e74e9fd2e66985245764754394f82ed</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="typedef">
      <type>StlVector&lt; JITInstanceContext * &gt;</type>
      <name>JITInstances</name>
      <anchorfile>namespace_jitrino.html</anchorfile>
      <anchor>634b775efcd86e8e55aee5226b0a33dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>crash</name>
      <anchorfile>namespace_jitrino.html</anchorfile>
      <anchor>c3546228999641ff3303096c5a556970</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VMInterface.h</name>
    <path>C:/cvn_rep/source/trunk/working_vm/vm/jitrino/src/vm/</path>
    <filename>_v_m_interface_8h</filename>
    <namespace>Jitrino</namespace>
    <class kind="class">Jitrino::VMInterface</class>
    <class kind="class">Jitrino::TypeMemberDesc</class>
    <class kind="class">Jitrino::FieldDesc</class>
    <class kind="class">Jitrino::MethodDesc</class>
    <class kind="class">Jitrino::CompilationInterface</class>
    <class kind="class">Jitrino::GCInterface</class>
    <class kind="class">Jitrino::ThreadDumpEnumerator</class>
    <class kind="class">Jitrino::PersistentInstructionId</class>
    <class kind="class">Jitrino::VMPropertyIterator</class>
    <member kind="enumeration">
      <name>ResolveNewCheck</name>
      <anchor>20fda4414b2c62fcaee6cf518e5bca51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ResolveNewCheck_NoCheck</name>
      <anchor>20fda4414b2c62fcaee6cf518e5bca51527382c3809a0af248c0015f140713ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ResolveNewCheck_DoCheck</name>
      <anchor>20fda4414b2c62fcaee6cf518e5bca5124f45a3348755d21eb04bfbf74f69ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespace_jitrino.html</anchorfile>
      <anchor>4ba726dbd0a7c3323028029304488fc1</anchor>
      <arglist>(::std::ostream &amp;os, const PersistentInstructionId &amp;pid)</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespace_jitrino.html</anchorfile>
      <anchor>26262643da4092ba4ebec8e040746781</anchor>
      <arglist>(::std::ostream &amp;os, Method_Handle mh)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>JITRINO_JET_RUNTIME_SUPPORT</name>
    <title>Runtime support</title>
    <filename>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___s_u_p_p_o_r_t.html</filename>
    <subgroup>JITRINO_JET_RUNTIME_GENERAL</subgroup>
    <subgroup>JITRINO_JET_JVMTI_SUPPORT</subgroup>
  </compound>
  <compound kind="group">
    <name>JITRINO_JET_RUNTIME_GENERAL</name>
    <title>General execution support</title>
    <filename>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>rt_check_method</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g55989c2fa1ca5661499ee2827647a51c</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_unwind</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g986590625299ef2b6f02b6847830cc77</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_enum</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g47add259c443c5c73b6f3840dffdb977</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, GC_Enumeration_Handle henum, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_fix_handler_context</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g5d8ca0dc79652e7458bf7fcbf0778a8f</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>rt_is_soe_area</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>gd9848b13daabba9c97c8b5e03e30c4ec</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>rt_get_address_of_this</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g4f86d5056fe32bc4fb366387ff962737</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_native2bc</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g37638e13eddeb08d09cedde2de21d302</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const void *ip, unsigned short *pbc_pc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_bc2native</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g4a0576f8ab9614e5135a8e9c09e2d424</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, unsigned short bc_pc, void **pip)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>JITRINO_JET_JVMTI_SUPPORT</name>
    <title>JVMTI support</title>
    <filename>group___j_i_t_r_i_n_o___j_e_t___j_v_m_t_i___s_u_p_p_o_r_t.html</filename>
    <member kind="function">
      <type>::OpenExeJpdaError</type>
      <name>rt_get_local_var</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___j_v_m_t_i___s_u_p_p_o_r_t.html</anchorfile>
      <anchor>gf0f69618ff1981ff232e655e8d5d37d1</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const ::JitFrameContext *context, unsigned var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
    <member kind="function">
      <type>::OpenExeJpdaError</type>
      <name>rt_set_local_var</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___j_v_m_t_i___s_u_p_p_o_r_t.html</anchorfile>
      <anchor>g890d7b343d5c5116e5f301333a6b85bc</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const ::JitFrameContext *context, unsigned var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Jitrino</name>
    <filename>namespace_jitrino.html</filename>
    <class kind="class">Jitrino::Jitrino</class>
    <class kind="class">Jitrino::MethodProfile</class>
    <class kind="class">Jitrino::EntryBackedgeMethodProfile</class>
    <class kind="class">Jitrino::EdgeMethodProfile</class>
    <class kind="class">Jitrino::ValueMethodProfile</class>
    <class kind="class">Jitrino::ProfilingInterface</class>
    <class kind="class">Jitrino::VMInterface</class>
    <class kind="class">Jitrino::TypeMemberDesc</class>
    <class kind="class">Jitrino::FieldDesc</class>
    <class kind="class">Jitrino::MethodDesc</class>
    <class kind="class">Jitrino::CompilationInterface</class>
    <class kind="class">Jitrino::GCInterface</class>
    <class kind="class">Jitrino::ThreadDumpEnumerator</class>
    <class kind="class">Jitrino::PersistentInstructionId</class>
    <class kind="class">Jitrino::VMPropertyIterator</class>
    <namespace>Jitrino::Jet</namespace>
    <member kind="typedef">
      <type>StlVector&lt; JITInstanceContext * &gt;</type>
      <name>JITInstances</name>
      <anchorfile>namespace_jitrino.html</anchorfile>
      <anchor>634b775efcd86e8e55aee5226b0a33dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ProfileType</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProfileType_Invalid</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f9426d5ab2c14315a532512a1e06602274</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProfileType_EntryBackedge</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f9375956b47d135bad528c8a96048e714f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProfileType_Edge</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f931c75d2d8675168129959fe48ae172cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProfileType_Value</name>
      <anchor>9e52d0969cbc1c480202c617539ac9f9f5243a5e3ec212ab49e8d84fefe0064a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>JITProfilingRole</name>
      <anchor>dc4a52f9c2bbfa75c64c076f5e724f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JITProfilingRole_GEN</name>
      <anchor>dc4a52f9c2bbfa75c64c076f5e724f507ac898b8d09b3310010bc9fc3218d10c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JITProfilingRole_USE</name>
      <anchor>dc4a52f9c2bbfa75c64c076f5e724f50c395ad441f72f4565d71c67a1955d70d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ResolveNewCheck</name>
      <anchor>20fda4414b2c62fcaee6cf518e5bca51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ResolveNewCheck_NoCheck</name>
      <anchor>20fda4414b2c62fcaee6cf518e5bca51527382c3809a0af248c0015f140713ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ResolveNewCheck_DoCheck</name>
      <anchor>20fda4414b2c62fcaee6cf518e5bca5124f45a3348755d21eb04bfbf74f69ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>crash</name>
      <anchorfile>namespace_jitrino.html</anchorfile>
      <anchor>c3546228999641ff3303096c5a556970</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>inline::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespace_jitrino.html</anchorfile>
      <anchor>4ba726dbd0a7c3323028029304488fc1</anchor>
      <arglist>(::std::ostream &amp;os, const PersistentInstructionId &amp;pid)</arglist>
    </member>
    <member kind="function">
      <type>::std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespace_jitrino.html</anchorfile>
      <anchor>26262643da4092ba4ebec8e040746781</anchor>
      <arglist>(::std::ostream &amp;os, Method_Handle mh)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::Jitrino</name>
    <filename>class_jitrino_1_1_jitrino.html</filename>
    <member kind="enumeration">
      <name>Backend</name>
      <anchor>3db423baf5cfe6874321ba39615ef72a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_IPF</name>
      <anchor>3db423baf5cfe6874321ba39615ef72a9fb10ae8b65ba70a26bfb23421d6bd78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CG_IA32</name>
      <anchor>3db423baf5cfe6874321ba39615ef72ad5a740c2ecdebef466ef8b7e8e6e66c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>crash</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>31940bae140ecc95742b3ce250d8ca8f</anchor>
      <arglist>(const char *msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Init</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>4904dffc38ec47bad7011bf0c23d78ee</anchor>
      <arglist>(JIT_Handle jit, const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>DeInit</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>35c026ce2fa0580515842e8b76ca4301</anchor>
      <arglist>(JIT_Handle jit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>CompileMethod</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>e8ac3b229bff8a9acc3798abe4ca87db</anchor>
      <arglist>(CompilationContext *compilationContext)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RuntimeInterface *</type>
      <name>getRuntimeInterface</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>b515dece848a287048132baca690416a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MemoryManager &amp;</type>
      <name>getGlobalMM</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>679c47cb88c4e13763656b3812816530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JITInstanceContext *</type>
      <name>getJITInstanceContext</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>eb8e5d9ae7525fcc81ab5f19cb4c681c</anchor>
      <arglist>(JIT_Handle jitHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>killJITInstanceContext</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>c39efa1613dbb6f9a1e66f90d15c9c59</anchor>
      <arglist>(JITInstanceContext *jit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCompilationRecursionLevel</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>11dfdba17666b7087e4cac7a1c9cd3c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>incCompilationRecursionLevel</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>29fd34cfb21954aaa861d1dbab5bdc5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>decCompilationRecursionLevel</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>79b32d5c336f8e9535910343f672dd6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static struct Flags</type>
      <name>flags</name>
      <anchorfile>class_jitrino_1_1_jitrino.html</anchorfile>
      <anchor>0d3a38e0f8c0bef86a03858761955ecc</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">Jitrino::Jitrino::Flags</class>
  </compound>
  <compound kind="struct">
    <name>Jitrino::Jitrino::Flags</name>
    <filename>struct_jitrino_1_1_jitrino_1_1_flags.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>skip</name>
      <anchorfile>struct_jitrino_1_1_jitrino_1_1_flags.html</anchorfile>
      <anchor>0cb296b0afde8049433aa2017160d088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Backend</type>
      <name>codegen</name>
      <anchorfile>struct_jitrino_1_1_jitrino_1_1_flags.html</anchorfile>
      <anchor>192d3857110e830b1d6e3fb2341d4d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>time</name>
      <anchorfile>struct_jitrino_1_1_jitrino_1_1_flags.html</anchorfile>
      <anchor>5c9bb280dcc93a5d018f030d9f1d0e58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::MethodProfile</name>
    <filename>class_jitrino_1_1_method_profile.html</filename>
    <member kind="function">
      <type></type>
      <name>MethodProfile</name>
      <anchorfile>class_jitrino_1_1_method_profile.html</anchorfile>
      <anchor>127edec065358e16677fda0decedea6d</anchor>
      <arglist>(Method_Profile_Handle _handle, ProfileType _type, MethodDesc &amp;_md)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MethodProfile</name>
      <anchorfile>class_jitrino_1_1_method_profile.html</anchorfile>
      <anchor>3db22ca659c6648cb80efef43ee766e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Method_Profile_Handle</type>
      <name>getHandle</name>
      <anchorfile>class_jitrino_1_1_method_profile.html</anchorfile>
      <anchor>7a0b986f870b9daf154c941f43166cc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc &amp;</type>
      <name>getMethod</name>
      <anchorfile>class_jitrino_1_1_method_profile.html</anchorfile>
      <anchor>e5fc8014c3aede4248f3d994f2eb1efb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProfileType</type>
      <name>getProfileType</name>
      <anchorfile>class_jitrino_1_1_method_profile.html</anchorfile>
      <anchor>0e476e8a110e73aefb2b03d464141c08</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::EntryBackedgeMethodProfile</name>
    <filename>class_jitrino_1_1_entry_backedge_method_profile.html</filename>
    <base>Jitrino::MethodProfile</base>
    <member kind="function">
      <type></type>
      <name>EntryBackedgeMethodProfile</name>
      <anchorfile>class_jitrino_1_1_entry_backedge_method_profile.html</anchorfile>
      <anchor>93a1fd0d18093ae5b17a581a56c05d1c</anchor>
      <arglist>(Method_Profile_Handle mph, MethodDesc &amp;md, uint32 *_entryCounter, uint32 *_backedgeCounter)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getEntryExecCount</name>
      <anchorfile>class_jitrino_1_1_entry_backedge_method_profile.html</anchorfile>
      <anchor>ded3a101aa06e5bf5fe530affab54d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getBackedgeExecCount</name>
      <anchorfile>class_jitrino_1_1_entry_backedge_method_profile.html</anchorfile>
      <anchor>9b0b65ccd654ec2288301fc49e811b88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32 *</type>
      <name>getEntryCounter</name>
      <anchorfile>class_jitrino_1_1_entry_backedge_method_profile.html</anchorfile>
      <anchor>25a1e94d3e7dc4da1afb940cad012bf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32 *</type>
      <name>getBackedgeCounter</name>
      <anchorfile>class_jitrino_1_1_entry_backedge_method_profile.html</anchorfile>
      <anchor>7b335805d641de40cc5b3b5f2f91efd5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::EdgeMethodProfile</name>
    <filename>class_jitrino_1_1_edge_method_profile.html</filename>
    <base>Jitrino::MethodProfile</base>
    <member kind="function">
      <type></type>
      <name>EdgeMethodProfile</name>
      <anchorfile>class_jitrino_1_1_edge_method_profile.html</anchorfile>
      <anchor>4b0057606b739d430ad330ddb03a25b5</anchor>
      <arglist>(Method_Profile_Handle handle, MethodDesc &amp;md, EM_ProfileAccessInterface *_profileAccessInterface)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNumCounters</name>
      <anchorfile>class_jitrino_1_1_edge_method_profile.html</anchorfile>
      <anchor>7885901e488cad6f66db507f971ba08c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getCheckSum</name>
      <anchorfile>class_jitrino_1_1_edge_method_profile.html</anchorfile>
      <anchor>fde2312f5e104237d9c54d6088c385b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32 *</type>
      <name>getEntryCounter</name>
      <anchorfile>class_jitrino_1_1_edge_method_profile.html</anchorfile>
      <anchor>31f2e4c35ac534a915dd4c2befab577c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32 *</type>
      <name>getCounter</name>
      <anchorfile>class_jitrino_1_1_edge_method_profile.html</anchorfile>
      <anchor>7d81638f9aaffa6f14ceba9150340c47</anchor>
      <arglist>(uint32 key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::ValueMethodProfile</name>
    <filename>class_jitrino_1_1_value_method_profile.html</filename>
    <base>Jitrino::MethodProfile</base>
    <member kind="function">
      <type></type>
      <name>ValueMethodProfile</name>
      <anchorfile>class_jitrino_1_1_value_method_profile.html</anchorfile>
      <anchor>0775c5255592db576cadb4085853f881</anchor>
      <arglist>(Method_Profile_Handle handle, MethodDesc &amp;md, EM_ProfileAccessInterface *_profileAccessInterface)</arglist>
    </member>
    <member kind="function">
      <type>POINTER_SIZE_INT</type>
      <name>getTopValue</name>
      <anchorfile>class_jitrino_1_1_value_method_profile.html</anchorfile>
      <anchor>ae416bb956b3a762b9c193b6a71f86bb</anchor>
      <arglist>(uint32 instructionKey) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpValues</name>
      <anchorfile>class_jitrino_1_1_value_method_profile.html</anchorfile>
      <anchor>e5870aeac4be9d3df44561e3954f7114</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::ProfilingInterface</name>
    <filename>class_jitrino_1_1_profiling_interface.html</filename>
    <member kind="typedef">
      <type>void</type>
      <name>PC_Callback_Fn</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>cbc497f410e5b7204207408197383f9a</anchor>
      <arglist>(Method_Profile_Handle)</arglist>
    </member>
    <member kind="function">
      <type>PC_Handle</type>
      <name>getPCHandle</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>a6f71243ce127287bbacf4409f58df3f</anchor>
      <arglist>(ProfileType type) const </arglist>
    </member>
    <member kind="function">
      <type>EM_ProfileAccessInterface *</type>
      <name>getEMProfileAccessInterface</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>2a2bbde7299b7e8e662d9cbaebb5515f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MethodProfile *</type>
      <name>getMethodProfile</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>7aede1184f7efe9fae049b65b5d2eefb</anchor>
      <arglist>(MemoryManager &amp;mm, ProfileType type, MethodDesc &amp;md, JITProfilingRole role=JITProfilingRole_USE) const</arglist>
    </member>
    <member kind="function">
      <type>Method_Profile_Handle</type>
      <name>getMethodProfileHandle</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>616bbcab62bbcb0cb48d408e1315052d</anchor>
      <arglist>(ProfileType type, MethodDesc &amp;md) const </arglist>
    </member>
    <member kind="function">
      <type>EM_PCTYPE</type>
      <name>getProfileType</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>37941873f91f00447825ea5dbfe90d9d</anchor>
      <arglist>(PC_Handle pc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMethodProfile</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>59c3720960d55a1093b33c46c631322c</anchor>
      <arglist>(ProfileType type, MethodDesc &amp;md, JITProfilingRole role=JITProfilingRole_USE) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enableProfiling</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>8bcb6e22e95d4b19bf476c4291299d29</anchor>
      <arglist>(PC_Handle pc, JITProfilingRole role)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProfilingEnabled</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>8b44ffb8e23ecf89087ed9a7b461a865</anchor>
      <arglist>(ProfileType pcType, JITProfilingRole jitRole) const </arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getProfileMethodCount</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>d8d3e37aac3217b62bc2df68c744157e</anchor>
      <arglist>(MethodDesc &amp;md, JITProfilingRole role=JITProfilingRole_USE) const</arglist>
    </member>
    <member kind="function">
      <type>EntryBackedgeMethodProfile *</type>
      <name>createEBMethodProfile</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>c461e642bfcca8edc3de7218d385402c</anchor>
      <arglist>(MemoryManager &amp;mm, MethodDesc &amp;md)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEBProfilerInSyncMode</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>307d69f3db77eb9a03fb53e06c141873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PC_Callback_Fn *</type>
      <name>getEBProfilerSyncModeCallback</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>4d1d9c989e986bd4525677ab14b90978</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeMethodProfile *</type>
      <name>createEdgeMethodProfile</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>44bcd40806dc69eb31771f42526b1283</anchor>
      <arglist>(MemoryManager &amp;mm, MethodDesc &amp;md, uint32 numEdgeCounters, uint32 *counterKeys, uint32 checkSum)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getMethodEntryThreshold</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>3de9bdcc23d73dbb068f6a9434d974ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getBackedgeThreshold</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>4c8708d1cd101a07336449a361ec3436</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntryBackedgeMethodProfile *</type>
      <name>getEBMethodProfile</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>715728d5f4940c0a594768ae333704bb</anchor>
      <arglist>(MemoryManager &amp;mm, MethodDesc &amp;md, JITProfilingRole role=JITProfilingRole_USE) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeMethodProfile *</type>
      <name>getEdgeMethodProfile</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>dfee61e9ca64c9ad2265e0ffc2ff7178</anchor>
      <arglist>(MemoryManager &amp;mm, MethodDesc &amp;md, JITProfilingRole role=JITProfilingRole_USE) const </arglist>
    </member>
    <member kind="function">
      <type>ValueMethodProfile *</type>
      <name>createValueMethodProfile</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>0b7dfdd19c54bef2d356601a504b8ae8</anchor>
      <arglist>(MemoryManager &amp;mm, MethodDesc &amp;md, uint32 numKeys, uint32 *Keys)</arglist>
    </member>
    <member kind="function">
      <type>ValueMethodProfile *</type>
      <name>getValueMethodProfile</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>cc0bc2cec203c369e73ec178f9b0bebd</anchor>
      <arglist>(MemoryManager &amp;mm, MethodDesc &amp;md, JITProfilingRole role=JITProfilingRole_USE) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProfilingInterface</name>
      <anchorfile>class_jitrino_1_1_profiling_interface.html</anchorfile>
      <anchor>85ca01f122f641b6dce2b8bbcebb65c2</anchor>
      <arglist>(EM_Handle _em, JIT_Handle _jit, EM_ProfileAccessInterface *emProfileAccess)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::VMInterface</name>
    <filename>class_jitrino_1_1_v_m_interface.html</filename>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getSystemObjectVMTypeHandle</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>1565f521d57d959315791fe9626d2eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getSystemClassVMTypeHandle</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>b85ce024c0457fa83f95e024bd54cf2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getSystemStringVMTypeHandle</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>8b4e88b3a7ba2d64f093b3cdbde0f1aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getArrayVMTypeHandle</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>3933e676141b55d23eb294a7d0511139</anchor>
      <arglist>(void *elemVMTypeHandle, bool isUnboxed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>25633b4bf17b1b34dd4c4162086f5f75</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getSuperTypeVMTypeHandle</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>54de23596f757ed9c850bfc18ef7cb6c</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getArrayElemVMTypeHandle</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>087a64c97e43c57c3dd5a188cc0ae314</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isArrayType</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>1f5a207aa48e679684216b74e9e58714</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isArrayOfPrimitiveElements</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>0e7b375cea80b21e5556c66f5a4c4f7d</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isEnumType</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>82684cd6d3ec7f9bf9ce1ecde33ba0e7</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValueType</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>001c50b258b03ee3fee64a361f13935c</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isFinalType</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>2b440133a8c7dada41d26dd9ac24d8bb</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isLikelyExceptionType</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>f5dc4c96ef9462e3a0efcf627c8b8093</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInterfaceType</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>d05d3db1aadd31fe664f60d09ddc62b5</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAbstractType</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>19dee21ca668e0375c69667fc6bc3dbe</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>needsInitialization</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>af92b8131d7b0217708df7548d28ad28</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isFinalizable</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>ffad721207748f075397f7ca5806aa5d</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getClassFastInstanceOfFlag</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>3a7dbe208f3f08db4003d95bfb949616</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getClassDepth</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>f3e0b3bd83122644cf74c57794a6d96f</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInitialized</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>59fc05006070f39e4dd771b5ba97740e</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getVTable</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>fd576b083891104c75cfbbbc647b9515</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getRuntimeClassHandle</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>c484c691e3e1f7221367a3a6d9f5bde9</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getAllocationHandle</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>853c6907f69e059bfed5c3ff56312a69</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isSubClassOf</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>df2872a96a3759fa9803cef3799e1275</anchor>
      <arglist>(void *vmTypeHandle1, void *vmTypeHandle2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getArrayElemOffset</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>41629e949a9116960520a355977a8071</anchor>
      <arglist>(void *vmElemTypeHandle, bool isUnboxed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getArrayElemSize</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>ff5bd884441d4a9f2aa46dc4733d83ff</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getObjectSize</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>91baf91f355f5983150db7cc91784c0e</anchor>
      <arglist>(void *vmTypeHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getArrayLengthOffset</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>783fa52f2351a7cc2b26840e25fdf802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getTypeHandleFromAllocationHandle</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>10e58de6d080245bea4a5f9fa0d4b61c</anchor>
      <arglist>(void *vmAllocationHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getTypeHandleFromVTable</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>227fffee454d5569028cfe868157ec59</anchor>
      <arglist>(void *vtHandle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>flagTLSSuspendRequestOffset</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>5e8c4d0800cfbfe37fe3e0539be9fe52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>flagTLSThreadStateOffset</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>a2ea08df0e50d02c67657518c336e9f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32</type>
      <name>getTLSBaseOffset</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>608ce558ff4111e771ac54b43baf518c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>useFastTLSAccess</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>de00aa4170e53b137ef6a6d0cf994672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isVTableCompressed</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>853e3bf0baffcec57311b5e0b57d27f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32</type>
      <name>getVTableOffset</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>2b1db2fed65565e63d26d965f6d01e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint64</type>
      <name>getVTableBase</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>3dd6818f8ae25e809c75ed408fc0eb00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>areReferencesCompressed</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>446deb648949e2d418c5d0b40c8f3e57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getHeapBase</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>90f5e4f36b223bc9b1dad5bfb739d6fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getHeapCeiling</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>ec071c9987cb4da85a1349a0ec72ee4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rewriteCodeBlock</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>6ff87a19f792333bf46ec7b823511044</anchor>
      <arglist>(Byte *codeBlock, Byte *newCode, size_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setVmAdapter</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>56c7372bbf02834e3d26eed9a15bcf04</anchor>
      <arglist>(vm_adaptor_t vm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidFeature</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>073f6a08a8f407f4d668cb264c2d2a18</anchor>
      <arglist>(const char *id)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static vm_adaptor_t</type>
      <name>vm</name>
      <anchorfile>class_jitrino_1_1_v_m_interface.html</anchorfile>
      <anchor>feed16039fbd25cbfb04fc2ee08d208f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::TypeMemberDesc</name>
    <filename>class_jitrino_1_1_type_member_desc.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeMemberDesc</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>47fc8ed1478702ccd24a94db00875308</anchor>
      <arglist>(uint32 id, CompilationInterface *ci)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TypeMemberDesc</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>ee2503e5f110b63a775a0acd734bc374</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getId</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>7b42a3a8aad751c013fe66222afbc410</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NamedType *</type>
      <name>getParentType</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>7b853104714be371621055a6ec59cb7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isParentClassIsLikelyExceptionType</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>b9390c6e80650c560256883cc3a6c753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>3010472f2d4bf67bb552ecca2b691e4e</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getSignatureString</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>3b40fbb5f895e116f0c20605d7ab45ee</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printFullName</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>16ca5347e8eda9462c53f7e695342491</anchor>
      <arglist>(::std::ostream &amp;os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Class_Handle</type>
      <name>getParentHandle</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>3c965df48d2a4c474a8a2471bbf2e4e9</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isPrivate</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>8dd663ad2372c6ef03563230972646d3</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isStatic</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>42705226e1a9cc34100aa6cdc374574c</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>id</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>57fff5332204b0d5126f924e27a32c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CompilationInterface *</type>
      <name>compilationInterface</name>
      <anchorfile>class_jitrino_1_1_type_member_desc.html</anchorfile>
      <anchor>0281124ed07b58e27df22cb4d01fcc99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::FieldDesc</name>
    <filename>class_jitrino_1_1_field_desc.html</filename>
    <base>Jitrino::TypeMemberDesc</base>
    <member kind="function">
      <type></type>
      <name>FieldDesc</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>2b4e9e7d1dcab180080aafc83ff16815</anchor>
      <arglist>(Field_Handle field, CompilationInterface *ci, uint32 id)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>57de72bf3dd26bf03388967c428e633e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSignatureString</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>3d1d0f2896ff281caf3abc3066dd3ec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printFullName</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>01c154cb3de99b2b8f77641dc8d34dae</anchor>
      <arglist>(::std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>Class_Handle</type>
      <name>getParentHandle</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>2b9365111c9bae404c517bc368b8fa8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPrivate</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>de9d763a38a770c5b63e0745f39f0da0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStatic</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>a32df3a71b86764735c33e7446cdea02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitOnly</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>1bc63f3a1f309225dc4a2ee7a3280ca9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVolatile</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>6efaab66a648c790e91f709df25bb749</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMagic</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>8fa8c00e7b430c5c6effe2fa4befcd5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getFieldType</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>c2a263793b48ae4033cefa9d2c2d6b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getOffset</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>161c06b98bb13c7be52af292c9129323</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getAddress</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>b8a2b7aa3b79c67ec5fc20325e1d24b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Field_Handle</type>
      <name>getFieldHandle</name>
      <anchorfile>class_jitrino_1_1_field_desc.html</anchorfile>
      <anchor>f9d9cfcf2e251c186d83e24e23882086</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::MethodDesc</name>
    <filename>class_jitrino_1_1_method_desc.html</filename>
    <base>Jitrino::TypeMemberDesc</base>
    <member kind="function">
      <type></type>
      <name>MethodDesc</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>a98f5d703263e8c22113d92d96a7f228</anchor>
      <arglist>(Method_Handle m, JIT_Handle jit, CompilationInterface *ci=NULL, uint32 id=0)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>05809ab256e2f214c02354f521231cd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSignatureString</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>ff8e0ae1ff4784f7d20684f20876326b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printFullName</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>d243d67c46fd182dbde664e3c64332cb</anchor>
      <arglist>(::std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>Class_Handle</type>
      <name>getParentHandle</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>6ba83eed95e515ab2ff68a4435a6d0f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPrivate</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>b9326e2578c346d6cad20a3231c2d818</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStatic</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>b94c1da560577f78dafa4cc28ae18d53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInstance</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>b22633ca7023c5e78d7f36b453a17f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNative</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>4af2e5e31613aba7575aa8d8c3ad3e67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSynchronized</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>a7571ea823e3e197abcb47c060469428</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNoInlining</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>c2a2a046040eb40bac4fead6a5bec48c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinal</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>e425e0e7fd61727227ca30d3c4f8f5c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVirtual</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>b4bf950adc319dc7ebf5ea82bf2fbf45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAbstract</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>259f562f32fabcbf16c2d23b9a65a0ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStrict</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>0373fbd1cd196be052f696a7265292e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClassInitializer</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>ad9e35bc772041889033155ec5c2be1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInstanceInitializer</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>46da8d75c56af203fc49838caf853386</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Byte *</type>
      <name>getByteCodes</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>38eead326890390d132114182c857869</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getByteCodeSize</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>08249fc60c9498c71415a5415d10fe4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint16</type>
      <name>getMaxStack</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>c9b3228f6f4b992578e3bdd1974463e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNumHandlers</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>96b9276370b937e663537c9f643c7642</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getHandlerInfo</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>7a848f08d6ab87a3838e6eba86042cc4</anchor>
      <arglist>(unsigned index, unsigned *beginOffset, unsigned *endOffset, unsigned *handlerOffset, unsigned *handlerClassIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAnnotation</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>3ba49a6c2538e45e4d2bc03ff3961b5b</anchor>
      <arglist>(NamedType *type) const </arglist>
    </member>
    <member kind="function">
      <type>Byte *</type>
      <name>getInfoBlock</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>a7216d3738eda7bda1256f99b5d4a64a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getInfoBlockSize</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>f91478d08fb74b9928b1f5022bb792c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Byte *</type>
      <name>getCodeBlockAddress</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>c8b5b76f4fb199a0adc06d04e7b0d620</anchor>
      <arglist>(int32 id) const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getCodeBlockSize</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>08b405d74bf6fa0cbb26f1e54ba04a0e</anchor>
      <arglist>(int32 id) const</arglist>
    </member>
    <member kind="function">
      <type>Method_Side_Effects</type>
      <name>getSideEffect</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>22fd582cc2dd1a88345ec2beae86d4da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSideEffect</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>b82654d2ad0ec0859cc798ecd9e8e413</anchor>
      <arglist>(Method_Side_Effects mse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumExceptionHandler</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>1d7282c7a677ed438104bd2ef3087891</anchor>
      <arglist>(uint32 numHandlers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionHandlerInfo</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>b9b0d3d3cf61176c6c65d10896b1fbfe</anchor>
      <arglist>(uint32 exceptionHandlerNumber, Byte *startAddr, Byte *endAddr, Byte *handlerAddr, NamedType *exceptionType, bool exceptionObjIsDead)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOverridden</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>64d28e03e491f8f3fcf92364ac1da9a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getOffset</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>91928db5fa1c2f42346e667f0ca23166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getIndirectAddress</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>334292d5d3f7acbac0305c681d3509f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getNativeAddress</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>4da99ca84136e8a5e76436f739dfa3d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNumVars</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>61a3e5e09500c3ac8b6da2669f0d9180</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Method_Handle</type>
      <name>getMethodHandle</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>515968fe88d7481c8368bd355a97ab1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getHandleMap</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>47a898f3f01257590a75f2a711f33113</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandleMap</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>5d8e54d73bf3f5f7785c2fb6b4a9efcd</anchor>
      <arglist>(void *hndMap)</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getNumParams</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>f86df86a23ce5b3cfc0029fec81ced2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getParamType</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>e19e6e34fb3168ad593f297ea9b766f7</anchor>
      <arglist>(uint32 paramIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getReturnType</name>
      <anchorfile>class_jitrino_1_1_method_desc.html</anchorfile>
      <anchor>9ca1bf9f842e1155df2483304dd16689</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::CompilationInterface</name>
    <filename>class_jitrino_1_1_compilation_interface.html</filename>
    <member kind="enumeration">
      <name>SystemExceptionId</name>
      <anchor>dae9059a094c00452cef868941bd759d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Exception_NullPointer</name>
      <anchor>dae9059a094c00452cef868941bd759d994925a7d9d978bbeb4474ea9d954d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Exception_ArrayIndexOutOfBounds</name>
      <anchor>dae9059a094c00452cef868941bd759d39f44c5784bbfceba7063f7f70f9c63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Exception_ArrayTypeMismatch</name>
      <anchor>dae9059a094c00452cef868941bd759dfb0daa1c9345e5bda93eca04f96d8c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Exception_DivideByZero</name>
      <anchor>dae9059a094c00452cef868941bd759dc6f57a913b4147e8e33f18419f5c6a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Num_SystemExceptions</name>
      <anchor>dae9059a094c00452cef868941bd759daa11cf8b3f9f1b5344417cfba1a02a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompilationInterface</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>b5eeafbd9a8da2b5d6c8aa971b6db276</anchor>
      <arglist>(Compile_Handle c, Method_Handle m, JIT_Handle jit, MemoryManager &amp;mm, OpenMethodExecutionParams &amp;comp_params, CompilationContext *cc, TypeManager &amp;tpm)</arglist>
    </member>
    <member kind="function">
      <type>HELPER_CALLING_CONVENTION</type>
      <name>getRuntimeHelperCallingConvention</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>8d0359b782c05bcaf8c51def3e3cfa42</anchor>
      <arglist>(VM_RT_SUPPORT id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterruptible</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>4b6f4f78012591eee36077be765759c1</anchor>
      <arglist>(VM_RT_SUPPORT id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayBeInterruptible</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>9ff83e399fa299fda5c4992804e22e10</anchor>
      <arglist>(VM_RT_SUPPORT id)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getRuntimeHelperAddress</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>8e33f398ffb549944e2fea79d44c5faa</anchor>
      <arglist>(VM_RT_SUPPORT)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getRuntimeHelperAddressForType</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>9b1a7ded9f6d034bcc29f624d7e40c14</anchor>
      <arglist>(VM_RT_SUPPORT, Type *)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>getMagicHelper</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>508e9e7a66ac1b2a1cc4d9337b6c92a1</anchor>
      <arglist>(VM_RT_SUPPORT)</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getFieldType</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>b895457702278b920a31d5913ef1ad73</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex)</arglist>
    </member>
    <member kind="function">
      <type>NamedType *</type>
      <name>getNamedType</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>efac425fcba3ff0c78c8dd3cd79174a8</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex, ResolveNewCheck check=ResolveNewCheck_NoCheck)</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getTypeFromDescriptor</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>cc075f0fba5a3c9701b059d137716cf8</anchor>
      <arglist>(Class_Handle enclClass, const char *descriptor)</arglist>
    </member>
    <member kind="function">
      <type>NamedType *</type>
      <name>resolveNamedType</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>d4658ba97db3879217738e69f11c6f42</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>getStaticMethod</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>64ab282c669692551d687d0ec216e077</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>getVirtualMethod</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>7cda482fc0d9b49cde6de6fe7f8b06c8</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>getSpecialMethod</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>436d1a59936ee85d67a163ad1b3224b4</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>getInterfaceMethod</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>ab6d3b0e168207d2cbf1bea4c47c115b</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex)</arglist>
    </member>
    <member kind="function">
      <type>FieldDesc *</type>
      <name>getNonStaticField</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>75687ffa4a2c616efc3ac836a11ca08d</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex, bool putfield)</arglist>
    </member>
    <member kind="function">
      <type>FieldDesc *</type>
      <name>getStaticField</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>7f70f17561f4d4e1d1436be34edaf82f</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex, bool putfield)</arglist>
    </member>
    <member kind="function">
      <type>FieldDesc *</type>
      <name>getFieldByName</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>e5406e82d7daea8c2fe2253284f4a68a</anchor>
      <arglist>(Class_Handle enclClass, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>getMethodByName</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>a578668d197b1bf37b5e373c69f6f6bf</anchor>
      <arglist>(Class_Handle enclClass, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>findClassUsingBootstrapClassloader</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>7f999fefd25dd5f8061aeadbeadd1b52</anchor>
      <arglist>(const char *klassName)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>resolveMethod</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>69f7649cf8cc74795f75b1e0ba11b6c1</anchor>
      <arglist>(ObjectType *klass, const char *methodName, const char *methodSig)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>getOverriddenMethod</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>73d67068bd63c27cb22db47d6e1d94cb</anchor>
      <arglist>(NamedType *type, MethodDesc *methodDesc)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getStringInternAddr</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>872ae1065fe0455a497434fd09eaea56</anchor>
      <arglist>(MethodDesc *enclosingMethodDesc, uint32 stringToken)</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getConstantType</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>bc1e1e46d664167757370d7709933d66</anchor>
      <arglist>(MethodDesc *enclosingMethodDesc, uint32 constantToken)</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getConstantValue</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>0692b735bdedb8eb68875c83692b9c11</anchor>
      <arglist>(MethodDesc *enclosingMethodDesc, uint32 constantToken)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSignatureString</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>fcb6bc985671cdde07909158fe264e3e</anchor>
      <arglist>(MethodDesc *enclosingMethodDesc, uint32 methodToken)</arglist>
    </member>
    <member kind="function">
      <type>Byte *</type>
      <name>allocateCodeBlock</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>c9dee01e069795c115f14dbea067f1d9</anchor>
      <arglist>(size_t size, size_t alignment, CodeBlockHeat heat, int32 id, bool simulate)</arglist>
    </member>
    <member kind="function">
      <type>Byte *</type>
      <name>allocateDataBlock</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>666f64ec2cd021211881d3ecbcc2fbf9</anchor>
      <arglist>(size_t size, size_t alignment)</arglist>
    </member>
    <member kind="function">
      <type>Byte *</type>
      <name>allocateInfoBlock</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>a484e457f9f9138dfb2740374a7fa1d3</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>Byte *</type>
      <name>allocateJITDataBlock</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>18fca88c55aaf8573df7fa0513501d60</anchor>
      <arglist>(size_t size, size_t alignment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockMethodData</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>7c1bdb68113b36b87511146ec5326827</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlockMethodData</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>30c287aab3605dd0f34bbe8ac45e34ee</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNotifyWhenClassIsExtended</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>40e935b3a9534dee7060cc46ba086acc</anchor>
      <arglist>(ObjectType *type, void *callbackData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNotifyWhenMethodIsOverridden</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>ffd01f21765bb722387fb3a6701087af</anchor>
      <arglist>(MethodDesc *methodDesc, void *callbackData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNotifyWhenMethodIsRecompiled</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>dac74b77c02502210187ff601a7f782f</anchor>
      <arglist>(MethodDesc *methodDesc, void *callbackData)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needWriteBarriers</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>db3f756f77e743ef9ff77f39a5fde209</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBCMapInfoRequired</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>6fb09de4470e66b1142ee50ac675341e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBCMapInfoRequired</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>408f566910218e5500fa74337dbebf5d</anchor>
      <arglist>(bool is_supported) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompileLoadEventRequired</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>d00a9d10bdc1f4ce4034d74d680f66dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendCompiledMethodLoadEvent</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>b97ba55e29dc9c9f9213a81cd0676c5d</anchor>
      <arglist>(MethodDesc *methodDesc, MethodDesc *outerDesc, uint32 codeSize, void *codeAddr, uint32 mapLength, AddrLocation *addrLocationMap, void *compileInfo)</arglist>
    </member>
    <member kind="function">
      <type>OpenMethodExecutionParams &amp;</type>
      <name>getCompilationParams</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>7c56281023872ade3ff9350798243e86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compileMethod</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>4d78c3ccbeec438c2d4996e29eab4cfc</anchor>
      <arglist>(MethodDesc *method)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>getMethodToCompile</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>11236ce033a93b53c43e3b6e75cba546</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TypeManager &amp;</type>
      <name>getTypeManager</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>c6c831b5fd70fee13d1847302e41f6ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MemoryManager &amp;</type>
      <name>getMemManager</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>a2d3e9104b1c89e99adaa01848df2191</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type *</type>
      <name>getTypeFromDrlVMTypeHandle</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>78dc859f187b273b93306b6ae01060ba</anchor>
      <arglist>(Type_Info_Handle)</arglist>
    </member>
    <member kind="function">
      <type>FieldDesc *</type>
      <name>getFieldDesc</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>5b7b3bdaca5a427188b0a882649f0858</anchor>
      <arglist>(Field_Handle field)</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc *</type>
      <name>getMethodDesc</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>129af08bdba913f93f612969bae456ee</anchor>
      <arglist>(Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompilationContext</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>af46c727a3a69921f9fa7b85600c9644</anchor>
      <arglist>(CompilationContext *cc)</arglist>
    </member>
    <member kind="function">
      <type>CompilationContext *</type>
      <name>getCompilationContext</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>4d1af0a57b1427dd7ad6604c47eecc8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getRuntimeHelperName</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>950ce93571e3dd293672ff5b9ef8b2fd</anchor>
      <arglist>(VM_RT_SUPPORT helperId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VM_RT_SUPPORT</type>
      <name>str2rid</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>c93d9c126c835adf4cb888fd950dff34</anchor>
      <arglist>(const char *helperName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getMethodName</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>e881a0d6ae7224a24d83c3dd20af6357</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getMethodClassName</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>be700d024c7bde9704851768f831f3a5</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getFieldSignature</name>
      <anchorfile>class_jitrino_1_1_compilation_interface.html</anchorfile>
      <anchor>7632a4524e7630b97831f7c2832ce708</anchor>
      <arglist>(Class_Handle enclClass, uint32 cpIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::GCInterface</name>
    <filename>class_jitrino_1_1_g_c_interface.html</filename>
    <member kind="function">
      <type></type>
      <name>GCInterface</name>
      <anchorfile>class_jitrino_1_1_g_c_interface.html</anchorfile>
      <anchor>9ad0f7eef0a29d8435409e833f85b312</anchor>
      <arglist>(GC_Enumeration_Handle gcHandle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GCInterface</name>
      <anchorfile>class_jitrino_1_1_g_c_interface.html</anchorfile>
      <anchor>3301aa8bc863841fdb60f22470d3aa43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enumerateRootReference</name>
      <anchorfile>class_jitrino_1_1_g_c_interface.html</anchorfile>
      <anchor>23f1966134c80d6d8aa1bcac2d456a69</anchor>
      <arglist>(void **reference)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enumerateCompressedRootReference</name>
      <anchorfile>class_jitrino_1_1_g_c_interface.html</anchorfile>
      <anchor>eff96a00a8877d7d9eadc5afd2a836ef</anchor>
      <arglist>(uint32 *reference)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enumerateRootManagedReference</name>
      <anchorfile>class_jitrino_1_1_g_c_interface.html</anchorfile>
      <anchor>748c6ef5dd124367cc98040bd32e750d</anchor>
      <arglist>(void **slotReference, int slotOffset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::ThreadDumpEnumerator</name>
    <filename>class_jitrino_1_1_thread_dump_enumerator.html</filename>
    <base>Jitrino::GCInterface</base>
    <member kind="function">
      <type></type>
      <name>ThreadDumpEnumerator</name>
      <anchorfile>class_jitrino_1_1_thread_dump_enumerator.html</anchorfile>
      <anchor>c55710d0bc28c24e9e00f18d434cffb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enumerateRootReference</name>
      <anchorfile>class_jitrino_1_1_thread_dump_enumerator.html</anchorfile>
      <anchor>a705efb862b6afc8542f6454a3038fd9</anchor>
      <arglist>(void **reference)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enumerateCompressedRootReference</name>
      <anchorfile>class_jitrino_1_1_thread_dump_enumerator.html</anchorfile>
      <anchor>c66a04d3ce724d12842e3a3471903761</anchor>
      <arglist>(uint32 *reference)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enumerateRootManagedReference</name>
      <anchorfile>class_jitrino_1_1_thread_dump_enumerator.html</anchorfile>
      <anchor>f9dc8ed2370c808708c6a636d9368121</anchor>
      <arglist>(void **slotReference, int slotOffset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::PersistentInstructionId</name>
    <filename>class_jitrino_1_1_persistent_instruction_id.html</filename>
    <member kind="function">
      <type></type>
      <name>PersistentInstructionId</name>
      <anchorfile>class_jitrino_1_1_persistent_instruction_id.html</anchorfile>
      <anchor>077ecc3988be649dee86272b76a49aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentInstructionId</name>
      <anchorfile>class_jitrino_1_1_persistent_instruction_id.html</anchorfile>
      <anchor>891e932853ca98dd2e44c5765f7df54e</anchor>
      <arglist>(MethodDesc *methodDesc, uint32 localInstructionId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>class_jitrino_1_1_persistent_instruction_id.html</anchorfile>
      <anchor>5062a00847b3374a1901ff4918d6b62b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MethodDesc &amp;</type>
      <name>getMethodDesc</name>
      <anchorfile>class_jitrino_1_1_persistent_instruction_id.html</anchorfile>
      <anchor>9fbf3727a7b6969d2555ebd63dc0f06b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>getLocalInstructionId</name>
      <anchorfile>class_jitrino_1_1_persistent_instruction_id.html</anchorfile>
      <anchor>0ec676494684882080a83ab45f7fe7fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasValidLocalInstructionId</name>
      <anchorfile>class_jitrino_1_1_persistent_instruction_id.html</anchorfile>
      <anchor>fda353451ab33ccbd11500f492af80c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>class_jitrino_1_1_persistent_instruction_id.html</anchorfile>
      <anchor>3652c9e72afb67efae9c5280fc500c27</anchor>
      <arglist>(const PersistentInstructionId &amp;pid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Jitrino::VMPropertyIterator</name>
    <filename>class_jitrino_1_1_v_m_property_iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>VMPropertyIterator</name>
      <anchorfile>class_jitrino_1_1_v_m_property_iterator.html</anchorfile>
      <anchor>5bb75ebf0e8b646f4fbdfb170b345316</anchor>
      <arglist>(MemoryManager &amp;m, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VMPropertyIterator</name>
      <anchorfile>class_jitrino_1_1_v_m_property_iterator.html</anchorfile>
      <anchor>a6126bf4c2b08dc609283457efc7ad15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>class_jitrino_1_1_v_m_property_iterator.html</anchorfile>
      <anchor>c54e26c1466da19e34a53a9f14e60cb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getKey</name>
      <anchorfile>class_jitrino_1_1_v_m_property_iterator.html</anchorfile>
      <anchor>736e6b314bdcbbec48350c4cef600038</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getValue</name>
      <anchorfile>class_jitrino_1_1_v_m_property_iterator.html</anchorfile>
      <anchor>08f421b6b24aca766d2fd2220d9293ae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Jitrino::Jet</name>
    <filename>namespace_jitrino_1_1_jet.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>rt_check_method</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g55989c2fa1ca5661499ee2827647a51c</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_unwind</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g986590625299ef2b6f02b6847830cc77</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_enum</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g47add259c443c5c73b6f3840dffdb977</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, GC_Enumeration_Handle henum, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_fix_handler_context</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g5d8ca0dc79652e7458bf7fcbf0778a8f</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>Boolean</type>
      <name>rt_is_soe_area</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>gd9848b13daabba9c97c8b5e03e30c4ec</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>rt_get_address_of_this</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g4f86d5056fe32bc4fb366387ff962737</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const JitFrameContext *context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_native2bc</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g37638e13eddeb08d09cedde2de21d302</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const void *ip, unsigned short *pbc_pc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_bc2native</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___r_u_n_t_i_m_e___g_e_n_e_r_a_l.html</anchorfile>
      <anchor>g4a0576f8ab9614e5135a8e9c09e2d424</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, unsigned short bc_pc, void **pip)</arglist>
    </member>
    <member kind="function">
      <type>::OpenExeJpdaError</type>
      <name>rt_get_local_var</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___j_v_m_t_i___s_u_p_p_o_r_t.html</anchorfile>
      <anchor>gf0f69618ff1981ff232e655e8d5d37d1</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const ::JitFrameContext *context, unsigned var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
    <member kind="function">
      <type>::OpenExeJpdaError</type>
      <name>rt_set_local_var</name>
      <anchorfile>group___j_i_t_r_i_n_o___j_e_t___j_v_m_t_i___s_u_p_p_o_r_t.html</anchorfile>
      <anchor>g890d7b343d5c5116e5f301333a6b85bc</anchor>
      <arglist>(JIT_Handle jit, Method_Handle method, const ::JitFrameContext *context, unsigned var_num, VM_Data_Type var_type, void *value_ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>b96b990dc62b3d9531733a5c013a78a9</anchor>
      <arglist>(JIT_Handle hjit, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>0cd10b07c77475790c17f7e50d282a5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cmd_line_arg</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>a2e91683fe5492ee84ca0f15dd265b8f</anchor>
      <arglist>(JIT_Handle jit, const char *name, const char *arg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_compresed_refs</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>de2c0ef7ec61ad9e7343d58c9d31ae5b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>JIT_Result</type>
      <name>compile_with_params</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>971ef414c10e3d8a1076176ce41c7525</anchor>
      <arglist>(JIT_Handle jh, Compile_Handle compile, Method_Handle method, OpenMethodExecutionParams params)</arglist>
    </member>
    <member kind="function">
      <type>OpenMethodExecutionParams</type>
      <name>get_exe_capabilities</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>2a7d4fe4c99091b655e4c57c7e36016d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rt_profile_notification_callback</name>
      <anchorfile>namespace_jitrino_1_1_jet.html</anchorfile>
      <anchor>29c1b34a510496b28cfaa27763e5eaf5</anchor>
      <arglist>(JIT_Handle jit, PC_Handle pc, Method_Handle mh)</arglist>
    </member>
  </compound>
</tagfile>
